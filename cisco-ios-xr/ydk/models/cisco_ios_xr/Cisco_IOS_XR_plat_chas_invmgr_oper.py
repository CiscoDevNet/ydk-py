""" Cisco_IOS_XR_plat_chas_invmgr_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR plat\-chas\-invmgr package operational data.

This module contains definitions
for the following management objects\:
  platform\: Platform information
  platform\-inventory\: platform inventory

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class CardRedundancyState(Enum):
    """
    CardRedundancyState

    Redundancy state detail

    .. data:: active = 1

    	Active

    .. data:: standby = 2

    	Standby

    """

    active = Enum.YLeaf(1, "active")

    standby = Enum.YLeaf(2, "standby")


class InvAdminState(Enum):
    """
    InvAdminState

    Inv admin state

    .. data:: admin_state_invalid = 0

    	admin state invalid

    .. data:: admin_up = 1

    	admin up

    .. data:: admin_down = 2

    	admin down

    """

    admin_state_invalid = Enum.YLeaf(0, "admin-state-invalid")

    admin_up = Enum.YLeaf(1, "admin-up")

    admin_down = Enum.YLeaf(2, "admin-down")


class InvCardState(Enum):
    """
    InvCardState

    Inv card state

    .. data:: inv_card_not_present = 0

    	inv card not present

    .. data:: inv_card_present = 1

    	inv card present

    .. data:: inv_card_reset = 2

    	inv card reset

    .. data:: inv_card_booting = 3

    	inv card booting

    .. data:: inv_card_mbi_booting = 4

    	inv card mbi booting

    .. data:: inv_card_running_mbi = 5

    	inv card running mbi

    .. data:: inv_card_running_ena = 6

    	inv card running ena

    .. data:: inv_card_bring_down = 7

    	inv card bring down

    .. data:: inv_card_ena_failure = 8

    	inv card ena failure

    .. data:: inv_card_f_diag_run = 9

    	inv card f diag run

    .. data:: inv_card_f_diag_failure = 10

    	inv card f diag failure

    .. data:: inv_card_powered = 11

    	inv card powered

    .. data:: inv_card_unpowered = 12

    	inv card unpowered

    .. data:: inv_card_mdr = 13

    	inv card mdr

    .. data:: inv_card_mdr_running_mbi = 14

    	inv card mdr running mbi

    .. data:: inv_card_main_t_mode = 15

    	inv card main t mode

    .. data:: inv_card_admin_down = 16

    	inv card admin down

    .. data:: inv_card_no_mon = 17

    	inv card no mon

    .. data:: inv_card_unknown = 18

    	inv card unknown

    .. data:: inv_card_failed = 19

    	inv card failed

    .. data:: inv_card_ok = 20

    	inv card ok

    .. data:: inv_card_missing = 21

    	inv card missing

    .. data:: inv_card_field_diag_downloading = 22

    	inv card field diag downloading

    .. data:: inv_card_field_diag_unmonitor = 23

    	inv card field diag unmonitor

    .. data:: inv_card_fabric_field_diag_unmonitor = 24

    	inv card fabric field diag unmonitor

    .. data:: inv_card_field_diag_rp_launching = 25

    	inv card field diag rp launching

    .. data:: inv_card_field_diag_running = 26

    	inv card field diag running

    .. data:: inv_card_field_diag_pass = 27

    	inv card field diag pass

    .. data:: inv_card_field_diag_fail = 28

    	inv card field diag fail

    .. data:: inv_card_field_diag_timeout = 29

    	inv card field diag timeout

    .. data:: inv_card_disabled = 30

    	inv card disabled

    .. data:: inv_card_spa_booting = 31

    	inv card spa booting

    .. data:: inv_card_not_allowed_online = 32

    	inv card not allowed online

    .. data:: inv_card_stopped = 33

    	inv card stopped

    .. data:: inv_card_incompatible_fw_ver = 34

    	inv card incompatible fw ver

    .. data:: inv_card_fpd_hold = 35

    	inv card fpd hold

    .. data:: inv_card_node_prep = 36

    	inv card node prep

    .. data:: inv_card_updating_fpd = 37

    	inv card updating fpd

    .. data:: inv_card_num_states = 38

    	inv card num states

    """

    inv_card_not_present = Enum.YLeaf(0, "inv-card-not-present")

    inv_card_present = Enum.YLeaf(1, "inv-card-present")

    inv_card_reset = Enum.YLeaf(2, "inv-card-reset")

    inv_card_booting = Enum.YLeaf(3, "inv-card-booting")

    inv_card_mbi_booting = Enum.YLeaf(4, "inv-card-mbi-booting")

    inv_card_running_mbi = Enum.YLeaf(5, "inv-card-running-mbi")

    inv_card_running_ena = Enum.YLeaf(6, "inv-card-running-ena")

    inv_card_bring_down = Enum.YLeaf(7, "inv-card-bring-down")

    inv_card_ena_failure = Enum.YLeaf(8, "inv-card-ena-failure")

    inv_card_f_diag_run = Enum.YLeaf(9, "inv-card-f-diag-run")

    inv_card_f_diag_failure = Enum.YLeaf(10, "inv-card-f-diag-failure")

    inv_card_powered = Enum.YLeaf(11, "inv-card-powered")

    inv_card_unpowered = Enum.YLeaf(12, "inv-card-unpowered")

    inv_card_mdr = Enum.YLeaf(13, "inv-card-mdr")

    inv_card_mdr_running_mbi = Enum.YLeaf(14, "inv-card-mdr-running-mbi")

    inv_card_main_t_mode = Enum.YLeaf(15, "inv-card-main-t-mode")

    inv_card_admin_down = Enum.YLeaf(16, "inv-card-admin-down")

    inv_card_no_mon = Enum.YLeaf(17, "inv-card-no-mon")

    inv_card_unknown = Enum.YLeaf(18, "inv-card-unknown")

    inv_card_failed = Enum.YLeaf(19, "inv-card-failed")

    inv_card_ok = Enum.YLeaf(20, "inv-card-ok")

    inv_card_missing = Enum.YLeaf(21, "inv-card-missing")

    inv_card_field_diag_downloading = Enum.YLeaf(22, "inv-card-field-diag-downloading")

    inv_card_field_diag_unmonitor = Enum.YLeaf(23, "inv-card-field-diag-unmonitor")

    inv_card_fabric_field_diag_unmonitor = Enum.YLeaf(24, "inv-card-fabric-field-diag-unmonitor")

    inv_card_field_diag_rp_launching = Enum.YLeaf(25, "inv-card-field-diag-rp-launching")

    inv_card_field_diag_running = Enum.YLeaf(26, "inv-card-field-diag-running")

    inv_card_field_diag_pass = Enum.YLeaf(27, "inv-card-field-diag-pass")

    inv_card_field_diag_fail = Enum.YLeaf(28, "inv-card-field-diag-fail")

    inv_card_field_diag_timeout = Enum.YLeaf(29, "inv-card-field-diag-timeout")

    inv_card_disabled = Enum.YLeaf(30, "inv-card-disabled")

    inv_card_spa_booting = Enum.YLeaf(31, "inv-card-spa-booting")

    inv_card_not_allowed_online = Enum.YLeaf(32, "inv-card-not-allowed-online")

    inv_card_stopped = Enum.YLeaf(33, "inv-card-stopped")

    inv_card_incompatible_fw_ver = Enum.YLeaf(34, "inv-card-incompatible-fw-ver")

    inv_card_fpd_hold = Enum.YLeaf(35, "inv-card-fpd-hold")

    inv_card_node_prep = Enum.YLeaf(36, "inv-card-node-prep")

    inv_card_updating_fpd = Enum.YLeaf(37, "inv-card-updating-fpd")

    inv_card_num_states = Enum.YLeaf(38, "inv-card-num-states")


class InvMonitorState(Enum):
    """
    InvMonitorState

    Inv monitor state

    .. data:: unmonitored = 0

    	unmonitored

    .. data:: monitored = 1

    	monitored

    """

    unmonitored = Enum.YLeaf(0, "unmonitored")

    monitored = Enum.YLeaf(1, "monitored")


class InvPowerAdminState(Enum):
    """
    InvPowerAdminState

    Inv power admin state

    .. data:: admin_power_invalid = 0

    	admin power invalid

    .. data:: admin_on = 2

    	admin on

    .. data:: admin_off = 3

    	admin off

    """

    admin_power_invalid = Enum.YLeaf(0, "admin-power-invalid")

    admin_on = Enum.YLeaf(2, "admin-on")

    admin_off = Enum.YLeaf(3, "admin-off")


class InvResetReason(Enum):
    """
    InvResetReason

    Inv reset reason

    .. data:: module_reset_reason_unknown = 0

    	module reset reason unknown

    .. data:: module_reset_reason_powerup = 1

    	module reset reason powerup

    .. data:: module_reset_reason_user_shutdown = 2

    	module reset reason user shutdown

    .. data:: module_reset_reason_user_reload = 3

    	module reset reason user reload

    .. data:: module_reset_reason_auto_reload = 4

    	module reset reason auto reload

    .. data:: module_reset_reason_environment = 5

    	module reset reason environment

    .. data:: module_reset_reason_user_unpower = 6

    	module reset reason user unpower

    """

    module_reset_reason_unknown = Enum.YLeaf(0, "module-reset-reason-unknown")

    module_reset_reason_powerup = Enum.YLeaf(1, "module-reset-reason-powerup")

    module_reset_reason_user_shutdown = Enum.YLeaf(2, "module-reset-reason-user-shutdown")

    module_reset_reason_user_reload = Enum.YLeaf(3, "module-reset-reason-user-reload")

    module_reset_reason_auto_reload = Enum.YLeaf(4, "module-reset-reason-auto-reload")

    module_reset_reason_environment = Enum.YLeaf(5, "module-reset-reason-environment")

    module_reset_reason_user_unpower = Enum.YLeaf(6, "module-reset-reason-user-unpower")


class NodeState(Enum):
    """
    NodeState

    Node state detail

    .. data:: not_present = 0

    	Not present

    .. data:: present = 1

    	Present

    .. data:: reset = 2

    	Reset

    .. data:: rommon = 3

    	Card booting or rommon

    .. data:: mbi_boot = 4

    	MBI booting

    .. data:: mbi_run = 5

    	Running MBI

    .. data:: xr_run = 6

    	Running ENA

    .. data:: bring_down = 7

    	Bringdown

    .. data:: xr_fail = 8

    	ENA failure

    .. data:: fdiag_run = 9

    	Running FDIAG

    .. data:: fdiag_fail = 10

    	FDIAG failure

    .. data:: power = 11

    	Powered

    .. data:: unpower = 12

    	Unpowered

    .. data:: mdr_warm_reload = 13

    	MDR warm reload

    .. data:: mdr_mbi_run = 14

    	MDR running MBI

    .. data:: maintenance_mode = 15

    	Maintenance mode

    .. data:: admin_down = 16

    	Admin down

    .. data:: not_monitor = 17

    	No MON

    .. data:: unknown_card = 18

    	Unknown

    .. data:: failed = 19

    	Failed

    .. data:: ok = 20

    	OK

    .. data:: missing = 21

    	Missing

    .. data:: diag_download = 22

    	Field diag downloading

    .. data:: diag_not_monitor = 23

    	Field diag unmonitor

    .. data:: fabric_diag_not_monitor = 24

    	Fabric field diag unmonitor

    .. data:: diag_rp_launch = 25

    	Field diag RP launching

    .. data:: diag_run = 26

    	Field diag running

    .. data:: diag_pass = 27

    	Field diag pass

    .. data:: diag_fail = 28

    	Field diag fail

    .. data:: diag_timeout = 29

    	Field diag timeout

    .. data:: disable = 30

    	Disable

    .. data:: spa_boot = 31

    	SPA booting

    .. data:: not_allowed_online = 32

    	Not allowed online

    .. data:: stop = 33

    	Stopped

    .. data:: incomp_version = 34

    	Incompatible FW version

    .. data:: fpd_hold = 35

    	FPD hold

    .. data:: xr_preparation = 36

    	XR preparation

    .. data:: sync_ready = 37

    	Sync ready state

    .. data:: xr_isolate = 38

    	Node isolate state

    .. data:: ready = 39

    	Ready

    .. data:: invalid = 40

    	Invalid

    .. data:: operational = 41

    	Operational

    .. data:: operational_lock = 42

    	Operational lock

    .. data:: going_down = 43

    	Going down

    .. data:: going_offline = 44

    	Going offline

    .. data:: going_online = 45

    	Going online

    .. data:: offline = 46

    	Offline

    .. data:: up = 47

    	Up

    .. data:: down = 48

    	Down

    .. data:: max = 49

    	Max

    .. data:: unknown = 50

    	Unknown

    """

    not_present = Enum.YLeaf(0, "not-present")

    present = Enum.YLeaf(1, "present")

    reset = Enum.YLeaf(2, "reset")

    rommon = Enum.YLeaf(3, "rommon")

    mbi_boot = Enum.YLeaf(4, "mbi-boot")

    mbi_run = Enum.YLeaf(5, "mbi-run")

    xr_run = Enum.YLeaf(6, "xr-run")

    bring_down = Enum.YLeaf(7, "bring-down")

    xr_fail = Enum.YLeaf(8, "xr-fail")

    fdiag_run = Enum.YLeaf(9, "fdiag-run")

    fdiag_fail = Enum.YLeaf(10, "fdiag-fail")

    power = Enum.YLeaf(11, "power")

    unpower = Enum.YLeaf(12, "unpower")

    mdr_warm_reload = Enum.YLeaf(13, "mdr-warm-reload")

    mdr_mbi_run = Enum.YLeaf(14, "mdr-mbi-run")

    maintenance_mode = Enum.YLeaf(15, "maintenance-mode")

    admin_down = Enum.YLeaf(16, "admin-down")

    not_monitor = Enum.YLeaf(17, "not-monitor")

    unknown_card = Enum.YLeaf(18, "unknown-card")

    failed = Enum.YLeaf(19, "failed")

    ok = Enum.YLeaf(20, "ok")

    missing = Enum.YLeaf(21, "missing")

    diag_download = Enum.YLeaf(22, "diag-download")

    diag_not_monitor = Enum.YLeaf(23, "diag-not-monitor")

    fabric_diag_not_monitor = Enum.YLeaf(24, "fabric-diag-not-monitor")

    diag_rp_launch = Enum.YLeaf(25, "diag-rp-launch")

    diag_run = Enum.YLeaf(26, "diag-run")

    diag_pass = Enum.YLeaf(27, "diag-pass")

    diag_fail = Enum.YLeaf(28, "diag-fail")

    diag_timeout = Enum.YLeaf(29, "diag-timeout")

    disable = Enum.YLeaf(30, "disable")

    spa_boot = Enum.YLeaf(31, "spa-boot")

    not_allowed_online = Enum.YLeaf(32, "not-allowed-online")

    stop = Enum.YLeaf(33, "stop")

    incomp_version = Enum.YLeaf(34, "incomp-version")

    fpd_hold = Enum.YLeaf(35, "fpd-hold")

    xr_preparation = Enum.YLeaf(36, "xr-preparation")

    sync_ready = Enum.YLeaf(37, "sync-ready")

    xr_isolate = Enum.YLeaf(38, "xr-isolate")

    ready = Enum.YLeaf(39, "ready")

    invalid = Enum.YLeaf(40, "invalid")

    operational = Enum.YLeaf(41, "operational")

    operational_lock = Enum.YLeaf(42, "operational-lock")

    going_down = Enum.YLeaf(43, "going-down")

    going_offline = Enum.YLeaf(44, "going-offline")

    going_online = Enum.YLeaf(45, "going-online")

    offline = Enum.YLeaf(46, "offline")

    up = Enum.YLeaf(47, "up")

    down = Enum.YLeaf(48, "down")

    max = Enum.YLeaf(49, "max")

    unknown = Enum.YLeaf(50, "unknown")



class Platform(Entity):
    """
    Platform information
    
    .. attribute:: racks
    
    	Table of racks
    	**type**\:   :py:class:`Racks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.Platform.Racks>`
    
    

    """

    _prefix = 'plat-chas-invmgr-oper'
    _revision = '2015-01-07'

    def __init__(self):
        super(Platform, self).__init__()
        self._top_entity = None

        self.yang_name = "platform"
        self.yang_parent_name = "Cisco-IOS-XR-plat-chas-invmgr-oper"

        self.racks = Platform.Racks()
        self.racks.parent = self
        self._children_name_map["racks"] = "racks"
        self._children_yang_names.add("racks")


    class Racks(Entity):
        """
        Table of racks
        
        .. attribute:: rack
        
        	Rack name
        	**type**\: list of    :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.Platform.Racks.Rack>`
        
        

        """

        _prefix = 'plat-chas-invmgr-oper'
        _revision = '2015-01-07'

        def __init__(self):
            super(Platform.Racks, self).__init__()

            self.yang_name = "racks"
            self.yang_parent_name = "platform"

            self.rack = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(Platform.Racks, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(Platform.Racks, self).__setattr__(name, value)


        class Rack(Entity):
            """
            Rack name
            
            .. attribute:: rack_name  <key>
            
            	Rack name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: slots
            
            	Table of slots
            	**type**\:   :py:class:`Slots <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.Platform.Racks.Rack.Slots>`
            
            

            """

            _prefix = 'plat-chas-invmgr-oper'
            _revision = '2015-01-07'

            def __init__(self):
                super(Platform.Racks.Rack, self).__init__()

                self.yang_name = "rack"
                self.yang_parent_name = "racks"

                self.rack_name = YLeaf(YType.str, "rack-name")

                self.slots = Platform.Racks.Rack.Slots()
                self.slots.parent = self
                self._children_name_map["slots"] = "slots"
                self._children_yang_names.add("slots")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("rack_name") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Platform.Racks.Rack, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Platform.Racks.Rack, self).__setattr__(name, value)


            class Slots(Entity):
                """
                Table of slots
                
                .. attribute:: slot
                
                	Slot name
                	**type**\: list of    :py:class:`Slot <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.Platform.Racks.Rack.Slots.Slot>`
                
                

                """

                _prefix = 'plat-chas-invmgr-oper'
                _revision = '2015-01-07'

                def __init__(self):
                    super(Platform.Racks.Rack.Slots, self).__init__()

                    self.yang_name = "slots"
                    self.yang_parent_name = "rack"

                    self.slot = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Platform.Racks.Rack.Slots, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Platform.Racks.Rack.Slots, self).__setattr__(name, value)


                class Slot(Entity):
                    """
                    Slot name
                    
                    .. attribute:: slot_name  <key>
                    
                    	Slot name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: instances
                    
                    	Table of Instances
                    	**type**\:   :py:class:`Instances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.Platform.Racks.Rack.Slots.Slot.Instances>`
                    
                    .. attribute:: state
                    
                    	State information
                    	**type**\:   :py:class:`State <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.Platform.Racks.Rack.Slots.Slot.State>`
                    
                    .. attribute:: vm
                    
                    	VM information
                    	**type**\:   :py:class:`Vm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.Platform.Racks.Rack.Slots.Slot.Vm>`
                    
                    

                    """

                    _prefix = 'plat-chas-invmgr-oper'
                    _revision = '2015-01-07'

                    def __init__(self):
                        super(Platform.Racks.Rack.Slots.Slot, self).__init__()

                        self.yang_name = "slot"
                        self.yang_parent_name = "slots"

                        self.slot_name = YLeaf(YType.str, "slot-name")

                        self.instances = Platform.Racks.Rack.Slots.Slot.Instances()
                        self.instances.parent = self
                        self._children_name_map["instances"] = "instances"
                        self._children_yang_names.add("instances")

                        self.state = Platform.Racks.Rack.Slots.Slot.State()
                        self.state.parent = self
                        self._children_name_map["state"] = "state"
                        self._children_yang_names.add("state")

                        self.vm = Platform.Racks.Rack.Slots.Slot.Vm()
                        self.vm.parent = self
                        self._children_name_map["vm"] = "vm"
                        self._children_yang_names.add("vm")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("slot_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Platform.Racks.Rack.Slots.Slot, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Platform.Racks.Rack.Slots.Slot, self).__setattr__(name, value)


                    class Instances(Entity):
                        """
                        Table of Instances
                        
                        .. attribute:: instance
                        
                        	Instance name
                        	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.Platform.Racks.Rack.Slots.Slot.Instances.Instance>`
                        
                        

                        """

                        _prefix = 'plat-chas-invmgr-oper'
                        _revision = '2015-01-07'

                        def __init__(self):
                            super(Platform.Racks.Rack.Slots.Slot.Instances, self).__init__()

                            self.yang_name = "instances"
                            self.yang_parent_name = "slot"

                            self.instance = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Platform.Racks.Rack.Slots.Slot.Instances, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Platform.Racks.Rack.Slots.Slot.Instances, self).__setattr__(name, value)


                        class Instance(Entity):
                            """
                            Instance name
                            
                            .. attribute:: instance_name  <key>
                            
                            	Instance name
                            	**type**\:  str
                            
                            .. attribute:: state
                            
                            	State information
                            	**type**\:   :py:class:`State <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.Platform.Racks.Rack.Slots.Slot.Instances.Instance.State>`
                            
                            

                            """

                            _prefix = 'plat-chas-invmgr-oper'
                            _revision = '2015-01-07'

                            def __init__(self):
                                super(Platform.Racks.Rack.Slots.Slot.Instances.Instance, self).__init__()

                                self.yang_name = "instance"
                                self.yang_parent_name = "instances"

                                self.instance_name = YLeaf(YType.str, "instance-name")

                                self.state = Platform.Racks.Rack.Slots.Slot.Instances.Instance.State()
                                self.state.parent = self
                                self._children_name_map["state"] = "state"
                                self._children_yang_names.add("state")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("instance_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Platform.Racks.Rack.Slots.Slot.Instances.Instance, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Platform.Racks.Rack.Slots.Slot.Instances.Instance, self).__setattr__(name, value)


                            class State(Entity):
                                """
                                State information
                                
                                .. attribute:: admin_state
                                
                                	Admin state
                                	**type**\:  str
                                
                                .. attribute:: card_redundancy_state
                                
                                	Redundancy state
                                	**type**\:   :py:class:`CardRedundancyState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.CardRedundancyState>`
                                
                                .. attribute:: card_type
                                
                                	Card type
                                	**type**\:  str
                                
                                .. attribute:: is_monitored
                                
                                	True if power state is active
                                	**type**\:  bool
                                
                                .. attribute:: is_powered
                                
                                	True if monitor state is active
                                	**type**\:  bool
                                
                                .. attribute:: is_shutdown
                                
                                	True if shutdown state is active
                                	**type**\:  bool
                                
                                .. attribute:: plim
                                
                                	PLIM
                                	**type**\:  str
                                
                                .. attribute:: state
                                
                                	State
                                	**type**\:   :py:class:`NodeState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.NodeState>`
                                
                                

                                """

                                _prefix = 'plat-chas-invmgr-oper'
                                _revision = '2015-01-07'

                                def __init__(self):
                                    super(Platform.Racks.Rack.Slots.Slot.Instances.Instance.State, self).__init__()

                                    self.yang_name = "state"
                                    self.yang_parent_name = "instance"

                                    self.admin_state = YLeaf(YType.str, "admin-state")

                                    self.card_redundancy_state = YLeaf(YType.enumeration, "card-redundancy-state")

                                    self.card_type = YLeaf(YType.str, "card-type")

                                    self.is_monitored = YLeaf(YType.boolean, "is-monitored")

                                    self.is_powered = YLeaf(YType.boolean, "is-powered")

                                    self.is_shutdown = YLeaf(YType.boolean, "is-shutdown")

                                    self.plim = YLeaf(YType.str, "plim")

                                    self.state = YLeaf(YType.enumeration, "state")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("admin_state",
                                                    "card_redundancy_state",
                                                    "card_type",
                                                    "is_monitored",
                                                    "is_powered",
                                                    "is_shutdown",
                                                    "plim",
                                                    "state") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Platform.Racks.Rack.Slots.Slot.Instances.Instance.State, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Platform.Racks.Rack.Slots.Slot.Instances.Instance.State, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.admin_state.is_set or
                                        self.card_redundancy_state.is_set or
                                        self.card_type.is_set or
                                        self.is_monitored.is_set or
                                        self.is_powered.is_set or
                                        self.is_shutdown.is_set or
                                        self.plim.is_set or
                                        self.state.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.admin_state.yfilter != YFilter.not_set or
                                        self.card_redundancy_state.yfilter != YFilter.not_set or
                                        self.card_type.yfilter != YFilter.not_set or
                                        self.is_monitored.yfilter != YFilter.not_set or
                                        self.is_powered.yfilter != YFilter.not_set or
                                        self.is_shutdown.yfilter != YFilter.not_set or
                                        self.plim.yfilter != YFilter.not_set or
                                        self.state.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "state" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.admin_state.is_set or self.admin_state.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.admin_state.get_name_leafdata())
                                    if (self.card_redundancy_state.is_set or self.card_redundancy_state.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.card_redundancy_state.get_name_leafdata())
                                    if (self.card_type.is_set or self.card_type.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.card_type.get_name_leafdata())
                                    if (self.is_monitored.is_set or self.is_monitored.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.is_monitored.get_name_leafdata())
                                    if (self.is_powered.is_set or self.is_powered.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.is_powered.get_name_leafdata())
                                    if (self.is_shutdown.is_set or self.is_shutdown.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.is_shutdown.get_name_leafdata())
                                    if (self.plim.is_set or self.plim.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.plim.get_name_leafdata())
                                    if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.state.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "admin-state" or name == "card-redundancy-state" or name == "card-type" or name == "is-monitored" or name == "is-powered" or name == "is-shutdown" or name == "plim" or name == "state"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "admin-state"):
                                        self.admin_state = value
                                        self.admin_state.value_namespace = name_space
                                        self.admin_state.value_namespace_prefix = name_space_prefix
                                    if(value_path == "card-redundancy-state"):
                                        self.card_redundancy_state = value
                                        self.card_redundancy_state.value_namespace = name_space
                                        self.card_redundancy_state.value_namespace_prefix = name_space_prefix
                                    if(value_path == "card-type"):
                                        self.card_type = value
                                        self.card_type.value_namespace = name_space
                                        self.card_type.value_namespace_prefix = name_space_prefix
                                    if(value_path == "is-monitored"):
                                        self.is_monitored = value
                                        self.is_monitored.value_namespace = name_space
                                        self.is_monitored.value_namespace_prefix = name_space_prefix
                                    if(value_path == "is-powered"):
                                        self.is_powered = value
                                        self.is_powered.value_namespace = name_space
                                        self.is_powered.value_namespace_prefix = name_space_prefix
                                    if(value_path == "is-shutdown"):
                                        self.is_shutdown = value
                                        self.is_shutdown.value_namespace = name_space
                                        self.is_shutdown.value_namespace_prefix = name_space_prefix
                                    if(value_path == "plim"):
                                        self.plim = value
                                        self.plim.value_namespace = name_space
                                        self.plim.value_namespace_prefix = name_space_prefix
                                    if(value_path == "state"):
                                        self.state = value
                                        self.state.value_namespace = name_space
                                        self.state.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.instance_name.is_set or
                                    (self.state is not None and self.state.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.instance_name.yfilter != YFilter.not_set or
                                    (self.state is not None and self.state.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "instance" + "[instance-name='" + self.instance_name.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.instance_name.is_set or self.instance_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "state"):
                                    if (self.state is None):
                                        self.state = Platform.Racks.Rack.Slots.Slot.Instances.Instance.State()
                                        self.state.parent = self
                                        self._children_name_map["state"] = "state"
                                    return self.state

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "state" or name == "instance-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "instance-name"):
                                    self.instance_name = value
                                    self.instance_name.value_namespace = name_space
                                    self.instance_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.instance:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.instance:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "instances" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "instance"):
                                for c in self.instance:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Platform.Racks.Rack.Slots.Slot.Instances.Instance()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.instance.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "instance"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Vm(Entity):
                        """
                        VM information
                        
                        .. attribute:: node_descriptiton
                        
                        	Node Type
                        	**type**\:  str
                        
                        .. attribute:: node_ip
                        
                        	Node IP Address
                        	**type**\:  str
                        
                        .. attribute:: partner_name
                        
                        	Partner Name
                        	**type**\:  str
                        
                        .. attribute:: red_role
                        
                        	Node Redundency Role
                        	**type**\:  str
                        
                        .. attribute:: software_status
                        
                        	SW status
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'plat-chas-invmgr-oper'
                        _revision = '2015-01-07'

                        def __init__(self):
                            super(Platform.Racks.Rack.Slots.Slot.Vm, self).__init__()

                            self.yang_name = "vm"
                            self.yang_parent_name = "slot"

                            self.node_descriptiton = YLeaf(YType.str, "node-descriptiton")

                            self.node_ip = YLeaf(YType.str, "node-ip")

                            self.partner_name = YLeaf(YType.str, "partner-name")

                            self.red_role = YLeaf(YType.str, "red-role")

                            self.software_status = YLeaf(YType.str, "software-status")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("node_descriptiton",
                                            "node_ip",
                                            "partner_name",
                                            "red_role",
                                            "software_status") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Platform.Racks.Rack.Slots.Slot.Vm, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Platform.Racks.Rack.Slots.Slot.Vm, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.node_descriptiton.is_set or
                                self.node_ip.is_set or
                                self.partner_name.is_set or
                                self.red_role.is_set or
                                self.software_status.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.node_descriptiton.yfilter != YFilter.not_set or
                                self.node_ip.yfilter != YFilter.not_set or
                                self.partner_name.yfilter != YFilter.not_set or
                                self.red_role.yfilter != YFilter.not_set or
                                self.software_status.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "vm" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.node_descriptiton.is_set or self.node_descriptiton.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_descriptiton.get_name_leafdata())
                            if (self.node_ip.is_set or self.node_ip.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.node_ip.get_name_leafdata())
                            if (self.partner_name.is_set or self.partner_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.partner_name.get_name_leafdata())
                            if (self.red_role.is_set or self.red_role.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.red_role.get_name_leafdata())
                            if (self.software_status.is_set or self.software_status.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.software_status.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "node-descriptiton" or name == "node-ip" or name == "partner-name" or name == "red-role" or name == "software-status"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "node-descriptiton"):
                                self.node_descriptiton = value
                                self.node_descriptiton.value_namespace = name_space
                                self.node_descriptiton.value_namespace_prefix = name_space_prefix
                            if(value_path == "node-ip"):
                                self.node_ip = value
                                self.node_ip.value_namespace = name_space
                                self.node_ip.value_namespace_prefix = name_space_prefix
                            if(value_path == "partner-name"):
                                self.partner_name = value
                                self.partner_name.value_namespace = name_space
                                self.partner_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "red-role"):
                                self.red_role = value
                                self.red_role.value_namespace = name_space
                                self.red_role.value_namespace_prefix = name_space_prefix
                            if(value_path == "software-status"):
                                self.software_status = value
                                self.software_status.value_namespace = name_space
                                self.software_status.value_namespace_prefix = name_space_prefix


                    class State(Entity):
                        """
                        State information
                        
                        .. attribute:: admin_state
                        
                        	Admin state
                        	**type**\:  str
                        
                        .. attribute:: card_redundancy_state
                        
                        	Redundancy state
                        	**type**\:   :py:class:`CardRedundancyState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.CardRedundancyState>`
                        
                        .. attribute:: card_type
                        
                        	Card type
                        	**type**\:  str
                        
                        .. attribute:: is_monitored
                        
                        	True if power state is active
                        	**type**\:  bool
                        
                        .. attribute:: is_powered
                        
                        	True if monitor state is active
                        	**type**\:  bool
                        
                        .. attribute:: is_shutdown
                        
                        	True if shutdown state is active
                        	**type**\:  bool
                        
                        .. attribute:: plim
                        
                        	PLIM
                        	**type**\:  str
                        
                        .. attribute:: state
                        
                        	State
                        	**type**\:   :py:class:`NodeState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.NodeState>`
                        
                        

                        """

                        _prefix = 'plat-chas-invmgr-oper'
                        _revision = '2015-01-07'

                        def __init__(self):
                            super(Platform.Racks.Rack.Slots.Slot.State, self).__init__()

                            self.yang_name = "state"
                            self.yang_parent_name = "slot"

                            self.admin_state = YLeaf(YType.str, "admin-state")

                            self.card_redundancy_state = YLeaf(YType.enumeration, "card-redundancy-state")

                            self.card_type = YLeaf(YType.str, "card-type")

                            self.is_monitored = YLeaf(YType.boolean, "is-monitored")

                            self.is_powered = YLeaf(YType.boolean, "is-powered")

                            self.is_shutdown = YLeaf(YType.boolean, "is-shutdown")

                            self.plim = YLeaf(YType.str, "plim")

                            self.state = YLeaf(YType.enumeration, "state")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("admin_state",
                                            "card_redundancy_state",
                                            "card_type",
                                            "is_monitored",
                                            "is_powered",
                                            "is_shutdown",
                                            "plim",
                                            "state") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Platform.Racks.Rack.Slots.Slot.State, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Platform.Racks.Rack.Slots.Slot.State, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.admin_state.is_set or
                                self.card_redundancy_state.is_set or
                                self.card_type.is_set or
                                self.is_monitored.is_set or
                                self.is_powered.is_set or
                                self.is_shutdown.is_set or
                                self.plim.is_set or
                                self.state.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.admin_state.yfilter != YFilter.not_set or
                                self.card_redundancy_state.yfilter != YFilter.not_set or
                                self.card_type.yfilter != YFilter.not_set or
                                self.is_monitored.yfilter != YFilter.not_set or
                                self.is_powered.yfilter != YFilter.not_set or
                                self.is_shutdown.yfilter != YFilter.not_set or
                                self.plim.yfilter != YFilter.not_set or
                                self.state.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "state" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.admin_state.is_set or self.admin_state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.admin_state.get_name_leafdata())
                            if (self.card_redundancy_state.is_set or self.card_redundancy_state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.card_redundancy_state.get_name_leafdata())
                            if (self.card_type.is_set or self.card_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.card_type.get_name_leafdata())
                            if (self.is_monitored.is_set or self.is_monitored.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_monitored.get_name_leafdata())
                            if (self.is_powered.is_set or self.is_powered.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_powered.get_name_leafdata())
                            if (self.is_shutdown.is_set or self.is_shutdown.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_shutdown.get_name_leafdata())
                            if (self.plim.is_set or self.plim.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.plim.get_name_leafdata())
                            if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.state.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "admin-state" or name == "card-redundancy-state" or name == "card-type" or name == "is-monitored" or name == "is-powered" or name == "is-shutdown" or name == "plim" or name == "state"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "admin-state"):
                                self.admin_state = value
                                self.admin_state.value_namespace = name_space
                                self.admin_state.value_namespace_prefix = name_space_prefix
                            if(value_path == "card-redundancy-state"):
                                self.card_redundancy_state = value
                                self.card_redundancy_state.value_namespace = name_space
                                self.card_redundancy_state.value_namespace_prefix = name_space_prefix
                            if(value_path == "card-type"):
                                self.card_type = value
                                self.card_type.value_namespace = name_space
                                self.card_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-monitored"):
                                self.is_monitored = value
                                self.is_monitored.value_namespace = name_space
                                self.is_monitored.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-powered"):
                                self.is_powered = value
                                self.is_powered.value_namespace = name_space
                                self.is_powered.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-shutdown"):
                                self.is_shutdown = value
                                self.is_shutdown.value_namespace = name_space
                                self.is_shutdown.value_namespace_prefix = name_space_prefix
                            if(value_path == "plim"):
                                self.plim = value
                                self.plim.value_namespace = name_space
                                self.plim.value_namespace_prefix = name_space_prefix
                            if(value_path == "state"):
                                self.state = value
                                self.state.value_namespace = name_space
                                self.state.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.slot_name.is_set or
                            (self.instances is not None and self.instances.has_data()) or
                            (self.state is not None and self.state.has_data()) or
                            (self.vm is not None and self.vm.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.slot_name.yfilter != YFilter.not_set or
                            (self.instances is not None and self.instances.has_operation()) or
                            (self.state is not None and self.state.has_operation()) or
                            (self.vm is not None and self.vm.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "slot" + "[slot-name='" + self.slot_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.slot_name.is_set or self.slot_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.slot_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "instances"):
                            if (self.instances is None):
                                self.instances = Platform.Racks.Rack.Slots.Slot.Instances()
                                self.instances.parent = self
                                self._children_name_map["instances"] = "instances"
                            return self.instances

                        if (child_yang_name == "state"):
                            if (self.state is None):
                                self.state = Platform.Racks.Rack.Slots.Slot.State()
                                self.state.parent = self
                                self._children_name_map["state"] = "state"
                            return self.state

                        if (child_yang_name == "vm"):
                            if (self.vm is None):
                                self.vm = Platform.Racks.Rack.Slots.Slot.Vm()
                                self.vm.parent = self
                                self._children_name_map["vm"] = "vm"
                            return self.vm

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "instances" or name == "state" or name == "vm" or name == "slot-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "slot-name"):
                            self.slot_name = value
                            self.slot_name.value_namespace = name_space
                            self.slot_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.slot:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.slot:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "slots" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "slot"):
                        for c in self.slot:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Platform.Racks.Rack.Slots.Slot()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.slot.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "slot"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    self.rack_name.is_set or
                    (self.slots is not None and self.slots.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.rack_name.yfilter != YFilter.not_set or
                    (self.slots is not None and self.slots.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "rack" + "[rack-name='" + self.rack_name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-plat-chas-invmgr-oper:platform/racks/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.rack_name.is_set or self.rack_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.rack_name.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "slots"):
                    if (self.slots is None):
                        self.slots = Platform.Racks.Rack.Slots()
                        self.slots.parent = self
                        self._children_name_map["slots"] = "slots"
                    return self.slots

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "slots" or name == "rack-name"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "rack-name"):
                    self.rack_name = value
                    self.rack_name.value_namespace = name_space
                    self.rack_name.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.rack:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.rack:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "racks" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-plat-chas-invmgr-oper:platform/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "rack"):
                for c in self.rack:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = Platform.Racks.Rack()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.rack.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "rack"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (self.racks is not None and self.racks.has_data())

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.racks is not None and self.racks.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-plat-chas-invmgr-oper:platform" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "racks"):
            if (self.racks is None):
                self.racks = Platform.Racks()
                self.racks.parent = self
                self._children_name_map["racks"] = "racks"
            return self.racks

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "racks"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = Platform()
        return self._top_entity

class PlatformInventory(Entity):
    """
    platform inventory
    
    .. attribute:: racks
    
    	Table of racks
    	**type**\:   :py:class:`Racks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks>`
    
    

    """

    _prefix = 'plat-chas-invmgr-oper'
    _revision = '2015-01-07'

    def __init__(self):
        super(PlatformInventory, self).__init__()
        self._top_entity = None

        self.yang_name = "platform-inventory"
        self.yang_parent_name = "Cisco-IOS-XR-plat-chas-invmgr-oper"

        self.racks = PlatformInventory.Racks()
        self.racks.parent = self
        self._children_name_map["racks"] = "racks"
        self._children_yang_names.add("racks")


    class Racks(Entity):
        """
        Table of racks
        
        .. attribute:: rack
        
        	Rack name
        	**type**\: list of    :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack>`
        
        

        """

        _prefix = 'plat-chas-invmgr-oper'
        _revision = '2015-01-07'

        def __init__(self):
            super(PlatformInventory.Racks, self).__init__()

            self.yang_name = "racks"
            self.yang_parent_name = "platform-inventory"

            self.rack = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(PlatformInventory.Racks, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(PlatformInventory.Racks, self).__setattr__(name, value)


        class Rack(Entity):
            """
            Rack name
            
            .. attribute:: name  <key>
            
            	Rack name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: attributes
            
            	Attributes
            	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Attributes>`
            
            .. attribute:: slots
            
            	Table of slots
            	**type**\:   :py:class:`Slots <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots>`
            
            

            """

            _prefix = 'plat-chas-invmgr-oper'
            _revision = '2015-01-07'

            def __init__(self):
                super(PlatformInventory.Racks.Rack, self).__init__()

                self.yang_name = "rack"
                self.yang_parent_name = "racks"

                self.name = YLeaf(YType.str, "name")

                self.attributes = PlatformInventory.Racks.Rack.Attributes()
                self.attributes.parent = self
                self._children_name_map["attributes"] = "attributes"
                self._children_yang_names.add("attributes")

                self.slots = PlatformInventory.Racks.Rack.Slots()
                self.slots.parent = self
                self._children_name_map["slots"] = "slots"
                self._children_yang_names.add("slots")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("name") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(PlatformInventory.Racks.Rack, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(PlatformInventory.Racks.Rack, self).__setattr__(name, value)


            class Slots(Entity):
                """
                Table of slots
                
                .. attribute:: slot
                
                	Slot name
                	**type**\: list of    :py:class:`Slot <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot>`
                
                

                """

                _prefix = 'plat-chas-invmgr-oper'
                _revision = '2015-01-07'

                def __init__(self):
                    super(PlatformInventory.Racks.Rack.Slots, self).__init__()

                    self.yang_name = "slots"
                    self.yang_parent_name = "rack"

                    self.slot = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PlatformInventory.Racks.Rack.Slots, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PlatformInventory.Racks.Rack.Slots, self).__setattr__(name, value)


                class Slot(Entity):
                    """
                    Slot name
                    
                    .. attribute:: name  <key>
                    
                    	Slot name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attributes
                    
                    	Attributes
                    	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Attributes>`
                    
                    .. attribute:: cards
                    
                    	Table of cards
                    	**type**\:   :py:class:`Cards <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards>`
                    
                    

                    """

                    _prefix = 'plat-chas-invmgr-oper'
                    _revision = '2015-01-07'

                    def __init__(self):
                        super(PlatformInventory.Racks.Rack.Slots.Slot, self).__init__()

                        self.yang_name = "slot"
                        self.yang_parent_name = "slots"

                        self.name = YLeaf(YType.str, "name")

                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Attributes()
                        self.attributes.parent = self
                        self._children_name_map["attributes"] = "attributes"
                        self._children_yang_names.add("attributes")

                        self.cards = PlatformInventory.Racks.Rack.Slots.Slot.Cards()
                        self.cards.parent = self
                        self._children_name_map["cards"] = "cards"
                        self._children_yang_names.add("cards")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PlatformInventory.Racks.Rack.Slots.Slot, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PlatformInventory.Racks.Rack.Slots.Slot, self).__setattr__(name, value)


                    class Cards(Entity):
                        """
                        Table of cards
                        
                        .. attribute:: card
                        
                        	Card number
                        	**type**\: list of    :py:class:`Card <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card>`
                        
                        

                        """

                        _prefix = 'plat-chas-invmgr-oper'
                        _revision = '2015-01-07'

                        def __init__(self):
                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards, self).__init__()

                            self.yang_name = "cards"
                            self.yang_parent_name = "slot"

                            self.card = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards, self).__setattr__(name, value)


                        class Card(Entity):
                            """
                            Card number
                            
                            .. attribute:: name  <key>
                            
                            	Card name
                            	**type**\:  str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: attributes
                            
                            	Attributes
                            	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes>`
                            
                            .. attribute:: hardware_information
                            
                            	HardwareInformationDir
                            	**type**\:   :py:class:`HardwareInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation>`
                            
                            .. attribute:: hw_components
                            
                            	Table of  HW components 
                            	**type**\:   :py:class:`HwComponents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents>`
                            
                            .. attribute:: port_slots
                            
                            	Table of port slots
                            	**type**\:   :py:class:`PortSlots <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots>`
                            
                            .. attribute:: sensors
                            
                            	Table of sensors
                            	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors>`
                            
                            .. attribute:: sub_slots
                            
                            	Table of subslots
                            	**type**\:   :py:class:`SubSlots <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots>`
                            
                            

                            """

                            _prefix = 'plat-chas-invmgr-oper'
                            _revision = '2015-01-07'

                            def __init__(self):
                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card, self).__init__()

                                self.yang_name = "card"
                                self.yang_parent_name = "cards"

                                self.name = YLeaf(YType.str, "name")

                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes()
                                self.attributes.parent = self
                                self._children_name_map["attributes"] = "attributes"
                                self._children_yang_names.add("attributes")

                                self.hardware_information = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation()
                                self.hardware_information.parent = self
                                self._children_name_map["hardware_information"] = "hardware-information"
                                self._children_yang_names.add("hardware-information")

                                self.hw_components = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents()
                                self.hw_components.parent = self
                                self._children_name_map["hw_components"] = "hw-components"
                                self._children_yang_names.add("hw-components")

                                self.port_slots = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots()
                                self.port_slots.parent = self
                                self._children_name_map["port_slots"] = "port-slots"
                                self._children_yang_names.add("port-slots")

                                self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors()
                                self.sensors.parent = self
                                self._children_name_map["sensors"] = "sensors"
                                self._children_yang_names.add("sensors")

                                self.sub_slots = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots()
                                self.sub_slots.parent = self
                                self._children_name_map["sub_slots"] = "sub-slots"
                                self._children_yang_names.add("sub-slots")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card, self).__setattr__(name, value)


                            class HardwareInformation(Entity):
                                """
                                HardwareInformationDir
                                
                                .. attribute:: bootflash_information
                                
                                	BootflashInformation
                                	**type**\:   :py:class:`BootflashInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.BootflashInformation>`
                                
                                .. attribute:: disk_information
                                
                                	DiskInformation
                                	**type**\:   :py:class:`DiskInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation>`
                                
                                .. attribute:: motherboard_information
                                
                                	MotherboardInformation
                                	**type**\:   :py:class:`MotherboardInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation>`
                                
                                .. attribute:: processor_information
                                
                                	ProcesorInformation
                                	**type**\:   :py:class:`ProcessorInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.ProcessorInformation>`
                                
                                

                                """

                                _prefix = 'plat-chas-invmgr-oper'
                                _revision = '2015-01-07'

                                def __init__(self):
                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation, self).__init__()

                                    self.yang_name = "hardware-information"
                                    self.yang_parent_name = "card"

                                    self.bootflash_information = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.BootflashInformation()
                                    self.bootflash_information.parent = self
                                    self._children_name_map["bootflash_information"] = "bootflash-information"
                                    self._children_yang_names.add("bootflash-information")

                                    self.disk_information = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation()
                                    self.disk_information.parent = self
                                    self._children_name_map["disk_information"] = "disk-information"
                                    self._children_yang_names.add("disk-information")

                                    self.motherboard_information = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation()
                                    self.motherboard_information.parent = self
                                    self._children_name_map["motherboard_information"] = "motherboard-information"
                                    self._children_yang_names.add("motherboard-information")

                                    self.processor_information = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.ProcessorInformation()
                                    self.processor_information.parent = self
                                    self._children_name_map["processor_information"] = "processor-information"
                                    self._children_yang_names.add("processor-information")


                                class ProcessorInformation(Entity):
                                    """
                                    ProcesorInformation
                                    
                                    .. attribute:: processor_type
                                    
                                    	Type e.g. 7457
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: revision
                                    
                                    	Revision. e.g 1.1
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: speed
                                    
                                    	Speed e.g. 1197Mhz
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'plat-chas-invmgr-oper'
                                    _revision = '2015-01-07'

                                    def __init__(self):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.ProcessorInformation, self).__init__()

                                        self.yang_name = "processor-information"
                                        self.yang_parent_name = "hardware-information"

                                        self.processor_type = YLeaf(YType.str, "processor-type")

                                        self.revision = YLeaf(YType.str, "revision")

                                        self.speed = YLeaf(YType.str, "speed")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("processor_type",
                                                        "revision",
                                                        "speed") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.ProcessorInformation, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.ProcessorInformation, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.processor_type.is_set or
                                            self.revision.is_set or
                                            self.speed.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.processor_type.yfilter != YFilter.not_set or
                                            self.revision.yfilter != YFilter.not_set or
                                            self.speed.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "processor-information" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.processor_type.is_set or self.processor_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.processor_type.get_name_leafdata())
                                        if (self.revision.is_set or self.revision.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.revision.get_name_leafdata())
                                        if (self.speed.is_set or self.speed.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.speed.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "processor-type" or name == "revision" or name == "speed"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "processor-type"):
                                            self.processor_type = value
                                            self.processor_type.value_namespace = name_space
                                            self.processor_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "revision"):
                                            self.revision = value
                                            self.revision.value_namespace = name_space
                                            self.revision.value_namespace_prefix = name_space_prefix
                                        if(value_path == "speed"):
                                            self.speed = value
                                            self.speed.value_namespace = name_space
                                            self.speed.value_namespace_prefix = name_space_prefix


                                class MotherboardInformation(Entity):
                                    """
                                    MotherboardInformation
                                    
                                    .. attribute:: bootflash
                                    
                                    	Bootflash information
                                    	**type**\:   :py:class:`Bootflash <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Bootflash>`
                                    
                                    .. attribute:: main_memory_size
                                    
                                    	Memory size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: byte
                                    
                                    .. attribute:: nvram_size
                                    
                                    	NVRAM size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: byte
                                    
                                    .. attribute:: processor
                                    
                                    	Processor information
                                    	**type**\:   :py:class:`Processor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Processor>`
                                    
                                    .. attribute:: rom
                                    
                                    	ROM information
                                    	**type**\:   :py:class:`Rom <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Rom>`
                                    
                                    

                                    """

                                    _prefix = 'plat-chas-invmgr-oper'
                                    _revision = '2015-01-07'

                                    def __init__(self):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation, self).__init__()

                                        self.yang_name = "motherboard-information"
                                        self.yang_parent_name = "hardware-information"

                                        self.main_memory_size = YLeaf(YType.uint64, "main-memory-size")

                                        self.nvram_size = YLeaf(YType.uint64, "nvram-size")

                                        self.bootflash = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Bootflash()
                                        self.bootflash.parent = self
                                        self._children_name_map["bootflash"] = "bootflash"
                                        self._children_yang_names.add("bootflash")

                                        self.processor = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Processor()
                                        self.processor.parent = self
                                        self._children_name_map["processor"] = "processor"
                                        self._children_yang_names.add("processor")

                                        self.rom = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Rom()
                                        self.rom.parent = self
                                        self._children_name_map["rom"] = "rom"
                                        self._children_yang_names.add("rom")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("main_memory_size",
                                                        "nvram_size") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation, self).__setattr__(name, value)


                                    class Rom(Entity):
                                        """
                                        ROM information
                                        
                                        .. attribute:: image_name
                                        
                                        	Image name
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: major_version
                                        
                                        	Major version
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: micro_image_version
                                        
                                        	Micro image version
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: minor_version
                                        
                                        	Minor version
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: platform_specific
                                        
                                        	Platform specific text
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: release_type
                                        
                                        	Release type
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Rom, self).__init__()

                                            self.yang_name = "rom"
                                            self.yang_parent_name = "motherboard-information"

                                            self.image_name = YLeaf(YType.str, "image-name")

                                            self.major_version = YLeaf(YType.uint32, "major-version")

                                            self.micro_image_version = YLeaf(YType.str, "micro-image-version")

                                            self.minor_version = YLeaf(YType.uint32, "minor-version")

                                            self.platform_specific = YLeaf(YType.str, "platform-specific")

                                            self.release_type = YLeaf(YType.str, "release-type")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("image_name",
                                                            "major_version",
                                                            "micro_image_version",
                                                            "minor_version",
                                                            "platform_specific",
                                                            "release_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Rom, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Rom, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.image_name.is_set or
                                                self.major_version.is_set or
                                                self.micro_image_version.is_set or
                                                self.minor_version.is_set or
                                                self.platform_specific.is_set or
                                                self.release_type.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.image_name.yfilter != YFilter.not_set or
                                                self.major_version.yfilter != YFilter.not_set or
                                                self.micro_image_version.yfilter != YFilter.not_set or
                                                self.minor_version.yfilter != YFilter.not_set or
                                                self.platform_specific.yfilter != YFilter.not_set or
                                                self.release_type.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "rom" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.image_name.is_set or self.image_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.image_name.get_name_leafdata())
                                            if (self.major_version.is_set or self.major_version.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.major_version.get_name_leafdata())
                                            if (self.micro_image_version.is_set or self.micro_image_version.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.micro_image_version.get_name_leafdata())
                                            if (self.minor_version.is_set or self.minor_version.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.minor_version.get_name_leafdata())
                                            if (self.platform_specific.is_set or self.platform_specific.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.platform_specific.get_name_leafdata())
                                            if (self.release_type.is_set or self.release_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.release_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "image-name" or name == "major-version" or name == "micro-image-version" or name == "minor-version" or name == "platform-specific" or name == "release-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "image-name"):
                                                self.image_name = value
                                                self.image_name.value_namespace = name_space
                                                self.image_name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "major-version"):
                                                self.major_version = value
                                                self.major_version.value_namespace = name_space
                                                self.major_version.value_namespace_prefix = name_space_prefix
                                            if(value_path == "micro-image-version"):
                                                self.micro_image_version = value
                                                self.micro_image_version.value_namespace = name_space
                                                self.micro_image_version.value_namespace_prefix = name_space_prefix
                                            if(value_path == "minor-version"):
                                                self.minor_version = value
                                                self.minor_version.value_namespace = name_space
                                                self.minor_version.value_namespace_prefix = name_space_prefix
                                            if(value_path == "platform-specific"):
                                                self.platform_specific = value
                                                self.platform_specific.value_namespace = name_space
                                                self.platform_specific.value_namespace_prefix = name_space_prefix
                                            if(value_path == "release-type"):
                                                self.release_type = value
                                                self.release_type.value_namespace = name_space
                                                self.release_type.value_namespace_prefix = name_space_prefix


                                    class Bootflash(Entity):
                                        """
                                        Bootflash information
                                        
                                        .. attribute:: bootflash_size
                                        
                                        	Bootflash size in kilo\-bytes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**units**\: kilobyte
                                        
                                        .. attribute:: bootflash_type
                                        
                                        	Bootflash type e.g. SIMM
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: image_name
                                        
                                        	Image name
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: major_version
                                        
                                        	Major version
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: micro_image_version
                                        
                                        	Micro image version
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: minor_version
                                        
                                        	Minor version
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: platform_specific
                                        
                                        	Platform specific text
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: platform_type
                                        
                                        	Platform Type
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: release_type
                                        
                                        	Release type
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: sector_size
                                        
                                        	Sector size in bytes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**units**\: byte
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Bootflash, self).__init__()

                                            self.yang_name = "bootflash"
                                            self.yang_parent_name = "motherboard-information"

                                            self.bootflash_size = YLeaf(YType.uint32, "bootflash-size")

                                            self.bootflash_type = YLeaf(YType.str, "bootflash-type")

                                            self.image_name = YLeaf(YType.str, "image-name")

                                            self.major_version = YLeaf(YType.uint32, "major-version")

                                            self.micro_image_version = YLeaf(YType.str, "micro-image-version")

                                            self.minor_version = YLeaf(YType.uint32, "minor-version")

                                            self.platform_specific = YLeaf(YType.str, "platform-specific")

                                            self.platform_type = YLeaf(YType.str, "platform-type")

                                            self.release_type = YLeaf(YType.str, "release-type")

                                            self.sector_size = YLeaf(YType.uint32, "sector-size")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("bootflash_size",
                                                            "bootflash_type",
                                                            "image_name",
                                                            "major_version",
                                                            "micro_image_version",
                                                            "minor_version",
                                                            "platform_specific",
                                                            "platform_type",
                                                            "release_type",
                                                            "sector_size") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Bootflash, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Bootflash, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.bootflash_size.is_set or
                                                self.bootflash_type.is_set or
                                                self.image_name.is_set or
                                                self.major_version.is_set or
                                                self.micro_image_version.is_set or
                                                self.minor_version.is_set or
                                                self.platform_specific.is_set or
                                                self.platform_type.is_set or
                                                self.release_type.is_set or
                                                self.sector_size.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.bootflash_size.yfilter != YFilter.not_set or
                                                self.bootflash_type.yfilter != YFilter.not_set or
                                                self.image_name.yfilter != YFilter.not_set or
                                                self.major_version.yfilter != YFilter.not_set or
                                                self.micro_image_version.yfilter != YFilter.not_set or
                                                self.minor_version.yfilter != YFilter.not_set or
                                                self.platform_specific.yfilter != YFilter.not_set or
                                                self.platform_type.yfilter != YFilter.not_set or
                                                self.release_type.yfilter != YFilter.not_set or
                                                self.sector_size.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "bootflash" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.bootflash_size.is_set or self.bootflash_size.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.bootflash_size.get_name_leafdata())
                                            if (self.bootflash_type.is_set or self.bootflash_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.bootflash_type.get_name_leafdata())
                                            if (self.image_name.is_set or self.image_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.image_name.get_name_leafdata())
                                            if (self.major_version.is_set or self.major_version.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.major_version.get_name_leafdata())
                                            if (self.micro_image_version.is_set or self.micro_image_version.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.micro_image_version.get_name_leafdata())
                                            if (self.minor_version.is_set or self.minor_version.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.minor_version.get_name_leafdata())
                                            if (self.platform_specific.is_set or self.platform_specific.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.platform_specific.get_name_leafdata())
                                            if (self.platform_type.is_set or self.platform_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.platform_type.get_name_leafdata())
                                            if (self.release_type.is_set or self.release_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.release_type.get_name_leafdata())
                                            if (self.sector_size.is_set or self.sector_size.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sector_size.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "bootflash-size" or name == "bootflash-type" or name == "image-name" or name == "major-version" or name == "micro-image-version" or name == "minor-version" or name == "platform-specific" or name == "platform-type" or name == "release-type" or name == "sector-size"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "bootflash-size"):
                                                self.bootflash_size = value
                                                self.bootflash_size.value_namespace = name_space
                                                self.bootflash_size.value_namespace_prefix = name_space_prefix
                                            if(value_path == "bootflash-type"):
                                                self.bootflash_type = value
                                                self.bootflash_type.value_namespace = name_space
                                                self.bootflash_type.value_namespace_prefix = name_space_prefix
                                            if(value_path == "image-name"):
                                                self.image_name = value
                                                self.image_name.value_namespace = name_space
                                                self.image_name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "major-version"):
                                                self.major_version = value
                                                self.major_version.value_namespace = name_space
                                                self.major_version.value_namespace_prefix = name_space_prefix
                                            if(value_path == "micro-image-version"):
                                                self.micro_image_version = value
                                                self.micro_image_version.value_namespace = name_space
                                                self.micro_image_version.value_namespace_prefix = name_space_prefix
                                            if(value_path == "minor-version"):
                                                self.minor_version = value
                                                self.minor_version.value_namespace = name_space
                                                self.minor_version.value_namespace_prefix = name_space_prefix
                                            if(value_path == "platform-specific"):
                                                self.platform_specific = value
                                                self.platform_specific.value_namespace = name_space
                                                self.platform_specific.value_namespace_prefix = name_space_prefix
                                            if(value_path == "platform-type"):
                                                self.platform_type = value
                                                self.platform_type.value_namespace = name_space
                                                self.platform_type.value_namespace_prefix = name_space_prefix
                                            if(value_path == "release-type"):
                                                self.release_type = value
                                                self.release_type.value_namespace = name_space
                                                self.release_type.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sector-size"):
                                                self.sector_size = value
                                                self.sector_size.value_namespace = name_space
                                                self.sector_size.value_namespace_prefix = name_space_prefix


                                    class Processor(Entity):
                                        """
                                        Processor information
                                        
                                        .. attribute:: processor_type
                                        
                                        	Type e.g. 7457
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: revision
                                        
                                        	Revision. e.g 1.1
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: speed
                                        
                                        	Speed e.g. 1197Mhz
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Processor, self).__init__()

                                            self.yang_name = "processor"
                                            self.yang_parent_name = "motherboard-information"

                                            self.processor_type = YLeaf(YType.str, "processor-type")

                                            self.revision = YLeaf(YType.str, "revision")

                                            self.speed = YLeaf(YType.str, "speed")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("processor_type",
                                                            "revision",
                                                            "speed") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Processor, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Processor, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.processor_type.is_set or
                                                self.revision.is_set or
                                                self.speed.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.processor_type.yfilter != YFilter.not_set or
                                                self.revision.yfilter != YFilter.not_set or
                                                self.speed.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "processor" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.processor_type.is_set or self.processor_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.processor_type.get_name_leafdata())
                                            if (self.revision.is_set or self.revision.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.revision.get_name_leafdata())
                                            if (self.speed.is_set or self.speed.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.speed.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "processor-type" or name == "revision" or name == "speed"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "processor-type"):
                                                self.processor_type = value
                                                self.processor_type.value_namespace = name_space
                                                self.processor_type.value_namespace_prefix = name_space_prefix
                                            if(value_path == "revision"):
                                                self.revision = value
                                                self.revision.value_namespace = name_space
                                                self.revision.value_namespace_prefix = name_space_prefix
                                            if(value_path == "speed"):
                                                self.speed = value
                                                self.speed.value_namespace = name_space
                                                self.speed.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.main_memory_size.is_set or
                                            self.nvram_size.is_set or
                                            (self.bootflash is not None and self.bootflash.has_data()) or
                                            (self.processor is not None and self.processor.has_data()) or
                                            (self.rom is not None and self.rom.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.main_memory_size.yfilter != YFilter.not_set or
                                            self.nvram_size.yfilter != YFilter.not_set or
                                            (self.bootflash is not None and self.bootflash.has_operation()) or
                                            (self.processor is not None and self.processor.has_operation()) or
                                            (self.rom is not None and self.rom.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "motherboard-information" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.main_memory_size.is_set or self.main_memory_size.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.main_memory_size.get_name_leafdata())
                                        if (self.nvram_size.is_set or self.nvram_size.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.nvram_size.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "bootflash"):
                                            if (self.bootflash is None):
                                                self.bootflash = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Bootflash()
                                                self.bootflash.parent = self
                                                self._children_name_map["bootflash"] = "bootflash"
                                            return self.bootflash

                                        if (child_yang_name == "processor"):
                                            if (self.processor is None):
                                                self.processor = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Processor()
                                                self.processor.parent = self
                                                self._children_name_map["processor"] = "processor"
                                            return self.processor

                                        if (child_yang_name == "rom"):
                                            if (self.rom is None):
                                                self.rom = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation.Rom()
                                                self.rom.parent = self
                                                self._children_name_map["rom"] = "rom"
                                            return self.rom

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "bootflash" or name == "processor" or name == "rom" or name == "main-memory-size" or name == "nvram-size"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "main-memory-size"):
                                            self.main_memory_size = value
                                            self.main_memory_size.value_namespace = name_space
                                            self.main_memory_size.value_namespace_prefix = name_space_prefix
                                        if(value_path == "nvram-size"):
                                            self.nvram_size = value
                                            self.nvram_size.value_namespace = name_space
                                            self.nvram_size.value_namespace_prefix = name_space_prefix


                                class BootflashInformation(Entity):
                                    """
                                    BootflashInformation
                                    
                                    .. attribute:: bootflash_size
                                    
                                    	Bootflash size in kilo\-bytes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: kilobyte
                                    
                                    .. attribute:: bootflash_type
                                    
                                    	Bootflash type e.g. SIMM
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: image_name
                                    
                                    	Image name
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: major_version
                                    
                                    	Major version
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: micro_image_version
                                    
                                    	Micro image version
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: minor_version
                                    
                                    	Minor version
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: platform_specific
                                    
                                    	Platform specific text
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: platform_type
                                    
                                    	Platform Type
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: release_type
                                    
                                    	Release type
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: sector_size
                                    
                                    	Sector size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: byte
                                    
                                    

                                    """

                                    _prefix = 'plat-chas-invmgr-oper'
                                    _revision = '2015-01-07'

                                    def __init__(self):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.BootflashInformation, self).__init__()

                                        self.yang_name = "bootflash-information"
                                        self.yang_parent_name = "hardware-information"

                                        self.bootflash_size = YLeaf(YType.uint32, "bootflash-size")

                                        self.bootflash_type = YLeaf(YType.str, "bootflash-type")

                                        self.image_name = YLeaf(YType.str, "image-name")

                                        self.major_version = YLeaf(YType.uint32, "major-version")

                                        self.micro_image_version = YLeaf(YType.str, "micro-image-version")

                                        self.minor_version = YLeaf(YType.uint32, "minor-version")

                                        self.platform_specific = YLeaf(YType.str, "platform-specific")

                                        self.platform_type = YLeaf(YType.str, "platform-type")

                                        self.release_type = YLeaf(YType.str, "release-type")

                                        self.sector_size = YLeaf(YType.uint32, "sector-size")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("bootflash_size",
                                                        "bootflash_type",
                                                        "image_name",
                                                        "major_version",
                                                        "micro_image_version",
                                                        "minor_version",
                                                        "platform_specific",
                                                        "platform_type",
                                                        "release_type",
                                                        "sector_size") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.BootflashInformation, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.BootflashInformation, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.bootflash_size.is_set or
                                            self.bootflash_type.is_set or
                                            self.image_name.is_set or
                                            self.major_version.is_set or
                                            self.micro_image_version.is_set or
                                            self.minor_version.is_set or
                                            self.platform_specific.is_set or
                                            self.platform_type.is_set or
                                            self.release_type.is_set or
                                            self.sector_size.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.bootflash_size.yfilter != YFilter.not_set or
                                            self.bootflash_type.yfilter != YFilter.not_set or
                                            self.image_name.yfilter != YFilter.not_set or
                                            self.major_version.yfilter != YFilter.not_set or
                                            self.micro_image_version.yfilter != YFilter.not_set or
                                            self.minor_version.yfilter != YFilter.not_set or
                                            self.platform_specific.yfilter != YFilter.not_set or
                                            self.platform_type.yfilter != YFilter.not_set or
                                            self.release_type.yfilter != YFilter.not_set or
                                            self.sector_size.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "bootflash-information" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.bootflash_size.is_set or self.bootflash_size.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.bootflash_size.get_name_leafdata())
                                        if (self.bootflash_type.is_set or self.bootflash_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.bootflash_type.get_name_leafdata())
                                        if (self.image_name.is_set or self.image_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.image_name.get_name_leafdata())
                                        if (self.major_version.is_set or self.major_version.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.major_version.get_name_leafdata())
                                        if (self.micro_image_version.is_set or self.micro_image_version.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.micro_image_version.get_name_leafdata())
                                        if (self.minor_version.is_set or self.minor_version.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.minor_version.get_name_leafdata())
                                        if (self.platform_specific.is_set or self.platform_specific.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.platform_specific.get_name_leafdata())
                                        if (self.platform_type.is_set or self.platform_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.platform_type.get_name_leafdata())
                                        if (self.release_type.is_set or self.release_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.release_type.get_name_leafdata())
                                        if (self.sector_size.is_set or self.sector_size.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sector_size.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "bootflash-size" or name == "bootflash-type" or name == "image-name" or name == "major-version" or name == "micro-image-version" or name == "minor-version" or name == "platform-specific" or name == "platform-type" or name == "release-type" or name == "sector-size"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "bootflash-size"):
                                            self.bootflash_size = value
                                            self.bootflash_size.value_namespace = name_space
                                            self.bootflash_size.value_namespace_prefix = name_space_prefix
                                        if(value_path == "bootflash-type"):
                                            self.bootflash_type = value
                                            self.bootflash_type.value_namespace = name_space
                                            self.bootflash_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "image-name"):
                                            self.image_name = value
                                            self.image_name.value_namespace = name_space
                                            self.image_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "major-version"):
                                            self.major_version = value
                                            self.major_version.value_namespace = name_space
                                            self.major_version.value_namespace_prefix = name_space_prefix
                                        if(value_path == "micro-image-version"):
                                            self.micro_image_version = value
                                            self.micro_image_version.value_namespace = name_space
                                            self.micro_image_version.value_namespace_prefix = name_space_prefix
                                        if(value_path == "minor-version"):
                                            self.minor_version = value
                                            self.minor_version.value_namespace = name_space
                                            self.minor_version.value_namespace_prefix = name_space_prefix
                                        if(value_path == "platform-specific"):
                                            self.platform_specific = value
                                            self.platform_specific.value_namespace = name_space
                                            self.platform_specific.value_namespace_prefix = name_space_prefix
                                        if(value_path == "platform-type"):
                                            self.platform_type = value
                                            self.platform_type.value_namespace = name_space
                                            self.platform_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "release-type"):
                                            self.release_type = value
                                            self.release_type.value_namespace = name_space
                                            self.release_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sector-size"):
                                            self.sector_size = value
                                            self.sector_size.value_namespace = name_space
                                            self.sector_size.value_namespace_prefix = name_space_prefix


                                class DiskInformation(Entity):
                                    """
                                    DiskInformation
                                    
                                    .. attribute:: disk_name
                                    
                                    	(Deprecated) Disk name
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: disk_size
                                    
                                    	(Deprecated) Disk size in mega\-bytes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: megabyte
                                    
                                    .. attribute:: disks
                                    
                                    	Disk attributes
                                    	**type**\: list of    :py:class:`Disks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation.Disks>`
                                    
                                    .. attribute:: sector_size
                                    
                                    	(Deprecated) Disk sector size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: byte
                                    
                                    

                                    """

                                    _prefix = 'plat-chas-invmgr-oper'
                                    _revision = '2015-01-07'

                                    def __init__(self):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation, self).__init__()

                                        self.yang_name = "disk-information"
                                        self.yang_parent_name = "hardware-information"

                                        self.disk_name = YLeaf(YType.str, "disk-name")

                                        self.disk_size = YLeaf(YType.uint32, "disk-size")

                                        self.sector_size = YLeaf(YType.uint32, "sector-size")

                                        self.disks = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("disk_name",
                                                        "disk_size",
                                                        "sector_size") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation, self).__setattr__(name, value)


                                    class Disks(Entity):
                                        """
                                        Disk attributes
                                        
                                        .. attribute:: disk_name
                                        
                                        	Disk name
                                        	**type**\:  str
                                        
                                        	**length:** 0..255
                                        
                                        .. attribute:: disk_size
                                        
                                        	Disk size in mega\-bytes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**units**\: megabyte
                                        
                                        .. attribute:: sector_size
                                        
                                        	Disk sector size in bytes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**units**\: byte
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation.Disks, self).__init__()

                                            self.yang_name = "disks"
                                            self.yang_parent_name = "disk-information"

                                            self.disk_name = YLeaf(YType.str, "disk-name")

                                            self.disk_size = YLeaf(YType.uint32, "disk-size")

                                            self.sector_size = YLeaf(YType.uint32, "sector-size")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("disk_name",
                                                            "disk_size",
                                                            "sector_size") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation.Disks, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation.Disks, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.disk_name.is_set or
                                                self.disk_size.is_set or
                                                self.sector_size.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.disk_name.yfilter != YFilter.not_set or
                                                self.disk_size.yfilter != YFilter.not_set or
                                                self.sector_size.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "disks" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.disk_name.is_set or self.disk_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.disk_name.get_name_leafdata())
                                            if (self.disk_size.is_set or self.disk_size.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.disk_size.get_name_leafdata())
                                            if (self.sector_size.is_set or self.sector_size.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.sector_size.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "disk-name" or name == "disk-size" or name == "sector-size"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "disk-name"):
                                                self.disk_name = value
                                                self.disk_name.value_namespace = name_space
                                                self.disk_name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "disk-size"):
                                                self.disk_size = value
                                                self.disk_size.value_namespace = name_space
                                                self.disk_size.value_namespace_prefix = name_space_prefix
                                            if(value_path == "sector-size"):
                                                self.sector_size = value
                                                self.sector_size.value_namespace = name_space
                                                self.sector_size.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        for c in self.disks:
                                            if (c.has_data()):
                                                return True
                                        return (
                                            self.disk_name.is_set or
                                            self.disk_size.is_set or
                                            self.sector_size.is_set)

                                    def has_operation(self):
                                        for c in self.disks:
                                            if (c.has_operation()):
                                                return True
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.disk_name.yfilter != YFilter.not_set or
                                            self.disk_size.yfilter != YFilter.not_set or
                                            self.sector_size.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "disk-information" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.disk_name.is_set or self.disk_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.disk_name.get_name_leafdata())
                                        if (self.disk_size.is_set or self.disk_size.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.disk_size.get_name_leafdata())
                                        if (self.sector_size.is_set or self.sector_size.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.sector_size.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "disks"):
                                            for c in self.disks:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation.Disks()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.disks.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "disks" or name == "disk-name" or name == "disk-size" or name == "sector-size"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "disk-name"):
                                            self.disk_name = value
                                            self.disk_name.value_namespace = name_space
                                            self.disk_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "disk-size"):
                                            self.disk_size = value
                                            self.disk_size.value_namespace = name_space
                                            self.disk_size.value_namespace_prefix = name_space_prefix
                                        if(value_path == "sector-size"):
                                            self.sector_size = value
                                            self.sector_size.value_namespace = name_space
                                            self.sector_size.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        (self.bootflash_information is not None and self.bootflash_information.has_data()) or
                                        (self.disk_information is not None and self.disk_information.has_data()) or
                                        (self.motherboard_information is not None and self.motherboard_information.has_data()) or
                                        (self.processor_information is not None and self.processor_information.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.bootflash_information is not None and self.bootflash_information.has_operation()) or
                                        (self.disk_information is not None and self.disk_information.has_operation()) or
                                        (self.motherboard_information is not None and self.motherboard_information.has_operation()) or
                                        (self.processor_information is not None and self.processor_information.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "hardware-information" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "bootflash-information"):
                                        if (self.bootflash_information is None):
                                            self.bootflash_information = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.BootflashInformation()
                                            self.bootflash_information.parent = self
                                            self._children_name_map["bootflash_information"] = "bootflash-information"
                                        return self.bootflash_information

                                    if (child_yang_name == "disk-information"):
                                        if (self.disk_information is None):
                                            self.disk_information = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.DiskInformation()
                                            self.disk_information.parent = self
                                            self._children_name_map["disk_information"] = "disk-information"
                                        return self.disk_information

                                    if (child_yang_name == "motherboard-information"):
                                        if (self.motherboard_information is None):
                                            self.motherboard_information = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.MotherboardInformation()
                                            self.motherboard_information.parent = self
                                            self._children_name_map["motherboard_information"] = "motherboard-information"
                                        return self.motherboard_information

                                    if (child_yang_name == "processor-information"):
                                        if (self.processor_information is None):
                                            self.processor_information = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation.ProcessorInformation()
                                            self.processor_information.parent = self
                                            self._children_name_map["processor_information"] = "processor-information"
                                        return self.processor_information

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "bootflash-information" or name == "disk-information" or name == "motherboard-information" or name == "processor-information"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class SubSlots(Entity):
                                """
                                Table of subslots
                                
                                .. attribute:: sub_slot
                                
                                	Subslot number
                                	**type**\: list of    :py:class:`SubSlot <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot>`
                                
                                

                                """

                                _prefix = 'plat-chas-invmgr-oper'
                                _revision = '2015-01-07'

                                def __init__(self):
                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots, self).__init__()

                                    self.yang_name = "sub-slots"
                                    self.yang_parent_name = "card"

                                    self.sub_slot = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots, self).__setattr__(name, value)


                                class SubSlot(Entity):
                                    """
                                    Subslot number
                                    
                                    .. attribute:: name  <key>
                                    
                                    	Subslot name
                                    	**type**\:  str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: attributes
                                    
                                    	Attributes
                                    	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes>`
                                    
                                    .. attribute:: module
                                    
                                    	Module of a subslot
                                    	**type**\:   :py:class:`Module <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module>`
                                    
                                    

                                    """

                                    _prefix = 'plat-chas-invmgr-oper'
                                    _revision = '2015-01-07'

                                    def __init__(self):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot, self).__init__()

                                        self.yang_name = "sub-slot"
                                        self.yang_parent_name = "sub-slots"

                                        self.name = YLeaf(YType.str, "name")

                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes()
                                        self.attributes.parent = self
                                        self._children_name_map["attributes"] = "attributes"
                                        self._children_yang_names.add("attributes")

                                        self.module = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module()
                                        self.module.parent = self
                                        self._children_name_map["module"] = "module"
                                        self._children_yang_names.add("module")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("name") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot, self).__setattr__(name, value)


                                    class Module(Entity):
                                        """
                                        Module of a subslot
                                        
                                        .. attribute:: attributes
                                        
                                        	Attributes
                                        	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes>`
                                        
                                        .. attribute:: port_slots
                                        
                                        	Table of port slots
                                        	**type**\:   :py:class:`PortSlots <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots>`
                                        
                                        .. attribute:: sensors
                                        
                                        	Table of sensors
                                        	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors>`
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module, self).__init__()

                                            self.yang_name = "module"
                                            self.yang_parent_name = "sub-slot"

                                            self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes()
                                            self.attributes.parent = self
                                            self._children_name_map["attributes"] = "attributes"
                                            self._children_yang_names.add("attributes")

                                            self.port_slots = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots()
                                            self.port_slots.parent = self
                                            self._children_name_map["port_slots"] = "port-slots"
                                            self._children_yang_names.add("port-slots")

                                            self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors()
                                            self.sensors.parent = self
                                            self._children_name_map["sensors"] = "sensors"
                                            self._children_yang_names.add("sensors")


                                        class PortSlots(Entity):
                                            """
                                            Table of port slots
                                            
                                            .. attribute:: port_slot
                                            
                                            	Port slot number
                                            	**type**\: list of    :py:class:`PortSlot <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot>`
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots, self).__init__()

                                                self.yang_name = "port-slots"
                                                self.yang_parent_name = "module"

                                                self.port_slot = YList(self)

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in () and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots, self).__setattr__(name, value)


                                            class PortSlot(Entity):
                                                """
                                                Port slot number
                                                
                                                .. attribute:: name  <key>
                                                
                                                	Port slot name
                                                	**type**\:  str
                                                
                                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                                
                                                .. attribute:: attributes
                                                
                                                	Attributes
                                                	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes>`
                                                
                                                .. attribute:: portses
                                                
                                                	Table of spirit port slots
                                                	**type**\:   :py:class:`Portses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses>`
                                                
                                                .. attribute:: sensors
                                                
                                                	Table of sensors
                                                	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors>`
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot, self).__init__()

                                                    self.yang_name = "port-slot"
                                                    self.yang_parent_name = "port-slots"

                                                    self.name = YLeaf(YType.str, "name")

                                                    self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes()
                                                    self.attributes.parent = self
                                                    self._children_name_map["attributes"] = "attributes"
                                                    self._children_yang_names.add("attributes")

                                                    self.portses = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses()
                                                    self.portses.parent = self
                                                    self._children_name_map["portses"] = "portses"
                                                    self._children_yang_names.add("portses")

                                                    self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors()
                                                    self.sensors.parent = self
                                                    self._children_name_map["sensors"] = "sensors"
                                                    self._children_yang_names.add("sensors")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("name") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot, self).__setattr__(name, value)


                                                class Portses(Entity):
                                                    """
                                                    Table of spirit port slots
                                                    
                                                    .. attribute:: ports
                                                    
                                                    	Port number
                                                    	**type**\: list of    :py:class:`Ports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses, self).__init__()

                                                        self.yang_name = "portses"
                                                        self.yang_parent_name = "port-slot"

                                                        self.ports = YList(self)

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in () and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses, self).__setattr__(name, value)


                                                    class Ports(Entity):
                                                        """
                                                        Port number
                                                        
                                                        .. attribute:: name  <key>
                                                        
                                                        	Port name
                                                        	**type**\:  str
                                                        
                                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                                        
                                                        .. attribute:: attributes
                                                        
                                                        	Attributes
                                                        	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes>`
                                                        
                                                        .. attribute:: hw_components
                                                        
                                                        	Table of  HW components 
                                                        	**type**\:   :py:class:`HwComponents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents>`
                                                        
                                                        .. attribute:: sensors
                                                        
                                                        	Table of sensors
                                                        	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors>`
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports, self).__init__()

                                                            self.yang_name = "ports"
                                                            self.yang_parent_name = "portses"

                                                            self.name = YLeaf(YType.str, "name")

                                                            self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes()
                                                            self.attributes.parent = self
                                                            self._children_name_map["attributes"] = "attributes"
                                                            self._children_yang_names.add("attributes")

                                                            self.hw_components = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents()
                                                            self.hw_components.parent = self
                                                            self._children_name_map["hw_components"] = "hw-components"
                                                            self._children_yang_names.add("hw-components")

                                                            self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors()
                                                            self.sensors.parent = self
                                                            self._children_name_map["sensors"] = "sensors"
                                                            self._children_yang_names.add("sensors")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("name") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports, self).__setattr__(name, value)


                                                        class HwComponents(Entity):
                                                            """
                                                            Table of  HW components 
                                                            
                                                            .. attribute:: hw_component
                                                            
                                                            	HW component number
                                                            	**type**\: list of    :py:class:`HwComponent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent>`
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents, self).__init__()

                                                                self.yang_name = "hw-components"
                                                                self.yang_parent_name = "ports"

                                                                self.hw_component = YList(self)

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in () and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents, self).__setattr__(name, value)


                                                            class HwComponent(Entity):
                                                                """
                                                                HW component number
                                                                
                                                                .. attribute:: name  <key>
                                                                
                                                                	HW component name
                                                                	**type**\:  str
                                                                
                                                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                                                
                                                                .. attribute:: attributes
                                                                
                                                                	Attributes
                                                                	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes>`
                                                                
                                                                .. attribute:: sensors
                                                                
                                                                	Table of sensors
                                                                	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors>`
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent, self).__init__()

                                                                    self.yang_name = "hw-component"
                                                                    self.yang_parent_name = "hw-components"

                                                                    self.name = YLeaf(YType.str, "name")

                                                                    self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes()
                                                                    self.attributes.parent = self
                                                                    self._children_name_map["attributes"] = "attributes"
                                                                    self._children_yang_names.add("attributes")

                                                                    self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors()
                                                                    self.sensors.parent = self
                                                                    self._children_name_map["sensors"] = "sensors"
                                                                    self._children_yang_names.add("sensors")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("name") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent, self).__setattr__(name, value)


                                                                class Sensors(Entity):
                                                                    """
                                                                    Table of sensors
                                                                    
                                                                    .. attribute:: sensor
                                                                    
                                                                    	Sensor number
                                                                    	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor>`
                                                                    
                                                                    

                                                                    """

                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                    _revision = '2015-01-07'

                                                                    def __init__(self):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors, self).__init__()

                                                                        self.yang_name = "sensors"
                                                                        self.yang_parent_name = "hw-component"

                                                                        self.sensor = YList(self)

                                                                    def __setattr__(self, name, value):
                                                                        self._check_monkey_patching_error(name, value)
                                                                        with _handle_type_error():
                                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                    "Please use list append or extend method."
                                                                                                    .format(value))
                                                                            if isinstance(value, Enum.YLeaf):
                                                                                value = value.name
                                                                            if name in () and name in self.__dict__:
                                                                                if isinstance(value, YLeaf):
                                                                                    self.__dict__[name].set(value.get())
                                                                                elif isinstance(value, YLeafList):
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors, self).__setattr__(name, value)
                                                                                else:
                                                                                    self.__dict__[name].set(value)
                                                                            else:
                                                                                if hasattr(value, "parent") and name != "parent":
                                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                        value.parent = self
                                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                        value.parent = self
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors, self).__setattr__(name, value)


                                                                    class Sensor(Entity):
                                                                        """
                                                                        Sensor number
                                                                        
                                                                        .. attribute:: name  <key>
                                                                        
                                                                        	Sensor name
                                                                        	**type**\:  str
                                                                        
                                                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                                                        
                                                                        .. attribute:: attributes
                                                                        
                                                                        	Attributes
                                                                        	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes>`
                                                                        
                                                                        

                                                                        """

                                                                        _prefix = 'plat-chas-invmgr-oper'
                                                                        _revision = '2015-01-07'

                                                                        def __init__(self):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor, self).__init__()

                                                                            self.yang_name = "sensor"
                                                                            self.yang_parent_name = "sensors"

                                                                            self.name = YLeaf(YType.str, "name")

                                                                            self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes()
                                                                            self.attributes.parent = self
                                                                            self._children_name_map["attributes"] = "attributes"
                                                                            self._children_yang_names.add("attributes")

                                                                        def __setattr__(self, name, value):
                                                                            self._check_monkey_patching_error(name, value)
                                                                            with _handle_type_error():
                                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                        "Please use list append or extend method."
                                                                                                        .format(value))
                                                                                if isinstance(value, Enum.YLeaf):
                                                                                    value = value.name
                                                                                if name in ("name") and name in self.__dict__:
                                                                                    if isinstance(value, YLeaf):
                                                                                        self.__dict__[name].set(value.get())
                                                                                    elif isinstance(value, YLeafList):
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor, self).__setattr__(name, value)
                                                                                    else:
                                                                                        self.__dict__[name].set(value)
                                                                                else:
                                                                                    if hasattr(value, "parent") and name != "parent":
                                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                            value.parent = self
                                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                            value.parent = self
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor, self).__setattr__(name, value)


                                                                        class Attributes(Entity):
                                                                            """
                                                                            Attributes
                                                                            
                                                                            .. attribute:: basic_info
                                                                            
                                                                            	Entity attributes
                                                                            	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo>`
                                                                            
                                                                            .. attribute:: fru_info
                                                                            
                                                                            	Field Replaceable Unit (FRU) attributes
                                                                            	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo>`
                                                                            
                                                                            

                                                                            """

                                                                            _prefix = 'plat-chas-invmgr-oper'
                                                                            _revision = '2015-01-07'

                                                                            def __init__(self):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes, self).__init__()

                                                                                self.yang_name = "attributes"
                                                                                self.yang_parent_name = "sensor"

                                                                                self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo()
                                                                                self.basic_info.parent = self
                                                                                self._children_name_map["basic_info"] = "basic-info"
                                                                                self._children_yang_names.add("basic-info")

                                                                                self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo()
                                                                                self.fru_info.parent = self
                                                                                self._children_name_map["fru_info"] = "fru-info"
                                                                                self._children_yang_names.add("fru-info")


                                                                            class BasicInfo(Entity):
                                                                                """
                                                                                Entity attributes
                                                                                
                                                                                .. attribute:: description
                                                                                
                                                                                	describes in user\-readable terms                 what the entity in question does
                                                                                	**type**\:  str
                                                                                
                                                                                	**length:** 0..255
                                                                                
                                                                                .. attribute:: firmware_revision
                                                                                
                                                                                	firmware revision string
                                                                                	**type**\:  str
                                                                                
                                                                                	**length:** 0..255
                                                                                
                                                                                .. attribute:: hardware_revision
                                                                                
                                                                                	hw revision string
                                                                                	**type**\:  str
                                                                                
                                                                                	**length:** 0..255
                                                                                
                                                                                .. attribute:: is_field_replaceable_unit
                                                                                
                                                                                	1 if Field Replaceable Unit 0, if not
                                                                                	**type**\:  bool
                                                                                
                                                                                .. attribute:: model_name
                                                                                
                                                                                	model name
                                                                                	**type**\:  str
                                                                                
                                                                                	**length:** 0..255
                                                                                
                                                                                .. attribute:: name
                                                                                
                                                                                	name string for the entity
                                                                                	**type**\:  str
                                                                                
                                                                                	**length:** 0..255
                                                                                
                                                                                .. attribute:: serial_number
                                                                                
                                                                                	serial number
                                                                                	**type**\:  str
                                                                                
                                                                                	**length:** 0..255
                                                                                
                                                                                .. attribute:: software_revision
                                                                                
                                                                                	software revision string
                                                                                	**type**\:  str
                                                                                
                                                                                	**length:** 0..255
                                                                                
                                                                                .. attribute:: vendor_type
                                                                                
                                                                                	maps to the vendor OID string
                                                                                	**type**\:  str
                                                                                
                                                                                	**length:** 0..255
                                                                                
                                                                                

                                                                                """

                                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                                _revision = '2015-01-07'

                                                                                def __init__(self):
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo, self).__init__()

                                                                                    self.yang_name = "basic-info"
                                                                                    self.yang_parent_name = "attributes"

                                                                                    self.description = YLeaf(YType.str, "description")

                                                                                    self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                                                    self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                                                    self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                                                    self.model_name = YLeaf(YType.str, "model-name")

                                                                                    self.name = YLeaf(YType.str, "name")

                                                                                    self.serial_number = YLeaf(YType.str, "serial-number")

                                                                                    self.software_revision = YLeaf(YType.str, "software-revision")

                                                                                    self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                                                def __setattr__(self, name, value):
                                                                                    self._check_monkey_patching_error(name, value)
                                                                                    with _handle_type_error():
                                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                                "Please use list append or extend method."
                                                                                                                .format(value))
                                                                                        if isinstance(value, Enum.YLeaf):
                                                                                            value = value.name
                                                                                        if name in ("description",
                                                                                                    "firmware_revision",
                                                                                                    "hardware_revision",
                                                                                                    "is_field_replaceable_unit",
                                                                                                    "model_name",
                                                                                                    "name",
                                                                                                    "serial_number",
                                                                                                    "software_revision",
                                                                                                    "vendor_type") and name in self.__dict__:
                                                                                            if isinstance(value, YLeaf):
                                                                                                self.__dict__[name].set(value.get())
                                                                                            elif isinstance(value, YLeafList):
                                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                                            else:
                                                                                                self.__dict__[name].set(value)
                                                                                        else:
                                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                                    value.parent = self
                                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                                    value.parent = self
                                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)

                                                                                def has_data(self):
                                                                                    return (
                                                                                        self.description.is_set or
                                                                                        self.firmware_revision.is_set or
                                                                                        self.hardware_revision.is_set or
                                                                                        self.is_field_replaceable_unit.is_set or
                                                                                        self.model_name.is_set or
                                                                                        self.name.is_set or
                                                                                        self.serial_number.is_set or
                                                                                        self.software_revision.is_set or
                                                                                        self.vendor_type.is_set)

                                                                                def has_operation(self):
                                                                                    return (
                                                                                        self.yfilter != YFilter.not_set or
                                                                                        self.description.yfilter != YFilter.not_set or
                                                                                        self.firmware_revision.yfilter != YFilter.not_set or
                                                                                        self.hardware_revision.yfilter != YFilter.not_set or
                                                                                        self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                                        self.model_name.yfilter != YFilter.not_set or
                                                                                        self.name.yfilter != YFilter.not_set or
                                                                                        self.serial_number.yfilter != YFilter.not_set or
                                                                                        self.software_revision.yfilter != YFilter.not_set or
                                                                                        self.vendor_type.yfilter != YFilter.not_set)

                                                                                def get_segment_path(self):
                                                                                    path_buffer = ""
                                                                                    path_buffer = "basic-info" + path_buffer

                                                                                    return path_buffer

                                                                                def get_entity_path(self, ancestor):
                                                                                    path_buffer = ""
                                                                                    if (ancestor is None):
                                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                                    else:
                                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                                    leaf_name_data = LeafDataList()
                                                                                    if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.description.get_name_leafdata())
                                                                                    if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                                                    if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                                                    if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                                                    if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.model_name.get_name_leafdata())
                                                                                    if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.name.get_name_leafdata())
                                                                                    if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                                                    if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                                                    if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                                    return entity_path

                                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                                    if child is not None:
                                                                                        return child

                                                                                    return None

                                                                                def has_leaf_or_child_of_name(self, name):
                                                                                    if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                                                        return True
                                                                                    return False

                                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                                    if(value_path == "description"):
                                                                                        self.description = value
                                                                                        self.description.value_namespace = name_space
                                                                                        self.description.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "firmware-revision"):
                                                                                        self.firmware_revision = value
                                                                                        self.firmware_revision.value_namespace = name_space
                                                                                        self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "hardware-revision"):
                                                                                        self.hardware_revision = value
                                                                                        self.hardware_revision.value_namespace = name_space
                                                                                        self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "is-field-replaceable-unit"):
                                                                                        self.is_field_replaceable_unit = value
                                                                                        self.is_field_replaceable_unit.value_namespace = name_space
                                                                                        self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "model-name"):
                                                                                        self.model_name = value
                                                                                        self.model_name.value_namespace = name_space
                                                                                        self.model_name.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "name"):
                                                                                        self.name = value
                                                                                        self.name.value_namespace = name_space
                                                                                        self.name.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "serial-number"):
                                                                                        self.serial_number = value
                                                                                        self.serial_number.value_namespace = name_space
                                                                                        self.serial_number.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "software-revision"):
                                                                                        self.software_revision = value
                                                                                        self.software_revision.value_namespace = name_space
                                                                                        self.software_revision.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "vendor-type"):
                                                                                        self.vendor_type = value
                                                                                        self.vendor_type.value_namespace = name_space
                                                                                        self.vendor_type.value_namespace_prefix = name_space_prefix


                                                                            class FruInfo(Entity):
                                                                                """
                                                                                Field Replaceable Unit (FRU) attributes
                                                                                
                                                                                .. attribute:: last_operational_state_change
                                                                                
                                                                                	Time operational state is   last changed
                                                                                	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange>`
                                                                                
                                                                                .. attribute:: module_administrative_state
                                                                                
                                                                                	Administrative    state
                                                                                	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                                                
                                                                                .. attribute:: module_monitor_state
                                                                                
                                                                                	Monitor state
                                                                                	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                                                
                                                                                .. attribute:: module_operational_state
                                                                                
                                                                                	Operation state
                                                                                	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                                                
                                                                                .. attribute:: module_power_administrative_state
                                                                                
                                                                                	Power administrative state
                                                                                	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                                                
                                                                                .. attribute:: module_reset_reason
                                                                                
                                                                                	Reset reason
                                                                                	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                                                
                                                                                .. attribute:: module_up_time
                                                                                
                                                                                	Module up time
                                                                                	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime>`
                                                                                
                                                                                

                                                                                """

                                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                                _revision = '2015-01-07'

                                                                                def __init__(self):
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo, self).__init__()

                                                                                    self.yang_name = "fru-info"
                                                                                    self.yang_parent_name = "attributes"

                                                                                    self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                                                    self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                                                    self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                                                    self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                                                    self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                                                    self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                                    self.last_operational_state_change.parent = self
                                                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                                    self._children_yang_names.add("last-operational-state-change")

                                                                                    self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                                    self.module_up_time.parent = self
                                                                                    self._children_name_map["module_up_time"] = "module-up-time"
                                                                                    self._children_yang_names.add("module-up-time")

                                                                                def __setattr__(self, name, value):
                                                                                    self._check_monkey_patching_error(name, value)
                                                                                    with _handle_type_error():
                                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                                "Please use list append or extend method."
                                                                                                                .format(value))
                                                                                        if isinstance(value, Enum.YLeaf):
                                                                                            value = value.name
                                                                                        if name in ("module_administrative_state",
                                                                                                    "module_monitor_state",
                                                                                                    "module_operational_state",
                                                                                                    "module_power_administrative_state",
                                                                                                    "module_reset_reason") and name in self.__dict__:
                                                                                            if isinstance(value, YLeaf):
                                                                                                self.__dict__[name].set(value.get())
                                                                                            elif isinstance(value, YLeafList):
                                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)
                                                                                            else:
                                                                                                self.__dict__[name].set(value)
                                                                                        else:
                                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                                    value.parent = self
                                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                                    value.parent = self
                                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)


                                                                                class LastOperationalStateChange(Entity):
                                                                                    """
                                                                                    Time operational state is   last changed
                                                                                    
                                                                                    .. attribute:: time_in_nano_seconds
                                                                                    
                                                                                    	Time Value in Nano\-seconds
                                                                                    	**type**\:  int
                                                                                    
                                                                                    	**range:** \-2147483648..2147483647
                                                                                    
                                                                                    	**units**\: nanosecond
                                                                                    
                                                                                    .. attribute:: time_in_seconds
                                                                                    
                                                                                    	Time Value in Seconds
                                                                                    	**type**\:  int
                                                                                    
                                                                                    	**range:** \-2147483648..2147483647
                                                                                    
                                                                                    	**units**\: second
                                                                                    
                                                                                    

                                                                                    """

                                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                                    _revision = '2015-01-07'

                                                                                    def __init__(self):
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                                        self.yang_name = "last-operational-state-change"
                                                                                        self.yang_parent_name = "fru-info"

                                                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                                    def __setattr__(self, name, value):
                                                                                        self._check_monkey_patching_error(name, value)
                                                                                        with _handle_type_error():
                                                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                                    "Please use list append or extend method."
                                                                                                                    .format(value))
                                                                                            if isinstance(value, Enum.YLeaf):
                                                                                                value = value.name
                                                                                            if name in ("time_in_nano_seconds",
                                                                                                        "time_in_seconds") and name in self.__dict__:
                                                                                                if isinstance(value, YLeaf):
                                                                                                    self.__dict__[name].set(value.get())
                                                                                                elif isinstance(value, YLeafList):
                                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                                                else:
                                                                                                    self.__dict__[name].set(value)
                                                                                            else:
                                                                                                if hasattr(value, "parent") and name != "parent":
                                                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                                        value.parent = self
                                                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                                        value.parent = self
                                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                                                    def has_data(self):
                                                                                        return (
                                                                                            self.time_in_nano_seconds.is_set or
                                                                                            self.time_in_seconds.is_set)

                                                                                    def has_operation(self):
                                                                                        return (
                                                                                            self.yfilter != YFilter.not_set or
                                                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                                                    def get_segment_path(self):
                                                                                        path_buffer = ""
                                                                                        path_buffer = "last-operational-state-change" + path_buffer

                                                                                        return path_buffer

                                                                                    def get_entity_path(self, ancestor):
                                                                                        path_buffer = ""
                                                                                        if (ancestor is None):
                                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                                        else:
                                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                                        leaf_name_data = LeafDataList()
                                                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                                        return entity_path

                                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                                        if child is not None:
                                                                                            return child

                                                                                        return None

                                                                                    def has_leaf_or_child_of_name(self, name):
                                                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                                            return True
                                                                                        return False

                                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                                        if(value_path == "time-in-nano-seconds"):
                                                                                            self.time_in_nano_seconds = value
                                                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                                        if(value_path == "time-in-seconds"):
                                                                                            self.time_in_seconds = value
                                                                                            self.time_in_seconds.value_namespace = name_space
                                                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                                                class ModuleUpTime(Entity):
                                                                                    """
                                                                                    Module up time
                                                                                    
                                                                                    .. attribute:: time_in_nano_seconds
                                                                                    
                                                                                    	Time Value in Nano\-seconds
                                                                                    	**type**\:  int
                                                                                    
                                                                                    	**range:** \-2147483648..2147483647
                                                                                    
                                                                                    	**units**\: nanosecond
                                                                                    
                                                                                    .. attribute:: time_in_seconds
                                                                                    
                                                                                    	Time Value in Seconds
                                                                                    	**type**\:  int
                                                                                    
                                                                                    	**range:** \-2147483648..2147483647
                                                                                    
                                                                                    	**units**\: second
                                                                                    
                                                                                    

                                                                                    """

                                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                                    _revision = '2015-01-07'

                                                                                    def __init__(self):
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                                                        self.yang_name = "module-up-time"
                                                                                        self.yang_parent_name = "fru-info"

                                                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                                    def __setattr__(self, name, value):
                                                                                        self._check_monkey_patching_error(name, value)
                                                                                        with _handle_type_error():
                                                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                                    "Please use list append or extend method."
                                                                                                                    .format(value))
                                                                                            if isinstance(value, Enum.YLeaf):
                                                                                                value = value.name
                                                                                            if name in ("time_in_nano_seconds",
                                                                                                        "time_in_seconds") and name in self.__dict__:
                                                                                                if isinstance(value, YLeaf):
                                                                                                    self.__dict__[name].set(value.get())
                                                                                                elif isinstance(value, YLeafList):
                                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                                                else:
                                                                                                    self.__dict__[name].set(value)
                                                                                            else:
                                                                                                if hasattr(value, "parent") and name != "parent":
                                                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                                        value.parent = self
                                                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                                        value.parent = self
                                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                                                    def has_data(self):
                                                                                        return (
                                                                                            self.time_in_nano_seconds.is_set or
                                                                                            self.time_in_seconds.is_set)

                                                                                    def has_operation(self):
                                                                                        return (
                                                                                            self.yfilter != YFilter.not_set or
                                                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                                                    def get_segment_path(self):
                                                                                        path_buffer = ""
                                                                                        path_buffer = "module-up-time" + path_buffer

                                                                                        return path_buffer

                                                                                    def get_entity_path(self, ancestor):
                                                                                        path_buffer = ""
                                                                                        if (ancestor is None):
                                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                                        else:
                                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                                        leaf_name_data = LeafDataList()
                                                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                                        return entity_path

                                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                                        if child is not None:
                                                                                            return child

                                                                                        return None

                                                                                    def has_leaf_or_child_of_name(self, name):
                                                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                                            return True
                                                                                        return False

                                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                                        if(value_path == "time-in-nano-seconds"):
                                                                                            self.time_in_nano_seconds = value
                                                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                                        if(value_path == "time-in-seconds"):
                                                                                            self.time_in_seconds = value
                                                                                            self.time_in_seconds.value_namespace = name_space
                                                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                                                def has_data(self):
                                                                                    return (
                                                                                        self.module_administrative_state.is_set or
                                                                                        self.module_monitor_state.is_set or
                                                                                        self.module_operational_state.is_set or
                                                                                        self.module_power_administrative_state.is_set or
                                                                                        self.module_reset_reason.is_set or
                                                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                                                        (self.module_up_time is not None and self.module_up_time.has_data()))

                                                                                def has_operation(self):
                                                                                    return (
                                                                                        self.yfilter != YFilter.not_set or
                                                                                        self.module_administrative_state.yfilter != YFilter.not_set or
                                                                                        self.module_monitor_state.yfilter != YFilter.not_set or
                                                                                        self.module_operational_state.yfilter != YFilter.not_set or
                                                                                        self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                                                        self.module_reset_reason.yfilter != YFilter.not_set or
                                                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                                                        (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                                                def get_segment_path(self):
                                                                                    path_buffer = ""
                                                                                    path_buffer = "fru-info" + path_buffer

                                                                                    return path_buffer

                                                                                def get_entity_path(self, ancestor):
                                                                                    path_buffer = ""
                                                                                    if (ancestor is None):
                                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                                    else:
                                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                                    leaf_name_data = LeafDataList()
                                                                                    if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                                                    if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                                                    if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                                                    if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                                                    if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                                                        leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                                    return entity_path

                                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                                    if child is not None:
                                                                                        return child

                                                                                    if (child_yang_name == "last-operational-state-change"):
                                                                                        if (self.last_operational_state_change is None):
                                                                                            self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                                            self.last_operational_state_change.parent = self
                                                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                                        return self.last_operational_state_change

                                                                                    if (child_yang_name == "module-up-time"):
                                                                                        if (self.module_up_time is None):
                                                                                            self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                                            self.module_up_time.parent = self
                                                                                            self._children_name_map["module_up_time"] = "module-up-time"
                                                                                        return self.module_up_time

                                                                                    return None

                                                                                def has_leaf_or_child_of_name(self, name):
                                                                                    if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                                                        return True
                                                                                    return False

                                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                                    if(value_path == "module-administrative-state"):
                                                                                        self.module_administrative_state = value
                                                                                        self.module_administrative_state.value_namespace = name_space
                                                                                        self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "module-monitor-state"):
                                                                                        self.module_monitor_state = value
                                                                                        self.module_monitor_state.value_namespace = name_space
                                                                                        self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "module-operational-state"):
                                                                                        self.module_operational_state = value
                                                                                        self.module_operational_state.value_namespace = name_space
                                                                                        self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "module-power-administrative-state"):
                                                                                        self.module_power_administrative_state = value
                                                                                        self.module_power_administrative_state.value_namespace = name_space
                                                                                        self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                                                    if(value_path == "module-reset-reason"):
                                                                                        self.module_reset_reason = value
                                                                                        self.module_reset_reason.value_namespace = name_space
                                                                                        self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                                            def has_data(self):
                                                                                return (
                                                                                    (self.basic_info is not None and self.basic_info.has_data()) or
                                                                                    (self.fru_info is not None and self.fru_info.has_data()))

                                                                            def has_operation(self):
                                                                                return (
                                                                                    self.yfilter != YFilter.not_set or
                                                                                    (self.basic_info is not None and self.basic_info.has_operation()) or
                                                                                    (self.fru_info is not None and self.fru_info.has_operation()))

                                                                            def get_segment_path(self):
                                                                                path_buffer = ""
                                                                                path_buffer = "attributes" + path_buffer

                                                                                return path_buffer

                                                                            def get_entity_path(self, ancestor):
                                                                                path_buffer = ""
                                                                                if (ancestor is None):
                                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                                else:
                                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                                leaf_name_data = LeafDataList()

                                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                                return entity_path

                                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                                if child is not None:
                                                                                    return child

                                                                                if (child_yang_name == "basic-info"):
                                                                                    if (self.basic_info is None):
                                                                                        self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo()
                                                                                        self.basic_info.parent = self
                                                                                        self._children_name_map["basic_info"] = "basic-info"
                                                                                    return self.basic_info

                                                                                if (child_yang_name == "fru-info"):
                                                                                    if (self.fru_info is None):
                                                                                        self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo()
                                                                                        self.fru_info.parent = self
                                                                                        self._children_name_map["fru_info"] = "fru-info"
                                                                                    return self.fru_info

                                                                                return None

                                                                            def has_leaf_or_child_of_name(self, name):
                                                                                if(name == "basic-info" or name == "fru-info"):
                                                                                    return True
                                                                                return False

                                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                                pass

                                                                        def has_data(self):
                                                                            return (
                                                                                self.name.is_set or
                                                                                (self.attributes is not None and self.attributes.has_data()))

                                                                        def has_operation(self):
                                                                            return (
                                                                                self.yfilter != YFilter.not_set or
                                                                                self.name.yfilter != YFilter.not_set or
                                                                                (self.attributes is not None and self.attributes.has_operation()))

                                                                        def get_segment_path(self):
                                                                            path_buffer = ""
                                                                            path_buffer = "sensor" + "[name='" + self.name.get() + "']" + path_buffer

                                                                            return path_buffer

                                                                        def get_entity_path(self, ancestor):
                                                                            path_buffer = ""
                                                                            if (ancestor is None):
                                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                            else:
                                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                            leaf_name_data = LeafDataList()
                                                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.name.get_name_leafdata())

                                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                            return entity_path

                                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                            if child is not None:
                                                                                return child

                                                                            if (child_yang_name == "attributes"):
                                                                                if (self.attributes is None):
                                                                                    self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes()
                                                                                    self.attributes.parent = self
                                                                                    self._children_name_map["attributes"] = "attributes"
                                                                                return self.attributes

                                                                            return None

                                                                        def has_leaf_or_child_of_name(self, name):
                                                                            if(name == "attributes" or name == "name"):
                                                                                return True
                                                                            return False

                                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                            if(value_path == "name"):
                                                                                self.name = value
                                                                                self.name.value_namespace = name_space
                                                                                self.name.value_namespace_prefix = name_space_prefix

                                                                    def has_data(self):
                                                                        for c in self.sensor:
                                                                            if (c.has_data()):
                                                                                return True
                                                                        return False

                                                                    def has_operation(self):
                                                                        for c in self.sensor:
                                                                            if (c.has_operation()):
                                                                                return True
                                                                        return self.yfilter != YFilter.not_set

                                                                    def get_segment_path(self):
                                                                        path_buffer = ""
                                                                        path_buffer = "sensors" + path_buffer

                                                                        return path_buffer

                                                                    def get_entity_path(self, ancestor):
                                                                        path_buffer = ""
                                                                        if (ancestor is None):
                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                        else:
                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                        leaf_name_data = LeafDataList()

                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                        return entity_path

                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                        if child is not None:
                                                                            return child

                                                                        if (child_yang_name == "sensor"):
                                                                            for c in self.sensor:
                                                                                segment = c.get_segment_path()
                                                                                if (segment_path == segment):
                                                                                    return c
                                                                            c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor()
                                                                            c.parent = self
                                                                            local_reference_key = "ydk::seg::%s" % segment_path
                                                                            self._local_refs[local_reference_key] = c
                                                                            self.sensor.append(c)
                                                                            return c

                                                                        return None

                                                                    def has_leaf_or_child_of_name(self, name):
                                                                        if(name == "sensor"):
                                                                            return True
                                                                        return False

                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                        pass


                                                                class Attributes(Entity):
                                                                    """
                                                                    Attributes
                                                                    
                                                                    .. attribute:: basic_info
                                                                    
                                                                    	Entity attributes
                                                                    	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo>`
                                                                    
                                                                    .. attribute:: fru_info
                                                                    
                                                                    	Field Replaceable Unit (FRU) attributes
                                                                    	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo>`
                                                                    
                                                                    

                                                                    """

                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                    _revision = '2015-01-07'

                                                                    def __init__(self):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes, self).__init__()

                                                                        self.yang_name = "attributes"
                                                                        self.yang_parent_name = "hw-component"

                                                                        self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo()
                                                                        self.basic_info.parent = self
                                                                        self._children_name_map["basic_info"] = "basic-info"
                                                                        self._children_yang_names.add("basic-info")

                                                                        self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo()
                                                                        self.fru_info.parent = self
                                                                        self._children_name_map["fru_info"] = "fru-info"
                                                                        self._children_yang_names.add("fru-info")


                                                                    class BasicInfo(Entity):
                                                                        """
                                                                        Entity attributes
                                                                        
                                                                        .. attribute:: description
                                                                        
                                                                        	describes in user\-readable terms                 what the entity in question does
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: firmware_revision
                                                                        
                                                                        	firmware revision string
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: hardware_revision
                                                                        
                                                                        	hw revision string
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: is_field_replaceable_unit
                                                                        
                                                                        	1 if Field Replaceable Unit 0, if not
                                                                        	**type**\:  bool
                                                                        
                                                                        .. attribute:: model_name
                                                                        
                                                                        	model name
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: name
                                                                        
                                                                        	name string for the entity
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: serial_number
                                                                        
                                                                        	serial number
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: software_revision
                                                                        
                                                                        	software revision string
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: vendor_type
                                                                        
                                                                        	maps to the vendor OID string
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        

                                                                        """

                                                                        _prefix = 'plat-chas-invmgr-oper'
                                                                        _revision = '2015-01-07'

                                                                        def __init__(self):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo, self).__init__()

                                                                            self.yang_name = "basic-info"
                                                                            self.yang_parent_name = "attributes"

                                                                            self.description = YLeaf(YType.str, "description")

                                                                            self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                                            self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                                            self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                                            self.model_name = YLeaf(YType.str, "model-name")

                                                                            self.name = YLeaf(YType.str, "name")

                                                                            self.serial_number = YLeaf(YType.str, "serial-number")

                                                                            self.software_revision = YLeaf(YType.str, "software-revision")

                                                                            self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                                        def __setattr__(self, name, value):
                                                                            self._check_monkey_patching_error(name, value)
                                                                            with _handle_type_error():
                                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                        "Please use list append or extend method."
                                                                                                        .format(value))
                                                                                if isinstance(value, Enum.YLeaf):
                                                                                    value = value.name
                                                                                if name in ("description",
                                                                                            "firmware_revision",
                                                                                            "hardware_revision",
                                                                                            "is_field_replaceable_unit",
                                                                                            "model_name",
                                                                                            "name",
                                                                                            "serial_number",
                                                                                            "software_revision",
                                                                                            "vendor_type") and name in self.__dict__:
                                                                                    if isinstance(value, YLeaf):
                                                                                        self.__dict__[name].set(value.get())
                                                                                    elif isinstance(value, YLeafList):
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                                    else:
                                                                                        self.__dict__[name].set(value)
                                                                                else:
                                                                                    if hasattr(value, "parent") and name != "parent":
                                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                            value.parent = self
                                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                            value.parent = self
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo, self).__setattr__(name, value)

                                                                        def has_data(self):
                                                                            return (
                                                                                self.description.is_set or
                                                                                self.firmware_revision.is_set or
                                                                                self.hardware_revision.is_set or
                                                                                self.is_field_replaceable_unit.is_set or
                                                                                self.model_name.is_set or
                                                                                self.name.is_set or
                                                                                self.serial_number.is_set or
                                                                                self.software_revision.is_set or
                                                                                self.vendor_type.is_set)

                                                                        def has_operation(self):
                                                                            return (
                                                                                self.yfilter != YFilter.not_set or
                                                                                self.description.yfilter != YFilter.not_set or
                                                                                self.firmware_revision.yfilter != YFilter.not_set or
                                                                                self.hardware_revision.yfilter != YFilter.not_set or
                                                                                self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                                self.model_name.yfilter != YFilter.not_set or
                                                                                self.name.yfilter != YFilter.not_set or
                                                                                self.serial_number.yfilter != YFilter.not_set or
                                                                                self.software_revision.yfilter != YFilter.not_set or
                                                                                self.vendor_type.yfilter != YFilter.not_set)

                                                                        def get_segment_path(self):
                                                                            path_buffer = ""
                                                                            path_buffer = "basic-info" + path_buffer

                                                                            return path_buffer

                                                                        def get_entity_path(self, ancestor):
                                                                            path_buffer = ""
                                                                            if (ancestor is None):
                                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                            else:
                                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                            leaf_name_data = LeafDataList()
                                                                            if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.description.get_name_leafdata())
                                                                            if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                                            if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                                            if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                                            if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.model_name.get_name_leafdata())
                                                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.name.get_name_leafdata())
                                                                            if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                                            if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                                            if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                            return entity_path

                                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                            if child is not None:
                                                                                return child

                                                                            return None

                                                                        def has_leaf_or_child_of_name(self, name):
                                                                            if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                                                return True
                                                                            return False

                                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                            if(value_path == "description"):
                                                                                self.description = value
                                                                                self.description.value_namespace = name_space
                                                                                self.description.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "firmware-revision"):
                                                                                self.firmware_revision = value
                                                                                self.firmware_revision.value_namespace = name_space
                                                                                self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "hardware-revision"):
                                                                                self.hardware_revision = value
                                                                                self.hardware_revision.value_namespace = name_space
                                                                                self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "is-field-replaceable-unit"):
                                                                                self.is_field_replaceable_unit = value
                                                                                self.is_field_replaceable_unit.value_namespace = name_space
                                                                                self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "model-name"):
                                                                                self.model_name = value
                                                                                self.model_name.value_namespace = name_space
                                                                                self.model_name.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "name"):
                                                                                self.name = value
                                                                                self.name.value_namespace = name_space
                                                                                self.name.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "serial-number"):
                                                                                self.serial_number = value
                                                                                self.serial_number.value_namespace = name_space
                                                                                self.serial_number.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "software-revision"):
                                                                                self.software_revision = value
                                                                                self.software_revision.value_namespace = name_space
                                                                                self.software_revision.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "vendor-type"):
                                                                                self.vendor_type = value
                                                                                self.vendor_type.value_namespace = name_space
                                                                                self.vendor_type.value_namespace_prefix = name_space_prefix


                                                                    class FruInfo(Entity):
                                                                        """
                                                                        Field Replaceable Unit (FRU) attributes
                                                                        
                                                                        .. attribute:: last_operational_state_change
                                                                        
                                                                        	Time operational state is   last changed
                                                                        	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange>`
                                                                        
                                                                        .. attribute:: module_administrative_state
                                                                        
                                                                        	Administrative    state
                                                                        	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                                        
                                                                        .. attribute:: module_monitor_state
                                                                        
                                                                        	Monitor state
                                                                        	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                                        
                                                                        .. attribute:: module_operational_state
                                                                        
                                                                        	Operation state
                                                                        	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                                        
                                                                        .. attribute:: module_power_administrative_state
                                                                        
                                                                        	Power administrative state
                                                                        	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                                        
                                                                        .. attribute:: module_reset_reason
                                                                        
                                                                        	Reset reason
                                                                        	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                                        
                                                                        .. attribute:: module_up_time
                                                                        
                                                                        	Module up time
                                                                        	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime>`
                                                                        
                                                                        

                                                                        """

                                                                        _prefix = 'plat-chas-invmgr-oper'
                                                                        _revision = '2015-01-07'

                                                                        def __init__(self):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo, self).__init__()

                                                                            self.yang_name = "fru-info"
                                                                            self.yang_parent_name = "attributes"

                                                                            self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                                            self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                                            self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                                            self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                                            self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                                            self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange()
                                                                            self.last_operational_state_change.parent = self
                                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                            self._children_yang_names.add("last-operational-state-change")

                                                                            self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime()
                                                                            self.module_up_time.parent = self
                                                                            self._children_name_map["module_up_time"] = "module-up-time"
                                                                            self._children_yang_names.add("module-up-time")

                                                                        def __setattr__(self, name, value):
                                                                            self._check_monkey_patching_error(name, value)
                                                                            with _handle_type_error():
                                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                        "Please use list append or extend method."
                                                                                                        .format(value))
                                                                                if isinstance(value, Enum.YLeaf):
                                                                                    value = value.name
                                                                                if name in ("module_administrative_state",
                                                                                            "module_monitor_state",
                                                                                            "module_operational_state",
                                                                                            "module_power_administrative_state",
                                                                                            "module_reset_reason") and name in self.__dict__:
                                                                                    if isinstance(value, YLeaf):
                                                                                        self.__dict__[name].set(value.get())
                                                                                    elif isinstance(value, YLeafList):
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo, self).__setattr__(name, value)
                                                                                    else:
                                                                                        self.__dict__[name].set(value)
                                                                                else:
                                                                                    if hasattr(value, "parent") and name != "parent":
                                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                            value.parent = self
                                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                            value.parent = self
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo, self).__setattr__(name, value)


                                                                        class LastOperationalStateChange(Entity):
                                                                            """
                                                                            Time operational state is   last changed
                                                                            
                                                                            .. attribute:: time_in_nano_seconds
                                                                            
                                                                            	Time Value in Nano\-seconds
                                                                            	**type**\:  int
                                                                            
                                                                            	**range:** \-2147483648..2147483647
                                                                            
                                                                            	**units**\: nanosecond
                                                                            
                                                                            .. attribute:: time_in_seconds
                                                                            
                                                                            	Time Value in Seconds
                                                                            	**type**\:  int
                                                                            
                                                                            	**range:** \-2147483648..2147483647
                                                                            
                                                                            	**units**\: second
                                                                            
                                                                            

                                                                            """

                                                                            _prefix = 'plat-chas-invmgr-oper'
                                                                            _revision = '2015-01-07'

                                                                            def __init__(self):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                                self.yang_name = "last-operational-state-change"
                                                                                self.yang_parent_name = "fru-info"

                                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                            def __setattr__(self, name, value):
                                                                                self._check_monkey_patching_error(name, value)
                                                                                with _handle_type_error():
                                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                            "Please use list append or extend method."
                                                                                                            .format(value))
                                                                                    if isinstance(value, Enum.YLeaf):
                                                                                        value = value.name
                                                                                    if name in ("time_in_nano_seconds",
                                                                                                "time_in_seconds") and name in self.__dict__:
                                                                                        if isinstance(value, YLeaf):
                                                                                            self.__dict__[name].set(value.get())
                                                                                        elif isinstance(value, YLeafList):
                                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                                        else:
                                                                                            self.__dict__[name].set(value)
                                                                                    else:
                                                                                        if hasattr(value, "parent") and name != "parent":
                                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                                value.parent = self
                                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                                value.parent = self
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                                            def has_data(self):
                                                                                return (
                                                                                    self.time_in_nano_seconds.is_set or
                                                                                    self.time_in_seconds.is_set)

                                                                            def has_operation(self):
                                                                                return (
                                                                                    self.yfilter != YFilter.not_set or
                                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                                            def get_segment_path(self):
                                                                                path_buffer = ""
                                                                                path_buffer = "last-operational-state-change" + path_buffer

                                                                                return path_buffer

                                                                            def get_entity_path(self, ancestor):
                                                                                path_buffer = ""
                                                                                if (ancestor is None):
                                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                                else:
                                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                                leaf_name_data = LeafDataList()
                                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                                return entity_path

                                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                                if child is not None:
                                                                                    return child

                                                                                return None

                                                                            def has_leaf_or_child_of_name(self, name):
                                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                                    return True
                                                                                return False

                                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                                if(value_path == "time-in-nano-seconds"):
                                                                                    self.time_in_nano_seconds = value
                                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                                if(value_path == "time-in-seconds"):
                                                                                    self.time_in_seconds = value
                                                                                    self.time_in_seconds.value_namespace = name_space
                                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                                        class ModuleUpTime(Entity):
                                                                            """
                                                                            Module up time
                                                                            
                                                                            .. attribute:: time_in_nano_seconds
                                                                            
                                                                            	Time Value in Nano\-seconds
                                                                            	**type**\:  int
                                                                            
                                                                            	**range:** \-2147483648..2147483647
                                                                            
                                                                            	**units**\: nanosecond
                                                                            
                                                                            .. attribute:: time_in_seconds
                                                                            
                                                                            	Time Value in Seconds
                                                                            	**type**\:  int
                                                                            
                                                                            	**range:** \-2147483648..2147483647
                                                                            
                                                                            	**units**\: second
                                                                            
                                                                            

                                                                            """

                                                                            _prefix = 'plat-chas-invmgr-oper'
                                                                            _revision = '2015-01-07'

                                                                            def __init__(self):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                                                self.yang_name = "module-up-time"
                                                                                self.yang_parent_name = "fru-info"

                                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                            def __setattr__(self, name, value):
                                                                                self._check_monkey_patching_error(name, value)
                                                                                with _handle_type_error():
                                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                            "Please use list append or extend method."
                                                                                                            .format(value))
                                                                                    if isinstance(value, Enum.YLeaf):
                                                                                        value = value.name
                                                                                    if name in ("time_in_nano_seconds",
                                                                                                "time_in_seconds") and name in self.__dict__:
                                                                                        if isinstance(value, YLeaf):
                                                                                            self.__dict__[name].set(value.get())
                                                                                        elif isinstance(value, YLeafList):
                                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                                        else:
                                                                                            self.__dict__[name].set(value)
                                                                                    else:
                                                                                        if hasattr(value, "parent") and name != "parent":
                                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                                value.parent = self
                                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                                value.parent = self
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                                            def has_data(self):
                                                                                return (
                                                                                    self.time_in_nano_seconds.is_set or
                                                                                    self.time_in_seconds.is_set)

                                                                            def has_operation(self):
                                                                                return (
                                                                                    self.yfilter != YFilter.not_set or
                                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                                            def get_segment_path(self):
                                                                                path_buffer = ""
                                                                                path_buffer = "module-up-time" + path_buffer

                                                                                return path_buffer

                                                                            def get_entity_path(self, ancestor):
                                                                                path_buffer = ""
                                                                                if (ancestor is None):
                                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                                else:
                                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                                leaf_name_data = LeafDataList()
                                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                                return entity_path

                                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                                if child is not None:
                                                                                    return child

                                                                                return None

                                                                            def has_leaf_or_child_of_name(self, name):
                                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                                    return True
                                                                                return False

                                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                                if(value_path == "time-in-nano-seconds"):
                                                                                    self.time_in_nano_seconds = value
                                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                                if(value_path == "time-in-seconds"):
                                                                                    self.time_in_seconds = value
                                                                                    self.time_in_seconds.value_namespace = name_space
                                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                                        def has_data(self):
                                                                            return (
                                                                                self.module_administrative_state.is_set or
                                                                                self.module_monitor_state.is_set or
                                                                                self.module_operational_state.is_set or
                                                                                self.module_power_administrative_state.is_set or
                                                                                self.module_reset_reason.is_set or
                                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                                                (self.module_up_time is not None and self.module_up_time.has_data()))

                                                                        def has_operation(self):
                                                                            return (
                                                                                self.yfilter != YFilter.not_set or
                                                                                self.module_administrative_state.yfilter != YFilter.not_set or
                                                                                self.module_monitor_state.yfilter != YFilter.not_set or
                                                                                self.module_operational_state.yfilter != YFilter.not_set or
                                                                                self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                                                self.module_reset_reason.yfilter != YFilter.not_set or
                                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                                                (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                                        def get_segment_path(self):
                                                                            path_buffer = ""
                                                                            path_buffer = "fru-info" + path_buffer

                                                                            return path_buffer

                                                                        def get_entity_path(self, ancestor):
                                                                            path_buffer = ""
                                                                            if (ancestor is None):
                                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                            else:
                                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                            leaf_name_data = LeafDataList()
                                                                            if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                                            if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                                            if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                                            if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                                            if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                            return entity_path

                                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                            if child is not None:
                                                                                return child

                                                                            if (child_yang_name == "last-operational-state-change"):
                                                                                if (self.last_operational_state_change is None):
                                                                                    self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange()
                                                                                    self.last_operational_state_change.parent = self
                                                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                                return self.last_operational_state_change

                                                                            if (child_yang_name == "module-up-time"):
                                                                                if (self.module_up_time is None):
                                                                                    self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime()
                                                                                    self.module_up_time.parent = self
                                                                                    self._children_name_map["module_up_time"] = "module-up-time"
                                                                                return self.module_up_time

                                                                            return None

                                                                        def has_leaf_or_child_of_name(self, name):
                                                                            if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                                                return True
                                                                            return False

                                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                            if(value_path == "module-administrative-state"):
                                                                                self.module_administrative_state = value
                                                                                self.module_administrative_state.value_namespace = name_space
                                                                                self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "module-monitor-state"):
                                                                                self.module_monitor_state = value
                                                                                self.module_monitor_state.value_namespace = name_space
                                                                                self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "module-operational-state"):
                                                                                self.module_operational_state = value
                                                                                self.module_operational_state.value_namespace = name_space
                                                                                self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "module-power-administrative-state"):
                                                                                self.module_power_administrative_state = value
                                                                                self.module_power_administrative_state.value_namespace = name_space
                                                                                self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "module-reset-reason"):
                                                                                self.module_reset_reason = value
                                                                                self.module_reset_reason.value_namespace = name_space
                                                                                self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                                    def has_data(self):
                                                                        return (
                                                                            (self.basic_info is not None and self.basic_info.has_data()) or
                                                                            (self.fru_info is not None and self.fru_info.has_data()))

                                                                    def has_operation(self):
                                                                        return (
                                                                            self.yfilter != YFilter.not_set or
                                                                            (self.basic_info is not None and self.basic_info.has_operation()) or
                                                                            (self.fru_info is not None and self.fru_info.has_operation()))

                                                                    def get_segment_path(self):
                                                                        path_buffer = ""
                                                                        path_buffer = "attributes" + path_buffer

                                                                        return path_buffer

                                                                    def get_entity_path(self, ancestor):
                                                                        path_buffer = ""
                                                                        if (ancestor is None):
                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                        else:
                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                        leaf_name_data = LeafDataList()

                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                        return entity_path

                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                        if child is not None:
                                                                            return child

                                                                        if (child_yang_name == "basic-info"):
                                                                            if (self.basic_info is None):
                                                                                self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo()
                                                                                self.basic_info.parent = self
                                                                                self._children_name_map["basic_info"] = "basic-info"
                                                                            return self.basic_info

                                                                        if (child_yang_name == "fru-info"):
                                                                            if (self.fru_info is None):
                                                                                self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo()
                                                                                self.fru_info.parent = self
                                                                                self._children_name_map["fru_info"] = "fru-info"
                                                                            return self.fru_info

                                                                        return None

                                                                    def has_leaf_or_child_of_name(self, name):
                                                                        if(name == "basic-info" or name == "fru-info"):
                                                                            return True
                                                                        return False

                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                        pass

                                                                def has_data(self):
                                                                    return (
                                                                        self.name.is_set or
                                                                        (self.attributes is not None and self.attributes.has_data()) or
                                                                        (self.sensors is not None and self.sensors.has_data()))

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.name.yfilter != YFilter.not_set or
                                                                        (self.attributes is not None and self.attributes.has_operation()) or
                                                                        (self.sensors is not None and self.sensors.has_operation()))

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "hw-component" + "[name='" + self.name.get() + "']" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.name.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    if (child_yang_name == "attributes"):
                                                                        if (self.attributes is None):
                                                                            self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes()
                                                                            self.attributes.parent = self
                                                                            self._children_name_map["attributes"] = "attributes"
                                                                        return self.attributes

                                                                    if (child_yang_name == "sensors"):
                                                                        if (self.sensors is None):
                                                                            self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors()
                                                                            self.sensors.parent = self
                                                                            self._children_name_map["sensors"] = "sensors"
                                                                        return self.sensors

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "attributes" or name == "sensors" or name == "name"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "name"):
                                                                        self.name = value
                                                                        self.name.value_namespace = name_space
                                                                        self.name.value_namespace_prefix = name_space_prefix

                                                            def has_data(self):
                                                                for c in self.hw_component:
                                                                    if (c.has_data()):
                                                                        return True
                                                                return False

                                                            def has_operation(self):
                                                                for c in self.hw_component:
                                                                    if (c.has_operation()):
                                                                        return True
                                                                return self.yfilter != YFilter.not_set

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "hw-components" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                if (child_yang_name == "hw-component"):
                                                                    for c in self.hw_component:
                                                                        segment = c.get_segment_path()
                                                                        if (segment_path == segment):
                                                                            return c
                                                                    c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent()
                                                                    c.parent = self
                                                                    local_reference_key = "ydk::seg::%s" % segment_path
                                                                    self._local_refs[local_reference_key] = c
                                                                    self.hw_component.append(c)
                                                                    return c

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "hw-component"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                pass


                                                        class Sensors(Entity):
                                                            """
                                                            Table of sensors
                                                            
                                                            .. attribute:: sensor
                                                            
                                                            	Sensor number
                                                            	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor>`
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors, self).__init__()

                                                                self.yang_name = "sensors"
                                                                self.yang_parent_name = "ports"

                                                                self.sensor = YList(self)

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in () and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors, self).__setattr__(name, value)


                                                            class Sensor(Entity):
                                                                """
                                                                Sensor number
                                                                
                                                                .. attribute:: name  <key>
                                                                
                                                                	Sensor name
                                                                	**type**\:  str
                                                                
                                                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                                                
                                                                .. attribute:: attributes
                                                                
                                                                	Attributes
                                                                	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes>`
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor, self).__init__()

                                                                    self.yang_name = "sensor"
                                                                    self.yang_parent_name = "sensors"

                                                                    self.name = YLeaf(YType.str, "name")

                                                                    self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes()
                                                                    self.attributes.parent = self
                                                                    self._children_name_map["attributes"] = "attributes"
                                                                    self._children_yang_names.add("attributes")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("name") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor, self).__setattr__(name, value)


                                                                class Attributes(Entity):
                                                                    """
                                                                    Attributes
                                                                    
                                                                    .. attribute:: basic_info
                                                                    
                                                                    	Entity attributes
                                                                    	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo>`
                                                                    
                                                                    .. attribute:: fru_info
                                                                    
                                                                    	Field Replaceable Unit (FRU) attributes
                                                                    	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo>`
                                                                    
                                                                    

                                                                    """

                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                    _revision = '2015-01-07'

                                                                    def __init__(self):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes, self).__init__()

                                                                        self.yang_name = "attributes"
                                                                        self.yang_parent_name = "sensor"

                                                                        self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo()
                                                                        self.basic_info.parent = self
                                                                        self._children_name_map["basic_info"] = "basic-info"
                                                                        self._children_yang_names.add("basic-info")

                                                                        self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo()
                                                                        self.fru_info.parent = self
                                                                        self._children_name_map["fru_info"] = "fru-info"
                                                                        self._children_yang_names.add("fru-info")


                                                                    class BasicInfo(Entity):
                                                                        """
                                                                        Entity attributes
                                                                        
                                                                        .. attribute:: description
                                                                        
                                                                        	describes in user\-readable terms                 what the entity in question does
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: firmware_revision
                                                                        
                                                                        	firmware revision string
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: hardware_revision
                                                                        
                                                                        	hw revision string
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: is_field_replaceable_unit
                                                                        
                                                                        	1 if Field Replaceable Unit 0, if not
                                                                        	**type**\:  bool
                                                                        
                                                                        .. attribute:: model_name
                                                                        
                                                                        	model name
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: name
                                                                        
                                                                        	name string for the entity
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: serial_number
                                                                        
                                                                        	serial number
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: software_revision
                                                                        
                                                                        	software revision string
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        .. attribute:: vendor_type
                                                                        
                                                                        	maps to the vendor OID string
                                                                        	**type**\:  str
                                                                        
                                                                        	**length:** 0..255
                                                                        
                                                                        

                                                                        """

                                                                        _prefix = 'plat-chas-invmgr-oper'
                                                                        _revision = '2015-01-07'

                                                                        def __init__(self):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo, self).__init__()

                                                                            self.yang_name = "basic-info"
                                                                            self.yang_parent_name = "attributes"

                                                                            self.description = YLeaf(YType.str, "description")

                                                                            self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                                            self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                                            self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                                            self.model_name = YLeaf(YType.str, "model-name")

                                                                            self.name = YLeaf(YType.str, "name")

                                                                            self.serial_number = YLeaf(YType.str, "serial-number")

                                                                            self.software_revision = YLeaf(YType.str, "software-revision")

                                                                            self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                                        def __setattr__(self, name, value):
                                                                            self._check_monkey_patching_error(name, value)
                                                                            with _handle_type_error():
                                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                        "Please use list append or extend method."
                                                                                                        .format(value))
                                                                                if isinstance(value, Enum.YLeaf):
                                                                                    value = value.name
                                                                                if name in ("description",
                                                                                            "firmware_revision",
                                                                                            "hardware_revision",
                                                                                            "is_field_replaceable_unit",
                                                                                            "model_name",
                                                                                            "name",
                                                                                            "serial_number",
                                                                                            "software_revision",
                                                                                            "vendor_type") and name in self.__dict__:
                                                                                    if isinstance(value, YLeaf):
                                                                                        self.__dict__[name].set(value.get())
                                                                                    elif isinstance(value, YLeafList):
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                                    else:
                                                                                        self.__dict__[name].set(value)
                                                                                else:
                                                                                    if hasattr(value, "parent") and name != "parent":
                                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                            value.parent = self
                                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                            value.parent = self
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)

                                                                        def has_data(self):
                                                                            return (
                                                                                self.description.is_set or
                                                                                self.firmware_revision.is_set or
                                                                                self.hardware_revision.is_set or
                                                                                self.is_field_replaceable_unit.is_set or
                                                                                self.model_name.is_set or
                                                                                self.name.is_set or
                                                                                self.serial_number.is_set or
                                                                                self.software_revision.is_set or
                                                                                self.vendor_type.is_set)

                                                                        def has_operation(self):
                                                                            return (
                                                                                self.yfilter != YFilter.not_set or
                                                                                self.description.yfilter != YFilter.not_set or
                                                                                self.firmware_revision.yfilter != YFilter.not_set or
                                                                                self.hardware_revision.yfilter != YFilter.not_set or
                                                                                self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                                self.model_name.yfilter != YFilter.not_set or
                                                                                self.name.yfilter != YFilter.not_set or
                                                                                self.serial_number.yfilter != YFilter.not_set or
                                                                                self.software_revision.yfilter != YFilter.not_set or
                                                                                self.vendor_type.yfilter != YFilter.not_set)

                                                                        def get_segment_path(self):
                                                                            path_buffer = ""
                                                                            path_buffer = "basic-info" + path_buffer

                                                                            return path_buffer

                                                                        def get_entity_path(self, ancestor):
                                                                            path_buffer = ""
                                                                            if (ancestor is None):
                                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                            else:
                                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                            leaf_name_data = LeafDataList()
                                                                            if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.description.get_name_leafdata())
                                                                            if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                                            if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                                            if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                                            if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.model_name.get_name_leafdata())
                                                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.name.get_name_leafdata())
                                                                            if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                                            if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                                            if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                            return entity_path

                                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                            if child is not None:
                                                                                return child

                                                                            return None

                                                                        def has_leaf_or_child_of_name(self, name):
                                                                            if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                                                return True
                                                                            return False

                                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                            if(value_path == "description"):
                                                                                self.description = value
                                                                                self.description.value_namespace = name_space
                                                                                self.description.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "firmware-revision"):
                                                                                self.firmware_revision = value
                                                                                self.firmware_revision.value_namespace = name_space
                                                                                self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "hardware-revision"):
                                                                                self.hardware_revision = value
                                                                                self.hardware_revision.value_namespace = name_space
                                                                                self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "is-field-replaceable-unit"):
                                                                                self.is_field_replaceable_unit = value
                                                                                self.is_field_replaceable_unit.value_namespace = name_space
                                                                                self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "model-name"):
                                                                                self.model_name = value
                                                                                self.model_name.value_namespace = name_space
                                                                                self.model_name.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "name"):
                                                                                self.name = value
                                                                                self.name.value_namespace = name_space
                                                                                self.name.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "serial-number"):
                                                                                self.serial_number = value
                                                                                self.serial_number.value_namespace = name_space
                                                                                self.serial_number.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "software-revision"):
                                                                                self.software_revision = value
                                                                                self.software_revision.value_namespace = name_space
                                                                                self.software_revision.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "vendor-type"):
                                                                                self.vendor_type = value
                                                                                self.vendor_type.value_namespace = name_space
                                                                                self.vendor_type.value_namespace_prefix = name_space_prefix


                                                                    class FruInfo(Entity):
                                                                        """
                                                                        Field Replaceable Unit (FRU) attributes
                                                                        
                                                                        .. attribute:: last_operational_state_change
                                                                        
                                                                        	Time operational state is   last changed
                                                                        	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange>`
                                                                        
                                                                        .. attribute:: module_administrative_state
                                                                        
                                                                        	Administrative    state
                                                                        	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                                        
                                                                        .. attribute:: module_monitor_state
                                                                        
                                                                        	Monitor state
                                                                        	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                                        
                                                                        .. attribute:: module_operational_state
                                                                        
                                                                        	Operation state
                                                                        	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                                        
                                                                        .. attribute:: module_power_administrative_state
                                                                        
                                                                        	Power administrative state
                                                                        	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                                        
                                                                        .. attribute:: module_reset_reason
                                                                        
                                                                        	Reset reason
                                                                        	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                                        
                                                                        .. attribute:: module_up_time
                                                                        
                                                                        	Module up time
                                                                        	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime>`
                                                                        
                                                                        

                                                                        """

                                                                        _prefix = 'plat-chas-invmgr-oper'
                                                                        _revision = '2015-01-07'

                                                                        def __init__(self):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo, self).__init__()

                                                                            self.yang_name = "fru-info"
                                                                            self.yang_parent_name = "attributes"

                                                                            self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                                            self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                                            self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                                            self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                                            self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                                            self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                            self.last_operational_state_change.parent = self
                                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                            self._children_yang_names.add("last-operational-state-change")

                                                                            self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                            self.module_up_time.parent = self
                                                                            self._children_name_map["module_up_time"] = "module-up-time"
                                                                            self._children_yang_names.add("module-up-time")

                                                                        def __setattr__(self, name, value):
                                                                            self._check_monkey_patching_error(name, value)
                                                                            with _handle_type_error():
                                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                        "Please use list append or extend method."
                                                                                                        .format(value))
                                                                                if isinstance(value, Enum.YLeaf):
                                                                                    value = value.name
                                                                                if name in ("module_administrative_state",
                                                                                            "module_monitor_state",
                                                                                            "module_operational_state",
                                                                                            "module_power_administrative_state",
                                                                                            "module_reset_reason") and name in self.__dict__:
                                                                                    if isinstance(value, YLeaf):
                                                                                        self.__dict__[name].set(value.get())
                                                                                    elif isinstance(value, YLeafList):
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)
                                                                                    else:
                                                                                        self.__dict__[name].set(value)
                                                                                else:
                                                                                    if hasattr(value, "parent") and name != "parent":
                                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                            value.parent = self
                                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                            value.parent = self
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)


                                                                        class LastOperationalStateChange(Entity):
                                                                            """
                                                                            Time operational state is   last changed
                                                                            
                                                                            .. attribute:: time_in_nano_seconds
                                                                            
                                                                            	Time Value in Nano\-seconds
                                                                            	**type**\:  int
                                                                            
                                                                            	**range:** \-2147483648..2147483647
                                                                            
                                                                            	**units**\: nanosecond
                                                                            
                                                                            .. attribute:: time_in_seconds
                                                                            
                                                                            	Time Value in Seconds
                                                                            	**type**\:  int
                                                                            
                                                                            	**range:** \-2147483648..2147483647
                                                                            
                                                                            	**units**\: second
                                                                            
                                                                            

                                                                            """

                                                                            _prefix = 'plat-chas-invmgr-oper'
                                                                            _revision = '2015-01-07'

                                                                            def __init__(self):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                                self.yang_name = "last-operational-state-change"
                                                                                self.yang_parent_name = "fru-info"

                                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                            def __setattr__(self, name, value):
                                                                                self._check_monkey_patching_error(name, value)
                                                                                with _handle_type_error():
                                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                            "Please use list append or extend method."
                                                                                                            .format(value))
                                                                                    if isinstance(value, Enum.YLeaf):
                                                                                        value = value.name
                                                                                    if name in ("time_in_nano_seconds",
                                                                                                "time_in_seconds") and name in self.__dict__:
                                                                                        if isinstance(value, YLeaf):
                                                                                            self.__dict__[name].set(value.get())
                                                                                        elif isinstance(value, YLeafList):
                                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                                        else:
                                                                                            self.__dict__[name].set(value)
                                                                                    else:
                                                                                        if hasattr(value, "parent") and name != "parent":
                                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                                value.parent = self
                                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                                value.parent = self
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                                            def has_data(self):
                                                                                return (
                                                                                    self.time_in_nano_seconds.is_set or
                                                                                    self.time_in_seconds.is_set)

                                                                            def has_operation(self):
                                                                                return (
                                                                                    self.yfilter != YFilter.not_set or
                                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                                            def get_segment_path(self):
                                                                                path_buffer = ""
                                                                                path_buffer = "last-operational-state-change" + path_buffer

                                                                                return path_buffer

                                                                            def get_entity_path(self, ancestor):
                                                                                path_buffer = ""
                                                                                if (ancestor is None):
                                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                                else:
                                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                                leaf_name_data = LeafDataList()
                                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                                return entity_path

                                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                                if child is not None:
                                                                                    return child

                                                                                return None

                                                                            def has_leaf_or_child_of_name(self, name):
                                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                                    return True
                                                                                return False

                                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                                if(value_path == "time-in-nano-seconds"):
                                                                                    self.time_in_nano_seconds = value
                                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                                if(value_path == "time-in-seconds"):
                                                                                    self.time_in_seconds = value
                                                                                    self.time_in_seconds.value_namespace = name_space
                                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                                        class ModuleUpTime(Entity):
                                                                            """
                                                                            Module up time
                                                                            
                                                                            .. attribute:: time_in_nano_seconds
                                                                            
                                                                            	Time Value in Nano\-seconds
                                                                            	**type**\:  int
                                                                            
                                                                            	**range:** \-2147483648..2147483647
                                                                            
                                                                            	**units**\: nanosecond
                                                                            
                                                                            .. attribute:: time_in_seconds
                                                                            
                                                                            	Time Value in Seconds
                                                                            	**type**\:  int
                                                                            
                                                                            	**range:** \-2147483648..2147483647
                                                                            
                                                                            	**units**\: second
                                                                            
                                                                            

                                                                            """

                                                                            _prefix = 'plat-chas-invmgr-oper'
                                                                            _revision = '2015-01-07'

                                                                            def __init__(self):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                                                self.yang_name = "module-up-time"
                                                                                self.yang_parent_name = "fru-info"

                                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                            def __setattr__(self, name, value):
                                                                                self._check_monkey_patching_error(name, value)
                                                                                with _handle_type_error():
                                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                            "Please use list append or extend method."
                                                                                                            .format(value))
                                                                                    if isinstance(value, Enum.YLeaf):
                                                                                        value = value.name
                                                                                    if name in ("time_in_nano_seconds",
                                                                                                "time_in_seconds") and name in self.__dict__:
                                                                                        if isinstance(value, YLeaf):
                                                                                            self.__dict__[name].set(value.get())
                                                                                        elif isinstance(value, YLeafList):
                                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                                        else:
                                                                                            self.__dict__[name].set(value)
                                                                                    else:
                                                                                        if hasattr(value, "parent") and name != "parent":
                                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                                value.parent = self
                                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                                value.parent = self
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                                            def has_data(self):
                                                                                return (
                                                                                    self.time_in_nano_seconds.is_set or
                                                                                    self.time_in_seconds.is_set)

                                                                            def has_operation(self):
                                                                                return (
                                                                                    self.yfilter != YFilter.not_set or
                                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                                            def get_segment_path(self):
                                                                                path_buffer = ""
                                                                                path_buffer = "module-up-time" + path_buffer

                                                                                return path_buffer

                                                                            def get_entity_path(self, ancestor):
                                                                                path_buffer = ""
                                                                                if (ancestor is None):
                                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                                else:
                                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                                leaf_name_data = LeafDataList()
                                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                                return entity_path

                                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                                if child is not None:
                                                                                    return child

                                                                                return None

                                                                            def has_leaf_or_child_of_name(self, name):
                                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                                    return True
                                                                                return False

                                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                                if(value_path == "time-in-nano-seconds"):
                                                                                    self.time_in_nano_seconds = value
                                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                                if(value_path == "time-in-seconds"):
                                                                                    self.time_in_seconds = value
                                                                                    self.time_in_seconds.value_namespace = name_space
                                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                                        def has_data(self):
                                                                            return (
                                                                                self.module_administrative_state.is_set or
                                                                                self.module_monitor_state.is_set or
                                                                                self.module_operational_state.is_set or
                                                                                self.module_power_administrative_state.is_set or
                                                                                self.module_reset_reason.is_set or
                                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                                                (self.module_up_time is not None and self.module_up_time.has_data()))

                                                                        def has_operation(self):
                                                                            return (
                                                                                self.yfilter != YFilter.not_set or
                                                                                self.module_administrative_state.yfilter != YFilter.not_set or
                                                                                self.module_monitor_state.yfilter != YFilter.not_set or
                                                                                self.module_operational_state.yfilter != YFilter.not_set or
                                                                                self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                                                self.module_reset_reason.yfilter != YFilter.not_set or
                                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                                                (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                                        def get_segment_path(self):
                                                                            path_buffer = ""
                                                                            path_buffer = "fru-info" + path_buffer

                                                                            return path_buffer

                                                                        def get_entity_path(self, ancestor):
                                                                            path_buffer = ""
                                                                            if (ancestor is None):
                                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                            else:
                                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                            leaf_name_data = LeafDataList()
                                                                            if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                                            if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                                            if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                                            if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                                            if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                            return entity_path

                                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                            if child is not None:
                                                                                return child

                                                                            if (child_yang_name == "last-operational-state-change"):
                                                                                if (self.last_operational_state_change is None):
                                                                                    self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                                    self.last_operational_state_change.parent = self
                                                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                                return self.last_operational_state_change

                                                                            if (child_yang_name == "module-up-time"):
                                                                                if (self.module_up_time is None):
                                                                                    self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                                    self.module_up_time.parent = self
                                                                                    self._children_name_map["module_up_time"] = "module-up-time"
                                                                                return self.module_up_time

                                                                            return None

                                                                        def has_leaf_or_child_of_name(self, name):
                                                                            if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                                                return True
                                                                            return False

                                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                            if(value_path == "module-administrative-state"):
                                                                                self.module_administrative_state = value
                                                                                self.module_administrative_state.value_namespace = name_space
                                                                                self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "module-monitor-state"):
                                                                                self.module_monitor_state = value
                                                                                self.module_monitor_state.value_namespace = name_space
                                                                                self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "module-operational-state"):
                                                                                self.module_operational_state = value
                                                                                self.module_operational_state.value_namespace = name_space
                                                                                self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "module-power-administrative-state"):
                                                                                self.module_power_administrative_state = value
                                                                                self.module_power_administrative_state.value_namespace = name_space
                                                                                self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "module-reset-reason"):
                                                                                self.module_reset_reason = value
                                                                                self.module_reset_reason.value_namespace = name_space
                                                                                self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                                    def has_data(self):
                                                                        return (
                                                                            (self.basic_info is not None and self.basic_info.has_data()) or
                                                                            (self.fru_info is not None and self.fru_info.has_data()))

                                                                    def has_operation(self):
                                                                        return (
                                                                            self.yfilter != YFilter.not_set or
                                                                            (self.basic_info is not None and self.basic_info.has_operation()) or
                                                                            (self.fru_info is not None and self.fru_info.has_operation()))

                                                                    def get_segment_path(self):
                                                                        path_buffer = ""
                                                                        path_buffer = "attributes" + path_buffer

                                                                        return path_buffer

                                                                    def get_entity_path(self, ancestor):
                                                                        path_buffer = ""
                                                                        if (ancestor is None):
                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                        else:
                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                        leaf_name_data = LeafDataList()

                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                        return entity_path

                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                        if child is not None:
                                                                            return child

                                                                        if (child_yang_name == "basic-info"):
                                                                            if (self.basic_info is None):
                                                                                self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo()
                                                                                self.basic_info.parent = self
                                                                                self._children_name_map["basic_info"] = "basic-info"
                                                                            return self.basic_info

                                                                        if (child_yang_name == "fru-info"):
                                                                            if (self.fru_info is None):
                                                                                self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo()
                                                                                self.fru_info.parent = self
                                                                                self._children_name_map["fru_info"] = "fru-info"
                                                                            return self.fru_info

                                                                        return None

                                                                    def has_leaf_or_child_of_name(self, name):
                                                                        if(name == "basic-info" or name == "fru-info"):
                                                                            return True
                                                                        return False

                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                        pass

                                                                def has_data(self):
                                                                    return (
                                                                        self.name.is_set or
                                                                        (self.attributes is not None and self.attributes.has_data()))

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.name.yfilter != YFilter.not_set or
                                                                        (self.attributes is not None and self.attributes.has_operation()))

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "sensor" + "[name='" + self.name.get() + "']" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.name.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    if (child_yang_name == "attributes"):
                                                                        if (self.attributes is None):
                                                                            self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes()
                                                                            self.attributes.parent = self
                                                                            self._children_name_map["attributes"] = "attributes"
                                                                        return self.attributes

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "attributes" or name == "name"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "name"):
                                                                        self.name = value
                                                                        self.name.value_namespace = name_space
                                                                        self.name.value_namespace_prefix = name_space_prefix

                                                            def has_data(self):
                                                                for c in self.sensor:
                                                                    if (c.has_data()):
                                                                        return True
                                                                return False

                                                            def has_operation(self):
                                                                for c in self.sensor:
                                                                    if (c.has_operation()):
                                                                        return True
                                                                return self.yfilter != YFilter.not_set

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "sensors" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                if (child_yang_name == "sensor"):
                                                                    for c in self.sensor:
                                                                        segment = c.get_segment_path()
                                                                        if (segment_path == segment):
                                                                            return c
                                                                    c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor()
                                                                    c.parent = self
                                                                    local_reference_key = "ydk::seg::%s" % segment_path
                                                                    self._local_refs[local_reference_key] = c
                                                                    self.sensor.append(c)
                                                                    return c

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "sensor"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                pass


                                                        class Attributes(Entity):
                                                            """
                                                            Attributes
                                                            
                                                            .. attribute:: basic_info
                                                            
                                                            	Entity attributes
                                                            	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo>`
                                                            
                                                            .. attribute:: fru_info
                                                            
                                                            	Field Replaceable Unit (FRU) attributes
                                                            	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo>`
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes, self).__init__()

                                                                self.yang_name = "attributes"
                                                                self.yang_parent_name = "ports"

                                                                self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo()
                                                                self.basic_info.parent = self
                                                                self._children_name_map["basic_info"] = "basic-info"
                                                                self._children_yang_names.add("basic-info")

                                                                self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo()
                                                                self.fru_info.parent = self
                                                                self._children_name_map["fru_info"] = "fru-info"
                                                                self._children_yang_names.add("fru-info")


                                                            class BasicInfo(Entity):
                                                                """
                                                                Entity attributes
                                                                
                                                                .. attribute:: description
                                                                
                                                                	describes in user\-readable terms                 what the entity in question does
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: firmware_revision
                                                                
                                                                	firmware revision string
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: hardware_revision
                                                                
                                                                	hw revision string
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: is_field_replaceable_unit
                                                                
                                                                	1 if Field Replaceable Unit 0, if not
                                                                	**type**\:  bool
                                                                
                                                                .. attribute:: model_name
                                                                
                                                                	model name
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: name
                                                                
                                                                	name string for the entity
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: serial_number
                                                                
                                                                	serial number
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: software_revision
                                                                
                                                                	software revision string
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: vendor_type
                                                                
                                                                	maps to the vendor OID string
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo, self).__init__()

                                                                    self.yang_name = "basic-info"
                                                                    self.yang_parent_name = "attributes"

                                                                    self.description = YLeaf(YType.str, "description")

                                                                    self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                                    self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                                    self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                                    self.model_name = YLeaf(YType.str, "model-name")

                                                                    self.name = YLeaf(YType.str, "name")

                                                                    self.serial_number = YLeaf(YType.str, "serial-number")

                                                                    self.software_revision = YLeaf(YType.str, "software-revision")

                                                                    self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("description",
                                                                                    "firmware_revision",
                                                                                    "hardware_revision",
                                                                                    "is_field_replaceable_unit",
                                                                                    "model_name",
                                                                                    "name",
                                                                                    "serial_number",
                                                                                    "software_revision",
                                                                                    "vendor_type") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo, self).__setattr__(name, value)

                                                                def has_data(self):
                                                                    return (
                                                                        self.description.is_set or
                                                                        self.firmware_revision.is_set or
                                                                        self.hardware_revision.is_set or
                                                                        self.is_field_replaceable_unit.is_set or
                                                                        self.model_name.is_set or
                                                                        self.name.is_set or
                                                                        self.serial_number.is_set or
                                                                        self.software_revision.is_set or
                                                                        self.vendor_type.is_set)

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.description.yfilter != YFilter.not_set or
                                                                        self.firmware_revision.yfilter != YFilter.not_set or
                                                                        self.hardware_revision.yfilter != YFilter.not_set or
                                                                        self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                        self.model_name.yfilter != YFilter.not_set or
                                                                        self.name.yfilter != YFilter.not_set or
                                                                        self.serial_number.yfilter != YFilter.not_set or
                                                                        self.software_revision.yfilter != YFilter.not_set or
                                                                        self.vendor_type.yfilter != YFilter.not_set)

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "basic-info" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.description.get_name_leafdata())
                                                                    if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                                    if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                                    if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                                    if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.model_name.get_name_leafdata())
                                                                    if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.name.get_name_leafdata())
                                                                    if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                                    if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                                    if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "description"):
                                                                        self.description = value
                                                                        self.description.value_namespace = name_space
                                                                        self.description.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "firmware-revision"):
                                                                        self.firmware_revision = value
                                                                        self.firmware_revision.value_namespace = name_space
                                                                        self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "hardware-revision"):
                                                                        self.hardware_revision = value
                                                                        self.hardware_revision.value_namespace = name_space
                                                                        self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "is-field-replaceable-unit"):
                                                                        self.is_field_replaceable_unit = value
                                                                        self.is_field_replaceable_unit.value_namespace = name_space
                                                                        self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "model-name"):
                                                                        self.model_name = value
                                                                        self.model_name.value_namespace = name_space
                                                                        self.model_name.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "name"):
                                                                        self.name = value
                                                                        self.name.value_namespace = name_space
                                                                        self.name.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "serial-number"):
                                                                        self.serial_number = value
                                                                        self.serial_number.value_namespace = name_space
                                                                        self.serial_number.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "software-revision"):
                                                                        self.software_revision = value
                                                                        self.software_revision.value_namespace = name_space
                                                                        self.software_revision.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "vendor-type"):
                                                                        self.vendor_type = value
                                                                        self.vendor_type.value_namespace = name_space
                                                                        self.vendor_type.value_namespace_prefix = name_space_prefix


                                                            class FruInfo(Entity):
                                                                """
                                                                Field Replaceable Unit (FRU) attributes
                                                                
                                                                .. attribute:: last_operational_state_change
                                                                
                                                                	Time operational state is   last changed
                                                                	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange>`
                                                                
                                                                .. attribute:: module_administrative_state
                                                                
                                                                	Administrative    state
                                                                	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                                
                                                                .. attribute:: module_monitor_state
                                                                
                                                                	Monitor state
                                                                	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                                
                                                                .. attribute:: module_operational_state
                                                                
                                                                	Operation state
                                                                	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                                
                                                                .. attribute:: module_power_administrative_state
                                                                
                                                                	Power administrative state
                                                                	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                                
                                                                .. attribute:: module_reset_reason
                                                                
                                                                	Reset reason
                                                                	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                                
                                                                .. attribute:: module_up_time
                                                                
                                                                	Module up time
                                                                	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime>`
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo, self).__init__()

                                                                    self.yang_name = "fru-info"
                                                                    self.yang_parent_name = "attributes"

                                                                    self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                                    self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                                    self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                                    self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                                    self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                                    self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange()
                                                                    self.last_operational_state_change.parent = self
                                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                    self._children_yang_names.add("last-operational-state-change")

                                                                    self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime()
                                                                    self.module_up_time.parent = self
                                                                    self._children_name_map["module_up_time"] = "module-up-time"
                                                                    self._children_yang_names.add("module-up-time")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("module_administrative_state",
                                                                                    "module_monitor_state",
                                                                                    "module_operational_state",
                                                                                    "module_power_administrative_state",
                                                                                    "module_reset_reason") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo, self).__setattr__(name, value)


                                                                class LastOperationalStateChange(Entity):
                                                                    """
                                                                    Time operational state is   last changed
                                                                    
                                                                    .. attribute:: time_in_nano_seconds
                                                                    
                                                                    	Time Value in Nano\-seconds
                                                                    	**type**\:  int
                                                                    
                                                                    	**range:** \-2147483648..2147483647
                                                                    
                                                                    	**units**\: nanosecond
                                                                    
                                                                    .. attribute:: time_in_seconds
                                                                    
                                                                    	Time Value in Seconds
                                                                    	**type**\:  int
                                                                    
                                                                    	**range:** \-2147483648..2147483647
                                                                    
                                                                    	**units**\: second
                                                                    
                                                                    

                                                                    """

                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                    _revision = '2015-01-07'

                                                                    def __init__(self):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                        self.yang_name = "last-operational-state-change"
                                                                        self.yang_parent_name = "fru-info"

                                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                    def __setattr__(self, name, value):
                                                                        self._check_monkey_patching_error(name, value)
                                                                        with _handle_type_error():
                                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                    "Please use list append or extend method."
                                                                                                    .format(value))
                                                                            if isinstance(value, Enum.YLeaf):
                                                                                value = value.name
                                                                            if name in ("time_in_nano_seconds",
                                                                                        "time_in_seconds") and name in self.__dict__:
                                                                                if isinstance(value, YLeaf):
                                                                                    self.__dict__[name].set(value.get())
                                                                                elif isinstance(value, YLeafList):
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                                else:
                                                                                    self.__dict__[name].set(value)
                                                                            else:
                                                                                if hasattr(value, "parent") and name != "parent":
                                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                        value.parent = self
                                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                        value.parent = self
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                                    def has_data(self):
                                                                        return (
                                                                            self.time_in_nano_seconds.is_set or
                                                                            self.time_in_seconds.is_set)

                                                                    def has_operation(self):
                                                                        return (
                                                                            self.yfilter != YFilter.not_set or
                                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                                    def get_segment_path(self):
                                                                        path_buffer = ""
                                                                        path_buffer = "last-operational-state-change" + path_buffer

                                                                        return path_buffer

                                                                    def get_entity_path(self, ancestor):
                                                                        path_buffer = ""
                                                                        if (ancestor is None):
                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                        else:
                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                        leaf_name_data = LeafDataList()
                                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                        return entity_path

                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                        if child is not None:
                                                                            return child

                                                                        return None

                                                                    def has_leaf_or_child_of_name(self, name):
                                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                            return True
                                                                        return False

                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                        if(value_path == "time-in-nano-seconds"):
                                                                            self.time_in_nano_seconds = value
                                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "time-in-seconds"):
                                                                            self.time_in_seconds = value
                                                                            self.time_in_seconds.value_namespace = name_space
                                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                                class ModuleUpTime(Entity):
                                                                    """
                                                                    Module up time
                                                                    
                                                                    .. attribute:: time_in_nano_seconds
                                                                    
                                                                    	Time Value in Nano\-seconds
                                                                    	**type**\:  int
                                                                    
                                                                    	**range:** \-2147483648..2147483647
                                                                    
                                                                    	**units**\: nanosecond
                                                                    
                                                                    .. attribute:: time_in_seconds
                                                                    
                                                                    	Time Value in Seconds
                                                                    	**type**\:  int
                                                                    
                                                                    	**range:** \-2147483648..2147483647
                                                                    
                                                                    	**units**\: second
                                                                    
                                                                    

                                                                    """

                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                    _revision = '2015-01-07'

                                                                    def __init__(self):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                                        self.yang_name = "module-up-time"
                                                                        self.yang_parent_name = "fru-info"

                                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                    def __setattr__(self, name, value):
                                                                        self._check_monkey_patching_error(name, value)
                                                                        with _handle_type_error():
                                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                    "Please use list append or extend method."
                                                                                                    .format(value))
                                                                            if isinstance(value, Enum.YLeaf):
                                                                                value = value.name
                                                                            if name in ("time_in_nano_seconds",
                                                                                        "time_in_seconds") and name in self.__dict__:
                                                                                if isinstance(value, YLeaf):
                                                                                    self.__dict__[name].set(value.get())
                                                                                elif isinstance(value, YLeafList):
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                                else:
                                                                                    self.__dict__[name].set(value)
                                                                            else:
                                                                                if hasattr(value, "parent") and name != "parent":
                                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                        value.parent = self
                                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                        value.parent = self
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                                    def has_data(self):
                                                                        return (
                                                                            self.time_in_nano_seconds.is_set or
                                                                            self.time_in_seconds.is_set)

                                                                    def has_operation(self):
                                                                        return (
                                                                            self.yfilter != YFilter.not_set or
                                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                                    def get_segment_path(self):
                                                                        path_buffer = ""
                                                                        path_buffer = "module-up-time" + path_buffer

                                                                        return path_buffer

                                                                    def get_entity_path(self, ancestor):
                                                                        path_buffer = ""
                                                                        if (ancestor is None):
                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                        else:
                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                        leaf_name_data = LeafDataList()
                                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                        return entity_path

                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                        if child is not None:
                                                                            return child

                                                                        return None

                                                                    def has_leaf_or_child_of_name(self, name):
                                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                            return True
                                                                        return False

                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                        if(value_path == "time-in-nano-seconds"):
                                                                            self.time_in_nano_seconds = value
                                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "time-in-seconds"):
                                                                            self.time_in_seconds = value
                                                                            self.time_in_seconds.value_namespace = name_space
                                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                                def has_data(self):
                                                                    return (
                                                                        self.module_administrative_state.is_set or
                                                                        self.module_monitor_state.is_set or
                                                                        self.module_operational_state.is_set or
                                                                        self.module_power_administrative_state.is_set or
                                                                        self.module_reset_reason.is_set or
                                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                                        (self.module_up_time is not None and self.module_up_time.has_data()))

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.module_administrative_state.yfilter != YFilter.not_set or
                                                                        self.module_monitor_state.yfilter != YFilter.not_set or
                                                                        self.module_operational_state.yfilter != YFilter.not_set or
                                                                        self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                                        self.module_reset_reason.yfilter != YFilter.not_set or
                                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                                        (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "fru-info" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                                    if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                                    if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                                    if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                                    if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    if (child_yang_name == "last-operational-state-change"):
                                                                        if (self.last_operational_state_change is None):
                                                                            self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange()
                                                                            self.last_operational_state_change.parent = self
                                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                        return self.last_operational_state_change

                                                                    if (child_yang_name == "module-up-time"):
                                                                        if (self.module_up_time is None):
                                                                            self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime()
                                                                            self.module_up_time.parent = self
                                                                            self._children_name_map["module_up_time"] = "module-up-time"
                                                                        return self.module_up_time

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "module-administrative-state"):
                                                                        self.module_administrative_state = value
                                                                        self.module_administrative_state.value_namespace = name_space
                                                                        self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "module-monitor-state"):
                                                                        self.module_monitor_state = value
                                                                        self.module_monitor_state.value_namespace = name_space
                                                                        self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "module-operational-state"):
                                                                        self.module_operational_state = value
                                                                        self.module_operational_state.value_namespace = name_space
                                                                        self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "module-power-administrative-state"):
                                                                        self.module_power_administrative_state = value
                                                                        self.module_power_administrative_state.value_namespace = name_space
                                                                        self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "module-reset-reason"):
                                                                        self.module_reset_reason = value
                                                                        self.module_reset_reason.value_namespace = name_space
                                                                        self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                            def has_data(self):
                                                                return (
                                                                    (self.basic_info is not None and self.basic_info.has_data()) or
                                                                    (self.fru_info is not None and self.fru_info.has_data()))

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    (self.basic_info is not None and self.basic_info.has_operation()) or
                                                                    (self.fru_info is not None and self.fru_info.has_operation()))

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "attributes" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                if (child_yang_name == "basic-info"):
                                                                    if (self.basic_info is None):
                                                                        self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo()
                                                                        self.basic_info.parent = self
                                                                        self._children_name_map["basic_info"] = "basic-info"
                                                                    return self.basic_info

                                                                if (child_yang_name == "fru-info"):
                                                                    if (self.fru_info is None):
                                                                        self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo()
                                                                        self.fru_info.parent = self
                                                                        self._children_name_map["fru_info"] = "fru-info"
                                                                    return self.fru_info

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "basic-info" or name == "fru-info"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                pass

                                                        def has_data(self):
                                                            return (
                                                                self.name.is_set or
                                                                (self.attributes is not None and self.attributes.has_data()) or
                                                                (self.hw_components is not None and self.hw_components.has_data()) or
                                                                (self.sensors is not None and self.sensors.has_data()))

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.name.yfilter != YFilter.not_set or
                                                                (self.attributes is not None and self.attributes.has_operation()) or
                                                                (self.hw_components is not None and self.hw_components.has_operation()) or
                                                                (self.sensors is not None and self.sensors.has_operation()))

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "ports" + "[name='" + self.name.get() + "']" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.name.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            if (child_yang_name == "attributes"):
                                                                if (self.attributes is None):
                                                                    self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Attributes()
                                                                    self.attributes.parent = self
                                                                    self._children_name_map["attributes"] = "attributes"
                                                                return self.attributes

                                                            if (child_yang_name == "hw-components"):
                                                                if (self.hw_components is None):
                                                                    self.hw_components = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.HwComponents()
                                                                    self.hw_components.parent = self
                                                                    self._children_name_map["hw_components"] = "hw-components"
                                                                return self.hw_components

                                                            if (child_yang_name == "sensors"):
                                                                if (self.sensors is None):
                                                                    self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports.Sensors()
                                                                    self.sensors.parent = self
                                                                    self._children_name_map["sensors"] = "sensors"
                                                                return self.sensors

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "attributes" or name == "hw-components" or name == "sensors" or name == "name"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "name"):
                                                                self.name = value
                                                                self.name.value_namespace = name_space
                                                                self.name.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        for c in self.ports:
                                                            if (c.has_data()):
                                                                return True
                                                        return False

                                                    def has_operation(self):
                                                        for c in self.ports:
                                                            if (c.has_operation()):
                                                                return True
                                                        return self.yfilter != YFilter.not_set

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "portses" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "ports"):
                                                            for c in self.ports:
                                                                segment = c.get_segment_path()
                                                                if (segment_path == segment):
                                                                    return c
                                                            c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses.Ports()
                                                            c.parent = self
                                                            local_reference_key = "ydk::seg::%s" % segment_path
                                                            self._local_refs[local_reference_key] = c
                                                            self.ports.append(c)
                                                            return c

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "ports"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        pass


                                                class Sensors(Entity):
                                                    """
                                                    Table of sensors
                                                    
                                                    .. attribute:: sensor
                                                    
                                                    	Sensor number
                                                    	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors, self).__init__()

                                                        self.yang_name = "sensors"
                                                        self.yang_parent_name = "port-slot"

                                                        self.sensor = YList(self)

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in () and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors, self).__setattr__(name, value)


                                                    class Sensor(Entity):
                                                        """
                                                        Sensor number
                                                        
                                                        .. attribute:: name  <key>
                                                        
                                                        	Sensor name
                                                        	**type**\:  str
                                                        
                                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                                        
                                                        .. attribute:: attributes
                                                        
                                                        	Attributes
                                                        	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes>`
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor, self).__init__()

                                                            self.yang_name = "sensor"
                                                            self.yang_parent_name = "sensors"

                                                            self.name = YLeaf(YType.str, "name")

                                                            self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes()
                                                            self.attributes.parent = self
                                                            self._children_name_map["attributes"] = "attributes"
                                                            self._children_yang_names.add("attributes")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("name") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor, self).__setattr__(name, value)


                                                        class Attributes(Entity):
                                                            """
                                                            Attributes
                                                            
                                                            .. attribute:: basic_info
                                                            
                                                            	Entity attributes
                                                            	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo>`
                                                            
                                                            .. attribute:: fru_info
                                                            
                                                            	Field Replaceable Unit (FRU) attributes
                                                            	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo>`
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes, self).__init__()

                                                                self.yang_name = "attributes"
                                                                self.yang_parent_name = "sensor"

                                                                self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo()
                                                                self.basic_info.parent = self
                                                                self._children_name_map["basic_info"] = "basic-info"
                                                                self._children_yang_names.add("basic-info")

                                                                self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo()
                                                                self.fru_info.parent = self
                                                                self._children_name_map["fru_info"] = "fru-info"
                                                                self._children_yang_names.add("fru-info")


                                                            class BasicInfo(Entity):
                                                                """
                                                                Entity attributes
                                                                
                                                                .. attribute:: description
                                                                
                                                                	describes in user\-readable terms                 what the entity in question does
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: firmware_revision
                                                                
                                                                	firmware revision string
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: hardware_revision
                                                                
                                                                	hw revision string
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: is_field_replaceable_unit
                                                                
                                                                	1 if Field Replaceable Unit 0, if not
                                                                	**type**\:  bool
                                                                
                                                                .. attribute:: model_name
                                                                
                                                                	model name
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: name
                                                                
                                                                	name string for the entity
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: serial_number
                                                                
                                                                	serial number
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: software_revision
                                                                
                                                                	software revision string
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                .. attribute:: vendor_type
                                                                
                                                                	maps to the vendor OID string
                                                                	**type**\:  str
                                                                
                                                                	**length:** 0..255
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo, self).__init__()

                                                                    self.yang_name = "basic-info"
                                                                    self.yang_parent_name = "attributes"

                                                                    self.description = YLeaf(YType.str, "description")

                                                                    self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                                    self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                                    self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                                    self.model_name = YLeaf(YType.str, "model-name")

                                                                    self.name = YLeaf(YType.str, "name")

                                                                    self.serial_number = YLeaf(YType.str, "serial-number")

                                                                    self.software_revision = YLeaf(YType.str, "software-revision")

                                                                    self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("description",
                                                                                    "firmware_revision",
                                                                                    "hardware_revision",
                                                                                    "is_field_replaceable_unit",
                                                                                    "model_name",
                                                                                    "name",
                                                                                    "serial_number",
                                                                                    "software_revision",
                                                                                    "vendor_type") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)

                                                                def has_data(self):
                                                                    return (
                                                                        self.description.is_set or
                                                                        self.firmware_revision.is_set or
                                                                        self.hardware_revision.is_set or
                                                                        self.is_field_replaceable_unit.is_set or
                                                                        self.model_name.is_set or
                                                                        self.name.is_set or
                                                                        self.serial_number.is_set or
                                                                        self.software_revision.is_set or
                                                                        self.vendor_type.is_set)

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.description.yfilter != YFilter.not_set or
                                                                        self.firmware_revision.yfilter != YFilter.not_set or
                                                                        self.hardware_revision.yfilter != YFilter.not_set or
                                                                        self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                        self.model_name.yfilter != YFilter.not_set or
                                                                        self.name.yfilter != YFilter.not_set or
                                                                        self.serial_number.yfilter != YFilter.not_set or
                                                                        self.software_revision.yfilter != YFilter.not_set or
                                                                        self.vendor_type.yfilter != YFilter.not_set)

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "basic-info" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.description.get_name_leafdata())
                                                                    if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                                    if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                                    if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                                    if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.model_name.get_name_leafdata())
                                                                    if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.name.get_name_leafdata())
                                                                    if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                                    if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                                    if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "description"):
                                                                        self.description = value
                                                                        self.description.value_namespace = name_space
                                                                        self.description.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "firmware-revision"):
                                                                        self.firmware_revision = value
                                                                        self.firmware_revision.value_namespace = name_space
                                                                        self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "hardware-revision"):
                                                                        self.hardware_revision = value
                                                                        self.hardware_revision.value_namespace = name_space
                                                                        self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "is-field-replaceable-unit"):
                                                                        self.is_field_replaceable_unit = value
                                                                        self.is_field_replaceable_unit.value_namespace = name_space
                                                                        self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "model-name"):
                                                                        self.model_name = value
                                                                        self.model_name.value_namespace = name_space
                                                                        self.model_name.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "name"):
                                                                        self.name = value
                                                                        self.name.value_namespace = name_space
                                                                        self.name.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "serial-number"):
                                                                        self.serial_number = value
                                                                        self.serial_number.value_namespace = name_space
                                                                        self.serial_number.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "software-revision"):
                                                                        self.software_revision = value
                                                                        self.software_revision.value_namespace = name_space
                                                                        self.software_revision.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "vendor-type"):
                                                                        self.vendor_type = value
                                                                        self.vendor_type.value_namespace = name_space
                                                                        self.vendor_type.value_namespace_prefix = name_space_prefix


                                                            class FruInfo(Entity):
                                                                """
                                                                Field Replaceable Unit (FRU) attributes
                                                                
                                                                .. attribute:: last_operational_state_change
                                                                
                                                                	Time operational state is   last changed
                                                                	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange>`
                                                                
                                                                .. attribute:: module_administrative_state
                                                                
                                                                	Administrative    state
                                                                	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                                
                                                                .. attribute:: module_monitor_state
                                                                
                                                                	Monitor state
                                                                	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                                
                                                                .. attribute:: module_operational_state
                                                                
                                                                	Operation state
                                                                	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                                
                                                                .. attribute:: module_power_administrative_state
                                                                
                                                                	Power administrative state
                                                                	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                                
                                                                .. attribute:: module_reset_reason
                                                                
                                                                	Reset reason
                                                                	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                                
                                                                .. attribute:: module_up_time
                                                                
                                                                	Module up time
                                                                	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime>`
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo, self).__init__()

                                                                    self.yang_name = "fru-info"
                                                                    self.yang_parent_name = "attributes"

                                                                    self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                                    self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                                    self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                                    self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                                    self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                                    self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                    self.last_operational_state_change.parent = self
                                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                    self._children_yang_names.add("last-operational-state-change")

                                                                    self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                    self.module_up_time.parent = self
                                                                    self._children_name_map["module_up_time"] = "module-up-time"
                                                                    self._children_yang_names.add("module-up-time")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("module_administrative_state",
                                                                                    "module_monitor_state",
                                                                                    "module_operational_state",
                                                                                    "module_power_administrative_state",
                                                                                    "module_reset_reason") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)


                                                                class LastOperationalStateChange(Entity):
                                                                    """
                                                                    Time operational state is   last changed
                                                                    
                                                                    .. attribute:: time_in_nano_seconds
                                                                    
                                                                    	Time Value in Nano\-seconds
                                                                    	**type**\:  int
                                                                    
                                                                    	**range:** \-2147483648..2147483647
                                                                    
                                                                    	**units**\: nanosecond
                                                                    
                                                                    .. attribute:: time_in_seconds
                                                                    
                                                                    	Time Value in Seconds
                                                                    	**type**\:  int
                                                                    
                                                                    	**range:** \-2147483648..2147483647
                                                                    
                                                                    	**units**\: second
                                                                    
                                                                    

                                                                    """

                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                    _revision = '2015-01-07'

                                                                    def __init__(self):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                        self.yang_name = "last-operational-state-change"
                                                                        self.yang_parent_name = "fru-info"

                                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                    def __setattr__(self, name, value):
                                                                        self._check_monkey_patching_error(name, value)
                                                                        with _handle_type_error():
                                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                    "Please use list append or extend method."
                                                                                                    .format(value))
                                                                            if isinstance(value, Enum.YLeaf):
                                                                                value = value.name
                                                                            if name in ("time_in_nano_seconds",
                                                                                        "time_in_seconds") and name in self.__dict__:
                                                                                if isinstance(value, YLeaf):
                                                                                    self.__dict__[name].set(value.get())
                                                                                elif isinstance(value, YLeafList):
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                                else:
                                                                                    self.__dict__[name].set(value)
                                                                            else:
                                                                                if hasattr(value, "parent") and name != "parent":
                                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                        value.parent = self
                                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                        value.parent = self
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                                    def has_data(self):
                                                                        return (
                                                                            self.time_in_nano_seconds.is_set or
                                                                            self.time_in_seconds.is_set)

                                                                    def has_operation(self):
                                                                        return (
                                                                            self.yfilter != YFilter.not_set or
                                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                                    def get_segment_path(self):
                                                                        path_buffer = ""
                                                                        path_buffer = "last-operational-state-change" + path_buffer

                                                                        return path_buffer

                                                                    def get_entity_path(self, ancestor):
                                                                        path_buffer = ""
                                                                        if (ancestor is None):
                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                        else:
                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                        leaf_name_data = LeafDataList()
                                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                        return entity_path

                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                        if child is not None:
                                                                            return child

                                                                        return None

                                                                    def has_leaf_or_child_of_name(self, name):
                                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                            return True
                                                                        return False

                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                        if(value_path == "time-in-nano-seconds"):
                                                                            self.time_in_nano_seconds = value
                                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "time-in-seconds"):
                                                                            self.time_in_seconds = value
                                                                            self.time_in_seconds.value_namespace = name_space
                                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                                class ModuleUpTime(Entity):
                                                                    """
                                                                    Module up time
                                                                    
                                                                    .. attribute:: time_in_nano_seconds
                                                                    
                                                                    	Time Value in Nano\-seconds
                                                                    	**type**\:  int
                                                                    
                                                                    	**range:** \-2147483648..2147483647
                                                                    
                                                                    	**units**\: nanosecond
                                                                    
                                                                    .. attribute:: time_in_seconds
                                                                    
                                                                    	Time Value in Seconds
                                                                    	**type**\:  int
                                                                    
                                                                    	**range:** \-2147483648..2147483647
                                                                    
                                                                    	**units**\: second
                                                                    
                                                                    

                                                                    """

                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                    _revision = '2015-01-07'

                                                                    def __init__(self):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                                        self.yang_name = "module-up-time"
                                                                        self.yang_parent_name = "fru-info"

                                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                    def __setattr__(self, name, value):
                                                                        self._check_monkey_patching_error(name, value)
                                                                        with _handle_type_error():
                                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                    "Please use list append or extend method."
                                                                                                    .format(value))
                                                                            if isinstance(value, Enum.YLeaf):
                                                                                value = value.name
                                                                            if name in ("time_in_nano_seconds",
                                                                                        "time_in_seconds") and name in self.__dict__:
                                                                                if isinstance(value, YLeaf):
                                                                                    self.__dict__[name].set(value.get())
                                                                                elif isinstance(value, YLeafList):
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                                else:
                                                                                    self.__dict__[name].set(value)
                                                                            else:
                                                                                if hasattr(value, "parent") and name != "parent":
                                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                        value.parent = self
                                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                        value.parent = self
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                                    def has_data(self):
                                                                        return (
                                                                            self.time_in_nano_seconds.is_set or
                                                                            self.time_in_seconds.is_set)

                                                                    def has_operation(self):
                                                                        return (
                                                                            self.yfilter != YFilter.not_set or
                                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                                    def get_segment_path(self):
                                                                        path_buffer = ""
                                                                        path_buffer = "module-up-time" + path_buffer

                                                                        return path_buffer

                                                                    def get_entity_path(self, ancestor):
                                                                        path_buffer = ""
                                                                        if (ancestor is None):
                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                        else:
                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                        leaf_name_data = LeafDataList()
                                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                        return entity_path

                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                        if child is not None:
                                                                            return child

                                                                        return None

                                                                    def has_leaf_or_child_of_name(self, name):
                                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                            return True
                                                                        return False

                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                        if(value_path == "time-in-nano-seconds"):
                                                                            self.time_in_nano_seconds = value
                                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "time-in-seconds"):
                                                                            self.time_in_seconds = value
                                                                            self.time_in_seconds.value_namespace = name_space
                                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                                def has_data(self):
                                                                    return (
                                                                        self.module_administrative_state.is_set or
                                                                        self.module_monitor_state.is_set or
                                                                        self.module_operational_state.is_set or
                                                                        self.module_power_administrative_state.is_set or
                                                                        self.module_reset_reason.is_set or
                                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                                        (self.module_up_time is not None and self.module_up_time.has_data()))

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.module_administrative_state.yfilter != YFilter.not_set or
                                                                        self.module_monitor_state.yfilter != YFilter.not_set or
                                                                        self.module_operational_state.yfilter != YFilter.not_set or
                                                                        self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                                        self.module_reset_reason.yfilter != YFilter.not_set or
                                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                                        (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "fru-info" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                                    if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                                    if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                                    if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                                    if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    if (child_yang_name == "last-operational-state-change"):
                                                                        if (self.last_operational_state_change is None):
                                                                            self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                            self.last_operational_state_change.parent = self
                                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                        return self.last_operational_state_change

                                                                    if (child_yang_name == "module-up-time"):
                                                                        if (self.module_up_time is None):
                                                                            self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                            self.module_up_time.parent = self
                                                                            self._children_name_map["module_up_time"] = "module-up-time"
                                                                        return self.module_up_time

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "module-administrative-state"):
                                                                        self.module_administrative_state = value
                                                                        self.module_administrative_state.value_namespace = name_space
                                                                        self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "module-monitor-state"):
                                                                        self.module_monitor_state = value
                                                                        self.module_monitor_state.value_namespace = name_space
                                                                        self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "module-operational-state"):
                                                                        self.module_operational_state = value
                                                                        self.module_operational_state.value_namespace = name_space
                                                                        self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "module-power-administrative-state"):
                                                                        self.module_power_administrative_state = value
                                                                        self.module_power_administrative_state.value_namespace = name_space
                                                                        self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "module-reset-reason"):
                                                                        self.module_reset_reason = value
                                                                        self.module_reset_reason.value_namespace = name_space
                                                                        self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                            def has_data(self):
                                                                return (
                                                                    (self.basic_info is not None and self.basic_info.has_data()) or
                                                                    (self.fru_info is not None and self.fru_info.has_data()))

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    (self.basic_info is not None and self.basic_info.has_operation()) or
                                                                    (self.fru_info is not None and self.fru_info.has_operation()))

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "attributes" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                if (child_yang_name == "basic-info"):
                                                                    if (self.basic_info is None):
                                                                        self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo()
                                                                        self.basic_info.parent = self
                                                                        self._children_name_map["basic_info"] = "basic-info"
                                                                    return self.basic_info

                                                                if (child_yang_name == "fru-info"):
                                                                    if (self.fru_info is None):
                                                                        self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo()
                                                                        self.fru_info.parent = self
                                                                        self._children_name_map["fru_info"] = "fru-info"
                                                                    return self.fru_info

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "basic-info" or name == "fru-info"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                pass

                                                        def has_data(self):
                                                            return (
                                                                self.name.is_set or
                                                                (self.attributes is not None and self.attributes.has_data()))

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.name.yfilter != YFilter.not_set or
                                                                (self.attributes is not None and self.attributes.has_operation()))

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "sensor" + "[name='" + self.name.get() + "']" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.name.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            if (child_yang_name == "attributes"):
                                                                if (self.attributes is None):
                                                                    self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor.Attributes()
                                                                    self.attributes.parent = self
                                                                    self._children_name_map["attributes"] = "attributes"
                                                                return self.attributes

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "attributes" or name == "name"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "name"):
                                                                self.name = value
                                                                self.name.value_namespace = name_space
                                                                self.name.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        for c in self.sensor:
                                                            if (c.has_data()):
                                                                return True
                                                        return False

                                                    def has_operation(self):
                                                        for c in self.sensor:
                                                            if (c.has_operation()):
                                                                return True
                                                        return self.yfilter != YFilter.not_set

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "sensors" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "sensor"):
                                                            for c in self.sensor:
                                                                segment = c.get_segment_path()
                                                                if (segment_path == segment):
                                                                    return c
                                                            c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors.Sensor()
                                                            c.parent = self
                                                            local_reference_key = "ydk::seg::%s" % segment_path
                                                            self._local_refs[local_reference_key] = c
                                                            self.sensor.append(c)
                                                            return c

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "sensor"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        pass


                                                class Attributes(Entity):
                                                    """
                                                    Attributes
                                                    
                                                    .. attribute:: basic_info
                                                    
                                                    	Entity attributes
                                                    	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.BasicInfo>`
                                                    
                                                    .. attribute:: fru_info
                                                    
                                                    	Field Replaceable Unit (FRU) attributes
                                                    	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes, self).__init__()

                                                        self.yang_name = "attributes"
                                                        self.yang_parent_name = "port-slot"

                                                        self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.BasicInfo()
                                                        self.basic_info.parent = self
                                                        self._children_name_map["basic_info"] = "basic-info"
                                                        self._children_yang_names.add("basic-info")

                                                        self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo()
                                                        self.fru_info.parent = self
                                                        self._children_name_map["fru_info"] = "fru-info"
                                                        self._children_yang_names.add("fru-info")


                                                    class BasicInfo(Entity):
                                                        """
                                                        Entity attributes
                                                        
                                                        .. attribute:: description
                                                        
                                                        	describes in user\-readable terms                 what the entity in question does
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: firmware_revision
                                                        
                                                        	firmware revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: hardware_revision
                                                        
                                                        	hw revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: is_field_replaceable_unit
                                                        
                                                        	1 if Field Replaceable Unit 0, if not
                                                        	**type**\:  bool
                                                        
                                                        .. attribute:: model_name
                                                        
                                                        	model name
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: name
                                                        
                                                        	name string for the entity
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: serial_number
                                                        
                                                        	serial number
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: software_revision
                                                        
                                                        	software revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: vendor_type
                                                        
                                                        	maps to the vendor OID string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.BasicInfo, self).__init__()

                                                            self.yang_name = "basic-info"
                                                            self.yang_parent_name = "attributes"

                                                            self.description = YLeaf(YType.str, "description")

                                                            self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                            self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                            self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                            self.model_name = YLeaf(YType.str, "model-name")

                                                            self.name = YLeaf(YType.str, "name")

                                                            self.serial_number = YLeaf(YType.str, "serial-number")

                                                            self.software_revision = YLeaf(YType.str, "software-revision")

                                                            self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("description",
                                                                            "firmware_revision",
                                                                            "hardware_revision",
                                                                            "is_field_replaceable_unit",
                                                                            "model_name",
                                                                            "name",
                                                                            "serial_number",
                                                                            "software_revision",
                                                                            "vendor_type") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.BasicInfo, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.description.is_set or
                                                                self.firmware_revision.is_set or
                                                                self.hardware_revision.is_set or
                                                                self.is_field_replaceable_unit.is_set or
                                                                self.model_name.is_set or
                                                                self.name.is_set or
                                                                self.serial_number.is_set or
                                                                self.software_revision.is_set or
                                                                self.vendor_type.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.description.yfilter != YFilter.not_set or
                                                                self.firmware_revision.yfilter != YFilter.not_set or
                                                                self.hardware_revision.yfilter != YFilter.not_set or
                                                                self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                self.model_name.yfilter != YFilter.not_set or
                                                                self.name.yfilter != YFilter.not_set or
                                                                self.serial_number.yfilter != YFilter.not_set or
                                                                self.software_revision.yfilter != YFilter.not_set or
                                                                self.vendor_type.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "basic-info" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.description.get_name_leafdata())
                                                            if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                            if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                            if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                            if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.model_name.get_name_leafdata())
                                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.name.get_name_leafdata())
                                                            if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                            if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                            if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "description"):
                                                                self.description = value
                                                                self.description.value_namespace = name_space
                                                                self.description.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "firmware-revision"):
                                                                self.firmware_revision = value
                                                                self.firmware_revision.value_namespace = name_space
                                                                self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "hardware-revision"):
                                                                self.hardware_revision = value
                                                                self.hardware_revision.value_namespace = name_space
                                                                self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "is-field-replaceable-unit"):
                                                                self.is_field_replaceable_unit = value
                                                                self.is_field_replaceable_unit.value_namespace = name_space
                                                                self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "model-name"):
                                                                self.model_name = value
                                                                self.model_name.value_namespace = name_space
                                                                self.model_name.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "name"):
                                                                self.name = value
                                                                self.name.value_namespace = name_space
                                                                self.name.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "serial-number"):
                                                                self.serial_number = value
                                                                self.serial_number.value_namespace = name_space
                                                                self.serial_number.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "software-revision"):
                                                                self.software_revision = value
                                                                self.software_revision.value_namespace = name_space
                                                                self.software_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "vendor-type"):
                                                                self.vendor_type = value
                                                                self.vendor_type.value_namespace = name_space
                                                                self.vendor_type.value_namespace_prefix = name_space_prefix


                                                    class FruInfo(Entity):
                                                        """
                                                        Field Replaceable Unit (FRU) attributes
                                                        
                                                        .. attribute:: last_operational_state_change
                                                        
                                                        	Time operational state is   last changed
                                                        	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange>`
                                                        
                                                        .. attribute:: module_administrative_state
                                                        
                                                        	Administrative    state
                                                        	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                        
                                                        .. attribute:: module_monitor_state
                                                        
                                                        	Monitor state
                                                        	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                        
                                                        .. attribute:: module_operational_state
                                                        
                                                        	Operation state
                                                        	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                        
                                                        .. attribute:: module_power_administrative_state
                                                        
                                                        	Power administrative state
                                                        	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                        
                                                        .. attribute:: module_reset_reason
                                                        
                                                        	Reset reason
                                                        	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                        
                                                        .. attribute:: module_up_time
                                                        
                                                        	Module up time
                                                        	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime>`
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo, self).__init__()

                                                            self.yang_name = "fru-info"
                                                            self.yang_parent_name = "attributes"

                                                            self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                            self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                            self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                            self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                            self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                            self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange()
                                                            self.last_operational_state_change.parent = self
                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                            self._children_yang_names.add("last-operational-state-change")

                                                            self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime()
                                                            self.module_up_time.parent = self
                                                            self._children_name_map["module_up_time"] = "module-up-time"
                                                            self._children_yang_names.add("module-up-time")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("module_administrative_state",
                                                                            "module_monitor_state",
                                                                            "module_operational_state",
                                                                            "module_power_administrative_state",
                                                                            "module_reset_reason") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo, self).__setattr__(name, value)


                                                        class LastOperationalStateChange(Entity):
                                                            """
                                                            Time operational state is   last changed
                                                            
                                                            .. attribute:: time_in_nano_seconds
                                                            
                                                            	Time Value in Nano\-seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: nanosecond
                                                            
                                                            .. attribute:: time_in_seconds
                                                            
                                                            	Time Value in Seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: second
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                self.yang_name = "last-operational-state-change"
                                                                self.yang_parent_name = "fru-info"

                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("time_in_nano_seconds",
                                                                                "time_in_seconds") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.time_in_nano_seconds.is_set or
                                                                    self.time_in_seconds.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "last-operational-state-change" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "time-in-nano-seconds"):
                                                                    self.time_in_nano_seconds = value
                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "time-in-seconds"):
                                                                    self.time_in_seconds = value
                                                                    self.time_in_seconds.value_namespace = name_space
                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                        class ModuleUpTime(Entity):
                                                            """
                                                            Module up time
                                                            
                                                            .. attribute:: time_in_nano_seconds
                                                            
                                                            	Time Value in Nano\-seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: nanosecond
                                                            
                                                            .. attribute:: time_in_seconds
                                                            
                                                            	Time Value in Seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: second
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                                self.yang_name = "module-up-time"
                                                                self.yang_parent_name = "fru-info"

                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("time_in_nano_seconds",
                                                                                "time_in_seconds") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.time_in_nano_seconds.is_set or
                                                                    self.time_in_seconds.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "module-up-time" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "time-in-nano-seconds"):
                                                                    self.time_in_nano_seconds = value
                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "time-in-seconds"):
                                                                    self.time_in_seconds = value
                                                                    self.time_in_seconds.value_namespace = name_space
                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                        def has_data(self):
                                                            return (
                                                                self.module_administrative_state.is_set or
                                                                self.module_monitor_state.is_set or
                                                                self.module_operational_state.is_set or
                                                                self.module_power_administrative_state.is_set or
                                                                self.module_reset_reason.is_set or
                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                                (self.module_up_time is not None and self.module_up_time.has_data()))

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.module_administrative_state.yfilter != YFilter.not_set or
                                                                self.module_monitor_state.yfilter != YFilter.not_set or
                                                                self.module_operational_state.yfilter != YFilter.not_set or
                                                                self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                                self.module_reset_reason.yfilter != YFilter.not_set or
                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                                (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "fru-info" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                            if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                            if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                            if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                            if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            if (child_yang_name == "last-operational-state-change"):
                                                                if (self.last_operational_state_change is None):
                                                                    self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange()
                                                                    self.last_operational_state_change.parent = self
                                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                return self.last_operational_state_change

                                                            if (child_yang_name == "module-up-time"):
                                                                if (self.module_up_time is None):
                                                                    self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime()
                                                                    self.module_up_time.parent = self
                                                                    self._children_name_map["module_up_time"] = "module-up-time"
                                                                return self.module_up_time

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "module-administrative-state"):
                                                                self.module_administrative_state = value
                                                                self.module_administrative_state.value_namespace = name_space
                                                                self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "module-monitor-state"):
                                                                self.module_monitor_state = value
                                                                self.module_monitor_state.value_namespace = name_space
                                                                self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "module-operational-state"):
                                                                self.module_operational_state = value
                                                                self.module_operational_state.value_namespace = name_space
                                                                self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "module-power-administrative-state"):
                                                                self.module_power_administrative_state = value
                                                                self.module_power_administrative_state.value_namespace = name_space
                                                                self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "module-reset-reason"):
                                                                self.module_reset_reason = value
                                                                self.module_reset_reason.value_namespace = name_space
                                                                self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            (self.basic_info is not None and self.basic_info.has_data()) or
                                                            (self.fru_info is not None and self.fru_info.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            (self.basic_info is not None and self.basic_info.has_operation()) or
                                                            (self.fru_info is not None and self.fru_info.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "attributes" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "basic-info"):
                                                            if (self.basic_info is None):
                                                                self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.BasicInfo()
                                                                self.basic_info.parent = self
                                                                self._children_name_map["basic_info"] = "basic-info"
                                                            return self.basic_info

                                                        if (child_yang_name == "fru-info"):
                                                            if (self.fru_info is None):
                                                                self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes.FruInfo()
                                                                self.fru_info.parent = self
                                                                self._children_name_map["fru_info"] = "fru-info"
                                                            return self.fru_info

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "basic-info" or name == "fru-info"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        pass

                                                def has_data(self):
                                                    return (
                                                        self.name.is_set or
                                                        (self.attributes is not None and self.attributes.has_data()) or
                                                        (self.portses is not None and self.portses.has_data()) or
                                                        (self.sensors is not None and self.sensors.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.name.yfilter != YFilter.not_set or
                                                        (self.attributes is not None and self.attributes.has_operation()) or
                                                        (self.portses is not None and self.portses.has_operation()) or
                                                        (self.sensors is not None and self.sensors.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "port-slot" + "[name='" + self.name.get() + "']" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.name.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "attributes"):
                                                        if (self.attributes is None):
                                                            self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Attributes()
                                                            self.attributes.parent = self
                                                            self._children_name_map["attributes"] = "attributes"
                                                        return self.attributes

                                                    if (child_yang_name == "portses"):
                                                        if (self.portses is None):
                                                            self.portses = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Portses()
                                                            self.portses.parent = self
                                                            self._children_name_map["portses"] = "portses"
                                                        return self.portses

                                                    if (child_yang_name == "sensors"):
                                                        if (self.sensors is None):
                                                            self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Sensors()
                                                            self.sensors.parent = self
                                                            self._children_name_map["sensors"] = "sensors"
                                                        return self.sensors

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "attributes" or name == "portses" or name == "sensors" or name == "name"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "name"):
                                                        self.name = value
                                                        self.name.value_namespace = name_space
                                                        self.name.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                for c in self.port_slot:
                                                    if (c.has_data()):
                                                        return True
                                                return False

                                            def has_operation(self):
                                                for c in self.port_slot:
                                                    if (c.has_operation()):
                                                        return True
                                                return self.yfilter != YFilter.not_set

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "port-slots" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "port-slot"):
                                                    for c in self.port_slot:
                                                        segment = c.get_segment_path()
                                                        if (segment_path == segment):
                                                            return c
                                                    c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot()
                                                    c.parent = self
                                                    local_reference_key = "ydk::seg::%s" % segment_path
                                                    self._local_refs[local_reference_key] = c
                                                    self.port_slot.append(c)
                                                    return c

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "port-slot"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass


                                        class Sensors(Entity):
                                            """
                                            Table of sensors
                                            
                                            .. attribute:: sensor
                                            
                                            	Sensor number
                                            	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor>`
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors, self).__init__()

                                                self.yang_name = "sensors"
                                                self.yang_parent_name = "module"

                                                self.sensor = YList(self)

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in () and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors, self).__setattr__(name, value)


                                            class Sensor(Entity):
                                                """
                                                Sensor number
                                                
                                                .. attribute:: name  <key>
                                                
                                                	Sensor name
                                                	**type**\:  str
                                                
                                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                                
                                                .. attribute:: attributes
                                                
                                                	Attributes
                                                	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes>`
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor, self).__init__()

                                                    self.yang_name = "sensor"
                                                    self.yang_parent_name = "sensors"

                                                    self.name = YLeaf(YType.str, "name")

                                                    self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes()
                                                    self.attributes.parent = self
                                                    self._children_name_map["attributes"] = "attributes"
                                                    self._children_yang_names.add("attributes")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("name") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor, self).__setattr__(name, value)


                                                class Attributes(Entity):
                                                    """
                                                    Attributes
                                                    
                                                    .. attribute:: basic_info
                                                    
                                                    	Entity attributes
                                                    	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.BasicInfo>`
                                                    
                                                    .. attribute:: fru_info
                                                    
                                                    	Field Replaceable Unit (FRU) attributes
                                                    	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes, self).__init__()

                                                        self.yang_name = "attributes"
                                                        self.yang_parent_name = "sensor"

                                                        self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.BasicInfo()
                                                        self.basic_info.parent = self
                                                        self._children_name_map["basic_info"] = "basic-info"
                                                        self._children_yang_names.add("basic-info")

                                                        self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo()
                                                        self.fru_info.parent = self
                                                        self._children_name_map["fru_info"] = "fru-info"
                                                        self._children_yang_names.add("fru-info")


                                                    class BasicInfo(Entity):
                                                        """
                                                        Entity attributes
                                                        
                                                        .. attribute:: description
                                                        
                                                        	describes in user\-readable terms                 what the entity in question does
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: firmware_revision
                                                        
                                                        	firmware revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: hardware_revision
                                                        
                                                        	hw revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: is_field_replaceable_unit
                                                        
                                                        	1 if Field Replaceable Unit 0, if not
                                                        	**type**\:  bool
                                                        
                                                        .. attribute:: model_name
                                                        
                                                        	model name
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: name
                                                        
                                                        	name string for the entity
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: serial_number
                                                        
                                                        	serial number
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: software_revision
                                                        
                                                        	software revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: vendor_type
                                                        
                                                        	maps to the vendor OID string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.BasicInfo, self).__init__()

                                                            self.yang_name = "basic-info"
                                                            self.yang_parent_name = "attributes"

                                                            self.description = YLeaf(YType.str, "description")

                                                            self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                            self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                            self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                            self.model_name = YLeaf(YType.str, "model-name")

                                                            self.name = YLeaf(YType.str, "name")

                                                            self.serial_number = YLeaf(YType.str, "serial-number")

                                                            self.software_revision = YLeaf(YType.str, "software-revision")

                                                            self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("description",
                                                                            "firmware_revision",
                                                                            "hardware_revision",
                                                                            "is_field_replaceable_unit",
                                                                            "model_name",
                                                                            "name",
                                                                            "serial_number",
                                                                            "software_revision",
                                                                            "vendor_type") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.description.is_set or
                                                                self.firmware_revision.is_set or
                                                                self.hardware_revision.is_set or
                                                                self.is_field_replaceable_unit.is_set or
                                                                self.model_name.is_set or
                                                                self.name.is_set or
                                                                self.serial_number.is_set or
                                                                self.software_revision.is_set or
                                                                self.vendor_type.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.description.yfilter != YFilter.not_set or
                                                                self.firmware_revision.yfilter != YFilter.not_set or
                                                                self.hardware_revision.yfilter != YFilter.not_set or
                                                                self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                self.model_name.yfilter != YFilter.not_set or
                                                                self.name.yfilter != YFilter.not_set or
                                                                self.serial_number.yfilter != YFilter.not_set or
                                                                self.software_revision.yfilter != YFilter.not_set or
                                                                self.vendor_type.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "basic-info" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.description.get_name_leafdata())
                                                            if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                            if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                            if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                            if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.model_name.get_name_leafdata())
                                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.name.get_name_leafdata())
                                                            if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                            if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                            if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "description"):
                                                                self.description = value
                                                                self.description.value_namespace = name_space
                                                                self.description.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "firmware-revision"):
                                                                self.firmware_revision = value
                                                                self.firmware_revision.value_namespace = name_space
                                                                self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "hardware-revision"):
                                                                self.hardware_revision = value
                                                                self.hardware_revision.value_namespace = name_space
                                                                self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "is-field-replaceable-unit"):
                                                                self.is_field_replaceable_unit = value
                                                                self.is_field_replaceable_unit.value_namespace = name_space
                                                                self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "model-name"):
                                                                self.model_name = value
                                                                self.model_name.value_namespace = name_space
                                                                self.model_name.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "name"):
                                                                self.name = value
                                                                self.name.value_namespace = name_space
                                                                self.name.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "serial-number"):
                                                                self.serial_number = value
                                                                self.serial_number.value_namespace = name_space
                                                                self.serial_number.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "software-revision"):
                                                                self.software_revision = value
                                                                self.software_revision.value_namespace = name_space
                                                                self.software_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "vendor-type"):
                                                                self.vendor_type = value
                                                                self.vendor_type.value_namespace = name_space
                                                                self.vendor_type.value_namespace_prefix = name_space_prefix


                                                    class FruInfo(Entity):
                                                        """
                                                        Field Replaceable Unit (FRU) attributes
                                                        
                                                        .. attribute:: last_operational_state_change
                                                        
                                                        	Time operational state is   last changed
                                                        	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange>`
                                                        
                                                        .. attribute:: module_administrative_state
                                                        
                                                        	Administrative    state
                                                        	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                        
                                                        .. attribute:: module_monitor_state
                                                        
                                                        	Monitor state
                                                        	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                        
                                                        .. attribute:: module_operational_state
                                                        
                                                        	Operation state
                                                        	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                        
                                                        .. attribute:: module_power_administrative_state
                                                        
                                                        	Power administrative state
                                                        	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                        
                                                        .. attribute:: module_reset_reason
                                                        
                                                        	Reset reason
                                                        	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                        
                                                        .. attribute:: module_up_time
                                                        
                                                        	Module up time
                                                        	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime>`
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo, self).__init__()

                                                            self.yang_name = "fru-info"
                                                            self.yang_parent_name = "attributes"

                                                            self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                            self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                            self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                            self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                            self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                            self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                            self.last_operational_state_change.parent = self
                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                            self._children_yang_names.add("last-operational-state-change")

                                                            self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                            self.module_up_time.parent = self
                                                            self._children_name_map["module_up_time"] = "module-up-time"
                                                            self._children_yang_names.add("module-up-time")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("module_administrative_state",
                                                                            "module_monitor_state",
                                                                            "module_operational_state",
                                                                            "module_power_administrative_state",
                                                                            "module_reset_reason") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)


                                                        class LastOperationalStateChange(Entity):
                                                            """
                                                            Time operational state is   last changed
                                                            
                                                            .. attribute:: time_in_nano_seconds
                                                            
                                                            	Time Value in Nano\-seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: nanosecond
                                                            
                                                            .. attribute:: time_in_seconds
                                                            
                                                            	Time Value in Seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: second
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                self.yang_name = "last-operational-state-change"
                                                                self.yang_parent_name = "fru-info"

                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("time_in_nano_seconds",
                                                                                "time_in_seconds") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.time_in_nano_seconds.is_set or
                                                                    self.time_in_seconds.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "last-operational-state-change" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "time-in-nano-seconds"):
                                                                    self.time_in_nano_seconds = value
                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "time-in-seconds"):
                                                                    self.time_in_seconds = value
                                                                    self.time_in_seconds.value_namespace = name_space
                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                        class ModuleUpTime(Entity):
                                                            """
                                                            Module up time
                                                            
                                                            .. attribute:: time_in_nano_seconds
                                                            
                                                            	Time Value in Nano\-seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: nanosecond
                                                            
                                                            .. attribute:: time_in_seconds
                                                            
                                                            	Time Value in Seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: second
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                                self.yang_name = "module-up-time"
                                                                self.yang_parent_name = "fru-info"

                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("time_in_nano_seconds",
                                                                                "time_in_seconds") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.time_in_nano_seconds.is_set or
                                                                    self.time_in_seconds.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "module-up-time" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "time-in-nano-seconds"):
                                                                    self.time_in_nano_seconds = value
                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "time-in-seconds"):
                                                                    self.time_in_seconds = value
                                                                    self.time_in_seconds.value_namespace = name_space
                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                        def has_data(self):
                                                            return (
                                                                self.module_administrative_state.is_set or
                                                                self.module_monitor_state.is_set or
                                                                self.module_operational_state.is_set or
                                                                self.module_power_administrative_state.is_set or
                                                                self.module_reset_reason.is_set or
                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                                (self.module_up_time is not None and self.module_up_time.has_data()))

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.module_administrative_state.yfilter != YFilter.not_set or
                                                                self.module_monitor_state.yfilter != YFilter.not_set or
                                                                self.module_operational_state.yfilter != YFilter.not_set or
                                                                self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                                self.module_reset_reason.yfilter != YFilter.not_set or
                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                                (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "fru-info" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                            if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                            if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                            if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                            if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            if (child_yang_name == "last-operational-state-change"):
                                                                if (self.last_operational_state_change is None):
                                                                    self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                    self.last_operational_state_change.parent = self
                                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                return self.last_operational_state_change

                                                            if (child_yang_name == "module-up-time"):
                                                                if (self.module_up_time is None):
                                                                    self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                    self.module_up_time.parent = self
                                                                    self._children_name_map["module_up_time"] = "module-up-time"
                                                                return self.module_up_time

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "module-administrative-state"):
                                                                self.module_administrative_state = value
                                                                self.module_administrative_state.value_namespace = name_space
                                                                self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "module-monitor-state"):
                                                                self.module_monitor_state = value
                                                                self.module_monitor_state.value_namespace = name_space
                                                                self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "module-operational-state"):
                                                                self.module_operational_state = value
                                                                self.module_operational_state.value_namespace = name_space
                                                                self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "module-power-administrative-state"):
                                                                self.module_power_administrative_state = value
                                                                self.module_power_administrative_state.value_namespace = name_space
                                                                self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "module-reset-reason"):
                                                                self.module_reset_reason = value
                                                                self.module_reset_reason.value_namespace = name_space
                                                                self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            (self.basic_info is not None and self.basic_info.has_data()) or
                                                            (self.fru_info is not None and self.fru_info.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            (self.basic_info is not None and self.basic_info.has_operation()) or
                                                            (self.fru_info is not None and self.fru_info.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "attributes" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "basic-info"):
                                                            if (self.basic_info is None):
                                                                self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.BasicInfo()
                                                                self.basic_info.parent = self
                                                                self._children_name_map["basic_info"] = "basic-info"
                                                            return self.basic_info

                                                        if (child_yang_name == "fru-info"):
                                                            if (self.fru_info is None):
                                                                self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes.FruInfo()
                                                                self.fru_info.parent = self
                                                                self._children_name_map["fru_info"] = "fru-info"
                                                            return self.fru_info

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "basic-info" or name == "fru-info"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        pass

                                                def has_data(self):
                                                    return (
                                                        self.name.is_set or
                                                        (self.attributes is not None and self.attributes.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.name.yfilter != YFilter.not_set or
                                                        (self.attributes is not None and self.attributes.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "sensor" + "[name='" + self.name.get() + "']" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.name.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "attributes"):
                                                        if (self.attributes is None):
                                                            self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.Attributes()
                                                            self.attributes.parent = self
                                                            self._children_name_map["attributes"] = "attributes"
                                                        return self.attributes

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "attributes" or name == "name"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "name"):
                                                        self.name = value
                                                        self.name.value_namespace = name_space
                                                        self.name.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                for c in self.sensor:
                                                    if (c.has_data()):
                                                        return True
                                                return False

                                            def has_operation(self):
                                                for c in self.sensor:
                                                    if (c.has_operation()):
                                                        return True
                                                return self.yfilter != YFilter.not_set

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "sensors" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "sensor"):
                                                    for c in self.sensor:
                                                        segment = c.get_segment_path()
                                                        if (segment_path == segment):
                                                            return c
                                                    c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor()
                                                    c.parent = self
                                                    local_reference_key = "ydk::seg::%s" % segment_path
                                                    self._local_refs[local_reference_key] = c
                                                    self.sensor.append(c)
                                                    return c

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "sensor"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass


                                        class Attributes(Entity):
                                            """
                                            Attributes
                                            
                                            .. attribute:: basic_info
                                            
                                            	Entity attributes
                                            	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.BasicInfo>`
                                            
                                            .. attribute:: fru_info
                                            
                                            	Field Replaceable Unit (FRU) attributes
                                            	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo>`
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes, self).__init__()

                                                self.yang_name = "attributes"
                                                self.yang_parent_name = "module"

                                                self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.BasicInfo()
                                                self.basic_info.parent = self
                                                self._children_name_map["basic_info"] = "basic-info"
                                                self._children_yang_names.add("basic-info")

                                                self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo()
                                                self.fru_info.parent = self
                                                self._children_name_map["fru_info"] = "fru-info"
                                                self._children_yang_names.add("fru-info")


                                            class BasicInfo(Entity):
                                                """
                                                Entity attributes
                                                
                                                .. attribute:: description
                                                
                                                	describes in user\-readable terms                 what the entity in question does
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: firmware_revision
                                                
                                                	firmware revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: hardware_revision
                                                
                                                	hw revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: is_field_replaceable_unit
                                                
                                                	1 if Field Replaceable Unit 0, if not
                                                	**type**\:  bool
                                                
                                                .. attribute:: model_name
                                                
                                                	model name
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: name
                                                
                                                	name string for the entity
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: serial_number
                                                
                                                	serial number
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: software_revision
                                                
                                                	software revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: vendor_type
                                                
                                                	maps to the vendor OID string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.BasicInfo, self).__init__()

                                                    self.yang_name = "basic-info"
                                                    self.yang_parent_name = "attributes"

                                                    self.description = YLeaf(YType.str, "description")

                                                    self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                    self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                    self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                    self.model_name = YLeaf(YType.str, "model-name")

                                                    self.name = YLeaf(YType.str, "name")

                                                    self.serial_number = YLeaf(YType.str, "serial-number")

                                                    self.software_revision = YLeaf(YType.str, "software-revision")

                                                    self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("description",
                                                                    "firmware_revision",
                                                                    "hardware_revision",
                                                                    "is_field_replaceable_unit",
                                                                    "model_name",
                                                                    "name",
                                                                    "serial_number",
                                                                    "software_revision",
                                                                    "vendor_type") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.BasicInfo, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.BasicInfo, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.description.is_set or
                                                        self.firmware_revision.is_set or
                                                        self.hardware_revision.is_set or
                                                        self.is_field_replaceable_unit.is_set or
                                                        self.model_name.is_set or
                                                        self.name.is_set or
                                                        self.serial_number.is_set or
                                                        self.software_revision.is_set or
                                                        self.vendor_type.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.description.yfilter != YFilter.not_set or
                                                        self.firmware_revision.yfilter != YFilter.not_set or
                                                        self.hardware_revision.yfilter != YFilter.not_set or
                                                        self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                        self.model_name.yfilter != YFilter.not_set or
                                                        self.name.yfilter != YFilter.not_set or
                                                        self.serial_number.yfilter != YFilter.not_set or
                                                        self.software_revision.yfilter != YFilter.not_set or
                                                        self.vendor_type.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "basic-info" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.description.get_name_leafdata())
                                                    if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                    if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                    if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                    if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.model_name.get_name_leafdata())
                                                    if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.name.get_name_leafdata())
                                                    if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                    if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                    if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "description"):
                                                        self.description = value
                                                        self.description.value_namespace = name_space
                                                        self.description.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "firmware-revision"):
                                                        self.firmware_revision = value
                                                        self.firmware_revision.value_namespace = name_space
                                                        self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "hardware-revision"):
                                                        self.hardware_revision = value
                                                        self.hardware_revision.value_namespace = name_space
                                                        self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "is-field-replaceable-unit"):
                                                        self.is_field_replaceable_unit = value
                                                        self.is_field_replaceable_unit.value_namespace = name_space
                                                        self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "model-name"):
                                                        self.model_name = value
                                                        self.model_name.value_namespace = name_space
                                                        self.model_name.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "name"):
                                                        self.name = value
                                                        self.name.value_namespace = name_space
                                                        self.name.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "serial-number"):
                                                        self.serial_number = value
                                                        self.serial_number.value_namespace = name_space
                                                        self.serial_number.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "software-revision"):
                                                        self.software_revision = value
                                                        self.software_revision.value_namespace = name_space
                                                        self.software_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "vendor-type"):
                                                        self.vendor_type = value
                                                        self.vendor_type.value_namespace = name_space
                                                        self.vendor_type.value_namespace_prefix = name_space_prefix


                                            class FruInfo(Entity):
                                                """
                                                Field Replaceable Unit (FRU) attributes
                                                
                                                .. attribute:: last_operational_state_change
                                                
                                                	Time operational state is   last changed
                                                	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.LastOperationalStateChange>`
                                                
                                                .. attribute:: module_administrative_state
                                                
                                                	Administrative    state
                                                	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                
                                                .. attribute:: module_monitor_state
                                                
                                                	Monitor state
                                                	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                
                                                .. attribute:: module_operational_state
                                                
                                                	Operation state
                                                	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                
                                                .. attribute:: module_power_administrative_state
                                                
                                                	Power administrative state
                                                	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                
                                                .. attribute:: module_reset_reason
                                                
                                                	Reset reason
                                                	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                
                                                .. attribute:: module_up_time
                                                
                                                	Module up time
                                                	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.ModuleUpTime>`
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo, self).__init__()

                                                    self.yang_name = "fru-info"
                                                    self.yang_parent_name = "attributes"

                                                    self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                    self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                    self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                    self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                    self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                    self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.LastOperationalStateChange()
                                                    self.last_operational_state_change.parent = self
                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    self._children_yang_names.add("last-operational-state-change")

                                                    self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.ModuleUpTime()
                                                    self.module_up_time.parent = self
                                                    self._children_name_map["module_up_time"] = "module-up-time"
                                                    self._children_yang_names.add("module-up-time")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("module_administrative_state",
                                                                    "module_monitor_state",
                                                                    "module_operational_state",
                                                                    "module_power_administrative_state",
                                                                    "module_reset_reason") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo, self).__setattr__(name, value)


                                                class LastOperationalStateChange(Entity):
                                                    """
                                                    Time operational state is   last changed
                                                    
                                                    .. attribute:: time_in_nano_seconds
                                                    
                                                    	Time Value in Nano\-seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: nanosecond
                                                    
                                                    .. attribute:: time_in_seconds
                                                    
                                                    	Time Value in Seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: second
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                        self.yang_name = "last-operational-state-change"
                                                        self.yang_parent_name = "fru-info"

                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("time_in_nano_seconds",
                                                                        "time_in_seconds") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.time_in_nano_seconds.is_set or
                                                            self.time_in_seconds.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "last-operational-state-change" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "time-in-nano-seconds"):
                                                            self.time_in_nano_seconds = value
                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "time-in-seconds"):
                                                            self.time_in_seconds = value
                                                            self.time_in_seconds.value_namespace = name_space
                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                class ModuleUpTime(Entity):
                                                    """
                                                    Module up time
                                                    
                                                    .. attribute:: time_in_nano_seconds
                                                    
                                                    	Time Value in Nano\-seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: nanosecond
                                                    
                                                    .. attribute:: time_in_seconds
                                                    
                                                    	Time Value in Seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: second
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                        self.yang_name = "module-up-time"
                                                        self.yang_parent_name = "fru-info"

                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("time_in_nano_seconds",
                                                                        "time_in_seconds") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.time_in_nano_seconds.is_set or
                                                            self.time_in_seconds.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "module-up-time" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "time-in-nano-seconds"):
                                                            self.time_in_nano_seconds = value
                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "time-in-seconds"):
                                                            self.time_in_seconds = value
                                                            self.time_in_seconds.value_namespace = name_space
                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        self.module_administrative_state.is_set or
                                                        self.module_monitor_state.is_set or
                                                        self.module_operational_state.is_set or
                                                        self.module_power_administrative_state.is_set or
                                                        self.module_reset_reason.is_set or
                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                        (self.module_up_time is not None and self.module_up_time.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.module_administrative_state.yfilter != YFilter.not_set or
                                                        self.module_monitor_state.yfilter != YFilter.not_set or
                                                        self.module_operational_state.yfilter != YFilter.not_set or
                                                        self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                        self.module_reset_reason.yfilter != YFilter.not_set or
                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                        (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "fru-info" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                    if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                    if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                    if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                    if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "last-operational-state-change"):
                                                        if (self.last_operational_state_change is None):
                                                            self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.LastOperationalStateChange()
                                                            self.last_operational_state_change.parent = self
                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                        return self.last_operational_state_change

                                                    if (child_yang_name == "module-up-time"):
                                                        if (self.module_up_time is None):
                                                            self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo.ModuleUpTime()
                                                            self.module_up_time.parent = self
                                                            self._children_name_map["module_up_time"] = "module-up-time"
                                                        return self.module_up_time

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "module-administrative-state"):
                                                        self.module_administrative_state = value
                                                        self.module_administrative_state.value_namespace = name_space
                                                        self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "module-monitor-state"):
                                                        self.module_monitor_state = value
                                                        self.module_monitor_state.value_namespace = name_space
                                                        self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "module-operational-state"):
                                                        self.module_operational_state = value
                                                        self.module_operational_state.value_namespace = name_space
                                                        self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "module-power-administrative-state"):
                                                        self.module_power_administrative_state = value
                                                        self.module_power_administrative_state.value_namespace = name_space
                                                        self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "module-reset-reason"):
                                                        self.module_reset_reason = value
                                                        self.module_reset_reason.value_namespace = name_space
                                                        self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    (self.basic_info is not None and self.basic_info.has_data()) or
                                                    (self.fru_info is not None and self.fru_info.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    (self.basic_info is not None and self.basic_info.has_operation()) or
                                                    (self.fru_info is not None and self.fru_info.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "basic-info"):
                                                    if (self.basic_info is None):
                                                        self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.BasicInfo()
                                                        self.basic_info.parent = self
                                                        self._children_name_map["basic_info"] = "basic-info"
                                                    return self.basic_info

                                                if (child_yang_name == "fru-info"):
                                                    if (self.fru_info is None):
                                                        self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes.FruInfo()
                                                        self.fru_info.parent = self
                                                        self._children_name_map["fru_info"] = "fru-info"
                                                    return self.fru_info

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "basic-info" or name == "fru-info"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass

                                        def has_data(self):
                                            return (
                                                (self.attributes is not None and self.attributes.has_data()) or
                                                (self.port_slots is not None and self.port_slots.has_data()) or
                                                (self.sensors is not None and self.sensors.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.attributes is not None and self.attributes.has_operation()) or
                                                (self.port_slots is not None and self.port_slots.has_operation()) or
                                                (self.sensors is not None and self.sensors.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "module" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "attributes"):
                                                if (self.attributes is None):
                                                    self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Attributes()
                                                    self.attributes.parent = self
                                                    self._children_name_map["attributes"] = "attributes"
                                                return self.attributes

                                            if (child_yang_name == "port-slots"):
                                                if (self.port_slots is None):
                                                    self.port_slots = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots()
                                                    self.port_slots.parent = self
                                                    self._children_name_map["port_slots"] = "port-slots"
                                                return self.port_slots

                                            if (child_yang_name == "sensors"):
                                                if (self.sensors is None):
                                                    self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors()
                                                    self.sensors.parent = self
                                                    self._children_name_map["sensors"] = "sensors"
                                                return self.sensors

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "attributes" or name == "port-slots" or name == "sensors"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass


                                    class Attributes(Entity):
                                        """
                                        Attributes
                                        
                                        .. attribute:: basic_info
                                        
                                        	Entity attributes
                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.BasicInfo>`
                                        
                                        .. attribute:: fru_info
                                        
                                        	Field Replaceable Unit (FRU) attributes
                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo>`
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes, self).__init__()

                                            self.yang_name = "attributes"
                                            self.yang_parent_name = "sub-slot"

                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.BasicInfo()
                                            self.basic_info.parent = self
                                            self._children_name_map["basic_info"] = "basic-info"
                                            self._children_yang_names.add("basic-info")

                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo()
                                            self.fru_info.parent = self
                                            self._children_name_map["fru_info"] = "fru-info"
                                            self._children_yang_names.add("fru-info")


                                        class BasicInfo(Entity):
                                            """
                                            Entity attributes
                                            
                                            .. attribute:: description
                                            
                                            	describes in user\-readable terms                 what the entity in question does
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: firmware_revision
                                            
                                            	firmware revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: hardware_revision
                                            
                                            	hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: is_field_replaceable_unit
                                            
                                            	1 if Field Replaceable Unit 0, if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: model_name
                                            
                                            	model name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: name
                                            
                                            	name string for the entity
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: serial_number
                                            
                                            	serial number
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: software_revision
                                            
                                            	software revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: vendor_type
                                            
                                            	maps to the vendor OID string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.BasicInfo, self).__init__()

                                                self.yang_name = "basic-info"
                                                self.yang_parent_name = "attributes"

                                                self.description = YLeaf(YType.str, "description")

                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                self.model_name = YLeaf(YType.str, "model-name")

                                                self.name = YLeaf(YType.str, "name")

                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("description",
                                                                "firmware_revision",
                                                                "hardware_revision",
                                                                "is_field_replaceable_unit",
                                                                "model_name",
                                                                "name",
                                                                "serial_number",
                                                                "software_revision",
                                                                "vendor_type") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.BasicInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.BasicInfo, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.description.is_set or
                                                    self.firmware_revision.is_set or
                                                    self.hardware_revision.is_set or
                                                    self.is_field_replaceable_unit.is_set or
                                                    self.model_name.is_set or
                                                    self.name.is_set or
                                                    self.serial_number.is_set or
                                                    self.software_revision.is_set or
                                                    self.vendor_type.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.description.yfilter != YFilter.not_set or
                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                    self.model_name.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    self.serial_number.yfilter != YFilter.not_set or
                                                    self.software_revision.yfilter != YFilter.not_set or
                                                    self.vendor_type.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "basic-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "description"):
                                                    self.description = value
                                                    self.description.value_namespace = name_space
                                                    self.description.value_namespace_prefix = name_space_prefix
                                                if(value_path == "firmware-revision"):
                                                    self.firmware_revision = value
                                                    self.firmware_revision.value_namespace = name_space
                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "hardware-revision"):
                                                    self.hardware_revision = value
                                                    self.hardware_revision.value_namespace = name_space
                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-field-replaceable-unit"):
                                                    self.is_field_replaceable_unit = value
                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "model-name"):
                                                    self.model_name = value
                                                    self.model_name.value_namespace = name_space
                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "serial-number"):
                                                    self.serial_number = value
                                                    self.serial_number.value_namespace = name_space
                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "software-revision"):
                                                    self.software_revision = value
                                                    self.software_revision.value_namespace = name_space
                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "vendor-type"):
                                                    self.vendor_type = value
                                                    self.vendor_type.value_namespace = name_space
                                                    self.vendor_type.value_namespace_prefix = name_space_prefix


                                        class FruInfo(Entity):
                                            """
                                            Field Replaceable Unit (FRU) attributes
                                            
                                            .. attribute:: last_operational_state_change
                                            
                                            	Time operational state is   last changed
                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.LastOperationalStateChange>`
                                            
                                            .. attribute:: module_administrative_state
                                            
                                            	Administrative    state
                                            	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                            
                                            .. attribute:: module_monitor_state
                                            
                                            	Monitor state
                                            	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                            
                                            .. attribute:: module_operational_state
                                            
                                            	Operation state
                                            	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                            
                                            .. attribute:: module_power_administrative_state
                                            
                                            	Power administrative state
                                            	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                            
                                            .. attribute:: module_reset_reason
                                            
                                            	Reset reason
                                            	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                            
                                            .. attribute:: module_up_time
                                            
                                            	Module up time
                                            	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.ModuleUpTime>`
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo, self).__init__()

                                                self.yang_name = "fru-info"
                                                self.yang_parent_name = "attributes"

                                                self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.LastOperationalStateChange()
                                                self.last_operational_state_change.parent = self
                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                self._children_yang_names.add("last-operational-state-change")

                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.ModuleUpTime()
                                                self.module_up_time.parent = self
                                                self._children_name_map["module_up_time"] = "module-up-time"
                                                self._children_yang_names.add("module-up-time")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("module_administrative_state",
                                                                "module_monitor_state",
                                                                "module_operational_state",
                                                                "module_power_administrative_state",
                                                                "module_reset_reason") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo, self).__setattr__(name, value)


                                            class LastOperationalStateChange(Entity):
                                                """
                                                Time operational state is   last changed
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                    self.yang_name = "last-operational-state-change"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                            class ModuleUpTime(Entity):
                                                """
                                                Module up time
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                    self.yang_name = "module-up-time"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "module-up-time" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.module_administrative_state.is_set or
                                                    self.module_monitor_state.is_set or
                                                    self.module_operational_state.is_set or
                                                    self.module_power_administrative_state.is_set or
                                                    self.module_reset_reason.is_set or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                    (self.module_up_time is not None and self.module_up_time.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.module_administrative_state.yfilter != YFilter.not_set or
                                                    self.module_monitor_state.yfilter != YFilter.not_set or
                                                    self.module_operational_state.yfilter != YFilter.not_set or
                                                    self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                    self.module_reset_reason.yfilter != YFilter.not_set or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                    (self.module_up_time is not None and self.module_up_time.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "fru-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "last-operational-state-change"):
                                                    if (self.last_operational_state_change is None):
                                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    return self.last_operational_state_change

                                                if (child_yang_name == "module-up-time"):
                                                    if (self.module_up_time is None):
                                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo.ModuleUpTime()
                                                        self.module_up_time.parent = self
                                                        self._children_name_map["module_up_time"] = "module-up-time"
                                                    return self.module_up_time

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "module-administrative-state"):
                                                    self.module_administrative_state = value
                                                    self.module_administrative_state.value_namespace = name_space
                                                    self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-monitor-state"):
                                                    self.module_monitor_state = value
                                                    self.module_monitor_state.value_namespace = name_space
                                                    self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-operational-state"):
                                                    self.module_operational_state = value
                                                    self.module_operational_state.value_namespace = name_space
                                                    self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-power-administrative-state"):
                                                    self.module_power_administrative_state = value
                                                    self.module_power_administrative_state.value_namespace = name_space
                                                    self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-reset-reason"):
                                                    self.module_reset_reason = value
                                                    self.module_reset_reason.value_namespace = name_space
                                                    self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                (self.fru_info is not None and self.fru_info.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "attributes" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "basic-info"):
                                                if (self.basic_info is None):
                                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                return self.basic_info

                                            if (child_yang_name == "fru-info"):
                                                if (self.fru_info is None):
                                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                return self.fru_info

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "basic-info" or name == "fru-info"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            self.name.is_set or
                                            (self.attributes is not None and self.attributes.has_data()) or
                                            (self.module is not None and self.module.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            (self.attributes is not None and self.attributes.has_operation()) or
                                            (self.module is not None and self.module.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "sub-slot" + "[name='" + self.name.get() + "']" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "attributes"):
                                            if (self.attributes is None):
                                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Attributes()
                                                self.attributes.parent = self
                                                self._children_name_map["attributes"] = "attributes"
                                            return self.attributes

                                        if (child_yang_name == "module"):
                                            if (self.module is None):
                                                self.module = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module()
                                                self.module.parent = self
                                                self._children_name_map["module"] = "module"
                                            return self.module

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "attributes" or name == "module" or name == "name"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.sub_slot:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.sub_slot:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "sub-slots" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "sub-slot"):
                                        for c in self.sub_slot:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.sub_slot.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "sub-slot"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class PortSlots(Entity):
                                """
                                Table of port slots
                                
                                .. attribute:: port_slot
                                
                                	Port slot number
                                	**type**\: list of    :py:class:`PortSlot <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot>`
                                
                                

                                """

                                _prefix = 'plat-chas-invmgr-oper'
                                _revision = '2015-01-07'

                                def __init__(self):
                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots, self).__init__()

                                    self.yang_name = "port-slots"
                                    self.yang_parent_name = "card"

                                    self.port_slot = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots, self).__setattr__(name, value)


                                class PortSlot(Entity):
                                    """
                                    Port slot number
                                    
                                    .. attribute:: name  <key>
                                    
                                    	Port slot name
                                    	**type**\:  str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: attributes
                                    
                                    	Attributes
                                    	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes>`
                                    
                                    .. attribute:: portses
                                    
                                    	Table of spirit port slots
                                    	**type**\:   :py:class:`Portses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses>`
                                    
                                    .. attribute:: sensors
                                    
                                    	Table of sensors
                                    	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors>`
                                    
                                    

                                    """

                                    _prefix = 'plat-chas-invmgr-oper'
                                    _revision = '2015-01-07'

                                    def __init__(self):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot, self).__init__()

                                        self.yang_name = "port-slot"
                                        self.yang_parent_name = "port-slots"

                                        self.name = YLeaf(YType.str, "name")

                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes()
                                        self.attributes.parent = self
                                        self._children_name_map["attributes"] = "attributes"
                                        self._children_yang_names.add("attributes")

                                        self.portses = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses()
                                        self.portses.parent = self
                                        self._children_name_map["portses"] = "portses"
                                        self._children_yang_names.add("portses")

                                        self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors()
                                        self.sensors.parent = self
                                        self._children_name_map["sensors"] = "sensors"
                                        self._children_yang_names.add("sensors")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("name") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot, self).__setattr__(name, value)


                                    class Portses(Entity):
                                        """
                                        Table of spirit port slots
                                        
                                        .. attribute:: ports
                                        
                                        	Port number
                                        	**type**\: list of    :py:class:`Ports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports>`
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses, self).__init__()

                                            self.yang_name = "portses"
                                            self.yang_parent_name = "port-slot"

                                            self.ports = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in () and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses, self).__setattr__(name, value)


                                        class Ports(Entity):
                                            """
                                            Port number
                                            
                                            .. attribute:: name  <key>
                                            
                                            	Port name
                                            	**type**\:  str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: attributes
                                            
                                            	Attributes
                                            	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes>`
                                            
                                            .. attribute:: hw_components
                                            
                                            	Table of  HW components 
                                            	**type**\:   :py:class:`HwComponents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents>`
                                            
                                            .. attribute:: sensors
                                            
                                            	Table of sensors
                                            	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors>`
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports, self).__init__()

                                                self.yang_name = "ports"
                                                self.yang_parent_name = "portses"

                                                self.name = YLeaf(YType.str, "name")

                                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes()
                                                self.attributes.parent = self
                                                self._children_name_map["attributes"] = "attributes"
                                                self._children_yang_names.add("attributes")

                                                self.hw_components = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents()
                                                self.hw_components.parent = self
                                                self._children_name_map["hw_components"] = "hw-components"
                                                self._children_yang_names.add("hw-components")

                                                self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors()
                                                self.sensors.parent = self
                                                self._children_name_map["sensors"] = "sensors"
                                                self._children_yang_names.add("sensors")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("name") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports, self).__setattr__(name, value)


                                            class HwComponents(Entity):
                                                """
                                                Table of  HW components 
                                                
                                                .. attribute:: hw_component
                                                
                                                	HW component number
                                                	**type**\: list of    :py:class:`HwComponent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent>`
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents, self).__init__()

                                                    self.yang_name = "hw-components"
                                                    self.yang_parent_name = "ports"

                                                    self.hw_component = YList(self)

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in () and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents, self).__setattr__(name, value)


                                                class HwComponent(Entity):
                                                    """
                                                    HW component number
                                                    
                                                    .. attribute:: name  <key>
                                                    
                                                    	HW component name
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                                    
                                                    .. attribute:: attributes
                                                    
                                                    	Attributes
                                                    	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes>`
                                                    
                                                    .. attribute:: sensors
                                                    
                                                    	Table of sensors
                                                    	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent, self).__init__()

                                                        self.yang_name = "hw-component"
                                                        self.yang_parent_name = "hw-components"

                                                        self.name = YLeaf(YType.str, "name")

                                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes()
                                                        self.attributes.parent = self
                                                        self._children_name_map["attributes"] = "attributes"
                                                        self._children_yang_names.add("attributes")

                                                        self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors()
                                                        self.sensors.parent = self
                                                        self._children_name_map["sensors"] = "sensors"
                                                        self._children_yang_names.add("sensors")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("name") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent, self).__setattr__(name, value)


                                                    class Sensors(Entity):
                                                        """
                                                        Table of sensors
                                                        
                                                        .. attribute:: sensor
                                                        
                                                        	Sensor number
                                                        	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor>`
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors, self).__init__()

                                                            self.yang_name = "sensors"
                                                            self.yang_parent_name = "hw-component"

                                                            self.sensor = YList(self)

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in () and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors, self).__setattr__(name, value)


                                                        class Sensor(Entity):
                                                            """
                                                            Sensor number
                                                            
                                                            .. attribute:: name  <key>
                                                            
                                                            	Sensor name
                                                            	**type**\:  str
                                                            
                                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                                            
                                                            .. attribute:: attributes
                                                            
                                                            	Attributes
                                                            	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes>`
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor, self).__init__()

                                                                self.yang_name = "sensor"
                                                                self.yang_parent_name = "sensors"

                                                                self.name = YLeaf(YType.str, "name")

                                                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes()
                                                                self.attributes.parent = self
                                                                self._children_name_map["attributes"] = "attributes"
                                                                self._children_yang_names.add("attributes")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("name") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor, self).__setattr__(name, value)


                                                            class Attributes(Entity):
                                                                """
                                                                Attributes
                                                                
                                                                .. attribute:: basic_info
                                                                
                                                                	Entity attributes
                                                                	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo>`
                                                                
                                                                .. attribute:: fru_info
                                                                
                                                                	Field Replaceable Unit (FRU) attributes
                                                                	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo>`
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes, self).__init__()

                                                                    self.yang_name = "attributes"
                                                                    self.yang_parent_name = "sensor"

                                                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo()
                                                                    self.basic_info.parent = self
                                                                    self._children_name_map["basic_info"] = "basic-info"
                                                                    self._children_yang_names.add("basic-info")

                                                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo()
                                                                    self.fru_info.parent = self
                                                                    self._children_name_map["fru_info"] = "fru-info"
                                                                    self._children_yang_names.add("fru-info")


                                                                class BasicInfo(Entity):
                                                                    """
                                                                    Entity attributes
                                                                    
                                                                    .. attribute:: description
                                                                    
                                                                    	describes in user\-readable terms                 what the entity in question does
                                                                    	**type**\:  str
                                                                    
                                                                    	**length:** 0..255
                                                                    
                                                                    .. attribute:: firmware_revision
                                                                    
                                                                    	firmware revision string
                                                                    	**type**\:  str
                                                                    
                                                                    	**length:** 0..255
                                                                    
                                                                    .. attribute:: hardware_revision
                                                                    
                                                                    	hw revision string
                                                                    	**type**\:  str
                                                                    
                                                                    	**length:** 0..255
                                                                    
                                                                    .. attribute:: is_field_replaceable_unit
                                                                    
                                                                    	1 if Field Replaceable Unit 0, if not
                                                                    	**type**\:  bool
                                                                    
                                                                    .. attribute:: model_name
                                                                    
                                                                    	model name
                                                                    	**type**\:  str
                                                                    
                                                                    	**length:** 0..255
                                                                    
                                                                    .. attribute:: name
                                                                    
                                                                    	name string for the entity
                                                                    	**type**\:  str
                                                                    
                                                                    	**length:** 0..255
                                                                    
                                                                    .. attribute:: serial_number
                                                                    
                                                                    	serial number
                                                                    	**type**\:  str
                                                                    
                                                                    	**length:** 0..255
                                                                    
                                                                    .. attribute:: software_revision
                                                                    
                                                                    	software revision string
                                                                    	**type**\:  str
                                                                    
                                                                    	**length:** 0..255
                                                                    
                                                                    .. attribute:: vendor_type
                                                                    
                                                                    	maps to the vendor OID string
                                                                    	**type**\:  str
                                                                    
                                                                    	**length:** 0..255
                                                                    
                                                                    

                                                                    """

                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                    _revision = '2015-01-07'

                                                                    def __init__(self):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo, self).__init__()

                                                                        self.yang_name = "basic-info"
                                                                        self.yang_parent_name = "attributes"

                                                                        self.description = YLeaf(YType.str, "description")

                                                                        self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                                        self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                                        self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                                        self.model_name = YLeaf(YType.str, "model-name")

                                                                        self.name = YLeaf(YType.str, "name")

                                                                        self.serial_number = YLeaf(YType.str, "serial-number")

                                                                        self.software_revision = YLeaf(YType.str, "software-revision")

                                                                        self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                                    def __setattr__(self, name, value):
                                                                        self._check_monkey_patching_error(name, value)
                                                                        with _handle_type_error():
                                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                    "Please use list append or extend method."
                                                                                                    .format(value))
                                                                            if isinstance(value, Enum.YLeaf):
                                                                                value = value.name
                                                                            if name in ("description",
                                                                                        "firmware_revision",
                                                                                        "hardware_revision",
                                                                                        "is_field_replaceable_unit",
                                                                                        "model_name",
                                                                                        "name",
                                                                                        "serial_number",
                                                                                        "software_revision",
                                                                                        "vendor_type") and name in self.__dict__:
                                                                                if isinstance(value, YLeaf):
                                                                                    self.__dict__[name].set(value.get())
                                                                                elif isinstance(value, YLeafList):
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                                else:
                                                                                    self.__dict__[name].set(value)
                                                                            else:
                                                                                if hasattr(value, "parent") and name != "parent":
                                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                        value.parent = self
                                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                        value.parent = self
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)

                                                                    def has_data(self):
                                                                        return (
                                                                            self.description.is_set or
                                                                            self.firmware_revision.is_set or
                                                                            self.hardware_revision.is_set or
                                                                            self.is_field_replaceable_unit.is_set or
                                                                            self.model_name.is_set or
                                                                            self.name.is_set or
                                                                            self.serial_number.is_set or
                                                                            self.software_revision.is_set or
                                                                            self.vendor_type.is_set)

                                                                    def has_operation(self):
                                                                        return (
                                                                            self.yfilter != YFilter.not_set or
                                                                            self.description.yfilter != YFilter.not_set or
                                                                            self.firmware_revision.yfilter != YFilter.not_set or
                                                                            self.hardware_revision.yfilter != YFilter.not_set or
                                                                            self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                            self.model_name.yfilter != YFilter.not_set or
                                                                            self.name.yfilter != YFilter.not_set or
                                                                            self.serial_number.yfilter != YFilter.not_set or
                                                                            self.software_revision.yfilter != YFilter.not_set or
                                                                            self.vendor_type.yfilter != YFilter.not_set)

                                                                    def get_segment_path(self):
                                                                        path_buffer = ""
                                                                        path_buffer = "basic-info" + path_buffer

                                                                        return path_buffer

                                                                    def get_entity_path(self, ancestor):
                                                                        path_buffer = ""
                                                                        if (ancestor is None):
                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                        else:
                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                        leaf_name_data = LeafDataList()
                                                                        if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.description.get_name_leafdata())
                                                                        if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                                        if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                                        if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                                        if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.model_name.get_name_leafdata())
                                                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.name.get_name_leafdata())
                                                                        if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                                        if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                                        if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                        return entity_path

                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                        if child is not None:
                                                                            return child

                                                                        return None

                                                                    def has_leaf_or_child_of_name(self, name):
                                                                        if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                                            return True
                                                                        return False

                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                        if(value_path == "description"):
                                                                            self.description = value
                                                                            self.description.value_namespace = name_space
                                                                            self.description.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "firmware-revision"):
                                                                            self.firmware_revision = value
                                                                            self.firmware_revision.value_namespace = name_space
                                                                            self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "hardware-revision"):
                                                                            self.hardware_revision = value
                                                                            self.hardware_revision.value_namespace = name_space
                                                                            self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "is-field-replaceable-unit"):
                                                                            self.is_field_replaceable_unit = value
                                                                            self.is_field_replaceable_unit.value_namespace = name_space
                                                                            self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "model-name"):
                                                                            self.model_name = value
                                                                            self.model_name.value_namespace = name_space
                                                                            self.model_name.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "name"):
                                                                            self.name = value
                                                                            self.name.value_namespace = name_space
                                                                            self.name.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "serial-number"):
                                                                            self.serial_number = value
                                                                            self.serial_number.value_namespace = name_space
                                                                            self.serial_number.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "software-revision"):
                                                                            self.software_revision = value
                                                                            self.software_revision.value_namespace = name_space
                                                                            self.software_revision.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "vendor-type"):
                                                                            self.vendor_type = value
                                                                            self.vendor_type.value_namespace = name_space
                                                                            self.vendor_type.value_namespace_prefix = name_space_prefix


                                                                class FruInfo(Entity):
                                                                    """
                                                                    Field Replaceable Unit (FRU) attributes
                                                                    
                                                                    .. attribute:: last_operational_state_change
                                                                    
                                                                    	Time operational state is   last changed
                                                                    	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange>`
                                                                    
                                                                    .. attribute:: module_administrative_state
                                                                    
                                                                    	Administrative    state
                                                                    	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                                    
                                                                    .. attribute:: module_monitor_state
                                                                    
                                                                    	Monitor state
                                                                    	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                                    
                                                                    .. attribute:: module_operational_state
                                                                    
                                                                    	Operation state
                                                                    	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                                    
                                                                    .. attribute:: module_power_administrative_state
                                                                    
                                                                    	Power administrative state
                                                                    	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                                    
                                                                    .. attribute:: module_reset_reason
                                                                    
                                                                    	Reset reason
                                                                    	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                                    
                                                                    .. attribute:: module_up_time
                                                                    
                                                                    	Module up time
                                                                    	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime>`
                                                                    
                                                                    

                                                                    """

                                                                    _prefix = 'plat-chas-invmgr-oper'
                                                                    _revision = '2015-01-07'

                                                                    def __init__(self):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo, self).__init__()

                                                                        self.yang_name = "fru-info"
                                                                        self.yang_parent_name = "attributes"

                                                                        self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                                        self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                                        self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                                        self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                                        self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                        self.last_operational_state_change.parent = self
                                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                        self._children_yang_names.add("last-operational-state-change")

                                                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                        self.module_up_time.parent = self
                                                                        self._children_name_map["module_up_time"] = "module-up-time"
                                                                        self._children_yang_names.add("module-up-time")

                                                                    def __setattr__(self, name, value):
                                                                        self._check_monkey_patching_error(name, value)
                                                                        with _handle_type_error():
                                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                    "Please use list append or extend method."
                                                                                                    .format(value))
                                                                            if isinstance(value, Enum.YLeaf):
                                                                                value = value.name
                                                                            if name in ("module_administrative_state",
                                                                                        "module_monitor_state",
                                                                                        "module_operational_state",
                                                                                        "module_power_administrative_state",
                                                                                        "module_reset_reason") and name in self.__dict__:
                                                                                if isinstance(value, YLeaf):
                                                                                    self.__dict__[name].set(value.get())
                                                                                elif isinstance(value, YLeafList):
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)
                                                                                else:
                                                                                    self.__dict__[name].set(value)
                                                                            else:
                                                                                if hasattr(value, "parent") and name != "parent":
                                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                        value.parent = self
                                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                        value.parent = self
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)


                                                                    class LastOperationalStateChange(Entity):
                                                                        """
                                                                        Time operational state is   last changed
                                                                        
                                                                        .. attribute:: time_in_nano_seconds
                                                                        
                                                                        	Time Value in Nano\-seconds
                                                                        	**type**\:  int
                                                                        
                                                                        	**range:** \-2147483648..2147483647
                                                                        
                                                                        	**units**\: nanosecond
                                                                        
                                                                        .. attribute:: time_in_seconds
                                                                        
                                                                        	Time Value in Seconds
                                                                        	**type**\:  int
                                                                        
                                                                        	**range:** \-2147483648..2147483647
                                                                        
                                                                        	**units**\: second
                                                                        
                                                                        

                                                                        """

                                                                        _prefix = 'plat-chas-invmgr-oper'
                                                                        _revision = '2015-01-07'

                                                                        def __init__(self):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                            self.yang_name = "last-operational-state-change"
                                                                            self.yang_parent_name = "fru-info"

                                                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                        def __setattr__(self, name, value):
                                                                            self._check_monkey_patching_error(name, value)
                                                                            with _handle_type_error():
                                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                        "Please use list append or extend method."
                                                                                                        .format(value))
                                                                                if isinstance(value, Enum.YLeaf):
                                                                                    value = value.name
                                                                                if name in ("time_in_nano_seconds",
                                                                                            "time_in_seconds") and name in self.__dict__:
                                                                                    if isinstance(value, YLeaf):
                                                                                        self.__dict__[name].set(value.get())
                                                                                    elif isinstance(value, YLeafList):
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                                    else:
                                                                                        self.__dict__[name].set(value)
                                                                                else:
                                                                                    if hasattr(value, "parent") and name != "parent":
                                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                            value.parent = self
                                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                            value.parent = self
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                                        def has_data(self):
                                                                            return (
                                                                                self.time_in_nano_seconds.is_set or
                                                                                self.time_in_seconds.is_set)

                                                                        def has_operation(self):
                                                                            return (
                                                                                self.yfilter != YFilter.not_set or
                                                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                                                        def get_segment_path(self):
                                                                            path_buffer = ""
                                                                            path_buffer = "last-operational-state-change" + path_buffer

                                                                            return path_buffer

                                                                        def get_entity_path(self, ancestor):
                                                                            path_buffer = ""
                                                                            if (ancestor is None):
                                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                            else:
                                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                            leaf_name_data = LeafDataList()
                                                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                            return entity_path

                                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                            if child is not None:
                                                                                return child

                                                                            return None

                                                                        def has_leaf_or_child_of_name(self, name):
                                                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                                return True
                                                                            return False

                                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                            if(value_path == "time-in-nano-seconds"):
                                                                                self.time_in_nano_seconds = value
                                                                                self.time_in_nano_seconds.value_namespace = name_space
                                                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "time-in-seconds"):
                                                                                self.time_in_seconds = value
                                                                                self.time_in_seconds.value_namespace = name_space
                                                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                                    class ModuleUpTime(Entity):
                                                                        """
                                                                        Module up time
                                                                        
                                                                        .. attribute:: time_in_nano_seconds
                                                                        
                                                                        	Time Value in Nano\-seconds
                                                                        	**type**\:  int
                                                                        
                                                                        	**range:** \-2147483648..2147483647
                                                                        
                                                                        	**units**\: nanosecond
                                                                        
                                                                        .. attribute:: time_in_seconds
                                                                        
                                                                        	Time Value in Seconds
                                                                        	**type**\:  int
                                                                        
                                                                        	**range:** \-2147483648..2147483647
                                                                        
                                                                        	**units**\: second
                                                                        
                                                                        

                                                                        """

                                                                        _prefix = 'plat-chas-invmgr-oper'
                                                                        _revision = '2015-01-07'

                                                                        def __init__(self):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                                            self.yang_name = "module-up-time"
                                                                            self.yang_parent_name = "fru-info"

                                                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                        def __setattr__(self, name, value):
                                                                            self._check_monkey_patching_error(name, value)
                                                                            with _handle_type_error():
                                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                        "Please use list append or extend method."
                                                                                                        .format(value))
                                                                                if isinstance(value, Enum.YLeaf):
                                                                                    value = value.name
                                                                                if name in ("time_in_nano_seconds",
                                                                                            "time_in_seconds") and name in self.__dict__:
                                                                                    if isinstance(value, YLeaf):
                                                                                        self.__dict__[name].set(value.get())
                                                                                    elif isinstance(value, YLeafList):
                                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                                    else:
                                                                                        self.__dict__[name].set(value)
                                                                                else:
                                                                                    if hasattr(value, "parent") and name != "parent":
                                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                            value.parent = self
                                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                            value.parent = self
                                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                                        def has_data(self):
                                                                            return (
                                                                                self.time_in_nano_seconds.is_set or
                                                                                self.time_in_seconds.is_set)

                                                                        def has_operation(self):
                                                                            return (
                                                                                self.yfilter != YFilter.not_set or
                                                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                                                        def get_segment_path(self):
                                                                            path_buffer = ""
                                                                            path_buffer = "module-up-time" + path_buffer

                                                                            return path_buffer

                                                                        def get_entity_path(self, ancestor):
                                                                            path_buffer = ""
                                                                            if (ancestor is None):
                                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                            else:
                                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                            leaf_name_data = LeafDataList()
                                                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                            return entity_path

                                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                            if child is not None:
                                                                                return child

                                                                            return None

                                                                        def has_leaf_or_child_of_name(self, name):
                                                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                                return True
                                                                            return False

                                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                            if(value_path == "time-in-nano-seconds"):
                                                                                self.time_in_nano_seconds = value
                                                                                self.time_in_nano_seconds.value_namespace = name_space
                                                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                            if(value_path == "time-in-seconds"):
                                                                                self.time_in_seconds = value
                                                                                self.time_in_seconds.value_namespace = name_space
                                                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                                    def has_data(self):
                                                                        return (
                                                                            self.module_administrative_state.is_set or
                                                                            self.module_monitor_state.is_set or
                                                                            self.module_operational_state.is_set or
                                                                            self.module_power_administrative_state.is_set or
                                                                            self.module_reset_reason.is_set or
                                                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                                            (self.module_up_time is not None and self.module_up_time.has_data()))

                                                                    def has_operation(self):
                                                                        return (
                                                                            self.yfilter != YFilter.not_set or
                                                                            self.module_administrative_state.yfilter != YFilter.not_set or
                                                                            self.module_monitor_state.yfilter != YFilter.not_set or
                                                                            self.module_operational_state.yfilter != YFilter.not_set or
                                                                            self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                                            self.module_reset_reason.yfilter != YFilter.not_set or
                                                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                                            (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                                    def get_segment_path(self):
                                                                        path_buffer = ""
                                                                        path_buffer = "fru-info" + path_buffer

                                                                        return path_buffer

                                                                    def get_entity_path(self, ancestor):
                                                                        path_buffer = ""
                                                                        if (ancestor is None):
                                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                        else:
                                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                        leaf_name_data = LeafDataList()
                                                                        if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                                        if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                                        if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                                        if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                                        if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                                            leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                        return entity_path

                                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                        if child is not None:
                                                                            return child

                                                                        if (child_yang_name == "last-operational-state-change"):
                                                                            if (self.last_operational_state_change is None):
                                                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                                self.last_operational_state_change.parent = self
                                                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                            return self.last_operational_state_change

                                                                        if (child_yang_name == "module-up-time"):
                                                                            if (self.module_up_time is None):
                                                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                                self.module_up_time.parent = self
                                                                                self._children_name_map["module_up_time"] = "module-up-time"
                                                                            return self.module_up_time

                                                                        return None

                                                                    def has_leaf_or_child_of_name(self, name):
                                                                        if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                                            return True
                                                                        return False

                                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                        if(value_path == "module-administrative-state"):
                                                                            self.module_administrative_state = value
                                                                            self.module_administrative_state.value_namespace = name_space
                                                                            self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "module-monitor-state"):
                                                                            self.module_monitor_state = value
                                                                            self.module_monitor_state.value_namespace = name_space
                                                                            self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "module-operational-state"):
                                                                            self.module_operational_state = value
                                                                            self.module_operational_state.value_namespace = name_space
                                                                            self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "module-power-administrative-state"):
                                                                            self.module_power_administrative_state = value
                                                                            self.module_power_administrative_state.value_namespace = name_space
                                                                            self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                                        if(value_path == "module-reset-reason"):
                                                                            self.module_reset_reason = value
                                                                            self.module_reset_reason.value_namespace = name_space
                                                                            self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                                def has_data(self):
                                                                    return (
                                                                        (self.basic_info is not None and self.basic_info.has_data()) or
                                                                        (self.fru_info is not None and self.fru_info.has_data()))

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        (self.basic_info is not None and self.basic_info.has_operation()) or
                                                                        (self.fru_info is not None and self.fru_info.has_operation()))

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "attributes" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    if (child_yang_name == "basic-info"):
                                                                        if (self.basic_info is None):
                                                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo()
                                                                            self.basic_info.parent = self
                                                                            self._children_name_map["basic_info"] = "basic-info"
                                                                        return self.basic_info

                                                                    if (child_yang_name == "fru-info"):
                                                                        if (self.fru_info is None):
                                                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo()
                                                                            self.fru_info.parent = self
                                                                            self._children_name_map["fru_info"] = "fru-info"
                                                                        return self.fru_info

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "basic-info" or name == "fru-info"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    pass

                                                            def has_data(self):
                                                                return (
                                                                    self.name.is_set or
                                                                    (self.attributes is not None and self.attributes.has_data()))

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.name.yfilter != YFilter.not_set or
                                                                    (self.attributes is not None and self.attributes.has_operation()))

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "sensor" + "[name='" + self.name.get() + "']" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.name.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                if (child_yang_name == "attributes"):
                                                                    if (self.attributes is None):
                                                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor.Attributes()
                                                                        self.attributes.parent = self
                                                                        self._children_name_map["attributes"] = "attributes"
                                                                    return self.attributes

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "attributes" or name == "name"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "name"):
                                                                    self.name = value
                                                                    self.name.value_namespace = name_space
                                                                    self.name.value_namespace_prefix = name_space_prefix

                                                        def has_data(self):
                                                            for c in self.sensor:
                                                                if (c.has_data()):
                                                                    return True
                                                            return False

                                                        def has_operation(self):
                                                            for c in self.sensor:
                                                                if (c.has_operation()):
                                                                    return True
                                                            return self.yfilter != YFilter.not_set

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "sensors" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            if (child_yang_name == "sensor"):
                                                                for c in self.sensor:
                                                                    segment = c.get_segment_path()
                                                                    if (segment_path == segment):
                                                                        return c
                                                                c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors.Sensor()
                                                                c.parent = self
                                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                                self._local_refs[local_reference_key] = c
                                                                self.sensor.append(c)
                                                                return c

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "sensor"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            pass


                                                    class Attributes(Entity):
                                                        """
                                                        Attributes
                                                        
                                                        .. attribute:: basic_info
                                                        
                                                        	Entity attributes
                                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo>`
                                                        
                                                        .. attribute:: fru_info
                                                        
                                                        	Field Replaceable Unit (FRU) attributes
                                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo>`
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes, self).__init__()

                                                            self.yang_name = "attributes"
                                                            self.yang_parent_name = "hw-component"

                                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo()
                                                            self.basic_info.parent = self
                                                            self._children_name_map["basic_info"] = "basic-info"
                                                            self._children_yang_names.add("basic-info")

                                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo()
                                                            self.fru_info.parent = self
                                                            self._children_name_map["fru_info"] = "fru-info"
                                                            self._children_yang_names.add("fru-info")


                                                        class BasicInfo(Entity):
                                                            """
                                                            Entity attributes
                                                            
                                                            .. attribute:: description
                                                            
                                                            	describes in user\-readable terms                 what the entity in question does
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: firmware_revision
                                                            
                                                            	firmware revision string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: hardware_revision
                                                            
                                                            	hw revision string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: is_field_replaceable_unit
                                                            
                                                            	1 if Field Replaceable Unit 0, if not
                                                            	**type**\:  bool
                                                            
                                                            .. attribute:: model_name
                                                            
                                                            	model name
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: name
                                                            
                                                            	name string for the entity
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: serial_number
                                                            
                                                            	serial number
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: software_revision
                                                            
                                                            	software revision string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: vendor_type
                                                            
                                                            	maps to the vendor OID string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo, self).__init__()

                                                                self.yang_name = "basic-info"
                                                                self.yang_parent_name = "attributes"

                                                                self.description = YLeaf(YType.str, "description")

                                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                                self.model_name = YLeaf(YType.str, "model-name")

                                                                self.name = YLeaf(YType.str, "name")

                                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("description",
                                                                                "firmware_revision",
                                                                                "hardware_revision",
                                                                                "is_field_replaceable_unit",
                                                                                "model_name",
                                                                                "name",
                                                                                "serial_number",
                                                                                "software_revision",
                                                                                "vendor_type") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.description.is_set or
                                                                    self.firmware_revision.is_set or
                                                                    self.hardware_revision.is_set or
                                                                    self.is_field_replaceable_unit.is_set or
                                                                    self.model_name.is_set or
                                                                    self.name.is_set or
                                                                    self.serial_number.is_set or
                                                                    self.software_revision.is_set or
                                                                    self.vendor_type.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.description.yfilter != YFilter.not_set or
                                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                    self.model_name.yfilter != YFilter.not_set or
                                                                    self.name.yfilter != YFilter.not_set or
                                                                    self.serial_number.yfilter != YFilter.not_set or
                                                                    self.software_revision.yfilter != YFilter.not_set or
                                                                    self.vendor_type.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "basic-info" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "description"):
                                                                    self.description = value
                                                                    self.description.value_namespace = name_space
                                                                    self.description.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "firmware-revision"):
                                                                    self.firmware_revision = value
                                                                    self.firmware_revision.value_namespace = name_space
                                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "hardware-revision"):
                                                                    self.hardware_revision = value
                                                                    self.hardware_revision.value_namespace = name_space
                                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "is-field-replaceable-unit"):
                                                                    self.is_field_replaceable_unit = value
                                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "model-name"):
                                                                    self.model_name = value
                                                                    self.model_name.value_namespace = name_space
                                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "name"):
                                                                    self.name = value
                                                                    self.name.value_namespace = name_space
                                                                    self.name.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "serial-number"):
                                                                    self.serial_number = value
                                                                    self.serial_number.value_namespace = name_space
                                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "software-revision"):
                                                                    self.software_revision = value
                                                                    self.software_revision.value_namespace = name_space
                                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "vendor-type"):
                                                                    self.vendor_type = value
                                                                    self.vendor_type.value_namespace = name_space
                                                                    self.vendor_type.value_namespace_prefix = name_space_prefix


                                                        class FruInfo(Entity):
                                                            """
                                                            Field Replaceable Unit (FRU) attributes
                                                            
                                                            .. attribute:: last_operational_state_change
                                                            
                                                            	Time operational state is   last changed
                                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange>`
                                                            
                                                            .. attribute:: module_administrative_state
                                                            
                                                            	Administrative    state
                                                            	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                            
                                                            .. attribute:: module_monitor_state
                                                            
                                                            	Monitor state
                                                            	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                            
                                                            .. attribute:: module_operational_state
                                                            
                                                            	Operation state
                                                            	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                            
                                                            .. attribute:: module_power_administrative_state
                                                            
                                                            	Power administrative state
                                                            	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                            
                                                            .. attribute:: module_reset_reason
                                                            
                                                            	Reset reason
                                                            	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                            
                                                            .. attribute:: module_up_time
                                                            
                                                            	Module up time
                                                            	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime>`
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo, self).__init__()

                                                                self.yang_name = "fru-info"
                                                                self.yang_parent_name = "attributes"

                                                                self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                                self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                                self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                                self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                                self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange()
                                                                self.last_operational_state_change.parent = self
                                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                self._children_yang_names.add("last-operational-state-change")

                                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime()
                                                                self.module_up_time.parent = self
                                                                self._children_name_map["module_up_time"] = "module-up-time"
                                                                self._children_yang_names.add("module-up-time")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("module_administrative_state",
                                                                                "module_monitor_state",
                                                                                "module_operational_state",
                                                                                "module_power_administrative_state",
                                                                                "module_reset_reason") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo, self).__setattr__(name, value)


                                                            class LastOperationalStateChange(Entity):
                                                                """
                                                                Time operational state is   last changed
                                                                
                                                                .. attribute:: time_in_nano_seconds
                                                                
                                                                	Time Value in Nano\-seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: nanosecond
                                                                
                                                                .. attribute:: time_in_seconds
                                                                
                                                                	Time Value in Seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: second
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                    self.yang_name = "last-operational-state-change"
                                                                    self.yang_parent_name = "fru-info"

                                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("time_in_nano_seconds",
                                                                                    "time_in_seconds") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                                def has_data(self):
                                                                    return (
                                                                        self.time_in_nano_seconds.is_set or
                                                                        self.time_in_seconds.is_set)

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "time-in-nano-seconds"):
                                                                        self.time_in_nano_seconds = value
                                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "time-in-seconds"):
                                                                        self.time_in_seconds = value
                                                                        self.time_in_seconds.value_namespace = name_space
                                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                            class ModuleUpTime(Entity):
                                                                """
                                                                Module up time
                                                                
                                                                .. attribute:: time_in_nano_seconds
                                                                
                                                                	Time Value in Nano\-seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: nanosecond
                                                                
                                                                .. attribute:: time_in_seconds
                                                                
                                                                	Time Value in Seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: second
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                                    self.yang_name = "module-up-time"
                                                                    self.yang_parent_name = "fru-info"

                                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("time_in_nano_seconds",
                                                                                    "time_in_seconds") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                                def has_data(self):
                                                                    return (
                                                                        self.time_in_nano_seconds.is_set or
                                                                        self.time_in_seconds.is_set)

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "module-up-time" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "time-in-nano-seconds"):
                                                                        self.time_in_nano_seconds = value
                                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "time-in-seconds"):
                                                                        self.time_in_seconds = value
                                                                        self.time_in_seconds.value_namespace = name_space
                                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                            def has_data(self):
                                                                return (
                                                                    self.module_administrative_state.is_set or
                                                                    self.module_monitor_state.is_set or
                                                                    self.module_operational_state.is_set or
                                                                    self.module_power_administrative_state.is_set or
                                                                    self.module_reset_reason.is_set or
                                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                                    (self.module_up_time is not None and self.module_up_time.has_data()))

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.module_administrative_state.yfilter != YFilter.not_set or
                                                                    self.module_monitor_state.yfilter != YFilter.not_set or
                                                                    self.module_operational_state.yfilter != YFilter.not_set or
                                                                    self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                                    self.module_reset_reason.yfilter != YFilter.not_set or
                                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                                    (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "fru-info" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                                if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                                if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                                if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                                if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                if (child_yang_name == "last-operational-state-change"):
                                                                    if (self.last_operational_state_change is None):
                                                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange()
                                                                        self.last_operational_state_change.parent = self
                                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                    return self.last_operational_state_change

                                                                if (child_yang_name == "module-up-time"):
                                                                    if (self.module_up_time is None):
                                                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime()
                                                                        self.module_up_time.parent = self
                                                                        self._children_name_map["module_up_time"] = "module-up-time"
                                                                    return self.module_up_time

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "module-administrative-state"):
                                                                    self.module_administrative_state = value
                                                                    self.module_administrative_state.value_namespace = name_space
                                                                    self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "module-monitor-state"):
                                                                    self.module_monitor_state = value
                                                                    self.module_monitor_state.value_namespace = name_space
                                                                    self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "module-operational-state"):
                                                                    self.module_operational_state = value
                                                                    self.module_operational_state.value_namespace = name_space
                                                                    self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "module-power-administrative-state"):
                                                                    self.module_power_administrative_state = value
                                                                    self.module_power_administrative_state.value_namespace = name_space
                                                                    self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "module-reset-reason"):
                                                                    self.module_reset_reason = value
                                                                    self.module_reset_reason.value_namespace = name_space
                                                                    self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                        def has_data(self):
                                                            return (
                                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                                (self.fru_info is not None and self.fru_info.has_data()))

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "attributes" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            if (child_yang_name == "basic-info"):
                                                                if (self.basic_info is None):
                                                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.BasicInfo()
                                                                    self.basic_info.parent = self
                                                                    self._children_name_map["basic_info"] = "basic-info"
                                                                return self.basic_info

                                                            if (child_yang_name == "fru-info"):
                                                                if (self.fru_info is None):
                                                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes.FruInfo()
                                                                    self.fru_info.parent = self
                                                                    self._children_name_map["fru_info"] = "fru-info"
                                                                return self.fru_info

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "basic-info" or name == "fru-info"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            pass

                                                    def has_data(self):
                                                        return (
                                                            self.name.is_set or
                                                            (self.attributes is not None and self.attributes.has_data()) or
                                                            (self.sensors is not None and self.sensors.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.name.yfilter != YFilter.not_set or
                                                            (self.attributes is not None and self.attributes.has_operation()) or
                                                            (self.sensors is not None and self.sensors.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "hw-component" + "[name='" + self.name.get() + "']" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.name.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "attributes"):
                                                            if (self.attributes is None):
                                                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Attributes()
                                                                self.attributes.parent = self
                                                                self._children_name_map["attributes"] = "attributes"
                                                            return self.attributes

                                                        if (child_yang_name == "sensors"):
                                                            if (self.sensors is None):
                                                                self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent.Sensors()
                                                                self.sensors.parent = self
                                                                self._children_name_map["sensors"] = "sensors"
                                                            return self.sensors

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "attributes" or name == "sensors" or name == "name"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "name"):
                                                            self.name = value
                                                            self.name.value_namespace = name_space
                                                            self.name.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    for c in self.hw_component:
                                                        if (c.has_data()):
                                                            return True
                                                    return False

                                                def has_operation(self):
                                                    for c in self.hw_component:
                                                        if (c.has_operation()):
                                                            return True
                                                    return self.yfilter != YFilter.not_set

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "hw-components" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "hw-component"):
                                                        for c in self.hw_component:
                                                            segment = c.get_segment_path()
                                                            if (segment_path == segment):
                                                                return c
                                                        c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents.HwComponent()
                                                        c.parent = self
                                                        local_reference_key = "ydk::seg::%s" % segment_path
                                                        self._local_refs[local_reference_key] = c
                                                        self.hw_component.append(c)
                                                        return c

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "hw-component"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    pass


                                            class Sensors(Entity):
                                                """
                                                Table of sensors
                                                
                                                .. attribute:: sensor
                                                
                                                	Sensor number
                                                	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor>`
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors, self).__init__()

                                                    self.yang_name = "sensors"
                                                    self.yang_parent_name = "ports"

                                                    self.sensor = YList(self)

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in () and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors, self).__setattr__(name, value)


                                                class Sensor(Entity):
                                                    """
                                                    Sensor number
                                                    
                                                    .. attribute:: name  <key>
                                                    
                                                    	Sensor name
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                                    
                                                    .. attribute:: attributes
                                                    
                                                    	Attributes
                                                    	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor, self).__init__()

                                                        self.yang_name = "sensor"
                                                        self.yang_parent_name = "sensors"

                                                        self.name = YLeaf(YType.str, "name")

                                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes()
                                                        self.attributes.parent = self
                                                        self._children_name_map["attributes"] = "attributes"
                                                        self._children_yang_names.add("attributes")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("name") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor, self).__setattr__(name, value)


                                                    class Attributes(Entity):
                                                        """
                                                        Attributes
                                                        
                                                        .. attribute:: basic_info
                                                        
                                                        	Entity attributes
                                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo>`
                                                        
                                                        .. attribute:: fru_info
                                                        
                                                        	Field Replaceable Unit (FRU) attributes
                                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo>`
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes, self).__init__()

                                                            self.yang_name = "attributes"
                                                            self.yang_parent_name = "sensor"

                                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo()
                                                            self.basic_info.parent = self
                                                            self._children_name_map["basic_info"] = "basic-info"
                                                            self._children_yang_names.add("basic-info")

                                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo()
                                                            self.fru_info.parent = self
                                                            self._children_name_map["fru_info"] = "fru-info"
                                                            self._children_yang_names.add("fru-info")


                                                        class BasicInfo(Entity):
                                                            """
                                                            Entity attributes
                                                            
                                                            .. attribute:: description
                                                            
                                                            	describes in user\-readable terms                 what the entity in question does
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: firmware_revision
                                                            
                                                            	firmware revision string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: hardware_revision
                                                            
                                                            	hw revision string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: is_field_replaceable_unit
                                                            
                                                            	1 if Field Replaceable Unit 0, if not
                                                            	**type**\:  bool
                                                            
                                                            .. attribute:: model_name
                                                            
                                                            	model name
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: name
                                                            
                                                            	name string for the entity
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: serial_number
                                                            
                                                            	serial number
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: software_revision
                                                            
                                                            	software revision string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: vendor_type
                                                            
                                                            	maps to the vendor OID string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo, self).__init__()

                                                                self.yang_name = "basic-info"
                                                                self.yang_parent_name = "attributes"

                                                                self.description = YLeaf(YType.str, "description")

                                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                                self.model_name = YLeaf(YType.str, "model-name")

                                                                self.name = YLeaf(YType.str, "name")

                                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("description",
                                                                                "firmware_revision",
                                                                                "hardware_revision",
                                                                                "is_field_replaceable_unit",
                                                                                "model_name",
                                                                                "name",
                                                                                "serial_number",
                                                                                "software_revision",
                                                                                "vendor_type") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.description.is_set or
                                                                    self.firmware_revision.is_set or
                                                                    self.hardware_revision.is_set or
                                                                    self.is_field_replaceable_unit.is_set or
                                                                    self.model_name.is_set or
                                                                    self.name.is_set or
                                                                    self.serial_number.is_set or
                                                                    self.software_revision.is_set or
                                                                    self.vendor_type.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.description.yfilter != YFilter.not_set or
                                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                    self.model_name.yfilter != YFilter.not_set or
                                                                    self.name.yfilter != YFilter.not_set or
                                                                    self.serial_number.yfilter != YFilter.not_set or
                                                                    self.software_revision.yfilter != YFilter.not_set or
                                                                    self.vendor_type.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "basic-info" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "description"):
                                                                    self.description = value
                                                                    self.description.value_namespace = name_space
                                                                    self.description.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "firmware-revision"):
                                                                    self.firmware_revision = value
                                                                    self.firmware_revision.value_namespace = name_space
                                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "hardware-revision"):
                                                                    self.hardware_revision = value
                                                                    self.hardware_revision.value_namespace = name_space
                                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "is-field-replaceable-unit"):
                                                                    self.is_field_replaceable_unit = value
                                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "model-name"):
                                                                    self.model_name = value
                                                                    self.model_name.value_namespace = name_space
                                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "name"):
                                                                    self.name = value
                                                                    self.name.value_namespace = name_space
                                                                    self.name.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "serial-number"):
                                                                    self.serial_number = value
                                                                    self.serial_number.value_namespace = name_space
                                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "software-revision"):
                                                                    self.software_revision = value
                                                                    self.software_revision.value_namespace = name_space
                                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "vendor-type"):
                                                                    self.vendor_type = value
                                                                    self.vendor_type.value_namespace = name_space
                                                                    self.vendor_type.value_namespace_prefix = name_space_prefix


                                                        class FruInfo(Entity):
                                                            """
                                                            Field Replaceable Unit (FRU) attributes
                                                            
                                                            .. attribute:: last_operational_state_change
                                                            
                                                            	Time operational state is   last changed
                                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange>`
                                                            
                                                            .. attribute:: module_administrative_state
                                                            
                                                            	Administrative    state
                                                            	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                            
                                                            .. attribute:: module_monitor_state
                                                            
                                                            	Monitor state
                                                            	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                            
                                                            .. attribute:: module_operational_state
                                                            
                                                            	Operation state
                                                            	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                            
                                                            .. attribute:: module_power_administrative_state
                                                            
                                                            	Power administrative state
                                                            	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                            
                                                            .. attribute:: module_reset_reason
                                                            
                                                            	Reset reason
                                                            	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                            
                                                            .. attribute:: module_up_time
                                                            
                                                            	Module up time
                                                            	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime>`
                                                            
                                                            

                                                            """

                                                            _prefix = 'plat-chas-invmgr-oper'
                                                            _revision = '2015-01-07'

                                                            def __init__(self):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo, self).__init__()

                                                                self.yang_name = "fru-info"
                                                                self.yang_parent_name = "attributes"

                                                                self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                                self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                                self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                                self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                                self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                self.last_operational_state_change.parent = self
                                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                self._children_yang_names.add("last-operational-state-change")

                                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                self.module_up_time.parent = self
                                                                self._children_name_map["module_up_time"] = "module-up-time"
                                                                self._children_yang_names.add("module-up-time")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("module_administrative_state",
                                                                                "module_monitor_state",
                                                                                "module_operational_state",
                                                                                "module_power_administrative_state",
                                                                                "module_reset_reason") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)


                                                            class LastOperationalStateChange(Entity):
                                                                """
                                                                Time operational state is   last changed
                                                                
                                                                .. attribute:: time_in_nano_seconds
                                                                
                                                                	Time Value in Nano\-seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: nanosecond
                                                                
                                                                .. attribute:: time_in_seconds
                                                                
                                                                	Time Value in Seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: second
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                    self.yang_name = "last-operational-state-change"
                                                                    self.yang_parent_name = "fru-info"

                                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("time_in_nano_seconds",
                                                                                    "time_in_seconds") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                                def has_data(self):
                                                                    return (
                                                                        self.time_in_nano_seconds.is_set or
                                                                        self.time_in_seconds.is_set)

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "time-in-nano-seconds"):
                                                                        self.time_in_nano_seconds = value
                                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "time-in-seconds"):
                                                                        self.time_in_seconds = value
                                                                        self.time_in_seconds.value_namespace = name_space
                                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                            class ModuleUpTime(Entity):
                                                                """
                                                                Module up time
                                                                
                                                                .. attribute:: time_in_nano_seconds
                                                                
                                                                	Time Value in Nano\-seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: nanosecond
                                                                
                                                                .. attribute:: time_in_seconds
                                                                
                                                                	Time Value in Seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: second
                                                                
                                                                

                                                                """

                                                                _prefix = 'plat-chas-invmgr-oper'
                                                                _revision = '2015-01-07'

                                                                def __init__(self):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                                    self.yang_name = "module-up-time"
                                                                    self.yang_parent_name = "fru-info"

                                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("time_in_nano_seconds",
                                                                                    "time_in_seconds") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                                def has_data(self):
                                                                    return (
                                                                        self.time_in_nano_seconds.is_set or
                                                                        self.time_in_seconds.is_set)

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "module-up-time" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "time-in-nano-seconds"):
                                                                        self.time_in_nano_seconds = value
                                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "time-in-seconds"):
                                                                        self.time_in_seconds = value
                                                                        self.time_in_seconds.value_namespace = name_space
                                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                            def has_data(self):
                                                                return (
                                                                    self.module_administrative_state.is_set or
                                                                    self.module_monitor_state.is_set or
                                                                    self.module_operational_state.is_set or
                                                                    self.module_power_administrative_state.is_set or
                                                                    self.module_reset_reason.is_set or
                                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                                    (self.module_up_time is not None and self.module_up_time.has_data()))

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.module_administrative_state.yfilter != YFilter.not_set or
                                                                    self.module_monitor_state.yfilter != YFilter.not_set or
                                                                    self.module_operational_state.yfilter != YFilter.not_set or
                                                                    self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                                    self.module_reset_reason.yfilter != YFilter.not_set or
                                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                                    (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "fru-info" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                                if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                                if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                                if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                                if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                if (child_yang_name == "last-operational-state-change"):
                                                                    if (self.last_operational_state_change is None):
                                                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                        self.last_operational_state_change.parent = self
                                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                    return self.last_operational_state_change

                                                                if (child_yang_name == "module-up-time"):
                                                                    if (self.module_up_time is None):
                                                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                        self.module_up_time.parent = self
                                                                        self._children_name_map["module_up_time"] = "module-up-time"
                                                                    return self.module_up_time

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "module-administrative-state"):
                                                                    self.module_administrative_state = value
                                                                    self.module_administrative_state.value_namespace = name_space
                                                                    self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "module-monitor-state"):
                                                                    self.module_monitor_state = value
                                                                    self.module_monitor_state.value_namespace = name_space
                                                                    self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "module-operational-state"):
                                                                    self.module_operational_state = value
                                                                    self.module_operational_state.value_namespace = name_space
                                                                    self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "module-power-administrative-state"):
                                                                    self.module_power_administrative_state = value
                                                                    self.module_power_administrative_state.value_namespace = name_space
                                                                    self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "module-reset-reason"):
                                                                    self.module_reset_reason = value
                                                                    self.module_reset_reason.value_namespace = name_space
                                                                    self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                        def has_data(self):
                                                            return (
                                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                                (self.fru_info is not None and self.fru_info.has_data()))

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "attributes" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            if (child_yang_name == "basic-info"):
                                                                if (self.basic_info is None):
                                                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.BasicInfo()
                                                                    self.basic_info.parent = self
                                                                    self._children_name_map["basic_info"] = "basic-info"
                                                                return self.basic_info

                                                            if (child_yang_name == "fru-info"):
                                                                if (self.fru_info is None):
                                                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes.FruInfo()
                                                                    self.fru_info.parent = self
                                                                    self._children_name_map["fru_info"] = "fru-info"
                                                                return self.fru_info

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "basic-info" or name == "fru-info"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            pass

                                                    def has_data(self):
                                                        return (
                                                            self.name.is_set or
                                                            (self.attributes is not None and self.attributes.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.name.yfilter != YFilter.not_set or
                                                            (self.attributes is not None and self.attributes.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "sensor" + "[name='" + self.name.get() + "']" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.name.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "attributes"):
                                                            if (self.attributes is None):
                                                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor.Attributes()
                                                                self.attributes.parent = self
                                                                self._children_name_map["attributes"] = "attributes"
                                                            return self.attributes

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "attributes" or name == "name"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "name"):
                                                            self.name = value
                                                            self.name.value_namespace = name_space
                                                            self.name.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    for c in self.sensor:
                                                        if (c.has_data()):
                                                            return True
                                                    return False

                                                def has_operation(self):
                                                    for c in self.sensor:
                                                        if (c.has_operation()):
                                                            return True
                                                    return self.yfilter != YFilter.not_set

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "sensors" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "sensor"):
                                                        for c in self.sensor:
                                                            segment = c.get_segment_path()
                                                            if (segment_path == segment):
                                                                return c
                                                        c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors.Sensor()
                                                        c.parent = self
                                                        local_reference_key = "ydk::seg::%s" % segment_path
                                                        self._local_refs[local_reference_key] = c
                                                        self.sensor.append(c)
                                                        return c

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "sensor"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    pass


                                            class Attributes(Entity):
                                                """
                                                Attributes
                                                
                                                .. attribute:: basic_info
                                                
                                                	Entity attributes
                                                	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo>`
                                                
                                                .. attribute:: fru_info
                                                
                                                	Field Replaceable Unit (FRU) attributes
                                                	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo>`
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes, self).__init__()

                                                    self.yang_name = "attributes"
                                                    self.yang_parent_name = "ports"

                                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                    self._children_yang_names.add("basic-info")

                                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                    self._children_yang_names.add("fru-info")


                                                class BasicInfo(Entity):
                                                    """
                                                    Entity attributes
                                                    
                                                    .. attribute:: description
                                                    
                                                    	describes in user\-readable terms                 what the entity in question does
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: firmware_revision
                                                    
                                                    	firmware revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: hardware_revision
                                                    
                                                    	hw revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: is_field_replaceable_unit
                                                    
                                                    	1 if Field Replaceable Unit 0, if not
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: model_name
                                                    
                                                    	model name
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: name
                                                    
                                                    	name string for the entity
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: serial_number
                                                    
                                                    	serial number
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: software_revision
                                                    
                                                    	software revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: vendor_type
                                                    
                                                    	maps to the vendor OID string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo, self).__init__()

                                                        self.yang_name = "basic-info"
                                                        self.yang_parent_name = "attributes"

                                                        self.description = YLeaf(YType.str, "description")

                                                        self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                        self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                        self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                        self.model_name = YLeaf(YType.str, "model-name")

                                                        self.name = YLeaf(YType.str, "name")

                                                        self.serial_number = YLeaf(YType.str, "serial-number")

                                                        self.software_revision = YLeaf(YType.str, "software-revision")

                                                        self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("description",
                                                                        "firmware_revision",
                                                                        "hardware_revision",
                                                                        "is_field_replaceable_unit",
                                                                        "model_name",
                                                                        "name",
                                                                        "serial_number",
                                                                        "software_revision",
                                                                        "vendor_type") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.description.is_set or
                                                            self.firmware_revision.is_set or
                                                            self.hardware_revision.is_set or
                                                            self.is_field_replaceable_unit.is_set or
                                                            self.model_name.is_set or
                                                            self.name.is_set or
                                                            self.serial_number.is_set or
                                                            self.software_revision.is_set or
                                                            self.vendor_type.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.description.yfilter != YFilter.not_set or
                                                            self.firmware_revision.yfilter != YFilter.not_set or
                                                            self.hardware_revision.yfilter != YFilter.not_set or
                                                            self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                            self.model_name.yfilter != YFilter.not_set or
                                                            self.name.yfilter != YFilter.not_set or
                                                            self.serial_number.yfilter != YFilter.not_set or
                                                            self.software_revision.yfilter != YFilter.not_set or
                                                            self.vendor_type.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "basic-info" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.description.get_name_leafdata())
                                                        if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                        if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                        if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                        if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.model_name.get_name_leafdata())
                                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.name.get_name_leafdata())
                                                        if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                        if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                        if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "description"):
                                                            self.description = value
                                                            self.description.value_namespace = name_space
                                                            self.description.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "firmware-revision"):
                                                            self.firmware_revision = value
                                                            self.firmware_revision.value_namespace = name_space
                                                            self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "hardware-revision"):
                                                            self.hardware_revision = value
                                                            self.hardware_revision.value_namespace = name_space
                                                            self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "is-field-replaceable-unit"):
                                                            self.is_field_replaceable_unit = value
                                                            self.is_field_replaceable_unit.value_namespace = name_space
                                                            self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "model-name"):
                                                            self.model_name = value
                                                            self.model_name.value_namespace = name_space
                                                            self.model_name.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "name"):
                                                            self.name = value
                                                            self.name.value_namespace = name_space
                                                            self.name.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "serial-number"):
                                                            self.serial_number = value
                                                            self.serial_number.value_namespace = name_space
                                                            self.serial_number.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "software-revision"):
                                                            self.software_revision = value
                                                            self.software_revision.value_namespace = name_space
                                                            self.software_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "vendor-type"):
                                                            self.vendor_type = value
                                                            self.vendor_type.value_namespace = name_space
                                                            self.vendor_type.value_namespace_prefix = name_space_prefix


                                                class FruInfo(Entity):
                                                    """
                                                    Field Replaceable Unit (FRU) attributes
                                                    
                                                    .. attribute:: last_operational_state_change
                                                    
                                                    	Time operational state is   last changed
                                                    	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange>`
                                                    
                                                    .. attribute:: module_administrative_state
                                                    
                                                    	Administrative    state
                                                    	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                    
                                                    .. attribute:: module_monitor_state
                                                    
                                                    	Monitor state
                                                    	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                    
                                                    .. attribute:: module_operational_state
                                                    
                                                    	Operation state
                                                    	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                    
                                                    .. attribute:: module_power_administrative_state
                                                    
                                                    	Power administrative state
                                                    	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                    
                                                    .. attribute:: module_reset_reason
                                                    
                                                    	Reset reason
                                                    	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                    
                                                    .. attribute:: module_up_time
                                                    
                                                    	Module up time
                                                    	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo, self).__init__()

                                                        self.yang_name = "fru-info"
                                                        self.yang_parent_name = "attributes"

                                                        self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                        self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                        self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                        self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                        self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                        self._children_yang_names.add("last-operational-state-change")

                                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime()
                                                        self.module_up_time.parent = self
                                                        self._children_name_map["module_up_time"] = "module-up-time"
                                                        self._children_yang_names.add("module-up-time")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("module_administrative_state",
                                                                        "module_monitor_state",
                                                                        "module_operational_state",
                                                                        "module_power_administrative_state",
                                                                        "module_reset_reason") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo, self).__setattr__(name, value)


                                                    class LastOperationalStateChange(Entity):
                                                        """
                                                        Time operational state is   last changed
                                                        
                                                        .. attribute:: time_in_nano_seconds
                                                        
                                                        	Time Value in Nano\-seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: nanosecond
                                                        
                                                        .. attribute:: time_in_seconds
                                                        
                                                        	Time Value in Seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: second
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                            self.yang_name = "last-operational-state-change"
                                                            self.yang_parent_name = "fru-info"

                                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("time_in_nano_seconds",
                                                                            "time_in_seconds") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.time_in_nano_seconds.is_set or
                                                                self.time_in_seconds.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "last-operational-state-change" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "time-in-nano-seconds"):
                                                                self.time_in_nano_seconds = value
                                                                self.time_in_nano_seconds.value_namespace = name_space
                                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "time-in-seconds"):
                                                                self.time_in_seconds = value
                                                                self.time_in_seconds.value_namespace = name_space
                                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                    class ModuleUpTime(Entity):
                                                        """
                                                        Module up time
                                                        
                                                        .. attribute:: time_in_nano_seconds
                                                        
                                                        	Time Value in Nano\-seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: nanosecond
                                                        
                                                        .. attribute:: time_in_seconds
                                                        
                                                        	Time Value in Seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: second
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                            self.yang_name = "module-up-time"
                                                            self.yang_parent_name = "fru-info"

                                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("time_in_nano_seconds",
                                                                            "time_in_seconds") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.time_in_nano_seconds.is_set or
                                                                self.time_in_seconds.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "module-up-time" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "time-in-nano-seconds"):
                                                                self.time_in_nano_seconds = value
                                                                self.time_in_nano_seconds.value_namespace = name_space
                                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "time-in-seconds"):
                                                                self.time_in_seconds = value
                                                                self.time_in_seconds.value_namespace = name_space
                                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            self.module_administrative_state.is_set or
                                                            self.module_monitor_state.is_set or
                                                            self.module_operational_state.is_set or
                                                            self.module_power_administrative_state.is_set or
                                                            self.module_reset_reason.is_set or
                                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                            (self.module_up_time is not None and self.module_up_time.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.module_administrative_state.yfilter != YFilter.not_set or
                                                            self.module_monitor_state.yfilter != YFilter.not_set or
                                                            self.module_operational_state.yfilter != YFilter.not_set or
                                                            self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                            self.module_reset_reason.yfilter != YFilter.not_set or
                                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                            (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "fru-info" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                        if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                        if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                        if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                        if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "last-operational-state-change"):
                                                            if (self.last_operational_state_change is None):
                                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.LastOperationalStateChange()
                                                                self.last_operational_state_change.parent = self
                                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                            return self.last_operational_state_change

                                                        if (child_yang_name == "module-up-time"):
                                                            if (self.module_up_time is None):
                                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo.ModuleUpTime()
                                                                self.module_up_time.parent = self
                                                                self._children_name_map["module_up_time"] = "module-up-time"
                                                            return self.module_up_time

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "module-administrative-state"):
                                                            self.module_administrative_state = value
                                                            self.module_administrative_state.value_namespace = name_space
                                                            self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-monitor-state"):
                                                            self.module_monitor_state = value
                                                            self.module_monitor_state.value_namespace = name_space
                                                            self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-operational-state"):
                                                            self.module_operational_state = value
                                                            self.module_operational_state.value_namespace = name_space
                                                            self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-power-administrative-state"):
                                                            self.module_power_administrative_state = value
                                                            self.module_power_administrative_state.value_namespace = name_space
                                                            self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-reset-reason"):
                                                            self.module_reset_reason = value
                                                            self.module_reset_reason.value_namespace = name_space
                                                            self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        (self.basic_info is not None and self.basic_info.has_data()) or
                                                        (self.fru_info is not None and self.fru_info.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        (self.basic_info is not None and self.basic_info.has_operation()) or
                                                        (self.fru_info is not None and self.fru_info.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "attributes" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "basic-info"):
                                                        if (self.basic_info is None):
                                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.BasicInfo()
                                                            self.basic_info.parent = self
                                                            self._children_name_map["basic_info"] = "basic-info"
                                                        return self.basic_info

                                                    if (child_yang_name == "fru-info"):
                                                        if (self.fru_info is None):
                                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes.FruInfo()
                                                            self.fru_info.parent = self
                                                            self._children_name_map["fru_info"] = "fru-info"
                                                        return self.fru_info

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "basic-info" or name == "fru-info"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    pass

                                            def has_data(self):
                                                return (
                                                    self.name.is_set or
                                                    (self.attributes is not None and self.attributes.has_data()) or
                                                    (self.hw_components is not None and self.hw_components.has_data()) or
                                                    (self.sensors is not None and self.sensors.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    (self.attributes is not None and self.attributes.has_operation()) or
                                                    (self.hw_components is not None and self.hw_components.has_operation()) or
                                                    (self.sensors is not None and self.sensors.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "ports" + "[name='" + self.name.get() + "']" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "attributes"):
                                                    if (self.attributes is None):
                                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Attributes()
                                                        self.attributes.parent = self
                                                        self._children_name_map["attributes"] = "attributes"
                                                    return self.attributes

                                                if (child_yang_name == "hw-components"):
                                                    if (self.hw_components is None):
                                                        self.hw_components = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.HwComponents()
                                                        self.hw_components.parent = self
                                                        self._children_name_map["hw_components"] = "hw-components"
                                                    return self.hw_components

                                                if (child_yang_name == "sensors"):
                                                    if (self.sensors is None):
                                                        self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports.Sensors()
                                                        self.sensors.parent = self
                                                        self._children_name_map["sensors"] = "sensors"
                                                    return self.sensors

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attributes" or name == "hw-components" or name == "sensors" or name == "name"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.ports:
                                                if (c.has_data()):
                                                    return True
                                            return False

                                        def has_operation(self):
                                            for c in self.ports:
                                                if (c.has_operation()):
                                                    return True
                                            return self.yfilter != YFilter.not_set

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "portses" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "ports"):
                                                for c in self.ports:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses.Ports()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.ports.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "ports"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass


                                    class Sensors(Entity):
                                        """
                                        Table of sensors
                                        
                                        .. attribute:: sensor
                                        
                                        	Sensor number
                                        	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor>`
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors, self).__init__()

                                            self.yang_name = "sensors"
                                            self.yang_parent_name = "port-slot"

                                            self.sensor = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in () and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors, self).__setattr__(name, value)


                                        class Sensor(Entity):
                                            """
                                            Sensor number
                                            
                                            .. attribute:: name  <key>
                                            
                                            	Sensor name
                                            	**type**\:  str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: attributes
                                            
                                            	Attributes
                                            	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes>`
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor, self).__init__()

                                                self.yang_name = "sensor"
                                                self.yang_parent_name = "sensors"

                                                self.name = YLeaf(YType.str, "name")

                                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes()
                                                self.attributes.parent = self
                                                self._children_name_map["attributes"] = "attributes"
                                                self._children_yang_names.add("attributes")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("name") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor, self).__setattr__(name, value)


                                            class Attributes(Entity):
                                                """
                                                Attributes
                                                
                                                .. attribute:: basic_info
                                                
                                                	Entity attributes
                                                	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo>`
                                                
                                                .. attribute:: fru_info
                                                
                                                	Field Replaceable Unit (FRU) attributes
                                                	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo>`
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes, self).__init__()

                                                    self.yang_name = "attributes"
                                                    self.yang_parent_name = "sensor"

                                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                    self._children_yang_names.add("basic-info")

                                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                    self._children_yang_names.add("fru-info")


                                                class BasicInfo(Entity):
                                                    """
                                                    Entity attributes
                                                    
                                                    .. attribute:: description
                                                    
                                                    	describes in user\-readable terms                 what the entity in question does
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: firmware_revision
                                                    
                                                    	firmware revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: hardware_revision
                                                    
                                                    	hw revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: is_field_replaceable_unit
                                                    
                                                    	1 if Field Replaceable Unit 0, if not
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: model_name
                                                    
                                                    	model name
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: name
                                                    
                                                    	name string for the entity
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: serial_number
                                                    
                                                    	serial number
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: software_revision
                                                    
                                                    	software revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: vendor_type
                                                    
                                                    	maps to the vendor OID string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo, self).__init__()

                                                        self.yang_name = "basic-info"
                                                        self.yang_parent_name = "attributes"

                                                        self.description = YLeaf(YType.str, "description")

                                                        self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                        self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                        self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                        self.model_name = YLeaf(YType.str, "model-name")

                                                        self.name = YLeaf(YType.str, "name")

                                                        self.serial_number = YLeaf(YType.str, "serial-number")

                                                        self.software_revision = YLeaf(YType.str, "software-revision")

                                                        self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("description",
                                                                        "firmware_revision",
                                                                        "hardware_revision",
                                                                        "is_field_replaceable_unit",
                                                                        "model_name",
                                                                        "name",
                                                                        "serial_number",
                                                                        "software_revision",
                                                                        "vendor_type") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.description.is_set or
                                                            self.firmware_revision.is_set or
                                                            self.hardware_revision.is_set or
                                                            self.is_field_replaceable_unit.is_set or
                                                            self.model_name.is_set or
                                                            self.name.is_set or
                                                            self.serial_number.is_set or
                                                            self.software_revision.is_set or
                                                            self.vendor_type.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.description.yfilter != YFilter.not_set or
                                                            self.firmware_revision.yfilter != YFilter.not_set or
                                                            self.hardware_revision.yfilter != YFilter.not_set or
                                                            self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                            self.model_name.yfilter != YFilter.not_set or
                                                            self.name.yfilter != YFilter.not_set or
                                                            self.serial_number.yfilter != YFilter.not_set or
                                                            self.software_revision.yfilter != YFilter.not_set or
                                                            self.vendor_type.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "basic-info" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.description.get_name_leafdata())
                                                        if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                        if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                        if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                        if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.model_name.get_name_leafdata())
                                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.name.get_name_leafdata())
                                                        if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                        if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                        if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "description"):
                                                            self.description = value
                                                            self.description.value_namespace = name_space
                                                            self.description.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "firmware-revision"):
                                                            self.firmware_revision = value
                                                            self.firmware_revision.value_namespace = name_space
                                                            self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "hardware-revision"):
                                                            self.hardware_revision = value
                                                            self.hardware_revision.value_namespace = name_space
                                                            self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "is-field-replaceable-unit"):
                                                            self.is_field_replaceable_unit = value
                                                            self.is_field_replaceable_unit.value_namespace = name_space
                                                            self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "model-name"):
                                                            self.model_name = value
                                                            self.model_name.value_namespace = name_space
                                                            self.model_name.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "name"):
                                                            self.name = value
                                                            self.name.value_namespace = name_space
                                                            self.name.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "serial-number"):
                                                            self.serial_number = value
                                                            self.serial_number.value_namespace = name_space
                                                            self.serial_number.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "software-revision"):
                                                            self.software_revision = value
                                                            self.software_revision.value_namespace = name_space
                                                            self.software_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "vendor-type"):
                                                            self.vendor_type = value
                                                            self.vendor_type.value_namespace = name_space
                                                            self.vendor_type.value_namespace_prefix = name_space_prefix


                                                class FruInfo(Entity):
                                                    """
                                                    Field Replaceable Unit (FRU) attributes
                                                    
                                                    .. attribute:: last_operational_state_change
                                                    
                                                    	Time operational state is   last changed
                                                    	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange>`
                                                    
                                                    .. attribute:: module_administrative_state
                                                    
                                                    	Administrative    state
                                                    	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                    
                                                    .. attribute:: module_monitor_state
                                                    
                                                    	Monitor state
                                                    	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                    
                                                    .. attribute:: module_operational_state
                                                    
                                                    	Operation state
                                                    	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                    
                                                    .. attribute:: module_power_administrative_state
                                                    
                                                    	Power administrative state
                                                    	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                    
                                                    .. attribute:: module_reset_reason
                                                    
                                                    	Reset reason
                                                    	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                    
                                                    .. attribute:: module_up_time
                                                    
                                                    	Module up time
                                                    	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo, self).__init__()

                                                        self.yang_name = "fru-info"
                                                        self.yang_parent_name = "attributes"

                                                        self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                        self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                        self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                        self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                        self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                        self._children_yang_names.add("last-operational-state-change")

                                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                        self.module_up_time.parent = self
                                                        self._children_name_map["module_up_time"] = "module-up-time"
                                                        self._children_yang_names.add("module-up-time")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("module_administrative_state",
                                                                        "module_monitor_state",
                                                                        "module_operational_state",
                                                                        "module_power_administrative_state",
                                                                        "module_reset_reason") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)


                                                    class LastOperationalStateChange(Entity):
                                                        """
                                                        Time operational state is   last changed
                                                        
                                                        .. attribute:: time_in_nano_seconds
                                                        
                                                        	Time Value in Nano\-seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: nanosecond
                                                        
                                                        .. attribute:: time_in_seconds
                                                        
                                                        	Time Value in Seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: second
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                            self.yang_name = "last-operational-state-change"
                                                            self.yang_parent_name = "fru-info"

                                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("time_in_nano_seconds",
                                                                            "time_in_seconds") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.time_in_nano_seconds.is_set or
                                                                self.time_in_seconds.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "last-operational-state-change" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "time-in-nano-seconds"):
                                                                self.time_in_nano_seconds = value
                                                                self.time_in_nano_seconds.value_namespace = name_space
                                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "time-in-seconds"):
                                                                self.time_in_seconds = value
                                                                self.time_in_seconds.value_namespace = name_space
                                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                    class ModuleUpTime(Entity):
                                                        """
                                                        Module up time
                                                        
                                                        .. attribute:: time_in_nano_seconds
                                                        
                                                        	Time Value in Nano\-seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: nanosecond
                                                        
                                                        .. attribute:: time_in_seconds
                                                        
                                                        	Time Value in Seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: second
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                            self.yang_name = "module-up-time"
                                                            self.yang_parent_name = "fru-info"

                                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("time_in_nano_seconds",
                                                                            "time_in_seconds") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.time_in_nano_seconds.is_set or
                                                                self.time_in_seconds.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "module-up-time" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "time-in-nano-seconds"):
                                                                self.time_in_nano_seconds = value
                                                                self.time_in_nano_seconds.value_namespace = name_space
                                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "time-in-seconds"):
                                                                self.time_in_seconds = value
                                                                self.time_in_seconds.value_namespace = name_space
                                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            self.module_administrative_state.is_set or
                                                            self.module_monitor_state.is_set or
                                                            self.module_operational_state.is_set or
                                                            self.module_power_administrative_state.is_set or
                                                            self.module_reset_reason.is_set or
                                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                            (self.module_up_time is not None and self.module_up_time.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.module_administrative_state.yfilter != YFilter.not_set or
                                                            self.module_monitor_state.yfilter != YFilter.not_set or
                                                            self.module_operational_state.yfilter != YFilter.not_set or
                                                            self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                            self.module_reset_reason.yfilter != YFilter.not_set or
                                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                            (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "fru-info" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                        if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                        if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                        if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                        if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "last-operational-state-change"):
                                                            if (self.last_operational_state_change is None):
                                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                self.last_operational_state_change.parent = self
                                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                            return self.last_operational_state_change

                                                        if (child_yang_name == "module-up-time"):
                                                            if (self.module_up_time is None):
                                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                self.module_up_time.parent = self
                                                                self._children_name_map["module_up_time"] = "module-up-time"
                                                            return self.module_up_time

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "module-administrative-state"):
                                                            self.module_administrative_state = value
                                                            self.module_administrative_state.value_namespace = name_space
                                                            self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-monitor-state"):
                                                            self.module_monitor_state = value
                                                            self.module_monitor_state.value_namespace = name_space
                                                            self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-operational-state"):
                                                            self.module_operational_state = value
                                                            self.module_operational_state.value_namespace = name_space
                                                            self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-power-administrative-state"):
                                                            self.module_power_administrative_state = value
                                                            self.module_power_administrative_state.value_namespace = name_space
                                                            self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-reset-reason"):
                                                            self.module_reset_reason = value
                                                            self.module_reset_reason.value_namespace = name_space
                                                            self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        (self.basic_info is not None and self.basic_info.has_data()) or
                                                        (self.fru_info is not None and self.fru_info.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        (self.basic_info is not None and self.basic_info.has_operation()) or
                                                        (self.fru_info is not None and self.fru_info.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "attributes" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "basic-info"):
                                                        if (self.basic_info is None):
                                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.BasicInfo()
                                                            self.basic_info.parent = self
                                                            self._children_name_map["basic_info"] = "basic-info"
                                                        return self.basic_info

                                                    if (child_yang_name == "fru-info"):
                                                        if (self.fru_info is None):
                                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes.FruInfo()
                                                            self.fru_info.parent = self
                                                            self._children_name_map["fru_info"] = "fru-info"
                                                        return self.fru_info

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "basic-info" or name == "fru-info"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    pass

                                            def has_data(self):
                                                return (
                                                    self.name.is_set or
                                                    (self.attributes is not None and self.attributes.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    (self.attributes is not None and self.attributes.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "sensor" + "[name='" + self.name.get() + "']" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "attributes"):
                                                    if (self.attributes is None):
                                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor.Attributes()
                                                        self.attributes.parent = self
                                                        self._children_name_map["attributes"] = "attributes"
                                                    return self.attributes

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attributes" or name == "name"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.sensor:
                                                if (c.has_data()):
                                                    return True
                                            return False

                                        def has_operation(self):
                                            for c in self.sensor:
                                                if (c.has_operation()):
                                                    return True
                                            return self.yfilter != YFilter.not_set

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "sensors" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "sensor"):
                                                for c in self.sensor:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors.Sensor()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.sensor.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "sensor"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass


                                    class Attributes(Entity):
                                        """
                                        Attributes
                                        
                                        .. attribute:: basic_info
                                        
                                        	Entity attributes
                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.BasicInfo>`
                                        
                                        .. attribute:: fru_info
                                        
                                        	Field Replaceable Unit (FRU) attributes
                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo>`
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes, self).__init__()

                                            self.yang_name = "attributes"
                                            self.yang_parent_name = "port-slot"

                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.BasicInfo()
                                            self.basic_info.parent = self
                                            self._children_name_map["basic_info"] = "basic-info"
                                            self._children_yang_names.add("basic-info")

                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo()
                                            self.fru_info.parent = self
                                            self._children_name_map["fru_info"] = "fru-info"
                                            self._children_yang_names.add("fru-info")


                                        class BasicInfo(Entity):
                                            """
                                            Entity attributes
                                            
                                            .. attribute:: description
                                            
                                            	describes in user\-readable terms                 what the entity in question does
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: firmware_revision
                                            
                                            	firmware revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: hardware_revision
                                            
                                            	hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: is_field_replaceable_unit
                                            
                                            	1 if Field Replaceable Unit 0, if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: model_name
                                            
                                            	model name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: name
                                            
                                            	name string for the entity
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: serial_number
                                            
                                            	serial number
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: software_revision
                                            
                                            	software revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: vendor_type
                                            
                                            	maps to the vendor OID string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.BasicInfo, self).__init__()

                                                self.yang_name = "basic-info"
                                                self.yang_parent_name = "attributes"

                                                self.description = YLeaf(YType.str, "description")

                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                self.model_name = YLeaf(YType.str, "model-name")

                                                self.name = YLeaf(YType.str, "name")

                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("description",
                                                                "firmware_revision",
                                                                "hardware_revision",
                                                                "is_field_replaceable_unit",
                                                                "model_name",
                                                                "name",
                                                                "serial_number",
                                                                "software_revision",
                                                                "vendor_type") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.BasicInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.BasicInfo, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.description.is_set or
                                                    self.firmware_revision.is_set or
                                                    self.hardware_revision.is_set or
                                                    self.is_field_replaceable_unit.is_set or
                                                    self.model_name.is_set or
                                                    self.name.is_set or
                                                    self.serial_number.is_set or
                                                    self.software_revision.is_set or
                                                    self.vendor_type.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.description.yfilter != YFilter.not_set or
                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                    self.model_name.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    self.serial_number.yfilter != YFilter.not_set or
                                                    self.software_revision.yfilter != YFilter.not_set or
                                                    self.vendor_type.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "basic-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "description"):
                                                    self.description = value
                                                    self.description.value_namespace = name_space
                                                    self.description.value_namespace_prefix = name_space_prefix
                                                if(value_path == "firmware-revision"):
                                                    self.firmware_revision = value
                                                    self.firmware_revision.value_namespace = name_space
                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "hardware-revision"):
                                                    self.hardware_revision = value
                                                    self.hardware_revision.value_namespace = name_space
                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-field-replaceable-unit"):
                                                    self.is_field_replaceable_unit = value
                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "model-name"):
                                                    self.model_name = value
                                                    self.model_name.value_namespace = name_space
                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "serial-number"):
                                                    self.serial_number = value
                                                    self.serial_number.value_namespace = name_space
                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "software-revision"):
                                                    self.software_revision = value
                                                    self.software_revision.value_namespace = name_space
                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "vendor-type"):
                                                    self.vendor_type = value
                                                    self.vendor_type.value_namespace = name_space
                                                    self.vendor_type.value_namespace_prefix = name_space_prefix


                                        class FruInfo(Entity):
                                            """
                                            Field Replaceable Unit (FRU) attributes
                                            
                                            .. attribute:: last_operational_state_change
                                            
                                            	Time operational state is   last changed
                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange>`
                                            
                                            .. attribute:: module_administrative_state
                                            
                                            	Administrative    state
                                            	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                            
                                            .. attribute:: module_monitor_state
                                            
                                            	Monitor state
                                            	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                            
                                            .. attribute:: module_operational_state
                                            
                                            	Operation state
                                            	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                            
                                            .. attribute:: module_power_administrative_state
                                            
                                            	Power administrative state
                                            	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                            
                                            .. attribute:: module_reset_reason
                                            
                                            	Reset reason
                                            	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                            
                                            .. attribute:: module_up_time
                                            
                                            	Module up time
                                            	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime>`
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo, self).__init__()

                                                self.yang_name = "fru-info"
                                                self.yang_parent_name = "attributes"

                                                self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange()
                                                self.last_operational_state_change.parent = self
                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                self._children_yang_names.add("last-operational-state-change")

                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime()
                                                self.module_up_time.parent = self
                                                self._children_name_map["module_up_time"] = "module-up-time"
                                                self._children_yang_names.add("module-up-time")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("module_administrative_state",
                                                                "module_monitor_state",
                                                                "module_operational_state",
                                                                "module_power_administrative_state",
                                                                "module_reset_reason") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo, self).__setattr__(name, value)


                                            class LastOperationalStateChange(Entity):
                                                """
                                                Time operational state is   last changed
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                    self.yang_name = "last-operational-state-change"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                            class ModuleUpTime(Entity):
                                                """
                                                Module up time
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                    self.yang_name = "module-up-time"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "module-up-time" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.module_administrative_state.is_set or
                                                    self.module_monitor_state.is_set or
                                                    self.module_operational_state.is_set or
                                                    self.module_power_administrative_state.is_set or
                                                    self.module_reset_reason.is_set or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                    (self.module_up_time is not None and self.module_up_time.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.module_administrative_state.yfilter != YFilter.not_set or
                                                    self.module_monitor_state.yfilter != YFilter.not_set or
                                                    self.module_operational_state.yfilter != YFilter.not_set or
                                                    self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                    self.module_reset_reason.yfilter != YFilter.not_set or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                    (self.module_up_time is not None and self.module_up_time.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "fru-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "last-operational-state-change"):
                                                    if (self.last_operational_state_change is None):
                                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    return self.last_operational_state_change

                                                if (child_yang_name == "module-up-time"):
                                                    if (self.module_up_time is None):
                                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo.ModuleUpTime()
                                                        self.module_up_time.parent = self
                                                        self._children_name_map["module_up_time"] = "module-up-time"
                                                    return self.module_up_time

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "module-administrative-state"):
                                                    self.module_administrative_state = value
                                                    self.module_administrative_state.value_namespace = name_space
                                                    self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-monitor-state"):
                                                    self.module_monitor_state = value
                                                    self.module_monitor_state.value_namespace = name_space
                                                    self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-operational-state"):
                                                    self.module_operational_state = value
                                                    self.module_operational_state.value_namespace = name_space
                                                    self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-power-administrative-state"):
                                                    self.module_power_administrative_state = value
                                                    self.module_power_administrative_state.value_namespace = name_space
                                                    self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-reset-reason"):
                                                    self.module_reset_reason = value
                                                    self.module_reset_reason.value_namespace = name_space
                                                    self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                (self.fru_info is not None and self.fru_info.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "attributes" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "basic-info"):
                                                if (self.basic_info is None):
                                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                return self.basic_info

                                            if (child_yang_name == "fru-info"):
                                                if (self.fru_info is None):
                                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                return self.fru_info

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "basic-info" or name == "fru-info"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            self.name.is_set or
                                            (self.attributes is not None and self.attributes.has_data()) or
                                            (self.portses is not None and self.portses.has_data()) or
                                            (self.sensors is not None and self.sensors.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            (self.attributes is not None and self.attributes.has_operation()) or
                                            (self.portses is not None and self.portses.has_operation()) or
                                            (self.sensors is not None and self.sensors.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "port-slot" + "[name='" + self.name.get() + "']" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "attributes"):
                                            if (self.attributes is None):
                                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Attributes()
                                                self.attributes.parent = self
                                                self._children_name_map["attributes"] = "attributes"
                                            return self.attributes

                                        if (child_yang_name == "portses"):
                                            if (self.portses is None):
                                                self.portses = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Portses()
                                                self.portses.parent = self
                                                self._children_name_map["portses"] = "portses"
                                            return self.portses

                                        if (child_yang_name == "sensors"):
                                            if (self.sensors is None):
                                                self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Sensors()
                                                self.sensors.parent = self
                                                self._children_name_map["sensors"] = "sensors"
                                            return self.sensors

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "attributes" or name == "portses" or name == "sensors" or name == "name"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.port_slot:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.port_slot:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "port-slots" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "port-slot"):
                                        for c in self.port_slot:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.port_slot.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "port-slot"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class HwComponents(Entity):
                                """
                                Table of  HW components 
                                
                                .. attribute:: hw_component
                                
                                	HW component number
                                	**type**\: list of    :py:class:`HwComponent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent>`
                                
                                

                                """

                                _prefix = 'plat-chas-invmgr-oper'
                                _revision = '2015-01-07'

                                def __init__(self):
                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents, self).__init__()

                                    self.yang_name = "hw-components"
                                    self.yang_parent_name = "card"

                                    self.hw_component = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents, self).__setattr__(name, value)


                                class HwComponent(Entity):
                                    """
                                    HW component number
                                    
                                    .. attribute:: name  <key>
                                    
                                    	HW component name
                                    	**type**\:  str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: attributes
                                    
                                    	Attributes
                                    	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes>`
                                    
                                    .. attribute:: sensors
                                    
                                    	Table of sensors
                                    	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors>`
                                    
                                    

                                    """

                                    _prefix = 'plat-chas-invmgr-oper'
                                    _revision = '2015-01-07'

                                    def __init__(self):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent, self).__init__()

                                        self.yang_name = "hw-component"
                                        self.yang_parent_name = "hw-components"

                                        self.name = YLeaf(YType.str, "name")

                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes()
                                        self.attributes.parent = self
                                        self._children_name_map["attributes"] = "attributes"
                                        self._children_yang_names.add("attributes")

                                        self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors()
                                        self.sensors.parent = self
                                        self._children_name_map["sensors"] = "sensors"
                                        self._children_yang_names.add("sensors")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("name") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent, self).__setattr__(name, value)


                                    class Sensors(Entity):
                                        """
                                        Table of sensors
                                        
                                        .. attribute:: sensor
                                        
                                        	Sensor number
                                        	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor>`
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors, self).__init__()

                                            self.yang_name = "sensors"
                                            self.yang_parent_name = "hw-component"

                                            self.sensor = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in () and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors, self).__setattr__(name, value)


                                        class Sensor(Entity):
                                            """
                                            Sensor number
                                            
                                            .. attribute:: name  <key>
                                            
                                            	Sensor name
                                            	**type**\:  str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: attributes
                                            
                                            	Attributes
                                            	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes>`
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor, self).__init__()

                                                self.yang_name = "sensor"
                                                self.yang_parent_name = "sensors"

                                                self.name = YLeaf(YType.str, "name")

                                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes()
                                                self.attributes.parent = self
                                                self._children_name_map["attributes"] = "attributes"
                                                self._children_yang_names.add("attributes")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("name") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor, self).__setattr__(name, value)


                                            class Attributes(Entity):
                                                """
                                                Attributes
                                                
                                                .. attribute:: basic_info
                                                
                                                	Entity attributes
                                                	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo>`
                                                
                                                .. attribute:: fru_info
                                                
                                                	Field Replaceable Unit (FRU) attributes
                                                	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo>`
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes, self).__init__()

                                                    self.yang_name = "attributes"
                                                    self.yang_parent_name = "sensor"

                                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                    self._children_yang_names.add("basic-info")

                                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                    self._children_yang_names.add("fru-info")


                                                class BasicInfo(Entity):
                                                    """
                                                    Entity attributes
                                                    
                                                    .. attribute:: description
                                                    
                                                    	describes in user\-readable terms                 what the entity in question does
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: firmware_revision
                                                    
                                                    	firmware revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: hardware_revision
                                                    
                                                    	hw revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: is_field_replaceable_unit
                                                    
                                                    	1 if Field Replaceable Unit 0, if not
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: model_name
                                                    
                                                    	model name
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: name
                                                    
                                                    	name string for the entity
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: serial_number
                                                    
                                                    	serial number
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: software_revision
                                                    
                                                    	software revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: vendor_type
                                                    
                                                    	maps to the vendor OID string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo, self).__init__()

                                                        self.yang_name = "basic-info"
                                                        self.yang_parent_name = "attributes"

                                                        self.description = YLeaf(YType.str, "description")

                                                        self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                        self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                        self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                        self.model_name = YLeaf(YType.str, "model-name")

                                                        self.name = YLeaf(YType.str, "name")

                                                        self.serial_number = YLeaf(YType.str, "serial-number")

                                                        self.software_revision = YLeaf(YType.str, "software-revision")

                                                        self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("description",
                                                                        "firmware_revision",
                                                                        "hardware_revision",
                                                                        "is_field_replaceable_unit",
                                                                        "model_name",
                                                                        "name",
                                                                        "serial_number",
                                                                        "software_revision",
                                                                        "vendor_type") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.description.is_set or
                                                            self.firmware_revision.is_set or
                                                            self.hardware_revision.is_set or
                                                            self.is_field_replaceable_unit.is_set or
                                                            self.model_name.is_set or
                                                            self.name.is_set or
                                                            self.serial_number.is_set or
                                                            self.software_revision.is_set or
                                                            self.vendor_type.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.description.yfilter != YFilter.not_set or
                                                            self.firmware_revision.yfilter != YFilter.not_set or
                                                            self.hardware_revision.yfilter != YFilter.not_set or
                                                            self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                            self.model_name.yfilter != YFilter.not_set or
                                                            self.name.yfilter != YFilter.not_set or
                                                            self.serial_number.yfilter != YFilter.not_set or
                                                            self.software_revision.yfilter != YFilter.not_set or
                                                            self.vendor_type.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "basic-info" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.description.get_name_leafdata())
                                                        if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                        if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                        if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                        if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.model_name.get_name_leafdata())
                                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.name.get_name_leafdata())
                                                        if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                        if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                        if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "description"):
                                                            self.description = value
                                                            self.description.value_namespace = name_space
                                                            self.description.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "firmware-revision"):
                                                            self.firmware_revision = value
                                                            self.firmware_revision.value_namespace = name_space
                                                            self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "hardware-revision"):
                                                            self.hardware_revision = value
                                                            self.hardware_revision.value_namespace = name_space
                                                            self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "is-field-replaceable-unit"):
                                                            self.is_field_replaceable_unit = value
                                                            self.is_field_replaceable_unit.value_namespace = name_space
                                                            self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "model-name"):
                                                            self.model_name = value
                                                            self.model_name.value_namespace = name_space
                                                            self.model_name.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "name"):
                                                            self.name = value
                                                            self.name.value_namespace = name_space
                                                            self.name.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "serial-number"):
                                                            self.serial_number = value
                                                            self.serial_number.value_namespace = name_space
                                                            self.serial_number.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "software-revision"):
                                                            self.software_revision = value
                                                            self.software_revision.value_namespace = name_space
                                                            self.software_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "vendor-type"):
                                                            self.vendor_type = value
                                                            self.vendor_type.value_namespace = name_space
                                                            self.vendor_type.value_namespace_prefix = name_space_prefix


                                                class FruInfo(Entity):
                                                    """
                                                    Field Replaceable Unit (FRU) attributes
                                                    
                                                    .. attribute:: last_operational_state_change
                                                    
                                                    	Time operational state is   last changed
                                                    	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange>`
                                                    
                                                    .. attribute:: module_administrative_state
                                                    
                                                    	Administrative    state
                                                    	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                                    
                                                    .. attribute:: module_monitor_state
                                                    
                                                    	Monitor state
                                                    	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                                    
                                                    .. attribute:: module_operational_state
                                                    
                                                    	Operation state
                                                    	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                                    
                                                    .. attribute:: module_power_administrative_state
                                                    
                                                    	Power administrative state
                                                    	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                                    
                                                    .. attribute:: module_reset_reason
                                                    
                                                    	Reset reason
                                                    	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                                    
                                                    .. attribute:: module_up_time
                                                    
                                                    	Module up time
                                                    	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'plat-chas-invmgr-oper'
                                                    _revision = '2015-01-07'

                                                    def __init__(self):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo, self).__init__()

                                                        self.yang_name = "fru-info"
                                                        self.yang_parent_name = "attributes"

                                                        self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                        self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                        self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                        self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                        self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                        self._children_yang_names.add("last-operational-state-change")

                                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                        self.module_up_time.parent = self
                                                        self._children_name_map["module_up_time"] = "module-up-time"
                                                        self._children_yang_names.add("module-up-time")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("module_administrative_state",
                                                                        "module_monitor_state",
                                                                        "module_operational_state",
                                                                        "module_power_administrative_state",
                                                                        "module_reset_reason") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)


                                                    class LastOperationalStateChange(Entity):
                                                        """
                                                        Time operational state is   last changed
                                                        
                                                        .. attribute:: time_in_nano_seconds
                                                        
                                                        	Time Value in Nano\-seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: nanosecond
                                                        
                                                        .. attribute:: time_in_seconds
                                                        
                                                        	Time Value in Seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: second
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                            self.yang_name = "last-operational-state-change"
                                                            self.yang_parent_name = "fru-info"

                                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("time_in_nano_seconds",
                                                                            "time_in_seconds") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.time_in_nano_seconds.is_set or
                                                                self.time_in_seconds.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "last-operational-state-change" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "time-in-nano-seconds"):
                                                                self.time_in_nano_seconds = value
                                                                self.time_in_nano_seconds.value_namespace = name_space
                                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "time-in-seconds"):
                                                                self.time_in_seconds = value
                                                                self.time_in_seconds.value_namespace = name_space
                                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                    class ModuleUpTime(Entity):
                                                        """
                                                        Module up time
                                                        
                                                        .. attribute:: time_in_nano_seconds
                                                        
                                                        	Time Value in Nano\-seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: nanosecond
                                                        
                                                        .. attribute:: time_in_seconds
                                                        
                                                        	Time Value in Seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: second
                                                        
                                                        

                                                        """

                                                        _prefix = 'plat-chas-invmgr-oper'
                                                        _revision = '2015-01-07'

                                                        def __init__(self):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                            self.yang_name = "module-up-time"
                                                            self.yang_parent_name = "fru-info"

                                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("time_in_nano_seconds",
                                                                            "time_in_seconds") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.time_in_nano_seconds.is_set or
                                                                self.time_in_seconds.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "module-up-time" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "time-in-nano-seconds"):
                                                                self.time_in_nano_seconds = value
                                                                self.time_in_nano_seconds.value_namespace = name_space
                                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "time-in-seconds"):
                                                                self.time_in_seconds = value
                                                                self.time_in_seconds.value_namespace = name_space
                                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            self.module_administrative_state.is_set or
                                                            self.module_monitor_state.is_set or
                                                            self.module_operational_state.is_set or
                                                            self.module_power_administrative_state.is_set or
                                                            self.module_reset_reason.is_set or
                                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                            (self.module_up_time is not None and self.module_up_time.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.module_administrative_state.yfilter != YFilter.not_set or
                                                            self.module_monitor_state.yfilter != YFilter.not_set or
                                                            self.module_operational_state.yfilter != YFilter.not_set or
                                                            self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                            self.module_reset_reason.yfilter != YFilter.not_set or
                                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                            (self.module_up_time is not None and self.module_up_time.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "fru-info" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                        if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                        if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                        if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                        if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "last-operational-state-change"):
                                                            if (self.last_operational_state_change is None):
                                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                                self.last_operational_state_change.parent = self
                                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                            return self.last_operational_state_change

                                                        if (child_yang_name == "module-up-time"):
                                                            if (self.module_up_time is None):
                                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                                self.module_up_time.parent = self
                                                                self._children_name_map["module_up_time"] = "module-up-time"
                                                            return self.module_up_time

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "module-administrative-state"):
                                                            self.module_administrative_state = value
                                                            self.module_administrative_state.value_namespace = name_space
                                                            self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-monitor-state"):
                                                            self.module_monitor_state = value
                                                            self.module_monitor_state.value_namespace = name_space
                                                            self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-operational-state"):
                                                            self.module_operational_state = value
                                                            self.module_operational_state.value_namespace = name_space
                                                            self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-power-administrative-state"):
                                                            self.module_power_administrative_state = value
                                                            self.module_power_administrative_state.value_namespace = name_space
                                                            self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "module-reset-reason"):
                                                            self.module_reset_reason = value
                                                            self.module_reset_reason.value_namespace = name_space
                                                            self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        (self.basic_info is not None and self.basic_info.has_data()) or
                                                        (self.fru_info is not None and self.fru_info.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        (self.basic_info is not None and self.basic_info.has_operation()) or
                                                        (self.fru_info is not None and self.fru_info.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "attributes" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "basic-info"):
                                                        if (self.basic_info is None):
                                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.BasicInfo()
                                                            self.basic_info.parent = self
                                                            self._children_name_map["basic_info"] = "basic-info"
                                                        return self.basic_info

                                                    if (child_yang_name == "fru-info"):
                                                        if (self.fru_info is None):
                                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes.FruInfo()
                                                            self.fru_info.parent = self
                                                            self._children_name_map["fru_info"] = "fru-info"
                                                        return self.fru_info

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "basic-info" or name == "fru-info"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    pass

                                            def has_data(self):
                                                return (
                                                    self.name.is_set or
                                                    (self.attributes is not None and self.attributes.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    (self.attributes is not None and self.attributes.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "sensor" + "[name='" + self.name.get() + "']" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "attributes"):
                                                    if (self.attributes is None):
                                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.Attributes()
                                                        self.attributes.parent = self
                                                        self._children_name_map["attributes"] = "attributes"
                                                    return self.attributes

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "attributes" or name == "name"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.sensor:
                                                if (c.has_data()):
                                                    return True
                                            return False

                                        def has_operation(self):
                                            for c in self.sensor:
                                                if (c.has_operation()):
                                                    return True
                                            return self.yfilter != YFilter.not_set

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "sensors" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "sensor"):
                                                for c in self.sensor:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.sensor.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "sensor"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass


                                    class Attributes(Entity):
                                        """
                                        Attributes
                                        
                                        .. attribute:: basic_info
                                        
                                        	Entity attributes
                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.BasicInfo>`
                                        
                                        .. attribute:: fru_info
                                        
                                        	Field Replaceable Unit (FRU) attributes
                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo>`
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes, self).__init__()

                                            self.yang_name = "attributes"
                                            self.yang_parent_name = "hw-component"

                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.BasicInfo()
                                            self.basic_info.parent = self
                                            self._children_name_map["basic_info"] = "basic-info"
                                            self._children_yang_names.add("basic-info")

                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo()
                                            self.fru_info.parent = self
                                            self._children_name_map["fru_info"] = "fru-info"
                                            self._children_yang_names.add("fru-info")


                                        class BasicInfo(Entity):
                                            """
                                            Entity attributes
                                            
                                            .. attribute:: description
                                            
                                            	describes in user\-readable terms                 what the entity in question does
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: firmware_revision
                                            
                                            	firmware revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: hardware_revision
                                            
                                            	hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: is_field_replaceable_unit
                                            
                                            	1 if Field Replaceable Unit 0, if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: model_name
                                            
                                            	model name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: name
                                            
                                            	name string for the entity
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: serial_number
                                            
                                            	serial number
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: software_revision
                                            
                                            	software revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: vendor_type
                                            
                                            	maps to the vendor OID string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.BasicInfo, self).__init__()

                                                self.yang_name = "basic-info"
                                                self.yang_parent_name = "attributes"

                                                self.description = YLeaf(YType.str, "description")

                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                self.model_name = YLeaf(YType.str, "model-name")

                                                self.name = YLeaf(YType.str, "name")

                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("description",
                                                                "firmware_revision",
                                                                "hardware_revision",
                                                                "is_field_replaceable_unit",
                                                                "model_name",
                                                                "name",
                                                                "serial_number",
                                                                "software_revision",
                                                                "vendor_type") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.BasicInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.BasicInfo, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.description.is_set or
                                                    self.firmware_revision.is_set or
                                                    self.hardware_revision.is_set or
                                                    self.is_field_replaceable_unit.is_set or
                                                    self.model_name.is_set or
                                                    self.name.is_set or
                                                    self.serial_number.is_set or
                                                    self.software_revision.is_set or
                                                    self.vendor_type.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.description.yfilter != YFilter.not_set or
                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                    self.model_name.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    self.serial_number.yfilter != YFilter.not_set or
                                                    self.software_revision.yfilter != YFilter.not_set or
                                                    self.vendor_type.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "basic-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "description"):
                                                    self.description = value
                                                    self.description.value_namespace = name_space
                                                    self.description.value_namespace_prefix = name_space_prefix
                                                if(value_path == "firmware-revision"):
                                                    self.firmware_revision = value
                                                    self.firmware_revision.value_namespace = name_space
                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "hardware-revision"):
                                                    self.hardware_revision = value
                                                    self.hardware_revision.value_namespace = name_space
                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-field-replaceable-unit"):
                                                    self.is_field_replaceable_unit = value
                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "model-name"):
                                                    self.model_name = value
                                                    self.model_name.value_namespace = name_space
                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "serial-number"):
                                                    self.serial_number = value
                                                    self.serial_number.value_namespace = name_space
                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "software-revision"):
                                                    self.software_revision = value
                                                    self.software_revision.value_namespace = name_space
                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "vendor-type"):
                                                    self.vendor_type = value
                                                    self.vendor_type.value_namespace = name_space
                                                    self.vendor_type.value_namespace_prefix = name_space_prefix


                                        class FruInfo(Entity):
                                            """
                                            Field Replaceable Unit (FRU) attributes
                                            
                                            .. attribute:: last_operational_state_change
                                            
                                            	Time operational state is   last changed
                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange>`
                                            
                                            .. attribute:: module_administrative_state
                                            
                                            	Administrative    state
                                            	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                            
                                            .. attribute:: module_monitor_state
                                            
                                            	Monitor state
                                            	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                            
                                            .. attribute:: module_operational_state
                                            
                                            	Operation state
                                            	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                            
                                            .. attribute:: module_power_administrative_state
                                            
                                            	Power administrative state
                                            	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                            
                                            .. attribute:: module_reset_reason
                                            
                                            	Reset reason
                                            	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                            
                                            .. attribute:: module_up_time
                                            
                                            	Module up time
                                            	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime>`
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo, self).__init__()

                                                self.yang_name = "fru-info"
                                                self.yang_parent_name = "attributes"

                                                self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange()
                                                self.last_operational_state_change.parent = self
                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                self._children_yang_names.add("last-operational-state-change")

                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime()
                                                self.module_up_time.parent = self
                                                self._children_name_map["module_up_time"] = "module-up-time"
                                                self._children_yang_names.add("module-up-time")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("module_administrative_state",
                                                                "module_monitor_state",
                                                                "module_operational_state",
                                                                "module_power_administrative_state",
                                                                "module_reset_reason") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo, self).__setattr__(name, value)


                                            class LastOperationalStateChange(Entity):
                                                """
                                                Time operational state is   last changed
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                    self.yang_name = "last-operational-state-change"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                            class ModuleUpTime(Entity):
                                                """
                                                Module up time
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                    self.yang_name = "module-up-time"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "module-up-time" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.module_administrative_state.is_set or
                                                    self.module_monitor_state.is_set or
                                                    self.module_operational_state.is_set or
                                                    self.module_power_administrative_state.is_set or
                                                    self.module_reset_reason.is_set or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                    (self.module_up_time is not None and self.module_up_time.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.module_administrative_state.yfilter != YFilter.not_set or
                                                    self.module_monitor_state.yfilter != YFilter.not_set or
                                                    self.module_operational_state.yfilter != YFilter.not_set or
                                                    self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                    self.module_reset_reason.yfilter != YFilter.not_set or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                    (self.module_up_time is not None and self.module_up_time.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "fru-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "last-operational-state-change"):
                                                    if (self.last_operational_state_change is None):
                                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    return self.last_operational_state_change

                                                if (child_yang_name == "module-up-time"):
                                                    if (self.module_up_time is None):
                                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo.ModuleUpTime()
                                                        self.module_up_time.parent = self
                                                        self._children_name_map["module_up_time"] = "module-up-time"
                                                    return self.module_up_time

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "module-administrative-state"):
                                                    self.module_administrative_state = value
                                                    self.module_administrative_state.value_namespace = name_space
                                                    self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-monitor-state"):
                                                    self.module_monitor_state = value
                                                    self.module_monitor_state.value_namespace = name_space
                                                    self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-operational-state"):
                                                    self.module_operational_state = value
                                                    self.module_operational_state.value_namespace = name_space
                                                    self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-power-administrative-state"):
                                                    self.module_power_administrative_state = value
                                                    self.module_power_administrative_state.value_namespace = name_space
                                                    self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-reset-reason"):
                                                    self.module_reset_reason = value
                                                    self.module_reset_reason.value_namespace = name_space
                                                    self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                (self.fru_info is not None and self.fru_info.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "attributes" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "basic-info"):
                                                if (self.basic_info is None):
                                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                return self.basic_info

                                            if (child_yang_name == "fru-info"):
                                                if (self.fru_info is None):
                                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                return self.fru_info

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "basic-info" or name == "fru-info"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            self.name.is_set or
                                            (self.attributes is not None and self.attributes.has_data()) or
                                            (self.sensors is not None and self.sensors.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            (self.attributes is not None and self.attributes.has_operation()) or
                                            (self.sensors is not None and self.sensors.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "hw-component" + "[name='" + self.name.get() + "']" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "attributes"):
                                            if (self.attributes is None):
                                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Attributes()
                                                self.attributes.parent = self
                                                self._children_name_map["attributes"] = "attributes"
                                            return self.attributes

                                        if (child_yang_name == "sensors"):
                                            if (self.sensors is None):
                                                self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors()
                                                self.sensors.parent = self
                                                self._children_name_map["sensors"] = "sensors"
                                            return self.sensors

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "attributes" or name == "sensors" or name == "name"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.hw_component:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.hw_component:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "hw-components" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "hw-component"):
                                        for c in self.hw_component:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.hw_component.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "hw-component"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class Sensors(Entity):
                                """
                                Table of sensors
                                
                                .. attribute:: sensor
                                
                                	Sensor number
                                	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor>`
                                
                                

                                """

                                _prefix = 'plat-chas-invmgr-oper'
                                _revision = '2015-01-07'

                                def __init__(self):
                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors, self).__init__()

                                    self.yang_name = "sensors"
                                    self.yang_parent_name = "card"

                                    self.sensor = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors, self).__setattr__(name, value)


                                class Sensor(Entity):
                                    """
                                    Sensor number
                                    
                                    .. attribute:: name  <key>
                                    
                                    	Sensor name
                                    	**type**\:  str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: attributes
                                    
                                    	Attributes
                                    	**type**\:   :py:class:`Attributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes>`
                                    
                                    

                                    """

                                    _prefix = 'plat-chas-invmgr-oper'
                                    _revision = '2015-01-07'

                                    def __init__(self):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor, self).__init__()

                                        self.yang_name = "sensor"
                                        self.yang_parent_name = "sensors"

                                        self.name = YLeaf(YType.str, "name")

                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes()
                                        self.attributes.parent = self
                                        self._children_name_map["attributes"] = "attributes"
                                        self._children_yang_names.add("attributes")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("name") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor, self).__setattr__(name, value)


                                    class Attributes(Entity):
                                        """
                                        Attributes
                                        
                                        .. attribute:: basic_info
                                        
                                        	Entity attributes
                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.BasicInfo>`
                                        
                                        .. attribute:: fru_info
                                        
                                        	Field Replaceable Unit (FRU) attributes
                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo>`
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes, self).__init__()

                                            self.yang_name = "attributes"
                                            self.yang_parent_name = "sensor"

                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.BasicInfo()
                                            self.basic_info.parent = self
                                            self._children_name_map["basic_info"] = "basic-info"
                                            self._children_yang_names.add("basic-info")

                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo()
                                            self.fru_info.parent = self
                                            self._children_name_map["fru_info"] = "fru-info"
                                            self._children_yang_names.add("fru-info")


                                        class BasicInfo(Entity):
                                            """
                                            Entity attributes
                                            
                                            .. attribute:: description
                                            
                                            	describes in user\-readable terms                 what the entity in question does
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: firmware_revision
                                            
                                            	firmware revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: hardware_revision
                                            
                                            	hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: is_field_replaceable_unit
                                            
                                            	1 if Field Replaceable Unit 0, if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: model_name
                                            
                                            	model name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: name
                                            
                                            	name string for the entity
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: serial_number
                                            
                                            	serial number
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: software_revision
                                            
                                            	software revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: vendor_type
                                            
                                            	maps to the vendor OID string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.BasicInfo, self).__init__()

                                                self.yang_name = "basic-info"
                                                self.yang_parent_name = "attributes"

                                                self.description = YLeaf(YType.str, "description")

                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                self.model_name = YLeaf(YType.str, "model-name")

                                                self.name = YLeaf(YType.str, "name")

                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("description",
                                                                "firmware_revision",
                                                                "hardware_revision",
                                                                "is_field_replaceable_unit",
                                                                "model_name",
                                                                "name",
                                                                "serial_number",
                                                                "software_revision",
                                                                "vendor_type") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.BasicInfo, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.description.is_set or
                                                    self.firmware_revision.is_set or
                                                    self.hardware_revision.is_set or
                                                    self.is_field_replaceable_unit.is_set or
                                                    self.model_name.is_set or
                                                    self.name.is_set or
                                                    self.serial_number.is_set or
                                                    self.software_revision.is_set or
                                                    self.vendor_type.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.description.yfilter != YFilter.not_set or
                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                    self.model_name.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    self.serial_number.yfilter != YFilter.not_set or
                                                    self.software_revision.yfilter != YFilter.not_set or
                                                    self.vendor_type.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "basic-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "description"):
                                                    self.description = value
                                                    self.description.value_namespace = name_space
                                                    self.description.value_namespace_prefix = name_space_prefix
                                                if(value_path == "firmware-revision"):
                                                    self.firmware_revision = value
                                                    self.firmware_revision.value_namespace = name_space
                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "hardware-revision"):
                                                    self.hardware_revision = value
                                                    self.hardware_revision.value_namespace = name_space
                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-field-replaceable-unit"):
                                                    self.is_field_replaceable_unit = value
                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "model-name"):
                                                    self.model_name = value
                                                    self.model_name.value_namespace = name_space
                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "serial-number"):
                                                    self.serial_number = value
                                                    self.serial_number.value_namespace = name_space
                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "software-revision"):
                                                    self.software_revision = value
                                                    self.software_revision.value_namespace = name_space
                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "vendor-type"):
                                                    self.vendor_type = value
                                                    self.vendor_type.value_namespace = name_space
                                                    self.vendor_type.value_namespace_prefix = name_space_prefix


                                        class FruInfo(Entity):
                                            """
                                            Field Replaceable Unit (FRU) attributes
                                            
                                            .. attribute:: last_operational_state_change
                                            
                                            	Time operational state is   last changed
                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange>`
                                            
                                            .. attribute:: module_administrative_state
                                            
                                            	Administrative    state
                                            	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                            
                                            .. attribute:: module_monitor_state
                                            
                                            	Monitor state
                                            	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                            
                                            .. attribute:: module_operational_state
                                            
                                            	Operation state
                                            	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                            
                                            .. attribute:: module_power_administrative_state
                                            
                                            	Power administrative state
                                            	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                            
                                            .. attribute:: module_reset_reason
                                            
                                            	Reset reason
                                            	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                            
                                            .. attribute:: module_up_time
                                            
                                            	Module up time
                                            	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime>`
                                            
                                            

                                            """

                                            _prefix = 'plat-chas-invmgr-oper'
                                            _revision = '2015-01-07'

                                            def __init__(self):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo, self).__init__()

                                                self.yang_name = "fru-info"
                                                self.yang_parent_name = "attributes"

                                                self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                                self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                                self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                                self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                                self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                self.last_operational_state_change.parent = self
                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                self._children_yang_names.add("last-operational-state-change")

                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                self.module_up_time.parent = self
                                                self._children_name_map["module_up_time"] = "module-up-time"
                                                self._children_yang_names.add("module-up-time")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("module_administrative_state",
                                                                "module_monitor_state",
                                                                "module_operational_state",
                                                                "module_power_administrative_state",
                                                                "module_reset_reason") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo, self).__setattr__(name, value)


                                            class LastOperationalStateChange(Entity):
                                                """
                                                Time operational state is   last changed
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                    self.yang_name = "last-operational-state-change"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                            class ModuleUpTime(Entity):
                                                """
                                                Module up time
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'plat-chas-invmgr-oper'
                                                _revision = '2015-01-07'

                                                def __init__(self):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                                    self.yang_name = "module-up-time"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "module-up-time" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.module_administrative_state.is_set or
                                                    self.module_monitor_state.is_set or
                                                    self.module_operational_state.is_set or
                                                    self.module_power_administrative_state.is_set or
                                                    self.module_reset_reason.is_set or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                                    (self.module_up_time is not None and self.module_up_time.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.module_administrative_state.yfilter != YFilter.not_set or
                                                    self.module_monitor_state.yfilter != YFilter.not_set or
                                                    self.module_operational_state.yfilter != YFilter.not_set or
                                                    self.module_power_administrative_state.yfilter != YFilter.not_set or
                                                    self.module_reset_reason.yfilter != YFilter.not_set or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                                    (self.module_up_time is not None and self.module_up_time.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "fru-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                                if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                                if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                                if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                                if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "last-operational-state-change"):
                                                    if (self.last_operational_state_change is None):
                                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    return self.last_operational_state_change

                                                if (child_yang_name == "module-up-time"):
                                                    if (self.module_up_time is None):
                                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo.ModuleUpTime()
                                                        self.module_up_time.parent = self
                                                        self._children_name_map["module_up_time"] = "module-up-time"
                                                    return self.module_up_time

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "module-administrative-state"):
                                                    self.module_administrative_state = value
                                                    self.module_administrative_state.value_namespace = name_space
                                                    self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-monitor-state"):
                                                    self.module_monitor_state = value
                                                    self.module_monitor_state.value_namespace = name_space
                                                    self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-operational-state"):
                                                    self.module_operational_state = value
                                                    self.module_operational_state.value_namespace = name_space
                                                    self.module_operational_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-power-administrative-state"):
                                                    self.module_power_administrative_state = value
                                                    self.module_power_administrative_state.value_namespace = name_space
                                                    self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "module-reset-reason"):
                                                    self.module_reset_reason = value
                                                    self.module_reset_reason.value_namespace = name_space
                                                    self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                (self.fru_info is not None and self.fru_info.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "attributes" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "basic-info"):
                                                if (self.basic_info is None):
                                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                return self.basic_info

                                            if (child_yang_name == "fru-info"):
                                                if (self.fru_info is None):
                                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                return self.fru_info

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "basic-info" or name == "fru-info"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            self.name.is_set or
                                            (self.attributes is not None and self.attributes.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            (self.attributes is not None and self.attributes.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "sensor" + "[name='" + self.name.get() + "']" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "attributes"):
                                            if (self.attributes is None):
                                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.Attributes()
                                                self.attributes.parent = self
                                                self._children_name_map["attributes"] = "attributes"
                                            return self.attributes

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "attributes" or name == "name"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.sensor:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.sensor:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "sensors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "sensor"):
                                        for c in self.sensor:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.sensor.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "sensor"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class Attributes(Entity):
                                """
                                Attributes
                                
                                .. attribute:: basic_info
                                
                                	Entity attributes
                                	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.BasicInfo>`
                                
                                .. attribute:: fru_info
                                
                                	Field Replaceable Unit (FRU) attributes
                                	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo>`
                                
                                

                                """

                                _prefix = 'plat-chas-invmgr-oper'
                                _revision = '2015-01-07'

                                def __init__(self):
                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes, self).__init__()

                                    self.yang_name = "attributes"
                                    self.yang_parent_name = "card"

                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.BasicInfo()
                                    self.basic_info.parent = self
                                    self._children_name_map["basic_info"] = "basic-info"
                                    self._children_yang_names.add("basic-info")

                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo()
                                    self.fru_info.parent = self
                                    self._children_name_map["fru_info"] = "fru-info"
                                    self._children_yang_names.add("fru-info")


                                class BasicInfo(Entity):
                                    """
                                    Entity attributes
                                    
                                    .. attribute:: description
                                    
                                    	describes in user\-readable terms                 what the entity in question does
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: firmware_revision
                                    
                                    	firmware revision string
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: hardware_revision
                                    
                                    	hw revision string
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: is_field_replaceable_unit
                                    
                                    	1 if Field Replaceable Unit 0, if not
                                    	**type**\:  bool
                                    
                                    .. attribute:: model_name
                                    
                                    	model name
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: name
                                    
                                    	name string for the entity
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: serial_number
                                    
                                    	serial number
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: software_revision
                                    
                                    	software revision string
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: vendor_type
                                    
                                    	maps to the vendor OID string
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'plat-chas-invmgr-oper'
                                    _revision = '2015-01-07'

                                    def __init__(self):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.BasicInfo, self).__init__()

                                        self.yang_name = "basic-info"
                                        self.yang_parent_name = "attributes"

                                        self.description = YLeaf(YType.str, "description")

                                        self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                        self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                        self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                        self.model_name = YLeaf(YType.str, "model-name")

                                        self.name = YLeaf(YType.str, "name")

                                        self.serial_number = YLeaf(YType.str, "serial-number")

                                        self.software_revision = YLeaf(YType.str, "software-revision")

                                        self.vendor_type = YLeaf(YType.str, "vendor-type")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("description",
                                                        "firmware_revision",
                                                        "hardware_revision",
                                                        "is_field_replaceable_unit",
                                                        "model_name",
                                                        "name",
                                                        "serial_number",
                                                        "software_revision",
                                                        "vendor_type") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.BasicInfo, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.BasicInfo, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.description.is_set or
                                            self.firmware_revision.is_set or
                                            self.hardware_revision.is_set or
                                            self.is_field_replaceable_unit.is_set or
                                            self.model_name.is_set or
                                            self.name.is_set or
                                            self.serial_number.is_set or
                                            self.software_revision.is_set or
                                            self.vendor_type.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.description.yfilter != YFilter.not_set or
                                            self.firmware_revision.yfilter != YFilter.not_set or
                                            self.hardware_revision.yfilter != YFilter.not_set or
                                            self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                            self.model_name.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.serial_number.yfilter != YFilter.not_set or
                                            self.software_revision.yfilter != YFilter.not_set or
                                            self.vendor_type.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "basic-info" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.description.get_name_leafdata())
                                        if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                        if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                        if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                        if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.model_name.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.serial_number.get_name_leafdata())
                                        if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.software_revision.get_name_leafdata())
                                        if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "description"):
                                            self.description = value
                                            self.description.value_namespace = name_space
                                            self.description.value_namespace_prefix = name_space_prefix
                                        if(value_path == "firmware-revision"):
                                            self.firmware_revision = value
                                            self.firmware_revision.value_namespace = name_space
                                            self.firmware_revision.value_namespace_prefix = name_space_prefix
                                        if(value_path == "hardware-revision"):
                                            self.hardware_revision = value
                                            self.hardware_revision.value_namespace = name_space
                                            self.hardware_revision.value_namespace_prefix = name_space_prefix
                                        if(value_path == "is-field-replaceable-unit"):
                                            self.is_field_replaceable_unit = value
                                            self.is_field_replaceable_unit.value_namespace = name_space
                                            self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                        if(value_path == "model-name"):
                                            self.model_name = value
                                            self.model_name.value_namespace = name_space
                                            self.model_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "serial-number"):
                                            self.serial_number = value
                                            self.serial_number.value_namespace = name_space
                                            self.serial_number.value_namespace_prefix = name_space_prefix
                                        if(value_path == "software-revision"):
                                            self.software_revision = value
                                            self.software_revision.value_namespace = name_space
                                            self.software_revision.value_namespace_prefix = name_space_prefix
                                        if(value_path == "vendor-type"):
                                            self.vendor_type = value
                                            self.vendor_type.value_namespace = name_space
                                            self.vendor_type.value_namespace_prefix = name_space_prefix


                                class FruInfo(Entity):
                                    """
                                    Field Replaceable Unit (FRU) attributes
                                    
                                    .. attribute:: last_operational_state_change
                                    
                                    	Time operational state is   last changed
                                    	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.LastOperationalStateChange>`
                                    
                                    .. attribute:: module_administrative_state
                                    
                                    	Administrative    state
                                    	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                                    
                                    .. attribute:: module_monitor_state
                                    
                                    	Monitor state
                                    	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                                    
                                    .. attribute:: module_operational_state
                                    
                                    	Operation state
                                    	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                                    
                                    .. attribute:: module_power_administrative_state
                                    
                                    	Power administrative state
                                    	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                                    
                                    .. attribute:: module_reset_reason
                                    
                                    	Reset reason
                                    	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                                    
                                    .. attribute:: module_up_time
                                    
                                    	Module up time
                                    	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.ModuleUpTime>`
                                    
                                    

                                    """

                                    _prefix = 'plat-chas-invmgr-oper'
                                    _revision = '2015-01-07'

                                    def __init__(self):
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo, self).__init__()

                                        self.yang_name = "fru-info"
                                        self.yang_parent_name = "attributes"

                                        self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                        self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                        self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                        self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                        self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.LastOperationalStateChange()
                                        self.last_operational_state_change.parent = self
                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                        self._children_yang_names.add("last-operational-state-change")

                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.ModuleUpTime()
                                        self.module_up_time.parent = self
                                        self._children_name_map["module_up_time"] = "module-up-time"
                                        self._children_yang_names.add("module-up-time")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("module_administrative_state",
                                                        "module_monitor_state",
                                                        "module_operational_state",
                                                        "module_power_administrative_state",
                                                        "module_reset_reason") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo, self).__setattr__(name, value)


                                    class LastOperationalStateChange(Entity):
                                        """
                                        Time operational state is   last changed
                                        
                                        .. attribute:: time_in_nano_seconds
                                        
                                        	Time Value in Nano\-seconds
                                        	**type**\:  int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        	**units**\: nanosecond
                                        
                                        .. attribute:: time_in_seconds
                                        
                                        	Time Value in Seconds
                                        	**type**\:  int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        	**units**\: second
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                            self.yang_name = "last-operational-state-change"
                                            self.yang_parent_name = "fru-info"

                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_in_nano_seconds",
                                                            "time_in_seconds") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.time_in_nano_seconds.is_set or
                                                self.time_in_seconds.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-operational-state-change" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-in-nano-seconds"):
                                                self.time_in_nano_seconds = value
                                                self.time_in_nano_seconds.value_namespace = name_space
                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                            if(value_path == "time-in-seconds"):
                                                self.time_in_seconds = value
                                                self.time_in_seconds.value_namespace = name_space
                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                    class ModuleUpTime(Entity):
                                        """
                                        Module up time
                                        
                                        .. attribute:: time_in_nano_seconds
                                        
                                        	Time Value in Nano\-seconds
                                        	**type**\:  int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        	**units**\: nanosecond
                                        
                                        .. attribute:: time_in_seconds
                                        
                                        	Time Value in Seconds
                                        	**type**\:  int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        	**units**\: second
                                        
                                        

                                        """

                                        _prefix = 'plat-chas-invmgr-oper'
                                        _revision = '2015-01-07'

                                        def __init__(self):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                            self.yang_name = "module-up-time"
                                            self.yang_parent_name = "fru-info"

                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_in_nano_seconds",
                                                            "time_in_seconds") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.time_in_nano_seconds.is_set or
                                                self.time_in_seconds.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "module-up-time" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-in-nano-seconds"):
                                                self.time_in_nano_seconds = value
                                                self.time_in_nano_seconds.value_namespace = name_space
                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                            if(value_path == "time-in-seconds"):
                                                self.time_in_seconds = value
                                                self.time_in_seconds.value_namespace = name_space
                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.module_administrative_state.is_set or
                                            self.module_monitor_state.is_set or
                                            self.module_operational_state.is_set or
                                            self.module_power_administrative_state.is_set or
                                            self.module_reset_reason.is_set or
                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                            (self.module_up_time is not None and self.module_up_time.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.module_administrative_state.yfilter != YFilter.not_set or
                                            self.module_monitor_state.yfilter != YFilter.not_set or
                                            self.module_operational_state.yfilter != YFilter.not_set or
                                            self.module_power_administrative_state.yfilter != YFilter.not_set or
                                            self.module_reset_reason.yfilter != YFilter.not_set or
                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                            (self.module_up_time is not None and self.module_up_time.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "fru-info" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                        if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                        if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                        if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                        if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "last-operational-state-change"):
                                            if (self.last_operational_state_change is None):
                                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.LastOperationalStateChange()
                                                self.last_operational_state_change.parent = self
                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                            return self.last_operational_state_change

                                        if (child_yang_name == "module-up-time"):
                                            if (self.module_up_time is None):
                                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo.ModuleUpTime()
                                                self.module_up_time.parent = self
                                                self._children_name_map["module_up_time"] = "module-up-time"
                                            return self.module_up_time

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "module-administrative-state"):
                                            self.module_administrative_state = value
                                            self.module_administrative_state.value_namespace = name_space
                                            self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                        if(value_path == "module-monitor-state"):
                                            self.module_monitor_state = value
                                            self.module_monitor_state.value_namespace = name_space
                                            self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                        if(value_path == "module-operational-state"):
                                            self.module_operational_state = value
                                            self.module_operational_state.value_namespace = name_space
                                            self.module_operational_state.value_namespace_prefix = name_space_prefix
                                        if(value_path == "module-power-administrative-state"):
                                            self.module_power_administrative_state = value
                                            self.module_power_administrative_state.value_namespace = name_space
                                            self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                        if(value_path == "module-reset-reason"):
                                            self.module_reset_reason = value
                                            self.module_reset_reason.value_namespace = name_space
                                            self.module_reset_reason.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        (self.basic_info is not None and self.basic_info.has_data()) or
                                        (self.fru_info is not None and self.fru_info.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.basic_info is not None and self.basic_info.has_operation()) or
                                        (self.fru_info is not None and self.fru_info.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "attributes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "basic-info"):
                                        if (self.basic_info is None):
                                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.BasicInfo()
                                            self.basic_info.parent = self
                                            self._children_name_map["basic_info"] = "basic-info"
                                        return self.basic_info

                                    if (child_yang_name == "fru-info"):
                                        if (self.fru_info is None):
                                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes.FruInfo()
                                            self.fru_info.parent = self
                                            self._children_name_map["fru_info"] = "fru-info"
                                        return self.fru_info

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "basic-info" or name == "fru-info"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    self.name.is_set or
                                    (self.attributes is not None and self.attributes.has_data()) or
                                    (self.hardware_information is not None and self.hardware_information.has_data()) or
                                    (self.hw_components is not None and self.hw_components.has_data()) or
                                    (self.port_slots is not None and self.port_slots.has_data()) or
                                    (self.sensors is not None and self.sensors.has_data()) or
                                    (self.sub_slots is not None and self.sub_slots.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set or
                                    (self.attributes is not None and self.attributes.has_operation()) or
                                    (self.hardware_information is not None and self.hardware_information.has_operation()) or
                                    (self.hw_components is not None and self.hw_components.has_operation()) or
                                    (self.port_slots is not None and self.port_slots.has_operation()) or
                                    (self.sensors is not None and self.sensors.has_operation()) or
                                    (self.sub_slots is not None and self.sub_slots.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "card" + "[name='" + self.name.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "attributes"):
                                    if (self.attributes is None):
                                        self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Attributes()
                                        self.attributes.parent = self
                                        self._children_name_map["attributes"] = "attributes"
                                    return self.attributes

                                if (child_yang_name == "hardware-information"):
                                    if (self.hardware_information is None):
                                        self.hardware_information = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HardwareInformation()
                                        self.hardware_information.parent = self
                                        self._children_name_map["hardware_information"] = "hardware-information"
                                    return self.hardware_information

                                if (child_yang_name == "hw-components"):
                                    if (self.hw_components is None):
                                        self.hw_components = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents()
                                        self.hw_components.parent = self
                                        self._children_name_map["hw_components"] = "hw-components"
                                    return self.hw_components

                                if (child_yang_name == "port-slots"):
                                    if (self.port_slots is None):
                                        self.port_slots = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots()
                                        self.port_slots.parent = self
                                        self._children_name_map["port_slots"] = "port-slots"
                                    return self.port_slots

                                if (child_yang_name == "sensors"):
                                    if (self.sensors is None):
                                        self.sensors = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors()
                                        self.sensors.parent = self
                                        self._children_name_map["sensors"] = "sensors"
                                    return self.sensors

                                if (child_yang_name == "sub-slots"):
                                    if (self.sub_slots is None):
                                        self.sub_slots = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots()
                                        self.sub_slots.parent = self
                                        self._children_name_map["sub_slots"] = "sub-slots"
                                    return self.sub_slots

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "attributes" or name == "hardware-information" or name == "hw-components" or name == "port-slots" or name == "sensors" or name == "sub-slots" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.card:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.card:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "cards" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "card"):
                                for c in self.card:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = PlatformInventory.Racks.Rack.Slots.Slot.Cards.Card()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.card.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "card"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attributes(Entity):
                        """
                        Attributes
                        
                        .. attribute:: basic_info
                        
                        	Entity attributes
                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Attributes.BasicInfo>`
                        
                        .. attribute:: fru_info
                        
                        	Field Replaceable Unit (FRU) attributes
                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo>`
                        
                        

                        """

                        _prefix = 'plat-chas-invmgr-oper'
                        _revision = '2015-01-07'

                        def __init__(self):
                            super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes, self).__init__()

                            self.yang_name = "attributes"
                            self.yang_parent_name = "slot"

                            self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Attributes.BasicInfo()
                            self.basic_info.parent = self
                            self._children_name_map["basic_info"] = "basic-info"
                            self._children_yang_names.add("basic-info")

                            self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo()
                            self.fru_info.parent = self
                            self._children_name_map["fru_info"] = "fru-info"
                            self._children_yang_names.add("fru-info")


                        class BasicInfo(Entity):
                            """
                            Entity attributes
                            
                            .. attribute:: description
                            
                            	describes in user\-readable terms                 what the entity in question does
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: firmware_revision
                            
                            	firmware revision string
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: hardware_revision
                            
                            	hw revision string
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: is_field_replaceable_unit
                            
                            	1 if Field Replaceable Unit 0, if not
                            	**type**\:  bool
                            
                            .. attribute:: model_name
                            
                            	model name
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: name
                            
                            	name string for the entity
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: serial_number
                            
                            	serial number
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: software_revision
                            
                            	software revision string
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: vendor_type
                            
                            	maps to the vendor OID string
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            

                            """

                            _prefix = 'plat-chas-invmgr-oper'
                            _revision = '2015-01-07'

                            def __init__(self):
                                super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.BasicInfo, self).__init__()

                                self.yang_name = "basic-info"
                                self.yang_parent_name = "attributes"

                                self.description = YLeaf(YType.str, "description")

                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                self.model_name = YLeaf(YType.str, "model-name")

                                self.name = YLeaf(YType.str, "name")

                                self.serial_number = YLeaf(YType.str, "serial-number")

                                self.software_revision = YLeaf(YType.str, "software-revision")

                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("description",
                                                "firmware_revision",
                                                "hardware_revision",
                                                "is_field_replaceable_unit",
                                                "model_name",
                                                "name",
                                                "serial_number",
                                                "software_revision",
                                                "vendor_type") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.BasicInfo, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.BasicInfo, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.description.is_set or
                                    self.firmware_revision.is_set or
                                    self.hardware_revision.is_set or
                                    self.is_field_replaceable_unit.is_set or
                                    self.model_name.is_set or
                                    self.name.is_set or
                                    self.serial_number.is_set or
                                    self.software_revision.is_set or
                                    self.vendor_type.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.description.yfilter != YFilter.not_set or
                                    self.firmware_revision.yfilter != YFilter.not_set or
                                    self.hardware_revision.yfilter != YFilter.not_set or
                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                    self.model_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set or
                                    self.serial_number.yfilter != YFilter.not_set or
                                    self.software_revision.yfilter != YFilter.not_set or
                                    self.vendor_type.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "basic-info" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.description.get_name_leafdata())
                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())
                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "description"):
                                    self.description = value
                                    self.description.value_namespace = name_space
                                    self.description.value_namespace_prefix = name_space_prefix
                                if(value_path == "firmware-revision"):
                                    self.firmware_revision = value
                                    self.firmware_revision.value_namespace = name_space
                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                if(value_path == "hardware-revision"):
                                    self.hardware_revision = value
                                    self.hardware_revision.value_namespace = name_space
                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-field-replaceable-unit"):
                                    self.is_field_replaceable_unit = value
                                    self.is_field_replaceable_unit.value_namespace = name_space
                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                if(value_path == "model-name"):
                                    self.model_name = value
                                    self.model_name.value_namespace = name_space
                                    self.model_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix
                                if(value_path == "serial-number"):
                                    self.serial_number = value
                                    self.serial_number.value_namespace = name_space
                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                if(value_path == "software-revision"):
                                    self.software_revision = value
                                    self.software_revision.value_namespace = name_space
                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                if(value_path == "vendor-type"):
                                    self.vendor_type = value
                                    self.vendor_type.value_namespace = name_space
                                    self.vendor_type.value_namespace_prefix = name_space_prefix


                        class FruInfo(Entity):
                            """
                            Field Replaceable Unit (FRU) attributes
                            
                            .. attribute:: last_operational_state_change
                            
                            	Time operational state is   last changed
                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.LastOperationalStateChange>`
                            
                            .. attribute:: module_administrative_state
                            
                            	Administrative    state
                            	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                            
                            .. attribute:: module_monitor_state
                            
                            	Monitor state
                            	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                            
                            .. attribute:: module_operational_state
                            
                            	Operation state
                            	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                            
                            .. attribute:: module_power_administrative_state
                            
                            	Power administrative state
                            	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                            
                            .. attribute:: module_reset_reason
                            
                            	Reset reason
                            	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                            
                            .. attribute:: module_up_time
                            
                            	Module up time
                            	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.ModuleUpTime>`
                            
                            

                            """

                            _prefix = 'plat-chas-invmgr-oper'
                            _revision = '2015-01-07'

                            def __init__(self):
                                super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo, self).__init__()

                                self.yang_name = "fru-info"
                                self.yang_parent_name = "attributes"

                                self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                                self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                                self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                                self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                                self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.LastOperationalStateChange()
                                self.last_operational_state_change.parent = self
                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                self._children_yang_names.add("last-operational-state-change")

                                self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.ModuleUpTime()
                                self.module_up_time.parent = self
                                self._children_name_map["module_up_time"] = "module-up-time"
                                self._children_yang_names.add("module-up-time")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("module_administrative_state",
                                                "module_monitor_state",
                                                "module_operational_state",
                                                "module_power_administrative_state",
                                                "module_reset_reason") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo, self).__setattr__(name, value)


                            class LastOperationalStateChange(Entity):
                                """
                                Time operational state is   last changed
                                
                                .. attribute:: time_in_nano_seconds
                                
                                	Time Value in Nano\-seconds
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_in_seconds
                                
                                	Time Value in Seconds
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'plat-chas-invmgr-oper'
                                _revision = '2015-01-07'

                                def __init__(self):
                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                                    self.yang_name = "last-operational-state-change"
                                    self.yang_parent_name = "fru-info"

                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("time_in_nano_seconds",
                                                    "time_in_seconds") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.time_in_nano_seconds.is_set or
                                        self.time_in_seconds.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "last-operational-state-change" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "time-in-nano-seconds"):
                                        self.time_in_nano_seconds = value
                                        self.time_in_nano_seconds.value_namespace = name_space
                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                    if(value_path == "time-in-seconds"):
                                        self.time_in_seconds = value
                                        self.time_in_seconds.value_namespace = name_space
                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                            class ModuleUpTime(Entity):
                                """
                                Module up time
                                
                                .. attribute:: time_in_nano_seconds
                                
                                	Time Value in Nano\-seconds
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_in_seconds
                                
                                	Time Value in Seconds
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'plat-chas-invmgr-oper'
                                _revision = '2015-01-07'

                                def __init__(self):
                                    super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.ModuleUpTime, self).__init__()

                                    self.yang_name = "module-up-time"
                                    self.yang_parent_name = "fru-info"

                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("time_in_nano_seconds",
                                                    "time_in_seconds") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.time_in_nano_seconds.is_set or
                                        self.time_in_seconds.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "module-up-time" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "time-in-nano-seconds"):
                                        self.time_in_nano_seconds = value
                                        self.time_in_nano_seconds.value_namespace = name_space
                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                    if(value_path == "time-in-seconds"):
                                        self.time_in_seconds = value
                                        self.time_in_seconds.value_namespace = name_space
                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.module_administrative_state.is_set or
                                    self.module_monitor_state.is_set or
                                    self.module_operational_state.is_set or
                                    self.module_power_administrative_state.is_set or
                                    self.module_reset_reason.is_set or
                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                                    (self.module_up_time is not None and self.module_up_time.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.module_administrative_state.yfilter != YFilter.not_set or
                                    self.module_monitor_state.yfilter != YFilter.not_set or
                                    self.module_operational_state.yfilter != YFilter.not_set or
                                    self.module_power_administrative_state.yfilter != YFilter.not_set or
                                    self.module_reset_reason.yfilter != YFilter.not_set or
                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                                    (self.module_up_time is not None and self.module_up_time.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "fru-info" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                                if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                                if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                                if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                                if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "last-operational-state-change"):
                                    if (self.last_operational_state_change is None):
                                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.LastOperationalStateChange()
                                        self.last_operational_state_change.parent = self
                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                    return self.last_operational_state_change

                                if (child_yang_name == "module-up-time"):
                                    if (self.module_up_time is None):
                                        self.module_up_time = PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo.ModuleUpTime()
                                        self.module_up_time.parent = self
                                        self._children_name_map["module_up_time"] = "module-up-time"
                                    return self.module_up_time

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "module-administrative-state"):
                                    self.module_administrative_state = value
                                    self.module_administrative_state.value_namespace = name_space
                                    self.module_administrative_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "module-monitor-state"):
                                    self.module_monitor_state = value
                                    self.module_monitor_state.value_namespace = name_space
                                    self.module_monitor_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "module-operational-state"):
                                    self.module_operational_state = value
                                    self.module_operational_state.value_namespace = name_space
                                    self.module_operational_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "module-power-administrative-state"):
                                    self.module_power_administrative_state = value
                                    self.module_power_administrative_state.value_namespace = name_space
                                    self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "module-reset-reason"):
                                    self.module_reset_reason = value
                                    self.module_reset_reason.value_namespace = name_space
                                    self.module_reset_reason.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                (self.basic_info is not None and self.basic_info.has_data()) or
                                (self.fru_info is not None and self.fru_info.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                (self.fru_info is not None and self.fru_info.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attributes" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "basic-info"):
                                if (self.basic_info is None):
                                    self.basic_info = PlatformInventory.Racks.Rack.Slots.Slot.Attributes.BasicInfo()
                                    self.basic_info.parent = self
                                    self._children_name_map["basic_info"] = "basic-info"
                                return self.basic_info

                            if (child_yang_name == "fru-info"):
                                if (self.fru_info is None):
                                    self.fru_info = PlatformInventory.Racks.Rack.Slots.Slot.Attributes.FruInfo()
                                    self.fru_info.parent = self
                                    self._children_name_map["fru_info"] = "fru-info"
                                return self.fru_info

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "basic-info" or name == "fru-info"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.name.is_set or
                            (self.attributes is not None and self.attributes.has_data()) or
                            (self.cards is not None and self.cards.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.name.yfilter != YFilter.not_set or
                            (self.attributes is not None and self.attributes.has_operation()) or
                            (self.cards is not None and self.cards.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "slot" + "[name='" + self.name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attributes"):
                            if (self.attributes is None):
                                self.attributes = PlatformInventory.Racks.Rack.Slots.Slot.Attributes()
                                self.attributes.parent = self
                                self._children_name_map["attributes"] = "attributes"
                            return self.attributes

                        if (child_yang_name == "cards"):
                            if (self.cards is None):
                                self.cards = PlatformInventory.Racks.Rack.Slots.Slot.Cards()
                                self.cards.parent = self
                                self._children_name_map["cards"] = "cards"
                            return self.cards

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attributes" or name == "cards" or name == "name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "name"):
                            self.name = value
                            self.name.value_namespace = name_space
                            self.name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.slot:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.slot:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "slots" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "slot"):
                        for c in self.slot:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PlatformInventory.Racks.Rack.Slots.Slot()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.slot.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "slot"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Attributes(Entity):
                """
                Attributes
                
                .. attribute:: basic_info
                
                	Entity attributes
                	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Attributes.BasicInfo>`
                
                .. attribute:: fru_info
                
                	Field Replaceable Unit (FRU) attributes
                	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Attributes.FruInfo>`
                
                

                """

                _prefix = 'plat-chas-invmgr-oper'
                _revision = '2015-01-07'

                def __init__(self):
                    super(PlatformInventory.Racks.Rack.Attributes, self).__init__()

                    self.yang_name = "attributes"
                    self.yang_parent_name = "rack"

                    self.basic_info = PlatformInventory.Racks.Rack.Attributes.BasicInfo()
                    self.basic_info.parent = self
                    self._children_name_map["basic_info"] = "basic-info"
                    self._children_yang_names.add("basic-info")

                    self.fru_info = PlatformInventory.Racks.Rack.Attributes.FruInfo()
                    self.fru_info.parent = self
                    self._children_name_map["fru_info"] = "fru-info"
                    self._children_yang_names.add("fru-info")


                class BasicInfo(Entity):
                    """
                    Entity attributes
                    
                    .. attribute:: description
                    
                    	describes in user\-readable terms                 what the entity in question does
                    	**type**\:  str
                    
                    	**length:** 0..255
                    
                    .. attribute:: firmware_revision
                    
                    	firmware revision string
                    	**type**\:  str
                    
                    	**length:** 0..255
                    
                    .. attribute:: hardware_revision
                    
                    	hw revision string
                    	**type**\:  str
                    
                    	**length:** 0..255
                    
                    .. attribute:: is_field_replaceable_unit
                    
                    	1 if Field Replaceable Unit 0, if not
                    	**type**\:  bool
                    
                    .. attribute:: model_name
                    
                    	model name
                    	**type**\:  str
                    
                    	**length:** 0..255
                    
                    .. attribute:: name
                    
                    	name string for the entity
                    	**type**\:  str
                    
                    	**length:** 0..255
                    
                    .. attribute:: serial_number
                    
                    	serial number
                    	**type**\:  str
                    
                    	**length:** 0..255
                    
                    .. attribute:: software_revision
                    
                    	software revision string
                    	**type**\:  str
                    
                    	**length:** 0..255
                    
                    .. attribute:: vendor_type
                    
                    	maps to the vendor OID string
                    	**type**\:  str
                    
                    	**length:** 0..255
                    
                    

                    """

                    _prefix = 'plat-chas-invmgr-oper'
                    _revision = '2015-01-07'

                    def __init__(self):
                        super(PlatformInventory.Racks.Rack.Attributes.BasicInfo, self).__init__()

                        self.yang_name = "basic-info"
                        self.yang_parent_name = "attributes"

                        self.description = YLeaf(YType.str, "description")

                        self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                        self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                        self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                        self.model_name = YLeaf(YType.str, "model-name")

                        self.name = YLeaf(YType.str, "name")

                        self.serial_number = YLeaf(YType.str, "serial-number")

                        self.software_revision = YLeaf(YType.str, "software-revision")

                        self.vendor_type = YLeaf(YType.str, "vendor-type")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("description",
                                        "firmware_revision",
                                        "hardware_revision",
                                        "is_field_replaceable_unit",
                                        "model_name",
                                        "name",
                                        "serial_number",
                                        "software_revision",
                                        "vendor_type") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PlatformInventory.Racks.Rack.Attributes.BasicInfo, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PlatformInventory.Racks.Rack.Attributes.BasicInfo, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.description.is_set or
                            self.firmware_revision.is_set or
                            self.hardware_revision.is_set or
                            self.is_field_replaceable_unit.is_set or
                            self.model_name.is_set or
                            self.name.is_set or
                            self.serial_number.is_set or
                            self.software_revision.is_set or
                            self.vendor_type.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.description.yfilter != YFilter.not_set or
                            self.firmware_revision.yfilter != YFilter.not_set or
                            self.hardware_revision.yfilter != YFilter.not_set or
                            self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                            self.model_name.yfilter != YFilter.not_set or
                            self.name.yfilter != YFilter.not_set or
                            self.serial_number.yfilter != YFilter.not_set or
                            self.software_revision.yfilter != YFilter.not_set or
                            self.vendor_type.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "basic-info" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.description.get_name_leafdata())
                        if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                        if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                        if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                        if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.model_name.get_name_leafdata())
                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.name.get_name_leafdata())
                        if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.serial_number.get_name_leafdata())
                        if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.software_revision.get_name_leafdata())
                        if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vendor_type.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "description" or name == "firmware-revision" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "model-name" or name == "name" or name == "serial-number" or name == "software-revision" or name == "vendor-type"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "description"):
                            self.description = value
                            self.description.value_namespace = name_space
                            self.description.value_namespace_prefix = name_space_prefix
                        if(value_path == "firmware-revision"):
                            self.firmware_revision = value
                            self.firmware_revision.value_namespace = name_space
                            self.firmware_revision.value_namespace_prefix = name_space_prefix
                        if(value_path == "hardware-revision"):
                            self.hardware_revision = value
                            self.hardware_revision.value_namespace = name_space
                            self.hardware_revision.value_namespace_prefix = name_space_prefix
                        if(value_path == "is-field-replaceable-unit"):
                            self.is_field_replaceable_unit = value
                            self.is_field_replaceable_unit.value_namespace = name_space
                            self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                        if(value_path == "model-name"):
                            self.model_name = value
                            self.model_name.value_namespace = name_space
                            self.model_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "name"):
                            self.name = value
                            self.name.value_namespace = name_space
                            self.name.value_namespace_prefix = name_space_prefix
                        if(value_path == "serial-number"):
                            self.serial_number = value
                            self.serial_number.value_namespace = name_space
                            self.serial_number.value_namespace_prefix = name_space_prefix
                        if(value_path == "software-revision"):
                            self.software_revision = value
                            self.software_revision.value_namespace = name_space
                            self.software_revision.value_namespace_prefix = name_space_prefix
                        if(value_path == "vendor-type"):
                            self.vendor_type = value
                            self.vendor_type.value_namespace = name_space
                            self.vendor_type.value_namespace_prefix = name_space_prefix


                class FruInfo(Entity):
                    """
                    Field Replaceable Unit (FRU) attributes
                    
                    .. attribute:: last_operational_state_change
                    
                    	Time operational state is   last changed
                    	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Attributes.FruInfo.LastOperationalStateChange>`
                    
                    .. attribute:: module_administrative_state
                    
                    	Administrative    state
                    	**type**\:   :py:class:`InvAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvAdminState>`
                    
                    .. attribute:: module_monitor_state
                    
                    	Monitor state
                    	**type**\:   :py:class:`InvMonitorState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvMonitorState>`
                    
                    .. attribute:: module_operational_state
                    
                    	Operation state
                    	**type**\:   :py:class:`InvCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvCardState>`
                    
                    .. attribute:: module_power_administrative_state
                    
                    	Power administrative state
                    	**type**\:   :py:class:`InvPowerAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvPowerAdminState>`
                    
                    .. attribute:: module_reset_reason
                    
                    	Reset reason
                    	**type**\:   :py:class:`InvResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.InvResetReason>`
                    
                    .. attribute:: module_up_time
                    
                    	Module up time
                    	**type**\:   :py:class:`ModuleUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_plat_chas_invmgr_oper.PlatformInventory.Racks.Rack.Attributes.FruInfo.ModuleUpTime>`
                    
                    

                    """

                    _prefix = 'plat-chas-invmgr-oper'
                    _revision = '2015-01-07'

                    def __init__(self):
                        super(PlatformInventory.Racks.Rack.Attributes.FruInfo, self).__init__()

                        self.yang_name = "fru-info"
                        self.yang_parent_name = "attributes"

                        self.module_administrative_state = YLeaf(YType.enumeration, "module-administrative-state")

                        self.module_monitor_state = YLeaf(YType.enumeration, "module-monitor-state")

                        self.module_operational_state = YLeaf(YType.enumeration, "module-operational-state")

                        self.module_power_administrative_state = YLeaf(YType.enumeration, "module-power-administrative-state")

                        self.module_reset_reason = YLeaf(YType.enumeration, "module-reset-reason")

                        self.last_operational_state_change = PlatformInventory.Racks.Rack.Attributes.FruInfo.LastOperationalStateChange()
                        self.last_operational_state_change.parent = self
                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                        self._children_yang_names.add("last-operational-state-change")

                        self.module_up_time = PlatformInventory.Racks.Rack.Attributes.FruInfo.ModuleUpTime()
                        self.module_up_time.parent = self
                        self._children_name_map["module_up_time"] = "module-up-time"
                        self._children_yang_names.add("module-up-time")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("module_administrative_state",
                                        "module_monitor_state",
                                        "module_operational_state",
                                        "module_power_administrative_state",
                                        "module_reset_reason") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PlatformInventory.Racks.Rack.Attributes.FruInfo, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PlatformInventory.Racks.Rack.Attributes.FruInfo, self).__setattr__(name, value)


                    class LastOperationalStateChange(Entity):
                        """
                        Time operational state is   last changed
                        
                        .. attribute:: time_in_nano_seconds
                        
                        	Time Value in Nano\-seconds
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: time_in_seconds
                        
                        	Time Value in Seconds
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**units**\: second
                        
                        

                        """

                        _prefix = 'plat-chas-invmgr-oper'
                        _revision = '2015-01-07'

                        def __init__(self):
                            super(PlatformInventory.Racks.Rack.Attributes.FruInfo.LastOperationalStateChange, self).__init__()

                            self.yang_name = "last-operational-state-change"
                            self.yang_parent_name = "fru-info"

                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("time_in_nano_seconds",
                                            "time_in_seconds") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PlatformInventory.Racks.Rack.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PlatformInventory.Racks.Rack.Attributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.time_in_nano_seconds.is_set or
                                self.time_in_seconds.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                self.time_in_seconds.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "last-operational-state-change" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "time-in-nano-seconds"):
                                self.time_in_nano_seconds = value
                                self.time_in_nano_seconds.value_namespace = name_space
                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                            if(value_path == "time-in-seconds"):
                                self.time_in_seconds = value
                                self.time_in_seconds.value_namespace = name_space
                                self.time_in_seconds.value_namespace_prefix = name_space_prefix


                    class ModuleUpTime(Entity):
                        """
                        Module up time
                        
                        .. attribute:: time_in_nano_seconds
                        
                        	Time Value in Nano\-seconds
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: time_in_seconds
                        
                        	Time Value in Seconds
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        	**units**\: second
                        
                        

                        """

                        _prefix = 'plat-chas-invmgr-oper'
                        _revision = '2015-01-07'

                        def __init__(self):
                            super(PlatformInventory.Racks.Rack.Attributes.FruInfo.ModuleUpTime, self).__init__()

                            self.yang_name = "module-up-time"
                            self.yang_parent_name = "fru-info"

                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("time_in_nano_seconds",
                                            "time_in_seconds") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PlatformInventory.Racks.Rack.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PlatformInventory.Racks.Rack.Attributes.FruInfo.ModuleUpTime, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.time_in_nano_seconds.is_set or
                                self.time_in_seconds.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                self.time_in_seconds.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "module-up-time" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "time-in-nano-seconds"):
                                self.time_in_nano_seconds = value
                                self.time_in_nano_seconds.value_namespace = name_space
                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                            if(value_path == "time-in-seconds"):
                                self.time_in_seconds = value
                                self.time_in_seconds.value_namespace = name_space
                                self.time_in_seconds.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.module_administrative_state.is_set or
                            self.module_monitor_state.is_set or
                            self.module_operational_state.is_set or
                            self.module_power_administrative_state.is_set or
                            self.module_reset_reason.is_set or
                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()) or
                            (self.module_up_time is not None and self.module_up_time.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.module_administrative_state.yfilter != YFilter.not_set or
                            self.module_monitor_state.yfilter != YFilter.not_set or
                            self.module_operational_state.yfilter != YFilter.not_set or
                            self.module_power_administrative_state.yfilter != YFilter.not_set or
                            self.module_reset_reason.yfilter != YFilter.not_set or
                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()) or
                            (self.module_up_time is not None and self.module_up_time.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "fru-info" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.module_administrative_state.is_set or self.module_administrative_state.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.module_administrative_state.get_name_leafdata())
                        if (self.module_monitor_state.is_set or self.module_monitor_state.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.module_monitor_state.get_name_leafdata())
                        if (self.module_operational_state.is_set or self.module_operational_state.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.module_operational_state.get_name_leafdata())
                        if (self.module_power_administrative_state.is_set or self.module_power_administrative_state.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.module_power_administrative_state.get_name_leafdata())
                        if (self.module_reset_reason.is_set or self.module_reset_reason.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.module_reset_reason.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "last-operational-state-change"):
                            if (self.last_operational_state_change is None):
                                self.last_operational_state_change = PlatformInventory.Racks.Rack.Attributes.FruInfo.LastOperationalStateChange()
                                self.last_operational_state_change.parent = self
                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                            return self.last_operational_state_change

                        if (child_yang_name == "module-up-time"):
                            if (self.module_up_time is None):
                                self.module_up_time = PlatformInventory.Racks.Rack.Attributes.FruInfo.ModuleUpTime()
                                self.module_up_time.parent = self
                                self._children_name_map["module_up_time"] = "module-up-time"
                            return self.module_up_time

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "last-operational-state-change" or name == "module-up-time" or name == "module-administrative-state" or name == "module-monitor-state" or name == "module-operational-state" or name == "module-power-administrative-state" or name == "module-reset-reason"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "module-administrative-state"):
                            self.module_administrative_state = value
                            self.module_administrative_state.value_namespace = name_space
                            self.module_administrative_state.value_namespace_prefix = name_space_prefix
                        if(value_path == "module-monitor-state"):
                            self.module_monitor_state = value
                            self.module_monitor_state.value_namespace = name_space
                            self.module_monitor_state.value_namespace_prefix = name_space_prefix
                        if(value_path == "module-operational-state"):
                            self.module_operational_state = value
                            self.module_operational_state.value_namespace = name_space
                            self.module_operational_state.value_namespace_prefix = name_space_prefix
                        if(value_path == "module-power-administrative-state"):
                            self.module_power_administrative_state = value
                            self.module_power_administrative_state.value_namespace = name_space
                            self.module_power_administrative_state.value_namespace_prefix = name_space_prefix
                        if(value_path == "module-reset-reason"):
                            self.module_reset_reason = value
                            self.module_reset_reason.value_namespace = name_space
                            self.module_reset_reason.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (
                        (self.basic_info is not None and self.basic_info.has_data()) or
                        (self.fru_info is not None and self.fru_info.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.basic_info is not None and self.basic_info.has_operation()) or
                        (self.fru_info is not None and self.fru_info.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "attributes" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "basic-info"):
                        if (self.basic_info is None):
                            self.basic_info = PlatformInventory.Racks.Rack.Attributes.BasicInfo()
                            self.basic_info.parent = self
                            self._children_name_map["basic_info"] = "basic-info"
                        return self.basic_info

                    if (child_yang_name == "fru-info"):
                        if (self.fru_info is None):
                            self.fru_info = PlatformInventory.Racks.Rack.Attributes.FruInfo()
                            self.fru_info.parent = self
                            self._children_name_map["fru_info"] = "fru-info"
                        return self.fru_info

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "basic-info" or name == "fru-info"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    self.name.is_set or
                    (self.attributes is not None and self.attributes.has_data()) or
                    (self.slots is not None and self.slots.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.name.yfilter != YFilter.not_set or
                    (self.attributes is not None and self.attributes.has_operation()) or
                    (self.slots is not None and self.slots.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "rack" + "[name='" + self.name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-plat-chas-invmgr-oper:platform-inventory/racks/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.name.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "attributes"):
                    if (self.attributes is None):
                        self.attributes = PlatformInventory.Racks.Rack.Attributes()
                        self.attributes.parent = self
                        self._children_name_map["attributes"] = "attributes"
                    return self.attributes

                if (child_yang_name == "slots"):
                    if (self.slots is None):
                        self.slots = PlatformInventory.Racks.Rack.Slots()
                        self.slots.parent = self
                        self._children_name_map["slots"] = "slots"
                    return self.slots

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "attributes" or name == "slots" or name == "name"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "name"):
                    self.name = value
                    self.name.value_namespace = name_space
                    self.name.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.rack:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.rack:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "racks" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-plat-chas-invmgr-oper:platform-inventory/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "rack"):
                for c in self.rack:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = PlatformInventory.Racks.Rack()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.rack.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "rack"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (self.racks is not None and self.racks.has_data())

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.racks is not None and self.racks.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-plat-chas-invmgr-oper:platform-inventory" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "racks"):
            if (self.racks is None):
                self.racks = PlatformInventory.Racks()
                self.racks.parent = self
                self._children_name_map["racks"] = "racks"
            return self.racks

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "racks"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = PlatformInventory()
        return self._top_entity

