""" Cisco_IOS_XR_ip_bfd_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ip\-bfd package operational data.

This module contains definitions
for the following management objects\:
  bfd\: Bidirectional Forwarding Detection(BFD) operational data

Copyright (c) 2013\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class BfdAfId(Enum):
    """
    BfdAfId (Enum Class)

    Bfd af id

    .. data:: bfd_af_id_none = 0

    	No Address

    .. data:: bfd_af_id_ipv4 = 2

    	IPv4 AFI

    .. data:: bfd_af_id_ipv6 = 10

    	IPv6 AFI

    """

    bfd_af_id_none = Enum.YLeaf(0, "bfd-af-id-none")

    bfd_af_id_ipv4 = Enum.YLeaf(2, "bfd-af-id-ipv4")

    bfd_af_id_ipv6 = Enum.YLeaf(10, "bfd-af-id-ipv6")


class BfdMgmtPktDisplay(Enum):
    """
    BfdMgmtPktDisplay (Enum Class)

    BFD session type

    .. data:: bfd_mgmt_pkt_display_type_none = 0

    	None

    .. data:: bfd_mgmt_pkt_display_type_bob_mbr = 1

    	Display Type Bundle RTR Member

    .. data:: bfd_mgmt_pkt_display_type_max = 2

    	Display Type Enum Max Value

    """

    bfd_mgmt_pkt_display_type_none = Enum.YLeaf(0, "bfd-mgmt-pkt-display-type-none")

    bfd_mgmt_pkt_display_type_bob_mbr = Enum.YLeaf(1, "bfd-mgmt-pkt-display-type-bob-mbr")

    bfd_mgmt_pkt_display_type_max = Enum.YLeaf(2, "bfd-mgmt-pkt-display-type-max")


class BfdMgmtSessionDiag(Enum):
    """
    BfdMgmtSessionDiag (Enum Class)

    BFD session diagnostic

    .. data:: bfd_mgmt_session_diag_none = 0

    	No diagnostic

    .. data:: bfd_mgmt_session_diag_control_detect_expired = 1

    	Control Detection Time Expired

    .. data:: bfd_mgmt_session_diag_echo_function_failed = 2

    	Echo Function Failed

    .. data:: bfd_mgmt_session_diag_nb_or_signaled_down = 3

    	Neighbor Signaled Session Down

    .. data:: bfd_mgmt_session_diag_fwding_plane_reset = 4

    	Forwarding Plane Reset

    .. data:: bfd_mgmt_session_diag_path_down = 5

    	Path Down

    .. data:: bfd_mgmt_session_diag_conc_path_down = 6

    	Concatenated Path Down

    .. data:: bfd_mgmt_session_diag_admin_down = 7

    	Administratively Down

    .. data:: bfd_mgmt_session_diag_rev_conc_path_down = 8

    	Reverse Concatenated Path Down

    .. data:: bfd_mgmt_session_diag_num = 10

    	Unknown diagnostic state

    """

    bfd_mgmt_session_diag_none = Enum.YLeaf(0, "bfd-mgmt-session-diag-none")

    bfd_mgmt_session_diag_control_detect_expired = Enum.YLeaf(1, "bfd-mgmt-session-diag-control-detect-expired")

    bfd_mgmt_session_diag_echo_function_failed = Enum.YLeaf(2, "bfd-mgmt-session-diag-echo-function-failed")

    bfd_mgmt_session_diag_nb_or_signaled_down = Enum.YLeaf(3, "bfd-mgmt-session-diag-nb-or-signaled-down")

    bfd_mgmt_session_diag_fwding_plane_reset = Enum.YLeaf(4, "bfd-mgmt-session-diag-fwding-plane-reset")

    bfd_mgmt_session_diag_path_down = Enum.YLeaf(5, "bfd-mgmt-session-diag-path-down")

    bfd_mgmt_session_diag_conc_path_down = Enum.YLeaf(6, "bfd-mgmt-session-diag-conc-path-down")

    bfd_mgmt_session_diag_admin_down = Enum.YLeaf(7, "bfd-mgmt-session-diag-admin-down")

    bfd_mgmt_session_diag_rev_conc_path_down = Enum.YLeaf(8, "bfd-mgmt-session-diag-rev-conc-path-down")

    bfd_mgmt_session_diag_num = Enum.YLeaf(10, "bfd-mgmt-session-diag-num")


class BfdMgmtSessionState(Enum):
    """
    BfdMgmtSessionState (Enum Class)

    BFD session states

    .. data:: bfd_mgmt_session_state_admin_down = 0

    	Session in Administratively Shutdown State

    .. data:: bfd_mgmt_session_state_down = 1

    	Session in Down State

    .. data:: bfd_mgmt_session_state_init = 2

    	Session in Initializing State

    .. data:: bfd_mgmt_session_state_up = 3

    	Session in Up State

    .. data:: bfd_mgmt_session_state_failing = 4

    	Session in Failing State

    .. data:: bfd_mgmt_session_state_unknown = 6

    	Session in Unknown State

    """

    bfd_mgmt_session_state_admin_down = Enum.YLeaf(0, "bfd-mgmt-session-state-admin-down")

    bfd_mgmt_session_state_down = Enum.YLeaf(1, "bfd-mgmt-session-state-down")

    bfd_mgmt_session_state_init = Enum.YLeaf(2, "bfd-mgmt-session-state-init")

    bfd_mgmt_session_state_up = Enum.YLeaf(3, "bfd-mgmt-session-state-up")

    bfd_mgmt_session_state_failing = Enum.YLeaf(4, "bfd-mgmt-session-state-failing")

    bfd_mgmt_session_state_unknown = Enum.YLeaf(6, "bfd-mgmt-session-state-unknown")


class BfdMpDownloadState(Enum):
    """
    BfdMpDownloadState (Enum Class)

    Bfd mp download state

    .. data:: bfd_mp_download_none = 0

    	bfd mp download none

    .. data:: bfd_mp_download_no_lc = 1

    	bfd mp download no lc

    .. data:: bfd_mp_download_downloaded = 2

    	bfd mp download downloaded

    .. data:: bfd_mp_download_ack = 3

    	bfd mp download ack

    .. data:: bfd_mp_download_nack = 4

    	bfd mp download nack

    .. data:: bfd_mp_download_delete = 5

    	bfd mp download delete

    """

    bfd_mp_download_none = Enum.YLeaf(0, "bfd-mp-download-none")

    bfd_mp_download_no_lc = Enum.YLeaf(1, "bfd-mp-download-no-lc")

    bfd_mp_download_downloaded = Enum.YLeaf(2, "bfd-mp-download-downloaded")

    bfd_mp_download_ack = Enum.YLeaf(3, "bfd-mp-download-ack")

    bfd_mp_download_nack = Enum.YLeaf(4, "bfd-mp-download-nack")

    bfd_mp_download_delete = Enum.YLeaf(5, "bfd-mp-download-delete")


class BfdSession(Enum):
    """
    BfdSession (Enum Class)

    BFD session type

    .. data:: undefined = 0

    	Session type is undefined

    .. data:: bundle_member = 1

    	Session type is bundle member

    .. data:: bundle_interface = 2

    	Session type is bundle interface

    .. data:: state_inheriting = 3

    	Session type is state inheriting

    .. data:: bundle_vlan = 4

    	Session type is bundle vlan

    .. data:: mpls_tp = 5

    	Session type is MPLS-TP

    .. data:: gre = 6

    	Session type is GRE tunnel

    .. data:: pseudowire_headend = 7

    	Session type is PW-HE

    .. data:: ip_single_hop = 8

    	Session type is IP single hop

    """

    undefined = Enum.YLeaf(0, "undefined")

    bundle_member = Enum.YLeaf(1, "bundle-member")

    bundle_interface = Enum.YLeaf(2, "bundle-interface")

    state_inheriting = Enum.YLeaf(3, "state-inheriting")

    bundle_vlan = Enum.YLeaf(4, "bundle-vlan")

    mpls_tp = Enum.YLeaf(5, "mpls-tp")

    gre = Enum.YLeaf(6, "gre")

    pseudowire_headend = Enum.YLeaf(7, "pseudowire-headend")

    ip_single_hop = Enum.YLeaf(8, "ip-single-hop")



class Bfd(Entity):
    """
    Bidirectional Forwarding Detection(BFD)
    operational data
    
    .. attribute:: label_session_briefs
    
    	Table of brief information about all Label BFD sessions in the System
    	**type**\:  :py:class:`LabelSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionBriefs>`
    
    .. attribute:: ipv4bf_do_mplste_tail_summary
    
    	Summary information of IPv4 BFD over MPLS\-TE Tail
    	**type**\:  :py:class:`Ipv4BfDoMplsteTailSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSummary>`
    
    .. attribute:: ipv6_single_hop_counters
    
    	IPv6 single hop Counters
    	**type**\:  :py:class:`Ipv6SingleHopCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopCounters>`
    
    .. attribute:: counters
    
    	Counters
    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Counters>`
    
    .. attribute:: client_details
    
    	Table of detailed information about BFD clients
    	**type**\:  :py:class:`ClientDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientDetails>`
    
    .. attribute:: ipv4_single_hop_summary
    
    	Summary information of BFD IPv4 singlehop sessions
    	**type**\:  :py:class:`Ipv4SingleHopSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSummary>`
    
    .. attribute:: ipv6_single_hop_summary
    
    	Summary information of BFD IPv6 singlehop sessions
    	**type**\:  :py:class:`Ipv6SingleHopSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSummary>`
    
    .. attribute:: label_multi_paths
    
    	Label multipath
    	**type**\:  :py:class:`LabelMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelMultiPaths>`
    
    .. attribute:: ipv4_multi_hop_session_details
    
    	Table of detailed information about all IPv4 multihop BFD sessions in the System 
    	**type**\:  :py:class:`Ipv4MultiHopSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails>`
    
    .. attribute:: ipv4_single_hop_session_details
    
    	Table of detailed information about all IPv4 singlehop BFD sessions in the System 
    	**type**\:  :py:class:`Ipv4SingleHopSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails>`
    
    .. attribute:: ipv4_multi_hop_session_briefs
    
    	Table of brief information about all IPv4 multihop BFD sessions in the System
    	**type**\:  :py:class:`Ipv4MultiHopSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionBriefs>`
    
    .. attribute:: generic_summaries
    
    	Generic summary information about BFD location
    	**type**\:  :py:class:`GenericSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.GenericSummaries>`
    
    .. attribute:: ipv6_single_hop_multi_paths
    
    	IPv6 single hop multipath
    	**type**\:  :py:class:`Ipv6SingleHopMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopMultiPaths>`
    
    .. attribute:: ipv4_single_hop_node_location_summaries
    
    	Table of summary information about BFD IPv4 singlehop sessions per location
    	**type**\:  :py:class:`Ipv4SingleHopNodeLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopNodeLocationSummaries>`
    
    .. attribute:: label_summary
    
    	Summary information of Label BFD
    	**type**\:  :py:class:`LabelSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSummary>`
    
    .. attribute:: ipv4bf_do_mplste_head_session_briefs
    
    	Table of brief information about all IPv4 BFD over MPLS\-TE Head sessions in the System
    	**type**\:  :py:class:`Ipv4BfDoMplsteHeadSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionBriefs>`
    
    .. attribute:: ipv4bf_do_mplste_tail_session_details
    
    	Table of detailed information about all IPv4 BFD over MPLS\-TE Tail sessions in the System
    	**type**\:  :py:class:`Ipv4BfDoMplsteTailSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails>`
    
    .. attribute:: ipv4_multi_hop_node_location_summaries
    
    	Table of summary information about BFD IPv4 multihop sessions per location
    	**type**\:  :py:class:`Ipv4MultiHopNodeLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopNodeLocationSummaries>`
    
    .. attribute:: ipv4bf_do_mplste_tail_session_briefs
    
    	Table of brief information about all IPv4 BFD over MPLS\-TE Tail sessions in the System
    	**type**\:  :py:class:`Ipv4BfDoMplsteTailSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionBriefs>`
    
    .. attribute:: ipv6_multi_hop_node_location_summaries
    
    	Table of summary information about BFD IPv6 multihop sessions per location
    	**type**\:  :py:class:`Ipv6MultiHopNodeLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopNodeLocationSummaries>`
    
    .. attribute:: ipv4_multi_hop_summary
    
    	Summary information of BFD IPv4 multihop sessions
    	**type**\:  :py:class:`Ipv4MultiHopSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSummary>`
    
    .. attribute:: ipv4_single_hop_counters
    
    	IPv4 single hop Counters
    	**type**\:  :py:class:`Ipv4SingleHopCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopCounters>`
    
    .. attribute:: ipv6_multi_hop_session_details
    
    	Table of detailed information about all IPv6 multihop BFD sessions in the System 
    	**type**\:  :py:class:`Ipv6MultiHopSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails>`
    
    .. attribute:: ipv6_multi_hop_multi_paths
    
    	IPv6 multi hop multipath
    	**type**\:  :py:class:`Ipv6MultiHopMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopMultiPaths>`
    
    .. attribute:: ipv4bf_do_mplste_head_counters
    
    	IPv4 BFD over MPLS\-TE Counters
    	**type**\:  :py:class:`Ipv4BfDoMplsteHeadCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadCounters>`
    
    .. attribute:: session_mibs
    
    	BFD session MIB database
    	**type**\:  :py:class:`SessionMibs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionMibs>`
    
    .. attribute:: ipv6_multi_hop_summary
    
    	Summary information of BFD IPv6 multihop sessions
    	**type**\:  :py:class:`Ipv6MultiHopSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSummary>`
    
    .. attribute:: label_summary_nodes
    
    	Table of summary about Label BFD sessions for location
    	**type**\:  :py:class:`LabelSummaryNodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSummaryNodes>`
    
    .. attribute:: ipv6_multi_hop_session_briefs
    
    	Table of brief information about all IPv6 multihop BFD sessions in the System
    	**type**\:  :py:class:`Ipv6MultiHopSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionBriefs>`
    
    .. attribute:: session_briefs
    
    	Table of brief information about singlehop IPv4 BFD sessions in the System
    	**type**\:  :py:class:`SessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionBriefs>`
    
    .. attribute:: ipv6_single_hop_node_location_summaries
    
    	Table of summary information about BFD IPv6 singlehop sessions per location
    	**type**\:  :py:class:`Ipv6SingleHopNodeLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopNodeLocationSummaries>`
    
    .. attribute:: summary
    
    	Summary information of BFD IPv4 singlehop sessions
    	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Summary>`
    
    .. attribute:: ipv4bfd_mplste_tail_node_summaries
    
    	Table of summary about IPv4 TE tail BFD sessions for location
    	**type**\:  :py:class:`Ipv4BfdMplsteTailNodeSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteTailNodeSummaries>`
    
    .. attribute:: ipv4_single_hop_location_summaries
    
    	Table of summary information about IPv4 singlehop BFD sessions for location
    	**type**\:  :py:class:`Ipv4SingleHopLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopLocationSummaries>`
    
    .. attribute:: ipv4bfd_mplste_head_summary_nodes
    
    	Table of summary about IPv4 TE head BFD sessions for location
    	**type**\:  :py:class:`Ipv4BfdMplsteHeadSummaryNodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteHeadSummaryNodes>`
    
    .. attribute:: label_session_details
    
    	Table of detailed information about all Label BFD sessions in the System 
    	**type**\:  :py:class:`LabelSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails>`
    
    .. attribute:: ipv6_single_hop_session_details
    
    	Table of detailed information about all IPv6 singlehop BFD sessions in the System 
    	**type**\:  :py:class:`Ipv6SingleHopSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails>`
    
    .. attribute:: ipv4_multi_hop_counters
    
    	IPv4 multiple hop Counters
    	**type**\:  :py:class:`Ipv4MultiHopCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopCounters>`
    
    .. attribute:: session_details
    
    	Table of detailed information about IPv4 singlehop BFD sessions in the System 
    	**type**\:  :py:class:`SessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails>`
    
    .. attribute:: ipv4_single_hop_multi_paths
    
    	IPv4 single hop multipath
    	**type**\:  :py:class:`Ipv4SingleHopMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopMultiPaths>`
    
    .. attribute:: ipv4_single_hop_session_briefs
    
    	Table of brief information about all IPv4 singlehop BFD sessions in the System
    	**type**\:  :py:class:`Ipv4SingleHopSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionBriefs>`
    
    .. attribute:: ipv6_multi_hop_counters
    
    	IPv6 multiple hop Counters
    	**type**\:  :py:class:`Ipv6MultiHopCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopCounters>`
    
    .. attribute:: ipv6_single_hop_location_summaries
    
    	Table of summary information about BFD IPv6 singlehop sessions per location
    	**type**\:  :py:class:`Ipv6SingleHopLocationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopLocationSummaries>`
    
    .. attribute:: label_counters
    
    	Label Counters
    	**type**\:  :py:class:`LabelCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelCounters>`
    
    .. attribute:: ipv4bf_do_mplste_head_session_details
    
    	Table of detailed information about all IPv4 BFD over MPLS\-TE Head sessions in the System
    	**type**\:  :py:class:`Ipv4BfDoMplsteHeadSessionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails>`
    
    .. attribute:: relation_briefs
    
    	Table of brief information about all BFD relations in the System
    	**type**\:  :py:class:`RelationBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationBriefs>`
    
    .. attribute:: client_briefs
    
    	Table of Brief information about BFD clients
    	**type**\:  :py:class:`ClientBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientBriefs>`
    
    .. attribute:: ipv4bf_do_mplste_head_multi_paths
    
    	IPv4 BFD over MPLS\-TE Head multipath
    	**type**\:  :py:class:`Ipv4BfDoMplsteHeadMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadMultiPaths>`
    
    .. attribute:: relation_details
    
    	Table of detail information about all BFD relations in the System
    	**type**\:  :py:class:`RelationDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails>`
    
    .. attribute:: ipv4bf_do_mplste_tail_counters
    
    	IPv4 BFD over MPLS\-TE Counters
    	**type**\:  :py:class:`Ipv4BfDoMplsteTailCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailCounters>`
    
    .. attribute:: ipv6_single_hop_session_briefs
    
    	Table of brief information about all IPv6 singlehop BFD sessions in the System
    	**type**\:  :py:class:`Ipv6SingleHopSessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionBriefs>`
    
    .. attribute:: ipv4bf_do_mplste_tail_multi_paths
    
    	IPv4 BFD over MPLS\-TE Tail multipath
    	**type**\:  :py:class:`Ipv4BfDoMplsteTailMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailMultiPaths>`
    
    .. attribute:: ipv4_multi_hop_multi_paths
    
    	IPv4 multi\-hop multipath
    	**type**\:  :py:class:`Ipv4MultiHopMultiPaths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopMultiPaths>`
    
    .. attribute:: ipv4bf_do_mplste_head_summary
    
    	Summary information of IPv4 BFD over MPLS\-TE Head
    	**type**\:  :py:class:`Ipv4BfDoMplsteHeadSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSummary>`
    
    

    """

    _prefix = 'ip-bfd-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(Bfd, self).__init__()
        self._top_entity = None

        self.yang_name = "bfd"
        self.yang_parent_name = "Cisco-IOS-XR-ip-bfd-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("label-session-briefs", ("label_session_briefs", Bfd.LabelSessionBriefs)), ("ipv4bf-do-mplste-tail-summary", ("ipv4bf_do_mplste_tail_summary", Bfd.Ipv4BfDoMplsteTailSummary)), ("ipv6-single-hop-counters", ("ipv6_single_hop_counters", Bfd.Ipv6SingleHopCounters)), ("counters", ("counters", Bfd.Counters)), ("client-details", ("client_details", Bfd.ClientDetails)), ("ipv4-single-hop-summary", ("ipv4_single_hop_summary", Bfd.Ipv4SingleHopSummary)), ("ipv6-single-hop-summary", ("ipv6_single_hop_summary", Bfd.Ipv6SingleHopSummary)), ("label-multi-paths", ("label_multi_paths", Bfd.LabelMultiPaths)), ("ipv4-multi-hop-session-details", ("ipv4_multi_hop_session_details", Bfd.Ipv4MultiHopSessionDetails)), ("ipv4-single-hop-session-details", ("ipv4_single_hop_session_details", Bfd.Ipv4SingleHopSessionDetails)), ("ipv4-multi-hop-session-briefs", ("ipv4_multi_hop_session_briefs", Bfd.Ipv4MultiHopSessionBriefs)), ("generic-summaries", ("generic_summaries", Bfd.GenericSummaries)), ("ipv6-single-hop-multi-paths", ("ipv6_single_hop_multi_paths", Bfd.Ipv6SingleHopMultiPaths)), ("ipv4-single-hop-node-location-summaries", ("ipv4_single_hop_node_location_summaries", Bfd.Ipv4SingleHopNodeLocationSummaries)), ("label-summary", ("label_summary", Bfd.LabelSummary)), ("ipv4bf-do-mplste-head-session-briefs", ("ipv4bf_do_mplste_head_session_briefs", Bfd.Ipv4BfDoMplsteHeadSessionBriefs)), ("ipv4bf-do-mplste-tail-session-details", ("ipv4bf_do_mplste_tail_session_details", Bfd.Ipv4BfDoMplsteTailSessionDetails)), ("ipv4-multi-hop-node-location-summaries", ("ipv4_multi_hop_node_location_summaries", Bfd.Ipv4MultiHopNodeLocationSummaries)), ("ipv4bf-do-mplste-tail-session-briefs", ("ipv4bf_do_mplste_tail_session_briefs", Bfd.Ipv4BfDoMplsteTailSessionBriefs)), ("ipv6-multi-hop-node-location-summaries", ("ipv6_multi_hop_node_location_summaries", Bfd.Ipv6MultiHopNodeLocationSummaries)), ("ipv4-multi-hop-summary", ("ipv4_multi_hop_summary", Bfd.Ipv4MultiHopSummary)), ("ipv4-single-hop-counters", ("ipv4_single_hop_counters", Bfd.Ipv4SingleHopCounters)), ("ipv6-multi-hop-session-details", ("ipv6_multi_hop_session_details", Bfd.Ipv6MultiHopSessionDetails)), ("ipv6-multi-hop-multi-paths", ("ipv6_multi_hop_multi_paths", Bfd.Ipv6MultiHopMultiPaths)), ("ipv4bf-do-mplste-head-counters", ("ipv4bf_do_mplste_head_counters", Bfd.Ipv4BfDoMplsteHeadCounters)), ("session-mibs", ("session_mibs", Bfd.SessionMibs)), ("ipv6-multi-hop-summary", ("ipv6_multi_hop_summary", Bfd.Ipv6MultiHopSummary)), ("label-summary-nodes", ("label_summary_nodes", Bfd.LabelSummaryNodes)), ("ipv6-multi-hop-session-briefs", ("ipv6_multi_hop_session_briefs", Bfd.Ipv6MultiHopSessionBriefs)), ("session-briefs", ("session_briefs", Bfd.SessionBriefs)), ("ipv6-single-hop-node-location-summaries", ("ipv6_single_hop_node_location_summaries", Bfd.Ipv6SingleHopNodeLocationSummaries)), ("summary", ("summary", Bfd.Summary)), ("ipv4bfd-mplste-tail-node-summaries", ("ipv4bfd_mplste_tail_node_summaries", Bfd.Ipv4BfdMplsteTailNodeSummaries)), ("ipv4-single-hop-location-summaries", ("ipv4_single_hop_location_summaries", Bfd.Ipv4SingleHopLocationSummaries)), ("ipv4bfd-mplste-head-summary-nodes", ("ipv4bfd_mplste_head_summary_nodes", Bfd.Ipv4BfdMplsteHeadSummaryNodes)), ("label-session-details", ("label_session_details", Bfd.LabelSessionDetails)), ("ipv6-single-hop-session-details", ("ipv6_single_hop_session_details", Bfd.Ipv6SingleHopSessionDetails)), ("ipv4-multi-hop-counters", ("ipv4_multi_hop_counters", Bfd.Ipv4MultiHopCounters)), ("session-details", ("session_details", Bfd.SessionDetails)), ("ipv4-single-hop-multi-paths", ("ipv4_single_hop_multi_paths", Bfd.Ipv4SingleHopMultiPaths)), ("ipv4-single-hop-session-briefs", ("ipv4_single_hop_session_briefs", Bfd.Ipv4SingleHopSessionBriefs)), ("ipv6-multi-hop-counters", ("ipv6_multi_hop_counters", Bfd.Ipv6MultiHopCounters)), ("ipv6-single-hop-location-summaries", ("ipv6_single_hop_location_summaries", Bfd.Ipv6SingleHopLocationSummaries)), ("label-counters", ("label_counters", Bfd.LabelCounters)), ("ipv4bf-do-mplste-head-session-details", ("ipv4bf_do_mplste_head_session_details", Bfd.Ipv4BfDoMplsteHeadSessionDetails)), ("relation-briefs", ("relation_briefs", Bfd.RelationBriefs)), ("client-briefs", ("client_briefs", Bfd.ClientBriefs)), ("ipv4bf-do-mplste-head-multi-paths", ("ipv4bf_do_mplste_head_multi_paths", Bfd.Ipv4BfDoMplsteHeadMultiPaths)), ("relation-details", ("relation_details", Bfd.RelationDetails)), ("ipv4bf-do-mplste-tail-counters", ("ipv4bf_do_mplste_tail_counters", Bfd.Ipv4BfDoMplsteTailCounters)), ("ipv6-single-hop-session-briefs", ("ipv6_single_hop_session_briefs", Bfd.Ipv6SingleHopSessionBriefs)), ("ipv4bf-do-mplste-tail-multi-paths", ("ipv4bf_do_mplste_tail_multi_paths", Bfd.Ipv4BfDoMplsteTailMultiPaths)), ("ipv4-multi-hop-multi-paths", ("ipv4_multi_hop_multi_paths", Bfd.Ipv4MultiHopMultiPaths)), ("ipv4bf-do-mplste-head-summary", ("ipv4bf_do_mplste_head_summary", Bfd.Ipv4BfDoMplsteHeadSummary))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.label_session_briefs = Bfd.LabelSessionBriefs()
        self.label_session_briefs.parent = self
        self._children_name_map["label_session_briefs"] = "label-session-briefs"
        self._children_yang_names.add("label-session-briefs")

        self.ipv4bf_do_mplste_tail_summary = Bfd.Ipv4BfDoMplsteTailSummary()
        self.ipv4bf_do_mplste_tail_summary.parent = self
        self._children_name_map["ipv4bf_do_mplste_tail_summary"] = "ipv4bf-do-mplste-tail-summary"
        self._children_yang_names.add("ipv4bf-do-mplste-tail-summary")

        self.ipv6_single_hop_counters = Bfd.Ipv6SingleHopCounters()
        self.ipv6_single_hop_counters.parent = self
        self._children_name_map["ipv6_single_hop_counters"] = "ipv6-single-hop-counters"
        self._children_yang_names.add("ipv6-single-hop-counters")

        self.counters = Bfd.Counters()
        self.counters.parent = self
        self._children_name_map["counters"] = "counters"
        self._children_yang_names.add("counters")

        self.client_details = Bfd.ClientDetails()
        self.client_details.parent = self
        self._children_name_map["client_details"] = "client-details"
        self._children_yang_names.add("client-details")

        self.ipv4_single_hop_summary = Bfd.Ipv4SingleHopSummary()
        self.ipv4_single_hop_summary.parent = self
        self._children_name_map["ipv4_single_hop_summary"] = "ipv4-single-hop-summary"
        self._children_yang_names.add("ipv4-single-hop-summary")

        self.ipv6_single_hop_summary = Bfd.Ipv6SingleHopSummary()
        self.ipv6_single_hop_summary.parent = self
        self._children_name_map["ipv6_single_hop_summary"] = "ipv6-single-hop-summary"
        self._children_yang_names.add("ipv6-single-hop-summary")

        self.label_multi_paths = Bfd.LabelMultiPaths()
        self.label_multi_paths.parent = self
        self._children_name_map["label_multi_paths"] = "label-multi-paths"
        self._children_yang_names.add("label-multi-paths")

        self.ipv4_multi_hop_session_details = Bfd.Ipv4MultiHopSessionDetails()
        self.ipv4_multi_hop_session_details.parent = self
        self._children_name_map["ipv4_multi_hop_session_details"] = "ipv4-multi-hop-session-details"
        self._children_yang_names.add("ipv4-multi-hop-session-details")

        self.ipv4_single_hop_session_details = Bfd.Ipv4SingleHopSessionDetails()
        self.ipv4_single_hop_session_details.parent = self
        self._children_name_map["ipv4_single_hop_session_details"] = "ipv4-single-hop-session-details"
        self._children_yang_names.add("ipv4-single-hop-session-details")

        self.ipv4_multi_hop_session_briefs = Bfd.Ipv4MultiHopSessionBriefs()
        self.ipv4_multi_hop_session_briefs.parent = self
        self._children_name_map["ipv4_multi_hop_session_briefs"] = "ipv4-multi-hop-session-briefs"
        self._children_yang_names.add("ipv4-multi-hop-session-briefs")

        self.generic_summaries = Bfd.GenericSummaries()
        self.generic_summaries.parent = self
        self._children_name_map["generic_summaries"] = "generic-summaries"
        self._children_yang_names.add("generic-summaries")

        self.ipv6_single_hop_multi_paths = Bfd.Ipv6SingleHopMultiPaths()
        self.ipv6_single_hop_multi_paths.parent = self
        self._children_name_map["ipv6_single_hop_multi_paths"] = "ipv6-single-hop-multi-paths"
        self._children_yang_names.add("ipv6-single-hop-multi-paths")

        self.ipv4_single_hop_node_location_summaries = Bfd.Ipv4SingleHopNodeLocationSummaries()
        self.ipv4_single_hop_node_location_summaries.parent = self
        self._children_name_map["ipv4_single_hop_node_location_summaries"] = "ipv4-single-hop-node-location-summaries"
        self._children_yang_names.add("ipv4-single-hop-node-location-summaries")

        self.label_summary = Bfd.LabelSummary()
        self.label_summary.parent = self
        self._children_name_map["label_summary"] = "label-summary"
        self._children_yang_names.add("label-summary")

        self.ipv4bf_do_mplste_head_session_briefs = Bfd.Ipv4BfDoMplsteHeadSessionBriefs()
        self.ipv4bf_do_mplste_head_session_briefs.parent = self
        self._children_name_map["ipv4bf_do_mplste_head_session_briefs"] = "ipv4bf-do-mplste-head-session-briefs"
        self._children_yang_names.add("ipv4bf-do-mplste-head-session-briefs")

        self.ipv4bf_do_mplste_tail_session_details = Bfd.Ipv4BfDoMplsteTailSessionDetails()
        self.ipv4bf_do_mplste_tail_session_details.parent = self
        self._children_name_map["ipv4bf_do_mplste_tail_session_details"] = "ipv4bf-do-mplste-tail-session-details"
        self._children_yang_names.add("ipv4bf-do-mplste-tail-session-details")

        self.ipv4_multi_hop_node_location_summaries = Bfd.Ipv4MultiHopNodeLocationSummaries()
        self.ipv4_multi_hop_node_location_summaries.parent = self
        self._children_name_map["ipv4_multi_hop_node_location_summaries"] = "ipv4-multi-hop-node-location-summaries"
        self._children_yang_names.add("ipv4-multi-hop-node-location-summaries")

        self.ipv4bf_do_mplste_tail_session_briefs = Bfd.Ipv4BfDoMplsteTailSessionBriefs()
        self.ipv4bf_do_mplste_tail_session_briefs.parent = self
        self._children_name_map["ipv4bf_do_mplste_tail_session_briefs"] = "ipv4bf-do-mplste-tail-session-briefs"
        self._children_yang_names.add("ipv4bf-do-mplste-tail-session-briefs")

        self.ipv6_multi_hop_node_location_summaries = Bfd.Ipv6MultiHopNodeLocationSummaries()
        self.ipv6_multi_hop_node_location_summaries.parent = self
        self._children_name_map["ipv6_multi_hop_node_location_summaries"] = "ipv6-multi-hop-node-location-summaries"
        self._children_yang_names.add("ipv6-multi-hop-node-location-summaries")

        self.ipv4_multi_hop_summary = Bfd.Ipv4MultiHopSummary()
        self.ipv4_multi_hop_summary.parent = self
        self._children_name_map["ipv4_multi_hop_summary"] = "ipv4-multi-hop-summary"
        self._children_yang_names.add("ipv4-multi-hop-summary")

        self.ipv4_single_hop_counters = Bfd.Ipv4SingleHopCounters()
        self.ipv4_single_hop_counters.parent = self
        self._children_name_map["ipv4_single_hop_counters"] = "ipv4-single-hop-counters"
        self._children_yang_names.add("ipv4-single-hop-counters")

        self.ipv6_multi_hop_session_details = Bfd.Ipv6MultiHopSessionDetails()
        self.ipv6_multi_hop_session_details.parent = self
        self._children_name_map["ipv6_multi_hop_session_details"] = "ipv6-multi-hop-session-details"
        self._children_yang_names.add("ipv6-multi-hop-session-details")

        self.ipv6_multi_hop_multi_paths = Bfd.Ipv6MultiHopMultiPaths()
        self.ipv6_multi_hop_multi_paths.parent = self
        self._children_name_map["ipv6_multi_hop_multi_paths"] = "ipv6-multi-hop-multi-paths"
        self._children_yang_names.add("ipv6-multi-hop-multi-paths")

        self.ipv4bf_do_mplste_head_counters = Bfd.Ipv4BfDoMplsteHeadCounters()
        self.ipv4bf_do_mplste_head_counters.parent = self
        self._children_name_map["ipv4bf_do_mplste_head_counters"] = "ipv4bf-do-mplste-head-counters"
        self._children_yang_names.add("ipv4bf-do-mplste-head-counters")

        self.session_mibs = Bfd.SessionMibs()
        self.session_mibs.parent = self
        self._children_name_map["session_mibs"] = "session-mibs"
        self._children_yang_names.add("session-mibs")

        self.ipv6_multi_hop_summary = Bfd.Ipv6MultiHopSummary()
        self.ipv6_multi_hop_summary.parent = self
        self._children_name_map["ipv6_multi_hop_summary"] = "ipv6-multi-hop-summary"
        self._children_yang_names.add("ipv6-multi-hop-summary")

        self.label_summary_nodes = Bfd.LabelSummaryNodes()
        self.label_summary_nodes.parent = self
        self._children_name_map["label_summary_nodes"] = "label-summary-nodes"
        self._children_yang_names.add("label-summary-nodes")

        self.ipv6_multi_hop_session_briefs = Bfd.Ipv6MultiHopSessionBriefs()
        self.ipv6_multi_hop_session_briefs.parent = self
        self._children_name_map["ipv6_multi_hop_session_briefs"] = "ipv6-multi-hop-session-briefs"
        self._children_yang_names.add("ipv6-multi-hop-session-briefs")

        self.session_briefs = Bfd.SessionBriefs()
        self.session_briefs.parent = self
        self._children_name_map["session_briefs"] = "session-briefs"
        self._children_yang_names.add("session-briefs")

        self.ipv6_single_hop_node_location_summaries = Bfd.Ipv6SingleHopNodeLocationSummaries()
        self.ipv6_single_hop_node_location_summaries.parent = self
        self._children_name_map["ipv6_single_hop_node_location_summaries"] = "ipv6-single-hop-node-location-summaries"
        self._children_yang_names.add("ipv6-single-hop-node-location-summaries")

        self.summary = Bfd.Summary()
        self.summary.parent = self
        self._children_name_map["summary"] = "summary"
        self._children_yang_names.add("summary")

        self.ipv4bfd_mplste_tail_node_summaries = Bfd.Ipv4BfdMplsteTailNodeSummaries()
        self.ipv4bfd_mplste_tail_node_summaries.parent = self
        self._children_name_map["ipv4bfd_mplste_tail_node_summaries"] = "ipv4bfd-mplste-tail-node-summaries"
        self._children_yang_names.add("ipv4bfd-mplste-tail-node-summaries")

        self.ipv4_single_hop_location_summaries = Bfd.Ipv4SingleHopLocationSummaries()
        self.ipv4_single_hop_location_summaries.parent = self
        self._children_name_map["ipv4_single_hop_location_summaries"] = "ipv4-single-hop-location-summaries"
        self._children_yang_names.add("ipv4-single-hop-location-summaries")

        self.ipv4bfd_mplste_head_summary_nodes = Bfd.Ipv4BfdMplsteHeadSummaryNodes()
        self.ipv4bfd_mplste_head_summary_nodes.parent = self
        self._children_name_map["ipv4bfd_mplste_head_summary_nodes"] = "ipv4bfd-mplste-head-summary-nodes"
        self._children_yang_names.add("ipv4bfd-mplste-head-summary-nodes")

        self.label_session_details = Bfd.LabelSessionDetails()
        self.label_session_details.parent = self
        self._children_name_map["label_session_details"] = "label-session-details"
        self._children_yang_names.add("label-session-details")

        self.ipv6_single_hop_session_details = Bfd.Ipv6SingleHopSessionDetails()
        self.ipv6_single_hop_session_details.parent = self
        self._children_name_map["ipv6_single_hop_session_details"] = "ipv6-single-hop-session-details"
        self._children_yang_names.add("ipv6-single-hop-session-details")

        self.ipv4_multi_hop_counters = Bfd.Ipv4MultiHopCounters()
        self.ipv4_multi_hop_counters.parent = self
        self._children_name_map["ipv4_multi_hop_counters"] = "ipv4-multi-hop-counters"
        self._children_yang_names.add("ipv4-multi-hop-counters")

        self.session_details = Bfd.SessionDetails()
        self.session_details.parent = self
        self._children_name_map["session_details"] = "session-details"
        self._children_yang_names.add("session-details")

        self.ipv4_single_hop_multi_paths = Bfd.Ipv4SingleHopMultiPaths()
        self.ipv4_single_hop_multi_paths.parent = self
        self._children_name_map["ipv4_single_hop_multi_paths"] = "ipv4-single-hop-multi-paths"
        self._children_yang_names.add("ipv4-single-hop-multi-paths")

        self.ipv4_single_hop_session_briefs = Bfd.Ipv4SingleHopSessionBriefs()
        self.ipv4_single_hop_session_briefs.parent = self
        self._children_name_map["ipv4_single_hop_session_briefs"] = "ipv4-single-hop-session-briefs"
        self._children_yang_names.add("ipv4-single-hop-session-briefs")

        self.ipv6_multi_hop_counters = Bfd.Ipv6MultiHopCounters()
        self.ipv6_multi_hop_counters.parent = self
        self._children_name_map["ipv6_multi_hop_counters"] = "ipv6-multi-hop-counters"
        self._children_yang_names.add("ipv6-multi-hop-counters")

        self.ipv6_single_hop_location_summaries = Bfd.Ipv6SingleHopLocationSummaries()
        self.ipv6_single_hop_location_summaries.parent = self
        self._children_name_map["ipv6_single_hop_location_summaries"] = "ipv6-single-hop-location-summaries"
        self._children_yang_names.add("ipv6-single-hop-location-summaries")

        self.label_counters = Bfd.LabelCounters()
        self.label_counters.parent = self
        self._children_name_map["label_counters"] = "label-counters"
        self._children_yang_names.add("label-counters")

        self.ipv4bf_do_mplste_head_session_details = Bfd.Ipv4BfDoMplsteHeadSessionDetails()
        self.ipv4bf_do_mplste_head_session_details.parent = self
        self._children_name_map["ipv4bf_do_mplste_head_session_details"] = "ipv4bf-do-mplste-head-session-details"
        self._children_yang_names.add("ipv4bf-do-mplste-head-session-details")

        self.relation_briefs = Bfd.RelationBriefs()
        self.relation_briefs.parent = self
        self._children_name_map["relation_briefs"] = "relation-briefs"
        self._children_yang_names.add("relation-briefs")

        self.client_briefs = Bfd.ClientBriefs()
        self.client_briefs.parent = self
        self._children_name_map["client_briefs"] = "client-briefs"
        self._children_yang_names.add("client-briefs")

        self.ipv4bf_do_mplste_head_multi_paths = Bfd.Ipv4BfDoMplsteHeadMultiPaths()
        self.ipv4bf_do_mplste_head_multi_paths.parent = self
        self._children_name_map["ipv4bf_do_mplste_head_multi_paths"] = "ipv4bf-do-mplste-head-multi-paths"
        self._children_yang_names.add("ipv4bf-do-mplste-head-multi-paths")

        self.relation_details = Bfd.RelationDetails()
        self.relation_details.parent = self
        self._children_name_map["relation_details"] = "relation-details"
        self._children_yang_names.add("relation-details")

        self.ipv4bf_do_mplste_tail_counters = Bfd.Ipv4BfDoMplsteTailCounters()
        self.ipv4bf_do_mplste_tail_counters.parent = self
        self._children_name_map["ipv4bf_do_mplste_tail_counters"] = "ipv4bf-do-mplste-tail-counters"
        self._children_yang_names.add("ipv4bf-do-mplste-tail-counters")

        self.ipv6_single_hop_session_briefs = Bfd.Ipv6SingleHopSessionBriefs()
        self.ipv6_single_hop_session_briefs.parent = self
        self._children_name_map["ipv6_single_hop_session_briefs"] = "ipv6-single-hop-session-briefs"
        self._children_yang_names.add("ipv6-single-hop-session-briefs")

        self.ipv4bf_do_mplste_tail_multi_paths = Bfd.Ipv4BfDoMplsteTailMultiPaths()
        self.ipv4bf_do_mplste_tail_multi_paths.parent = self
        self._children_name_map["ipv4bf_do_mplste_tail_multi_paths"] = "ipv4bf-do-mplste-tail-multi-paths"
        self._children_yang_names.add("ipv4bf-do-mplste-tail-multi-paths")

        self.ipv4_multi_hop_multi_paths = Bfd.Ipv4MultiHopMultiPaths()
        self.ipv4_multi_hop_multi_paths.parent = self
        self._children_name_map["ipv4_multi_hop_multi_paths"] = "ipv4-multi-hop-multi-paths"
        self._children_yang_names.add("ipv4-multi-hop-multi-paths")

        self.ipv4bf_do_mplste_head_summary = Bfd.Ipv4BfDoMplsteHeadSummary()
        self.ipv4bf_do_mplste_head_summary.parent = self
        self._children_name_map["ipv4bf_do_mplste_head_summary"] = "ipv4bf-do-mplste-head-summary"
        self._children_yang_names.add("ipv4bf-do-mplste-head-summary")
        self._segment_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd"


    class LabelSessionBriefs(Entity):
        """
        Table of brief information about all Label BFD
        sessions in the System
        
        .. attribute:: label_session_brief
        
        	Brief information for a single Label BFD session
        	**type**\: list of  		 :py:class:`LabelSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionBriefs.LabelSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.LabelSessionBriefs, self).__init__()

            self.yang_name = "label-session-briefs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("label-session-brief", ("label_session_brief", Bfd.LabelSessionBriefs.LabelSessionBrief))])
            self._leafs = OrderedDict()

            self.label_session_brief = YList(self)
            self._segment_path = lambda: "label-session-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.LabelSessionBriefs, [], name, value)


        class LabelSessionBrief(Entity):
            """
            Brief information for a single Label BFD
            session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation>`
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.LabelSessionBriefs.LabelSessionBrief, self).__init__()

                self.yang_name = "label-session-brief"
                self.yang_parent_name = "label-session-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-brief-information", ("status_brief_information", Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('incoming_label', YLeaf(YType.int32, 'incoming-label')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('session_flags', YLeaf(YType.uint32, 'session-flags')),
                ])
                self.interface_name = None
                self.incoming_label = None
                self.location = None
                self.node_id = None
                self.state = None
                self.session_type = None
                self.session_subtype = None
                self.session_flags = None

                self.status_brief_information = Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self._children_name_map["status_brief_information"] = "status-brief-information"
                self._children_yang_names.add("status-brief-information")
                self._segment_path = lambda: "label-session-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.LabelSessionBriefs.LabelSessionBrief, ['interface_name', 'incoming_label', 'location', 'node_id', 'state', 'session_type', 'session_subtype', 'session_flags'], name, value)


            class StatusBriefInformation(Entity):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation, self).__init__()

                    self.yang_name = "status-brief-information"
                    self.yang_parent_name = "label-session-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.EchoIntervalMultiplier))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.async_interval_multiplier = Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                    self._children_yang_names.add("async-interval-multiplier")

                    self.echo_interval_multiplier = Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self
                    self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                    self._children_yang_names.add("echo-interval-multiplier")
                    self._segment_path = lambda: "status-brief-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-briefs/label-session-brief/%s" % self._segment_path()


                class AsyncIntervalMultiplier(Entity):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                        self.yang_name = "async-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                            ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_remote_transmit_interval = None
                        self.negotiated_local_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "async-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-briefs/label-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class EchoIntervalMultiplier(Entity):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                        self.yang_name = "echo-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "echo-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-briefs/label-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionBriefs.LabelSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


    class Ipv4BfDoMplsteTailSummary(Entity):
        """
        Summary information of IPv4 BFD over MPLS\-TE
        Tail
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfDoMplsteTailSummary, self).__init__()

            self.yang_name = "ipv4bf-do-mplste-tail-summary"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv4BfDoMplsteTailSummary.SessionState))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.session_state = Bfd.Ipv4BfDoMplsteTailSummary.SessionState()
            self.session_state.parent = self
            self._children_name_map["session_state"] = "session-state"
            self._children_yang_names.add("session-state")
            self._segment_path = lambda: "ipv4bf-do-mplste-tail-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class SessionState(Entity):
            """
            Statistics of states for sessions
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfDoMplsteTailSummary.SessionState, self).__init__()

                self.yang_name = "session-state"
                self.yang_parent_name = "ipv4bf-do-mplste-tail-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total_count', YLeaf(YType.uint32, 'total-count')),
                    ('down_count', YLeaf(YType.uint32, 'down-count')),
                    ('up_count', YLeaf(YType.uint32, 'up-count')),
                    ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                ])
                self.total_count = None
                self.down_count = None
                self.up_count = None
                self.unknown_count = None
                self._segment_path = lambda: "session-state"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSummary.SessionState, ['total_count', 'down_count', 'up_count', 'unknown_count'], name, value)


    class Ipv6SingleHopCounters(Entity):
        """
        IPv6 single hop Counters
        
        .. attribute:: ipv6_single_hop_packet_counters
        
        	Table of IPv6 single hop Packet counters
        	**type**\:  :py:class:`Ipv6SingleHopPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6SingleHopCounters, self).__init__()

            self.yang_name = "ipv6-single-hop-counters"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("ipv6-single-hop-packet-counters", ("ipv6_single_hop_packet_counters", Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.ipv6_single_hop_packet_counters = Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters()
            self.ipv6_single_hop_packet_counters.parent = self
            self._children_name_map["ipv6_single_hop_packet_counters"] = "ipv6-single-hop-packet-counters"
            self._children_yang_names.add("ipv6-single-hop-packet-counters")
            self._segment_path = lambda: "ipv6-single-hop-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class Ipv6SingleHopPacketCounters(Entity):
            """
            Table of IPv6 single hop Packet counters
            
            .. attribute:: ipv6_single_hop_packet_counter
            
            	Interface IPv6 single hop Packet counters
            	**type**\: list of  		 :py:class:`Ipv6SingleHopPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters, self).__init__()

                self.yang_name = "ipv6-single-hop-packet-counters"
                self.yang_parent_name = "ipv6-single-hop-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("ipv6-single-hop-packet-counter", ("ipv6_single_hop_packet_counter", Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter))])
                self._leafs = OrderedDict()

                self.ipv6_single_hop_packet_counter = YList(self)
                self._segment_path = lambda: "ipv6-single-hop-packet-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters, [], name, value)


            class Ipv6SingleHopPacketCounter(Entity):
                """
                Interface IPv6 single hop Packet counters
                
                .. attribute:: interface_name  (key)
                
                	Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:  :py:class:`BfdMgmtPktDisplay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplay>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter, self).__init__()

                    self.yang_name = "ipv6-single-hop-packet-counter"
                    self.yang_parent_name = "ipv6-single-hop-packet-counters"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('hello_transmit_count', YLeaf(YType.uint32, 'hello-transmit-count')),
                        ('hello_receive_count', YLeaf(YType.uint32, 'hello-receive-count')),
                        ('echo_transmit_count', YLeaf(YType.uint32, 'echo-transmit-count')),
                        ('echo_receive_count', YLeaf(YType.uint32, 'echo-receive-count')),
                        ('display_type', YLeaf(YType.enumeration, 'display-type')),
                    ])
                    self.interface_name = None
                    self.hello_transmit_count = None
                    self.hello_receive_count = None
                    self.echo_transmit_count = None
                    self.echo_receive_count = None
                    self.display_type = None
                    self._segment_path = lambda: "ipv6-single-hop-packet-counter" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-counters/ipv6-single-hop-packet-counters/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6SingleHopCounters.Ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter, ['interface_name', 'hello_transmit_count', 'hello_receive_count', 'echo_transmit_count', 'echo_receive_count', 'display_type'], name, value)


    class Counters(Entity):
        """
        Counters
        
        .. attribute:: packet_counters
        
        	Table of Packet counters
        	**type**\:  :py:class:`PacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Counters.PacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Counters, self).__init__()

            self.yang_name = "counters"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("packet-counters", ("packet_counters", Bfd.Counters.PacketCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.packet_counters = Bfd.Counters.PacketCounters()
            self.packet_counters.parent = self
            self._children_name_map["packet_counters"] = "packet-counters"
            self._children_yang_names.add("packet-counters")
            self._segment_path = lambda: "counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class PacketCounters(Entity):
            """
            Table of Packet counters
            
            .. attribute:: packet_counter
            
            	Interface Packet counters
            	**type**\: list of  		 :py:class:`PacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Counters.PacketCounters.PacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Counters.PacketCounters, self).__init__()

                self.yang_name = "packet-counters"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("packet-counter", ("packet_counter", Bfd.Counters.PacketCounters.PacketCounter))])
                self._leafs = OrderedDict()

                self.packet_counter = YList(self)
                self._segment_path = lambda: "packet-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Counters.PacketCounters, [], name, value)


            class PacketCounter(Entity):
                """
                Interface Packet counters
                
                .. attribute:: interface_name  (key)
                
                	Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:  :py:class:`BfdMgmtPktDisplay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplay>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Counters.PacketCounters.PacketCounter, self).__init__()

                    self.yang_name = "packet-counter"
                    self.yang_parent_name = "packet-counters"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('hello_transmit_count', YLeaf(YType.uint32, 'hello-transmit-count')),
                        ('hello_receive_count', YLeaf(YType.uint32, 'hello-receive-count')),
                        ('echo_transmit_count', YLeaf(YType.uint32, 'echo-transmit-count')),
                        ('echo_receive_count', YLeaf(YType.uint32, 'echo-receive-count')),
                        ('display_type', YLeaf(YType.enumeration, 'display-type')),
                    ])
                    self.interface_name = None
                    self.hello_transmit_count = None
                    self.hello_receive_count = None
                    self.echo_transmit_count = None
                    self.echo_receive_count = None
                    self.display_type = None
                    self._segment_path = lambda: "packet-counter" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/counters/packet-counters/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Counters.PacketCounters.PacketCounter, ['interface_name', 'hello_transmit_count', 'hello_receive_count', 'echo_transmit_count', 'echo_receive_count', 'display_type'], name, value)


    class ClientDetails(Entity):
        """
        Table of detailed information about BFD clients
        
        .. attribute:: client_detail
        
        	Detailed information of client
        	**type**\: list of  		 :py:class:`ClientDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientDetails.ClientDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.ClientDetails, self).__init__()

            self.yang_name = "client-details"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("client-detail", ("client_detail", Bfd.ClientDetails.ClientDetail))])
            self._leafs = OrderedDict()

            self.client_detail = YList(self)
            self._segment_path = lambda: "client-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.ClientDetails, [], name, value)


        class ClientDetail(Entity):
            """
            Detailed information of client
            
            .. attribute:: client_name  (key)
            
            	Client Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: brief
            
            	Brief client information
            	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientDetails.ClientDetail.Brief>`
            
            .. attribute:: flags
            
            	The BFD Client Flags
            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientDetails.ClientDetail.Flags>`
            
            .. attribute:: recreate_time
            
            	Recreate Time in Seconds
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.ClientDetails.ClientDetail, self).__init__()

                self.yang_name = "client-detail"
                self.yang_parent_name = "client-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['client_name']
                self._child_container_classes = OrderedDict([("brief", ("brief", Bfd.ClientDetails.ClientDetail.Brief)), ("flags", ("flags", Bfd.ClientDetails.ClientDetail.Flags))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('client_name', YLeaf(YType.str, 'client-name')),
                    ('recreate_time', YLeaf(YType.uint32, 'recreate-time')),
                ])
                self.client_name = None
                self.recreate_time = None

                self.brief = Bfd.ClientDetails.ClientDetail.Brief()
                self.brief.parent = self
                self._children_name_map["brief"] = "brief"
                self._children_yang_names.add("brief")

                self.flags = Bfd.ClientDetails.ClientDetail.Flags()
                self.flags.parent = self
                self._children_name_map["flags"] = "flags"
                self._children_yang_names.add("flags")
                self._segment_path = lambda: "client-detail" + "[client-name='" + str(self.client_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/client-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.ClientDetails.ClientDetail, ['client_name', 'recreate_time'], name, value)


            class Brief(Entity):
                """
                Brief client information
                
                .. attribute:: name_xr
                
                	Client process name
                	**type**\: str
                
                	**length:** 0..257
                
                .. attribute:: node_id
                
                	Location where client resides
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: session_count
                
                	Number of sessions created by this client
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.ClientDetails.ClientDetail.Brief, self).__init__()

                    self.yang_name = "brief"
                    self.yang_parent_name = "client-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('name_xr', YLeaf(YType.str, 'name-xr')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                        ('session_count', YLeaf(YType.uint32, 'session-count')),
                    ])
                    self.name_xr = None
                    self.node_id = None
                    self.session_count = None
                    self._segment_path = lambda: "brief"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.ClientDetails.ClientDetail.Brief, ['name_xr', 'node_id', 'session_count'], name, value)


            class Flags(Entity):
                """
                The BFD Client Flags
                
                .. attribute:: is_zombie_state
                
                	Client is in Zombie State
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: is_recreate_state
                
                	Client is in Recreate State
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.ClientDetails.ClientDetail.Flags, self).__init__()

                    self.yang_name = "flags"
                    self.yang_parent_name = "client-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_zombie_state', YLeaf(YType.int32, 'is-zombie-state')),
                        ('is_recreate_state', YLeaf(YType.int32, 'is-recreate-state')),
                    ])
                    self.is_zombie_state = None
                    self.is_recreate_state = None
                    self._segment_path = lambda: "flags"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.ClientDetails.ClientDetail.Flags, ['is_zombie_state', 'is_recreate_state'], name, value)


    class Ipv4SingleHopSummary(Entity):
        """
        Summary information of BFD IPv4 singlehop
        sessions
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4SingleHopSummary, self).__init__()

            self.yang_name = "ipv4-single-hop-summary"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv4SingleHopSummary.SessionState))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.session_state = Bfd.Ipv4SingleHopSummary.SessionState()
            self.session_state.parent = self
            self._children_name_map["session_state"] = "session-state"
            self._children_yang_names.add("session-state")
            self._segment_path = lambda: "ipv4-single-hop-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class SessionState(Entity):
            """
            Statistics of states for sessions
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4SingleHopSummary.SessionState, self).__init__()

                self.yang_name = "session-state"
                self.yang_parent_name = "ipv4-single-hop-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total_count', YLeaf(YType.uint32, 'total-count')),
                    ('down_count', YLeaf(YType.uint32, 'down-count')),
                    ('up_count', YLeaf(YType.uint32, 'up-count')),
                    ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                ])
                self.total_count = None
                self.down_count = None
                self.up_count = None
                self.unknown_count = None
                self._segment_path = lambda: "session-state"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4SingleHopSummary.SessionState, ['total_count', 'down_count', 'up_count', 'unknown_count'], name, value)


    class Ipv6SingleHopSummary(Entity):
        """
        Summary information of BFD IPv6 singlehop
        sessions
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6SingleHopSummary, self).__init__()

            self.yang_name = "ipv6-single-hop-summary"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv6SingleHopSummary.SessionState))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.session_state = Bfd.Ipv6SingleHopSummary.SessionState()
            self.session_state.parent = self
            self._children_name_map["session_state"] = "session-state"
            self._children_yang_names.add("session-state")
            self._segment_path = lambda: "ipv6-single-hop-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class SessionState(Entity):
            """
            Statistics of states for sessions
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6SingleHopSummary.SessionState, self).__init__()

                self.yang_name = "session-state"
                self.yang_parent_name = "ipv6-single-hop-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total_count', YLeaf(YType.uint32, 'total-count')),
                    ('down_count', YLeaf(YType.uint32, 'down-count')),
                    ('up_count', YLeaf(YType.uint32, 'up-count')),
                    ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                ])
                self.total_count = None
                self.down_count = None
                self.up_count = None
                self.unknown_count = None
                self._segment_path = lambda: "session-state"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6SingleHopSummary.SessionState, ['total_count', 'down_count', 'up_count', 'unknown_count'], name, value)


    class LabelMultiPaths(Entity):
        """
        Label multipath
        
        .. attribute:: label_multi_path
        
        	Label multipath table
        	**type**\: list of  		 :py:class:`LabelMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelMultiPaths.LabelMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.LabelMultiPaths, self).__init__()

            self.yang_name = "label-multi-paths"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("label-multi-path", ("label_multi_path", Bfd.LabelMultiPaths.LabelMultiPath))])
            self._leafs = OrderedDict()

            self.label_multi_path = YList(self)
            self._segment_path = lambda: "label-multi-paths"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.LabelMultiPaths, [], name, value)


        class LabelMultiPath(Entity):
            """
            Label multipath table
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.LabelMultiPaths.LabelMultiPath, self).__init__()

                self.yang_name = "label-multi-path"
                self.yang_parent_name = "label-multi-paths"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('incoming_label', YLeaf(YType.int32, 'incoming-label')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('incoming_label_xr', YLeaf(YType.uint32, 'incoming-label-xr')),
                    ('session_interface_name', YLeaf(YType.str, 'session-interface-name')),
                ])
                self.interface_name = None
                self.incoming_label = None
                self.location = None
                self.session_subtype = None
                self.state = None
                self.local_discriminator = None
                self.node_id = None
                self.incoming_label_xr = None
                self.session_interface_name = None
                self._segment_path = lambda: "label-multi-path"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-multi-paths/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.LabelMultiPaths.LabelMultiPath, ['interface_name', 'incoming_label', 'location', 'session_subtype', 'state', 'local_discriminator', 'node_id', 'incoming_label_xr', 'session_interface_name'], name, value)


    class Ipv4MultiHopSessionDetails(Entity):
        """
        Table of detailed information about all IPv4
        multihop BFD sessions in the System 
        
        .. attribute:: ipv4_multi_hop_session_detail
        
        	Detailed information for a single IPv4 multihop BFD session
        	**type**\: list of  		 :py:class:`Ipv4MultiHopSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4MultiHopSessionDetails, self).__init__()

            self.yang_name = "ipv4-multi-hop-session-details"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4-multi-hop-session-detail", ("ipv4_multi_hop_session_detail", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail))])
            self._leafs = OrderedDict()

            self.ipv4_multi_hop_session_detail = YList(self)
            self._segment_path = lambda: "ipv4-multi-hop-session-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails, [], name, value)


        class Ipv4MultiHopSessionDetail(Entity):
            """
            Detailed information for a single IPv4 multihop
            BFD session
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:  :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:  :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState>`
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:  :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.OwnerInformation>`
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of  		 :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail, self).__init__()

                self.yang_name = "ipv4-multi-hop-session-detail"
                self.yang_parent_name = "ipv4-multi-hop-session-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-information", ("status_information", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation)), ("mp-download-state", ("mp_download_state", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState)), ("lsp-ping-info", ("lsp_ping_info", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo))])
                self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.OwnerInformation)), ("association-information", ("association_information", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation))])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ])
                self.source_address = None
                self.destination_address = None
                self.location = None
                self.vrf_name = None

                self.status_information = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation()
                self.status_information.parent = self
                self._children_name_map["status_information"] = "status-information"
                self._children_yang_names.add("status-information")

                self.mp_download_state = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self._children_name_map["mp_download_state"] = "mp-download-state"
                self._children_yang_names.add("mp-download-state")

                self.lsp_ping_info = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self._children_name_map["lsp_ping_info"] = "lsp-ping-info"
                self._children_yang_names.add("lsp-ping-info")

                self.owner_information = YList(self)
                self.association_information = YList(self)
                self._segment_path = lambda: "ipv4-multi-hop-session-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail, ['source_address', 'destination_address', 'location', 'vrf_name'], name, value)


            class StatusInformation(Entity):
                """
                Session status information
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:  :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:  :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.TransmitPacket>`
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:  :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\: str
                
                .. attribute:: state
                
                	State
                	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation, self).__init__()

                    self.yang_name = "status-information"
                    self.yang_parent_name = "ipv4-multi-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("source-address", ("source_address", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.SourceAddress)), ("last-state-change", ("last_state_change", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.LastStateChange)), ("transmit-packet", ("transmit_packet", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.TransmitPacket)), ("receive-packet", ("receive_packet", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.ReceivePacket)), ("status-brief-information", ("status_brief_information", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation)), ("async-transmit-statistics", ("async_transmit_statistics", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics)), ("async-receive-statistics", ("async_receive_statistics", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics)), ("echo-transmit-statistics", ("echo_transmit_statistics", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics)), ("echo-received-statistics", ("echo_received_statistics", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                        ('state', YLeaf(YType.enumeration, 'state')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                        ('remote_discriminator', YLeaf(YType.uint32, 'remote-discriminator')),
                        ('to_up_state_count', YLeaf(YType.uint32, 'to-up-state-count')),
                        ('desired_minimum_echo_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-echo-transmit-interval')),
                        ('remote_negotiated_interval', YLeaf(YType.uint32, 'remote-negotiated-interval')),
                        ('latency_number', YLeaf(YType.uint32, 'latency-number')),
                        ('latency_minimum', YLeaf(YType.uint32, 'latency-minimum')),
                        ('latency_maximum', YLeaf(YType.uint32, 'latency-maximum')),
                        ('latency_average', YLeaf(YType.uint32, 'latency-average')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                        ('internal_label', YLeaf(YType.uint32, 'internal-label')),
                    ])
                    self.sessiontype = None
                    self.session_subtype = None
                    self.state = None
                    self.local_discriminator = None
                    self.remote_discriminator = None
                    self.to_up_state_count = None
                    self.desired_minimum_echo_transmit_interval = None
                    self.remote_negotiated_interval = None
                    self.latency_number = None
                    self.latency_minimum = None
                    self.latency_maximum = None
                    self.latency_average = None
                    self.node_id = None
                    self.internal_label = None

                    self.source_address = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self._children_name_map["source_address"] = "source-address"
                    self._children_yang_names.add("source-address")

                    self.last_state_change = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self._children_name_map["last_state_change"] = "last-state-change"
                    self._children_yang_names.add("last-state-change")

                    self.transmit_packet = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self
                    self._children_name_map["transmit_packet"] = "transmit-packet"
                    self._children_yang_names.add("transmit-packet")

                    self.receive_packet = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self._children_name_map["receive_packet"] = "receive-packet"
                    self._children_yang_names.add("receive-packet")

                    self.status_brief_information = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self._children_name_map["status_brief_information"] = "status-brief-information"
                    self._children_yang_names.add("status-brief-information")

                    self.async_transmit_statistics = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self._children_name_map["async_transmit_statistics"] = "async-transmit-statistics"
                    self._children_yang_names.add("async-transmit-statistics")

                    self.async_receive_statistics = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self._children_name_map["async_receive_statistics"] = "async-receive-statistics"
                    self._children_yang_names.add("async-receive-statistics")

                    self.echo_transmit_statistics = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self._children_name_map["echo_transmit_statistics"] = "echo-transmit-statistics"
                    self._children_yang_names.add("echo-transmit-statistics")

                    self.echo_received_statistics = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self._children_name_map["echo_received_statistics"] = "echo-received-statistics"
                    self._children_yang_names.add("echo-received-statistics")
                    self._segment_path = lambda: "status-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation, ['sessiontype', 'session_subtype', 'state', 'local_discriminator', 'remote_discriminator', 'to_up_state_count', 'desired_minimum_echo_transmit_interval', 'remote_negotiated_interval', 'latency_number', 'latency_minimum', 'latency_maximum', 'latency_average', 'node_id', 'internal_label'], name, value)


                class SourceAddress(Entity):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.SourceAddress, self).__init__()

                        self.yang_name = "source-address"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "source-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.SourceAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class LastStateChange(Entity):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.LastStateChange, self).__init__()

                        self.yang_name = "last-state-change"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('days', YLeaf(YType.uint32, 'days')),
                            ('hours', YLeaf(YType.uint8, 'hours')),
                            ('minutes', YLeaf(YType.uint8, 'minutes')),
                            ('seconds', YLeaf(YType.uint8, 'seconds')),
                        ])
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None
                        self._segment_path = lambda: "last-state-change"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.LastStateChange, ['days', 'hours', 'minutes', 'seconds'], name, value)


                class TransmitPacket(Entity):
                    """
                    Transmit Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.TransmitPacket, self).__init__()

                        self.yang_name = "transmit-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "transmit-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.TransmitPacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class ReceivePacket(Entity):
                    """
                    Receive Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.ReceivePacket, self).__init__()

                        self.yang_name = "receive-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "receive-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.ReceivePacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class StatusBriefInformation(Entity):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation, self).__init__()

                        self.yang_name = "status-brief-information"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.async_interval_multiplier = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                        self._children_yang_names.add("async-interval-multiplier")

                        self.echo_interval_multiplier = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self
                        self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                        self._children_yang_names.add("echo-interval-multiplier")
                        self._segment_path = lambda: "status-brief-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/%s" % self._segment_path()


                    class AsyncIntervalMultiplier(Entity):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                            self.yang_name = "async-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                                ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_remote_transmit_interval = None
                            self.negotiated_local_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "async-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                    class EchoIntervalMultiplier(Entity):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                            self.yang_name = "echo-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "echo-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class AsyncTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics, self).__init__()

                        self.yang_name = "async-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class AsyncReceiveStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics, self).__init__()

                        self.yang_name = "async-receive-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-receive-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics, self).__init__()

                        self.yang_name = "echo-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoReceivedStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics, self).__init__()

                        self.yang_name = "echo-received-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-received-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


            class MpDownloadState(Entity):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:  :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:  :py:class:`BfdMpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadState>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState, self).__init__()

                    self.yang_name = "mp-download-state"
                    self.yang_parent_name = "ipv4-multi-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("change-time", ("change_time", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState.ChangeTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('mp_download_state', YLeaf(YType.enumeration, 'mp-download-state')),
                    ])
                    self.mp_download_state = None

                    self.change_time = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self._children_name_map["change_time"] = "change-time"
                    self._children_yang_names.add("change-time")
                    self._segment_path = lambda: "mp-download-state"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState, ['mp_download_state'], name, value)


                class ChangeTime(Entity):
                    """
                    Change time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState.ChangeTime, self).__init__()

                        self.yang_name = "change-time"
                        self.yang_parent_name = "mp-download-state"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "change-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/mp-download-state/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.MpDownloadState.ChangeTime, ['seconds', 'nanoseconds'], name, value)


            class LspPingInfo(Entity):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:  :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:  :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:  :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\: str
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\: str
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\: str
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo, self).__init__()

                    self.yang_name = "lsp-ping-info"
                    self.yang_parent_name = "ipv4-multi-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("lsp-ping-tx-last-time", ("lsp_ping_tx_last_time", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime)), ("lsp-ping-tx-last-error-time", ("lsp_ping_tx_last_error_time", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime)), ("lsp-ping-rx-last-time", ("lsp_ping_rx_last_time", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lsp_ping_tx_count', YLeaf(YType.uint32, 'lsp-ping-tx-count')),
                        ('lsp_ping_tx_error_count', YLeaf(YType.uint32, 'lsp-ping-tx-error-count')),
                        ('lsp_ping_tx_last_rc', YLeaf(YType.str, 'lsp-ping-tx-last-rc')),
                        ('lsp_ping_tx_last_error_rc', YLeaf(YType.str, 'lsp-ping-tx-last-error-rc')),
                        ('lsp_ping_rx_last_discr', YLeaf(YType.uint32, 'lsp-ping-rx-last-discr')),
                        ('lsp_ping_rx_count', YLeaf(YType.uint32, 'lsp-ping-rx-count')),
                        ('lsp_ping_rx_last_code', YLeaf(YType.uint8, 'lsp-ping-rx-last-code')),
                        ('lsp_ping_rx_last_subcode', YLeaf(YType.uint8, 'lsp-ping-rx-last-subcode')),
                        ('lsp_ping_rx_last_output', YLeaf(YType.str, 'lsp-ping-rx-last-output')),
                    ])
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_output = None

                    self.lsp_ping_tx_last_time = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_time"] = "lsp-ping-tx-last-time"
                    self._children_yang_names.add("lsp-ping-tx-last-time")

                    self.lsp_ping_tx_last_error_time = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_error_time"] = "lsp-ping-tx-last-error-time"
                    self._children_yang_names.add("lsp-ping-tx-last-error-time")

                    self.lsp_ping_rx_last_time = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self._children_name_map["lsp_ping_rx_last_time"] = "lsp-ping-rx-last-time"
                    self._children_yang_names.add("lsp-ping-rx-last-time")
                    self._segment_path = lambda: "lsp-ping-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo, ['lsp_ping_tx_count', 'lsp_ping_tx_error_count', 'lsp_ping_tx_last_rc', 'lsp_ping_tx_last_error_rc', 'lsp_ping_rx_last_discr', 'lsp_ping_rx_count', 'lsp_ping_rx_last_code', 'lsp_ping_rx_last_subcode', 'lsp_ping_rx_last_output'], name, value)


                class LspPingTxLastTime(Entity):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingTxLastErrorTime(Entity):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-error-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-error-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingRxLastTime(Entity):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-rx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-rx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime, ['seconds', 'nanoseconds'], name, value)


            class OwnerInformation(Entity):
                """
                Client applications owning the session
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: name
                
                	Client process name
                	**type**\: str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.OwnerInformation, self).__init__()

                    self.yang_name = "owner-information"
                    self.yang_parent_name = "ipv4-multi-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interval', YLeaf(YType.uint32, 'interval')),
                        ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                        ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                        ('name', YLeaf(YType.str, 'name')),
                    ])
                    self.interval = None
                    self.detection_multiplier = None
                    self.adjusted_interval = None
                    self.adjusted_detection_multiplier = None
                    self.name = None
                    self._segment_path = lambda: "owner-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


            class AssociationInformation(Entity):
                """
                Association session information
                
                .. attribute:: ip_destination_address
                
                	IPv4/v6 dest address
                	**type**\:  :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.IpDestinationAddress>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.OwnerInformation>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation, self).__init__()

                    self.yang_name = "association-information"
                    self.yang_parent_name = "ipv4-multi-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ip-destination-address", ("ip_destination_address", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.IpDestinationAddress))])
                    self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.OwnerInformation))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ])
                    self.interface_name = None
                    self.sessiontype = None
                    self.local_discriminator = None

                    self.ip_destination_address = Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.IpDestinationAddress()
                    self.ip_destination_address.parent = self
                    self._children_name_map["ip_destination_address"] = "ip-destination-address"
                    self._children_yang_names.add("ip-destination-address")

                    self.owner_information = YList(self)
                    self._segment_path = lambda: "association-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation, ['interface_name', 'sessiontype', 'local_discriminator'], name, value)


                class IpDestinationAddress(Entity):
                    """
                    IPv4/v6 dest address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.IpDestinationAddress, self).__init__()

                        self.yang_name = "ip-destination-address"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "ip-destination-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.IpDestinationAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class OwnerInformation(Entity):
                    """
                    Client applications owning the session
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.OwnerInformation, self).__init__()

                        self.yang_name = "owner-information"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', YLeaf(YType.uint32, 'interval')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                            ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                            ('name', YLeaf(YType.str, 'name')),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.adjusted_interval = None
                        self.adjusted_detection_multiplier = None
                        self.name = None
                        self._segment_path = lambda: "owner-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-details/ipv4-multi-hop-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail.AssociationInformation.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


    class Ipv4SingleHopSessionDetails(Entity):
        """
        Table of detailed information about all IPv4
        singlehop BFD sessions in the System 
        
        .. attribute:: ipv4_single_hop_session_detail
        
        	Detailed information for a single IPv4 singlehop BFD session
        	**type**\: list of  		 :py:class:`Ipv4SingleHopSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4SingleHopSessionDetails, self).__init__()

            self.yang_name = "ipv4-single-hop-session-details"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4-single-hop-session-detail", ("ipv4_single_hop_session_detail", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail))])
            self._leafs = OrderedDict()

            self.ipv4_single_hop_session_detail = YList(self)
            self._segment_path = lambda: "ipv4-single-hop-session-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails, [], name, value)


        class Ipv4SingleHopSessionDetail(Entity):
            """
            Detailed information for a single IPv4
            singlehop BFD session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:  :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:  :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState>`
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:  :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.OwnerInformation>`
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of  		 :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail, self).__init__()

                self.yang_name = "ipv4-single-hop-session-detail"
                self.yang_parent_name = "ipv4-single-hop-session-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-information", ("status_information", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation)), ("mp-download-state", ("mp_download_state", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState)), ("lsp-ping-info", ("lsp_ping_info", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo))])
                self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.OwnerInformation)), ("association-information", ("association_information", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation))])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                ])
                self.interface_name = None
                self.destination_address = None
                self.location = None

                self.status_information = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation()
                self.status_information.parent = self
                self._children_name_map["status_information"] = "status-information"
                self._children_yang_names.add("status-information")

                self.mp_download_state = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self._children_name_map["mp_download_state"] = "mp-download-state"
                self._children_yang_names.add("mp-download-state")

                self.lsp_ping_info = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self._children_name_map["lsp_ping_info"] = "lsp-ping-info"
                self._children_yang_names.add("lsp-ping-info")

                self.owner_information = YList(self)
                self.association_information = YList(self)
                self._segment_path = lambda: "ipv4-single-hop-session-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail, ['interface_name', 'destination_address', 'location'], name, value)


            class StatusInformation(Entity):
                """
                Session status information
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:  :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:  :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.TransmitPacket>`
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:  :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\: str
                
                .. attribute:: state
                
                	State
                	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation, self).__init__()

                    self.yang_name = "status-information"
                    self.yang_parent_name = "ipv4-single-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("source-address", ("source_address", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.SourceAddress)), ("last-state-change", ("last_state_change", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.LastStateChange)), ("transmit-packet", ("transmit_packet", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.TransmitPacket)), ("receive-packet", ("receive_packet", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.ReceivePacket)), ("status-brief-information", ("status_brief_information", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation)), ("async-transmit-statistics", ("async_transmit_statistics", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics)), ("async-receive-statistics", ("async_receive_statistics", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics)), ("echo-transmit-statistics", ("echo_transmit_statistics", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics)), ("echo-received-statistics", ("echo_received_statistics", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                        ('state', YLeaf(YType.enumeration, 'state')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                        ('remote_discriminator', YLeaf(YType.uint32, 'remote-discriminator')),
                        ('to_up_state_count', YLeaf(YType.uint32, 'to-up-state-count')),
                        ('desired_minimum_echo_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-echo-transmit-interval')),
                        ('remote_negotiated_interval', YLeaf(YType.uint32, 'remote-negotiated-interval')),
                        ('latency_number', YLeaf(YType.uint32, 'latency-number')),
                        ('latency_minimum', YLeaf(YType.uint32, 'latency-minimum')),
                        ('latency_maximum', YLeaf(YType.uint32, 'latency-maximum')),
                        ('latency_average', YLeaf(YType.uint32, 'latency-average')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                        ('internal_label', YLeaf(YType.uint32, 'internal-label')),
                    ])
                    self.sessiontype = None
                    self.session_subtype = None
                    self.state = None
                    self.local_discriminator = None
                    self.remote_discriminator = None
                    self.to_up_state_count = None
                    self.desired_minimum_echo_transmit_interval = None
                    self.remote_negotiated_interval = None
                    self.latency_number = None
                    self.latency_minimum = None
                    self.latency_maximum = None
                    self.latency_average = None
                    self.node_id = None
                    self.internal_label = None

                    self.source_address = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self._children_name_map["source_address"] = "source-address"
                    self._children_yang_names.add("source-address")

                    self.last_state_change = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self._children_name_map["last_state_change"] = "last-state-change"
                    self._children_yang_names.add("last-state-change")

                    self.transmit_packet = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self
                    self._children_name_map["transmit_packet"] = "transmit-packet"
                    self._children_yang_names.add("transmit-packet")

                    self.receive_packet = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self._children_name_map["receive_packet"] = "receive-packet"
                    self._children_yang_names.add("receive-packet")

                    self.status_brief_information = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self._children_name_map["status_brief_information"] = "status-brief-information"
                    self._children_yang_names.add("status-brief-information")

                    self.async_transmit_statistics = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self._children_name_map["async_transmit_statistics"] = "async-transmit-statistics"
                    self._children_yang_names.add("async-transmit-statistics")

                    self.async_receive_statistics = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self._children_name_map["async_receive_statistics"] = "async-receive-statistics"
                    self._children_yang_names.add("async-receive-statistics")

                    self.echo_transmit_statistics = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self._children_name_map["echo_transmit_statistics"] = "echo-transmit-statistics"
                    self._children_yang_names.add("echo-transmit-statistics")

                    self.echo_received_statistics = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self._children_name_map["echo_received_statistics"] = "echo-received-statistics"
                    self._children_yang_names.add("echo-received-statistics")
                    self._segment_path = lambda: "status-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation, ['sessiontype', 'session_subtype', 'state', 'local_discriminator', 'remote_discriminator', 'to_up_state_count', 'desired_minimum_echo_transmit_interval', 'remote_negotiated_interval', 'latency_number', 'latency_minimum', 'latency_maximum', 'latency_average', 'node_id', 'internal_label'], name, value)


                class SourceAddress(Entity):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.SourceAddress, self).__init__()

                        self.yang_name = "source-address"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "source-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.SourceAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class LastStateChange(Entity):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.LastStateChange, self).__init__()

                        self.yang_name = "last-state-change"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('days', YLeaf(YType.uint32, 'days')),
                            ('hours', YLeaf(YType.uint8, 'hours')),
                            ('minutes', YLeaf(YType.uint8, 'minutes')),
                            ('seconds', YLeaf(YType.uint8, 'seconds')),
                        ])
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None
                        self._segment_path = lambda: "last-state-change"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.LastStateChange, ['days', 'hours', 'minutes', 'seconds'], name, value)


                class TransmitPacket(Entity):
                    """
                    Transmit Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.TransmitPacket, self).__init__()

                        self.yang_name = "transmit-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "transmit-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.TransmitPacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class ReceivePacket(Entity):
                    """
                    Receive Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.ReceivePacket, self).__init__()

                        self.yang_name = "receive-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "receive-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.ReceivePacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class StatusBriefInformation(Entity):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation, self).__init__()

                        self.yang_name = "status-brief-information"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.async_interval_multiplier = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                        self._children_yang_names.add("async-interval-multiplier")

                        self.echo_interval_multiplier = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self
                        self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                        self._children_yang_names.add("echo-interval-multiplier")
                        self._segment_path = lambda: "status-brief-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/%s" % self._segment_path()


                    class AsyncIntervalMultiplier(Entity):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                            self.yang_name = "async-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                                ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_remote_transmit_interval = None
                            self.negotiated_local_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "async-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                    class EchoIntervalMultiplier(Entity):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                            self.yang_name = "echo-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "echo-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class AsyncTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics, self).__init__()

                        self.yang_name = "async-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class AsyncReceiveStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics, self).__init__()

                        self.yang_name = "async-receive-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-receive-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics, self).__init__()

                        self.yang_name = "echo-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoReceivedStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics, self).__init__()

                        self.yang_name = "echo-received-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-received-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


            class MpDownloadState(Entity):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:  :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:  :py:class:`BfdMpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadState>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState, self).__init__()

                    self.yang_name = "mp-download-state"
                    self.yang_parent_name = "ipv4-single-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("change-time", ("change_time", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState.ChangeTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('mp_download_state', YLeaf(YType.enumeration, 'mp-download-state')),
                    ])
                    self.mp_download_state = None

                    self.change_time = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self._children_name_map["change_time"] = "change-time"
                    self._children_yang_names.add("change-time")
                    self._segment_path = lambda: "mp-download-state"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState, ['mp_download_state'], name, value)


                class ChangeTime(Entity):
                    """
                    Change time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState.ChangeTime, self).__init__()

                        self.yang_name = "change-time"
                        self.yang_parent_name = "mp-download-state"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "change-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/mp-download-state/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.MpDownloadState.ChangeTime, ['seconds', 'nanoseconds'], name, value)


            class LspPingInfo(Entity):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:  :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:  :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:  :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\: str
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\: str
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\: str
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo, self).__init__()

                    self.yang_name = "lsp-ping-info"
                    self.yang_parent_name = "ipv4-single-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("lsp-ping-tx-last-time", ("lsp_ping_tx_last_time", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime)), ("lsp-ping-tx-last-error-time", ("lsp_ping_tx_last_error_time", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime)), ("lsp-ping-rx-last-time", ("lsp_ping_rx_last_time", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lsp_ping_tx_count', YLeaf(YType.uint32, 'lsp-ping-tx-count')),
                        ('lsp_ping_tx_error_count', YLeaf(YType.uint32, 'lsp-ping-tx-error-count')),
                        ('lsp_ping_tx_last_rc', YLeaf(YType.str, 'lsp-ping-tx-last-rc')),
                        ('lsp_ping_tx_last_error_rc', YLeaf(YType.str, 'lsp-ping-tx-last-error-rc')),
                        ('lsp_ping_rx_last_discr', YLeaf(YType.uint32, 'lsp-ping-rx-last-discr')),
                        ('lsp_ping_rx_count', YLeaf(YType.uint32, 'lsp-ping-rx-count')),
                        ('lsp_ping_rx_last_code', YLeaf(YType.uint8, 'lsp-ping-rx-last-code')),
                        ('lsp_ping_rx_last_subcode', YLeaf(YType.uint8, 'lsp-ping-rx-last-subcode')),
                        ('lsp_ping_rx_last_output', YLeaf(YType.str, 'lsp-ping-rx-last-output')),
                    ])
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_output = None

                    self.lsp_ping_tx_last_time = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_time"] = "lsp-ping-tx-last-time"
                    self._children_yang_names.add("lsp-ping-tx-last-time")

                    self.lsp_ping_tx_last_error_time = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_error_time"] = "lsp-ping-tx-last-error-time"
                    self._children_yang_names.add("lsp-ping-tx-last-error-time")

                    self.lsp_ping_rx_last_time = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self._children_name_map["lsp_ping_rx_last_time"] = "lsp-ping-rx-last-time"
                    self._children_yang_names.add("lsp-ping-rx-last-time")
                    self._segment_path = lambda: "lsp-ping-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo, ['lsp_ping_tx_count', 'lsp_ping_tx_error_count', 'lsp_ping_tx_last_rc', 'lsp_ping_tx_last_error_rc', 'lsp_ping_rx_last_discr', 'lsp_ping_rx_count', 'lsp_ping_rx_last_code', 'lsp_ping_rx_last_subcode', 'lsp_ping_rx_last_output'], name, value)


                class LspPingTxLastTime(Entity):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingTxLastErrorTime(Entity):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-error-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-error-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingRxLastTime(Entity):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-rx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-rx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime, ['seconds', 'nanoseconds'], name, value)


            class OwnerInformation(Entity):
                """
                Client applications owning the session
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: name
                
                	Client process name
                	**type**\: str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.OwnerInformation, self).__init__()

                    self.yang_name = "owner-information"
                    self.yang_parent_name = "ipv4-single-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interval', YLeaf(YType.uint32, 'interval')),
                        ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                        ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                        ('name', YLeaf(YType.str, 'name')),
                    ])
                    self.interval = None
                    self.detection_multiplier = None
                    self.adjusted_interval = None
                    self.adjusted_detection_multiplier = None
                    self.name = None
                    self._segment_path = lambda: "owner-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


            class AssociationInformation(Entity):
                """
                Association session information
                
                .. attribute:: ip_destination_address
                
                	IPv4/v6 dest address
                	**type**\:  :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.IpDestinationAddress>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.OwnerInformation>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation, self).__init__()

                    self.yang_name = "association-information"
                    self.yang_parent_name = "ipv4-single-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ip-destination-address", ("ip_destination_address", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.IpDestinationAddress))])
                    self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.OwnerInformation))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ])
                    self.interface_name = None
                    self.sessiontype = None
                    self.local_discriminator = None

                    self.ip_destination_address = Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.IpDestinationAddress()
                    self.ip_destination_address.parent = self
                    self._children_name_map["ip_destination_address"] = "ip-destination-address"
                    self._children_yang_names.add("ip-destination-address")

                    self.owner_information = YList(self)
                    self._segment_path = lambda: "association-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation, ['interface_name', 'sessiontype', 'local_discriminator'], name, value)


                class IpDestinationAddress(Entity):
                    """
                    IPv4/v6 dest address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.IpDestinationAddress, self).__init__()

                        self.yang_name = "ip-destination-address"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "ip-destination-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.IpDestinationAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class OwnerInformation(Entity):
                    """
                    Client applications owning the session
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.OwnerInformation, self).__init__()

                        self.yang_name = "owner-information"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', YLeaf(YType.uint32, 'interval')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                            ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                            ('name', YLeaf(YType.str, 'name')),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.adjusted_interval = None
                        self.adjusted_detection_multiplier = None
                        self.name = None
                        self._segment_path = lambda: "owner-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-details/ipv4-single-hop-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail.AssociationInformation.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


    class Ipv4MultiHopSessionBriefs(Entity):
        """
        Table of brief information about all IPv4
        multihop BFD sessions in the System
        
        .. attribute:: ipv4_multi_hop_session_brief
        
        	Brief information for a single IPv4 multihop BFD session
        	**type**\: list of  		 :py:class:`Ipv4MultiHopSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4MultiHopSessionBriefs, self).__init__()

            self.yang_name = "ipv4-multi-hop-session-briefs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4-multi-hop-session-brief", ("ipv4_multi_hop_session_brief", Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief))])
            self._leafs = OrderedDict()

            self.ipv4_multi_hop_session_brief = YList(self)
            self._segment_path = lambda: "ipv4-multi-hop-session-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4MultiHopSessionBriefs, [], name, value)


        class Ipv4MultiHopSessionBrief(Entity):
            """
            Brief information for a single IPv4 multihop
            BFD session
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation>`
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief, self).__init__()

                self.yang_name = "ipv4-multi-hop-session-brief"
                self.yang_parent_name = "ipv4-multi-hop-session-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-brief-information", ("status_brief_information", Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('session_flags', YLeaf(YType.uint32, 'session-flags')),
                ])
                self.source_address = None
                self.destination_address = None
                self.location = None
                self.vrf_name = None
                self.node_id = None
                self.state = None
                self.session_type = None
                self.session_subtype = None
                self.session_flags = None

                self.status_brief_information = Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self._children_name_map["status_brief_information"] = "status-brief-information"
                self._children_yang_names.add("status-brief-information")
                self._segment_path = lambda: "ipv4-multi-hop-session-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief, ['source_address', 'destination_address', 'location', 'vrf_name', 'node_id', 'state', 'session_type', 'session_subtype', 'session_flags'], name, value)


            class StatusBriefInformation(Entity):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation, self).__init__()

                    self.yang_name = "status-brief-information"
                    self.yang_parent_name = "ipv4-multi-hop-session-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.async_interval_multiplier = Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                    self._children_yang_names.add("async-interval-multiplier")

                    self.echo_interval_multiplier = Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self
                    self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                    self._children_yang_names.add("echo-interval-multiplier")
                    self._segment_path = lambda: "status-brief-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-briefs/ipv4-multi-hop-session-brief/%s" % self._segment_path()


                class AsyncIntervalMultiplier(Entity):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                        self.yang_name = "async-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                            ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_remote_transmit_interval = None
                        self.negotiated_local_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "async-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-briefs/ipv4-multi-hop-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class EchoIntervalMultiplier(Entity):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                        self.yang_name = "echo-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "echo-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-session-briefs/ipv4-multi-hop-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


    class GenericSummaries(Entity):
        """
        Generic summary information about BFD location
        
        .. attribute:: generic_summary
        
        	Generic summary information for bfd location table
        	**type**\: list of  		 :py:class:`GenericSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.GenericSummaries.GenericSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.GenericSummaries, self).__init__()

            self.yang_name = "generic-summaries"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("generic-summary", ("generic_summary", Bfd.GenericSummaries.GenericSummary))])
            self._leafs = OrderedDict()

            self.generic_summary = YList(self)
            self._segment_path = lambda: "generic-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.GenericSummaries, [], name, value)


        class GenericSummary(Entity):
            """
            Generic summary information for bfd location
            table
            
            .. attribute:: location  (key)
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: node_id
            
            	Node ID
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: pps_allocated_value
            
            	Allocated PPS value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ppsmp_allocated_value
            
            	Allocated MP PPS value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pps_max_value
            
            	Max PPS value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ppsmp_max_value
            
            	Max MP PPS value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_session_number
            
            	Total Session Number
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: mp_session_number
            
            	MP Session Number
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: max_session_number
            
            	Max Session Number
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pps_all_percentage
            
            	All PPS percentage
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: percentage
            
            .. attribute:: ppsmp_percentage
            
            	MP PPS percentage
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: percentage
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.GenericSummaries.GenericSummary, self).__init__()

                self.yang_name = "generic-summary"
                self.yang_parent_name = "generic-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['location']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('location', YLeaf(YType.str, 'location')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('pps_allocated_value', YLeaf(YType.uint32, 'pps-allocated-value')),
                    ('ppsmp_allocated_value', YLeaf(YType.uint32, 'ppsmp-allocated-value')),
                    ('pps_max_value', YLeaf(YType.uint32, 'pps-max-value')),
                    ('ppsmp_max_value', YLeaf(YType.uint32, 'ppsmp-max-value')),
                    ('total_session_number', YLeaf(YType.uint32, 'total-session-number')),
                    ('mp_session_number', YLeaf(YType.uint32, 'mp-session-number')),
                    ('max_session_number', YLeaf(YType.uint32, 'max-session-number')),
                    ('pps_all_percentage', YLeaf(YType.uint32, 'pps-all-percentage')),
                    ('ppsmp_percentage', YLeaf(YType.uint32, 'ppsmp-percentage')),
                ])
                self.location = None
                self.node_id = None
                self.pps_allocated_value = None
                self.ppsmp_allocated_value = None
                self.pps_max_value = None
                self.ppsmp_max_value = None
                self.total_session_number = None
                self.mp_session_number = None
                self.max_session_number = None
                self.pps_all_percentage = None
                self.ppsmp_percentage = None
                self._segment_path = lambda: "generic-summary" + "[location='" + str(self.location) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/generic-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.GenericSummaries.GenericSummary, ['location', 'node_id', 'pps_allocated_value', 'ppsmp_allocated_value', 'pps_max_value', 'ppsmp_max_value', 'total_session_number', 'mp_session_number', 'max_session_number', 'pps_all_percentage', 'ppsmp_percentage'], name, value)


    class Ipv6SingleHopMultiPaths(Entity):
        """
        IPv6 single hop multipath
        
        .. attribute:: ipv6_single_hop_multi_path
        
        	IPv6 single hop multipath table
        	**type**\: list of  		 :py:class:`Ipv6SingleHopMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6SingleHopMultiPaths, self).__init__()

            self.yang_name = "ipv6-single-hop-multi-paths"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv6-single-hop-multi-path", ("ipv6_single_hop_multi_path", Bfd.Ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath))])
            self._leafs = OrderedDict()

            self.ipv6_single_hop_multi_path = YList(self)
            self._segment_path = lambda: "ipv6-single-hop-multi-paths"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv6SingleHopMultiPaths, [], name, value)


        class Ipv6SingleHopMultiPath(Entity):
            """
            IPv6 single hop multipath table
            
            .. attribute:: interface_name
            
            	Interface name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: destination_address
            
            	Destination address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath, self).__init__()

                self.yang_name = "ipv6-single-hop-multi-path"
                self.yang_parent_name = "ipv6-single-hop-multi-paths"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('incoming_label_xr', YLeaf(YType.uint32, 'incoming-label-xr')),
                    ('session_interface_name', YLeaf(YType.str, 'session-interface-name')),
                ])
                self.interface_name = None
                self.destination_address = None
                self.location = None
                self.session_subtype = None
                self.state = None
                self.local_discriminator = None
                self.node_id = None
                self.incoming_label_xr = None
                self.session_interface_name = None
                self._segment_path = lambda: "ipv6-single-hop-multi-path"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-multi-paths/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath, ['interface_name', 'destination_address', 'location', 'session_subtype', 'state', 'local_discriminator', 'node_id', 'incoming_label_xr', 'session_interface_name'], name, value)


    class Ipv4SingleHopNodeLocationSummaries(Entity):
        """
        Table of summary information about BFD IPv4
        singlehop sessions per location
        
        .. attribute:: ipv4_single_hop_node_location_summary
        
        	Summary information for BFD IPv4 singlehop sessions for location
        	**type**\: list of  		 :py:class:`Ipv4SingleHopNodeLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4SingleHopNodeLocationSummaries, self).__init__()

            self.yang_name = "ipv4-single-hop-node-location-summaries"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4-single-hop-node-location-summary", ("ipv4_single_hop_node_location_summary", Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary))])
            self._leafs = OrderedDict()

            self.ipv4_single_hop_node_location_summary = YList(self)
            self._segment_path = lambda: "ipv4-single-hop-node-location-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4SingleHopNodeLocationSummaries, [], name, value)


        class Ipv4SingleHopNodeLocationSummary(Entity):
            """
            Summary information for BFD IPv4 singlehop
            sessions for location
            
            .. attribute:: location  (key)
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary, self).__init__()

                self.yang_name = "ipv4-single-hop-node-location-summary"
                self.yang_parent_name = "ipv4-single-hop-node-location-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['location']
                self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary.SessionState))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('location', YLeaf(YType.str, 'location')),
                ])
                self.location = None

                self.session_state = Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary.SessionState()
                self.session_state.parent = self
                self._children_name_map["session_state"] = "session-state"
                self._children_yang_names.add("session-state")
                self._segment_path = lambda: "ipv4-single-hop-node-location-summary" + "[location='" + str(self.location) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-node-location-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary, ['location'], name, value)


            class SessionState(Entity):
                """
                Statistics of states for sessions
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary.SessionState, self).__init__()

                    self.yang_name = "session-state"
                    self.yang_parent_name = "ipv4-single-hop-node-location-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_count', YLeaf(YType.uint32, 'total-count')),
                        ('up_count', YLeaf(YType.uint32, 'up-count')),
                        ('down_count', YLeaf(YType.uint32, 'down-count')),
                        ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                        ('retry_count', YLeaf(YType.uint32, 'retry-count')),
                        ('standby_count', YLeaf(YType.uint32, 'standby-count')),
                    ])
                    self.total_count = None
                    self.up_count = None
                    self.down_count = None
                    self.unknown_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self._segment_path = lambda: "session-state"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary.SessionState, ['total_count', 'up_count', 'down_count', 'unknown_count', 'retry_count', 'standby_count'], name, value)


    class LabelSummary(Entity):
        """
        Summary information of Label BFD
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.LabelSummary, self).__init__()

            self.yang_name = "label-summary"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.LabelSummary.SessionState))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.session_state = Bfd.LabelSummary.SessionState()
            self.session_state.parent = self
            self._children_name_map["session_state"] = "session-state"
            self._children_yang_names.add("session-state")
            self._segment_path = lambda: "label-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class SessionState(Entity):
            """
            Statistics of states for sessions
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.LabelSummary.SessionState, self).__init__()

                self.yang_name = "session-state"
                self.yang_parent_name = "label-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total_count', YLeaf(YType.uint32, 'total-count')),
                    ('down_count', YLeaf(YType.uint32, 'down-count')),
                    ('up_count', YLeaf(YType.uint32, 'up-count')),
                    ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                ])
                self.total_count = None
                self.down_count = None
                self.up_count = None
                self.unknown_count = None
                self._segment_path = lambda: "session-state"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.LabelSummary.SessionState, ['total_count', 'down_count', 'up_count', 'unknown_count'], name, value)


    class Ipv4BfDoMplsteHeadSessionBriefs(Entity):
        """
        Table of brief information about all IPv4 BFD
        over MPLS\-TE Head sessions in the System
        
        .. attribute:: ipv4bf_do_mplste_head_session_brief
        
        	Brief information for a single IPv4 BFD over MPLS\-TE Head session
        	**type**\: list of  		 :py:class:`Ipv4BfDoMplsteHeadSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfDoMplsteHeadSessionBriefs, self).__init__()

            self.yang_name = "ipv4bf-do-mplste-head-session-briefs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4bf-do-mplste-head-session-brief", ("ipv4bf_do_mplste_head_session_brief", Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief))])
            self._leafs = OrderedDict()

            self.ipv4bf_do_mplste_head_session_brief = YList(self)
            self._segment_path = lambda: "ipv4bf-do-mplste-head-session-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionBriefs, [], name, value)


        class Ipv4BfDoMplsteHeadSessionBrief(Entity):
            """
            Brief information for a single IPv4 BFD over
            MPLS\-TE Head session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation>`
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief, self).__init__()

                self.yang_name = "ipv4bf-do-mplste-head-session-brief"
                self.yang_parent_name = "ipv4bf-do-mplste-head-session-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-brief-information", ("status_brief_information", Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('incoming_label', YLeaf(YType.int32, 'incoming-label')),
                    ('fe_ctype', YLeaf(YType.int32, 'fe-ctype')),
                    ('fec_subgroup_id', YLeaf(YType.int32, 'fec-subgroup-id')),
                    ('feclspid', YLeaf(YType.int32, 'feclspid')),
                    ('fec_tunnel_id', YLeaf(YType.int32, 'fec-tunnel-id')),
                    ('fec_extended_tunnel_id', YLeaf(YType.str, 'fec-extended-tunnel-id')),
                    ('fec_source', YLeaf(YType.str, 'fec-source')),
                    ('fec_destination', YLeaf(YType.str, 'fec-destination')),
                    ('fecp2mpid', YLeaf(YType.int32, 'fecp2mpid')),
                    ('fec_subgroup_originator', YLeaf(YType.str, 'fec-subgroup-originator')),
                    ('fec_ctype', YLeaf(YType.int32, 'fec-ctype')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('session_flags', YLeaf(YType.uint32, 'session-flags')),
                ])
                self.interface_name = None
                self.vrf_name = None
                self.incoming_label = None
                self.fe_ctype = None
                self.fec_subgroup_id = None
                self.feclspid = None
                self.fec_tunnel_id = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_destination = None
                self.fecp2mpid = None
                self.fec_subgroup_originator = None
                self.fec_ctype = None
                self.location = None
                self.node_id = None
                self.state = None
                self.session_type = None
                self.session_subtype = None
                self.session_flags = None

                self.status_brief_information = Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self._children_name_map["status_brief_information"] = "status-brief-information"
                self._children_yang_names.add("status-brief-information")
                self._segment_path = lambda: "ipv4bf-do-mplste-head-session-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief, ['interface_name', 'vrf_name', 'incoming_label', 'fe_ctype', 'fec_subgroup_id', 'feclspid', 'fec_tunnel_id', 'fec_extended_tunnel_id', 'fec_source', 'fec_destination', 'fecp2mpid', 'fec_subgroup_originator', 'fec_ctype', 'location', 'node_id', 'state', 'session_type', 'session_subtype', 'session_flags'], name, value)


            class StatusBriefInformation(Entity):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation, self).__init__()

                    self.yang_name = "status-brief-information"
                    self.yang_parent_name = "ipv4bf-do-mplste-head-session-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.EchoIntervalMultiplier))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.async_interval_multiplier = Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                    self._children_yang_names.add("async-interval-multiplier")

                    self.echo_interval_multiplier = Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self
                    self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                    self._children_yang_names.add("echo-interval-multiplier")
                    self._segment_path = lambda: "status-brief-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-briefs/ipv4bf-do-mplste-head-session-brief/%s" % self._segment_path()


                class AsyncIntervalMultiplier(Entity):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                        self.yang_name = "async-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                            ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_remote_transmit_interval = None
                        self.negotiated_local_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "async-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-briefs/ipv4bf-do-mplste-head-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class EchoIntervalMultiplier(Entity):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                        self.yang_name = "echo-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "echo-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-briefs/ipv4bf-do-mplste-head-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


    class Ipv4BfDoMplsteTailSessionDetails(Entity):
        """
        Table of detailed information about all IPv4 BFD
        over MPLS\-TE Tail sessions in the System
        
        .. attribute:: ipv4bf_do_mplste_tail_session_detail
        
        	Detailed information for a single IPv4 BFD over MPLS\-TE Tail session
        	**type**\: list of  		 :py:class:`Ipv4BfDoMplsteTailSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfDoMplsteTailSessionDetails, self).__init__()

            self.yang_name = "ipv4bf-do-mplste-tail-session-details"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4bf-do-mplste-tail-session-detail", ("ipv4bf_do_mplste_tail_session_detail", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail))])
            self._leafs = OrderedDict()

            self.ipv4bf_do_mplste_tail_session_detail = YList(self)
            self._segment_path = lambda: "ipv4bf-do-mplste-tail-session-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails, [], name, value)


        class Ipv4BfDoMplsteTailSessionDetail(Entity):
            """
            Detailed information for a single IPv4 BFD over
            MPLS\-TE Tail session
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:  :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:  :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState>`
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:  :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.OwnerInformation>`
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of  		 :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail, self).__init__()

                self.yang_name = "ipv4bf-do-mplste-tail-session-detail"
                self.yang_parent_name = "ipv4bf-do-mplste-tail-session-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-information", ("status_information", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation)), ("mp-download-state", ("mp_download_state", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState)), ("lsp-ping-info", ("lsp_ping_info", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo))])
                self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.OwnerInformation)), ("association-information", ("association_information", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation))])
                self._leafs = OrderedDict([
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('incoming_label', YLeaf(YType.int32, 'incoming-label')),
                    ('fe_ctype', YLeaf(YType.int32, 'fe-ctype')),
                    ('fec_subgroup_id', YLeaf(YType.int32, 'fec-subgroup-id')),
                    ('feclspid', YLeaf(YType.int32, 'feclspid')),
                    ('fec_tunnel_id', YLeaf(YType.int32, 'fec-tunnel-id')),
                    ('fec_extended_tunnel_id', YLeaf(YType.str, 'fec-extended-tunnel-id')),
                    ('fec_source', YLeaf(YType.str, 'fec-source')),
                    ('fec_destination', YLeaf(YType.str, 'fec-destination')),
                    ('fecp2mpid', YLeaf(YType.int32, 'fecp2mpid')),
                    ('fec_subgroup_originator', YLeaf(YType.str, 'fec-subgroup-originator')),
                    ('fec_ctype', YLeaf(YType.int32, 'fec-ctype')),
                    ('location', YLeaf(YType.str, 'location')),
                ])
                self.vrf_name = None
                self.incoming_label = None
                self.fe_ctype = None
                self.fec_subgroup_id = None
                self.feclspid = None
                self.fec_tunnel_id = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_destination = None
                self.fecp2mpid = None
                self.fec_subgroup_originator = None
                self.fec_ctype = None
                self.location = None

                self.status_information = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation()
                self.status_information.parent = self
                self._children_name_map["status_information"] = "status-information"
                self._children_yang_names.add("status-information")

                self.mp_download_state = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self._children_name_map["mp_download_state"] = "mp-download-state"
                self._children_yang_names.add("mp-download-state")

                self.lsp_ping_info = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self._children_name_map["lsp_ping_info"] = "lsp-ping-info"
                self._children_yang_names.add("lsp-ping-info")

                self.owner_information = YList(self)
                self.association_information = YList(self)
                self._segment_path = lambda: "ipv4bf-do-mplste-tail-session-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail, ['vrf_name', 'incoming_label', 'fe_ctype', 'fec_subgroup_id', 'feclspid', 'fec_tunnel_id', 'fec_extended_tunnel_id', 'fec_source', 'fec_destination', 'fecp2mpid', 'fec_subgroup_originator', 'fec_ctype', 'location'], name, value)


            class StatusInformation(Entity):
                """
                Session status information
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:  :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:  :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.TransmitPacket>`
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:  :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\: str
                
                .. attribute:: state
                
                	State
                	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation, self).__init__()

                    self.yang_name = "status-information"
                    self.yang_parent_name = "ipv4bf-do-mplste-tail-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("source-address", ("source_address", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.SourceAddress)), ("last-state-change", ("last_state_change", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.LastStateChange)), ("transmit-packet", ("transmit_packet", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.TransmitPacket)), ("receive-packet", ("receive_packet", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.ReceivePacket)), ("status-brief-information", ("status_brief_information", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation)), ("async-transmit-statistics", ("async_transmit_statistics", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncTransmitStatistics)), ("async-receive-statistics", ("async_receive_statistics", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncReceiveStatistics)), ("echo-transmit-statistics", ("echo_transmit_statistics", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoTransmitStatistics)), ("echo-received-statistics", ("echo_received_statistics", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoReceivedStatistics))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                        ('state', YLeaf(YType.enumeration, 'state')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                        ('remote_discriminator', YLeaf(YType.uint32, 'remote-discriminator')),
                        ('to_up_state_count', YLeaf(YType.uint32, 'to-up-state-count')),
                        ('desired_minimum_echo_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-echo-transmit-interval')),
                        ('remote_negotiated_interval', YLeaf(YType.uint32, 'remote-negotiated-interval')),
                        ('latency_number', YLeaf(YType.uint32, 'latency-number')),
                        ('latency_minimum', YLeaf(YType.uint32, 'latency-minimum')),
                        ('latency_maximum', YLeaf(YType.uint32, 'latency-maximum')),
                        ('latency_average', YLeaf(YType.uint32, 'latency-average')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                        ('internal_label', YLeaf(YType.uint32, 'internal-label')),
                    ])
                    self.sessiontype = None
                    self.session_subtype = None
                    self.state = None
                    self.local_discriminator = None
                    self.remote_discriminator = None
                    self.to_up_state_count = None
                    self.desired_minimum_echo_transmit_interval = None
                    self.remote_negotiated_interval = None
                    self.latency_number = None
                    self.latency_minimum = None
                    self.latency_maximum = None
                    self.latency_average = None
                    self.node_id = None
                    self.internal_label = None

                    self.source_address = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self._children_name_map["source_address"] = "source-address"
                    self._children_yang_names.add("source-address")

                    self.last_state_change = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self._children_name_map["last_state_change"] = "last-state-change"
                    self._children_yang_names.add("last-state-change")

                    self.transmit_packet = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self
                    self._children_name_map["transmit_packet"] = "transmit-packet"
                    self._children_yang_names.add("transmit-packet")

                    self.receive_packet = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self._children_name_map["receive_packet"] = "receive-packet"
                    self._children_yang_names.add("receive-packet")

                    self.status_brief_information = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self._children_name_map["status_brief_information"] = "status-brief-information"
                    self._children_yang_names.add("status-brief-information")

                    self.async_transmit_statistics = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self._children_name_map["async_transmit_statistics"] = "async-transmit-statistics"
                    self._children_yang_names.add("async-transmit-statistics")

                    self.async_receive_statistics = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self._children_name_map["async_receive_statistics"] = "async-receive-statistics"
                    self._children_yang_names.add("async-receive-statistics")

                    self.echo_transmit_statistics = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self._children_name_map["echo_transmit_statistics"] = "echo-transmit-statistics"
                    self._children_yang_names.add("echo-transmit-statistics")

                    self.echo_received_statistics = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self._children_name_map["echo_received_statistics"] = "echo-received-statistics"
                    self._children_yang_names.add("echo-received-statistics")
                    self._segment_path = lambda: "status-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation, ['sessiontype', 'session_subtype', 'state', 'local_discriminator', 'remote_discriminator', 'to_up_state_count', 'desired_minimum_echo_transmit_interval', 'remote_negotiated_interval', 'latency_number', 'latency_minimum', 'latency_maximum', 'latency_average', 'node_id', 'internal_label'], name, value)


                class SourceAddress(Entity):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.SourceAddress, self).__init__()

                        self.yang_name = "source-address"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "source-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.SourceAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class LastStateChange(Entity):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.LastStateChange, self).__init__()

                        self.yang_name = "last-state-change"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('days', YLeaf(YType.uint32, 'days')),
                            ('hours', YLeaf(YType.uint8, 'hours')),
                            ('minutes', YLeaf(YType.uint8, 'minutes')),
                            ('seconds', YLeaf(YType.uint8, 'seconds')),
                        ])
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None
                        self._segment_path = lambda: "last-state-change"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.LastStateChange, ['days', 'hours', 'minutes', 'seconds'], name, value)


                class TransmitPacket(Entity):
                    """
                    Transmit Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.TransmitPacket, self).__init__()

                        self.yang_name = "transmit-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "transmit-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.TransmitPacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class ReceivePacket(Entity):
                    """
                    Receive Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.ReceivePacket, self).__init__()

                        self.yang_name = "receive-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "receive-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.ReceivePacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class StatusBriefInformation(Entity):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation, self).__init__()

                        self.yang_name = "status-brief-information"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.async_interval_multiplier = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                        self._children_yang_names.add("async-interval-multiplier")

                        self.echo_interval_multiplier = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self
                        self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                        self._children_yang_names.add("echo-interval-multiplier")
                        self._segment_path = lambda: "status-brief-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/%s" % self._segment_path()


                    class AsyncIntervalMultiplier(Entity):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                            self.yang_name = "async-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                                ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_remote_transmit_interval = None
                            self.negotiated_local_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "async-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                    class EchoIntervalMultiplier(Entity):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                            self.yang_name = "echo-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "echo-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class AsyncTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncTransmitStatistics, self).__init__()

                        self.yang_name = "async-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class AsyncReceiveStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncReceiveStatistics, self).__init__()

                        self.yang_name = "async-receive-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-receive-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.AsyncReceiveStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoTransmitStatistics, self).__init__()

                        self.yang_name = "echo-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoReceivedStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoReceivedStatistics, self).__init__()

                        self.yang_name = "echo-received-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-received-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.StatusInformation.EchoReceivedStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


            class MpDownloadState(Entity):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:  :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:  :py:class:`BfdMpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadState>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState, self).__init__()

                    self.yang_name = "mp-download-state"
                    self.yang_parent_name = "ipv4bf-do-mplste-tail-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("change-time", ("change_time", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState.ChangeTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('mp_download_state', YLeaf(YType.enumeration, 'mp-download-state')),
                    ])
                    self.mp_download_state = None

                    self.change_time = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self._children_name_map["change_time"] = "change-time"
                    self._children_yang_names.add("change-time")
                    self._segment_path = lambda: "mp-download-state"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState, ['mp_download_state'], name, value)


                class ChangeTime(Entity):
                    """
                    Change time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState.ChangeTime, self).__init__()

                        self.yang_name = "change-time"
                        self.yang_parent_name = "mp-download-state"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "change-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/mp-download-state/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.MpDownloadState.ChangeTime, ['seconds', 'nanoseconds'], name, value)


            class LspPingInfo(Entity):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:  :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:  :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:  :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\: str
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\: str
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\: str
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo, self).__init__()

                    self.yang_name = "lsp-ping-info"
                    self.yang_parent_name = "ipv4bf-do-mplste-tail-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("lsp-ping-tx-last-time", ("lsp_ping_tx_last_time", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastTime)), ("lsp-ping-tx-last-error-time", ("lsp_ping_tx_last_error_time", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastErrorTime)), ("lsp-ping-rx-last-time", ("lsp_ping_rx_last_time", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingRxLastTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lsp_ping_tx_count', YLeaf(YType.uint32, 'lsp-ping-tx-count')),
                        ('lsp_ping_tx_error_count', YLeaf(YType.uint32, 'lsp-ping-tx-error-count')),
                        ('lsp_ping_tx_last_rc', YLeaf(YType.str, 'lsp-ping-tx-last-rc')),
                        ('lsp_ping_tx_last_error_rc', YLeaf(YType.str, 'lsp-ping-tx-last-error-rc')),
                        ('lsp_ping_rx_last_discr', YLeaf(YType.uint32, 'lsp-ping-rx-last-discr')),
                        ('lsp_ping_rx_count', YLeaf(YType.uint32, 'lsp-ping-rx-count')),
                        ('lsp_ping_rx_last_code', YLeaf(YType.uint8, 'lsp-ping-rx-last-code')),
                        ('lsp_ping_rx_last_subcode', YLeaf(YType.uint8, 'lsp-ping-rx-last-subcode')),
                        ('lsp_ping_rx_last_output', YLeaf(YType.str, 'lsp-ping-rx-last-output')),
                    ])
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_output = None

                    self.lsp_ping_tx_last_time = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_time"] = "lsp-ping-tx-last-time"
                    self._children_yang_names.add("lsp-ping-tx-last-time")

                    self.lsp_ping_tx_last_error_time = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_error_time"] = "lsp-ping-tx-last-error-time"
                    self._children_yang_names.add("lsp-ping-tx-last-error-time")

                    self.lsp_ping_rx_last_time = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self._children_name_map["lsp_ping_rx_last_time"] = "lsp-ping-rx-last-time"
                    self._children_yang_names.add("lsp-ping-rx-last-time")
                    self._segment_path = lambda: "lsp-ping-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo, ['lsp_ping_tx_count', 'lsp_ping_tx_error_count', 'lsp_ping_tx_last_rc', 'lsp_ping_tx_last_error_rc', 'lsp_ping_rx_last_discr', 'lsp_ping_rx_count', 'lsp_ping_rx_last_code', 'lsp_ping_rx_last_subcode', 'lsp_ping_rx_last_output'], name, value)


                class LspPingTxLastTime(Entity):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingTxLastErrorTime(Entity):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastErrorTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-error-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-error-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingTxLastErrorTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingRxLastTime(Entity):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingRxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-rx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-rx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.LspPingInfo.LspPingRxLastTime, ['seconds', 'nanoseconds'], name, value)


            class OwnerInformation(Entity):
                """
                Client applications owning the session
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: name
                
                	Client process name
                	**type**\: str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.OwnerInformation, self).__init__()

                    self.yang_name = "owner-information"
                    self.yang_parent_name = "ipv4bf-do-mplste-tail-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interval', YLeaf(YType.uint32, 'interval')),
                        ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                        ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                        ('name', YLeaf(YType.str, 'name')),
                    ])
                    self.interval = None
                    self.detection_multiplier = None
                    self.adjusted_interval = None
                    self.adjusted_detection_multiplier = None
                    self.name = None
                    self._segment_path = lambda: "owner-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


            class AssociationInformation(Entity):
                """
                Association session information
                
                .. attribute:: ip_destination_address
                
                	IPv4/v6 dest address
                	**type**\:  :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.IpDestinationAddress>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.OwnerInformation>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation, self).__init__()

                    self.yang_name = "association-information"
                    self.yang_parent_name = "ipv4bf-do-mplste-tail-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ip-destination-address", ("ip_destination_address", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.IpDestinationAddress))])
                    self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.OwnerInformation))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ])
                    self.interface_name = None
                    self.sessiontype = None
                    self.local_discriminator = None

                    self.ip_destination_address = Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.IpDestinationAddress()
                    self.ip_destination_address.parent = self
                    self._children_name_map["ip_destination_address"] = "ip-destination-address"
                    self._children_yang_names.add("ip-destination-address")

                    self.owner_information = YList(self)
                    self._segment_path = lambda: "association-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation, ['interface_name', 'sessiontype', 'local_discriminator'], name, value)


                class IpDestinationAddress(Entity):
                    """
                    IPv4/v6 dest address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.IpDestinationAddress, self).__init__()

                        self.yang_name = "ip-destination-address"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "ip-destination-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.IpDestinationAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class OwnerInformation(Entity):
                    """
                    Client applications owning the session
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.OwnerInformation, self).__init__()

                        self.yang_name = "owner-information"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', YLeaf(YType.uint32, 'interval')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                            ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                            ('name', YLeaf(YType.str, 'name')),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.adjusted_interval = None
                        self.adjusted_detection_multiplier = None
                        self.name = None
                        self._segment_path = lambda: "owner-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-details/ipv4bf-do-mplste-tail-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail.AssociationInformation.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


    class Ipv4MultiHopNodeLocationSummaries(Entity):
        """
        Table of summary information about BFD IPv4
        multihop sessions per location
        
        .. attribute:: ipv4_multi_hop_node_location_summary
        
        	Summary information for BFD IPv4 multihop sessions for location
        	**type**\: list of  		 :py:class:`Ipv4MultiHopNodeLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4MultiHopNodeLocationSummaries, self).__init__()

            self.yang_name = "ipv4-multi-hop-node-location-summaries"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4-multi-hop-node-location-summary", ("ipv4_multi_hop_node_location_summary", Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary))])
            self._leafs = OrderedDict()

            self.ipv4_multi_hop_node_location_summary = YList(self)
            self._segment_path = lambda: "ipv4-multi-hop-node-location-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4MultiHopNodeLocationSummaries, [], name, value)


        class Ipv4MultiHopNodeLocationSummary(Entity):
            """
            Summary information for BFD IPv4 multihop
            sessions for location
            
            .. attribute:: location  (key)
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary, self).__init__()

                self.yang_name = "ipv4-multi-hop-node-location-summary"
                self.yang_parent_name = "ipv4-multi-hop-node-location-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['location']
                self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary.SessionState))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('location', YLeaf(YType.str, 'location')),
                ])
                self.location = None

                self.session_state = Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary.SessionState()
                self.session_state.parent = self
                self._children_name_map["session_state"] = "session-state"
                self._children_yang_names.add("session-state")
                self._segment_path = lambda: "ipv4-multi-hop-node-location-summary" + "[location='" + str(self.location) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-node-location-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary, ['location'], name, value)


            class SessionState(Entity):
                """
                Statistics of states for sessions
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary.SessionState, self).__init__()

                    self.yang_name = "session-state"
                    self.yang_parent_name = "ipv4-multi-hop-node-location-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_count', YLeaf(YType.uint32, 'total-count')),
                        ('up_count', YLeaf(YType.uint32, 'up-count')),
                        ('down_count', YLeaf(YType.uint32, 'down-count')),
                        ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                        ('retry_count', YLeaf(YType.uint32, 'retry-count')),
                        ('standby_count', YLeaf(YType.uint32, 'standby-count')),
                    ])
                    self.total_count = None
                    self.up_count = None
                    self.down_count = None
                    self.unknown_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self._segment_path = lambda: "session-state"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary.SessionState, ['total_count', 'up_count', 'down_count', 'unknown_count', 'retry_count', 'standby_count'], name, value)


    class Ipv4BfDoMplsteTailSessionBriefs(Entity):
        """
        Table of brief information about all IPv4 BFD
        over MPLS\-TE Tail sessions in the System
        
        .. attribute:: ipv4bf_do_mplste_tail_session_brief
        
        	Brief information for a single IPv4 BFD over MPLS\-TE session
        	**type**\: list of  		 :py:class:`Ipv4BfDoMplsteTailSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfDoMplsteTailSessionBriefs, self).__init__()

            self.yang_name = "ipv4bf-do-mplste-tail-session-briefs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4bf-do-mplste-tail-session-brief", ("ipv4bf_do_mplste_tail_session_brief", Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief))])
            self._leafs = OrderedDict()

            self.ipv4bf_do_mplste_tail_session_brief = YList(self)
            self._segment_path = lambda: "ipv4bf-do-mplste-tail-session-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionBriefs, [], name, value)


        class Ipv4BfDoMplsteTailSessionBrief(Entity):
            """
            Brief information for a single IPv4 BFD over
            MPLS\-TE session
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation>`
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief, self).__init__()

                self.yang_name = "ipv4bf-do-mplste-tail-session-brief"
                self.yang_parent_name = "ipv4bf-do-mplste-tail-session-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-brief-information", ("status_brief_information", Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('incoming_label', YLeaf(YType.int32, 'incoming-label')),
                    ('fe_ctype', YLeaf(YType.int32, 'fe-ctype')),
                    ('fec_subgroup_id', YLeaf(YType.int32, 'fec-subgroup-id')),
                    ('feclspid', YLeaf(YType.int32, 'feclspid')),
                    ('fec_tunnel_id', YLeaf(YType.int32, 'fec-tunnel-id')),
                    ('fec_extended_tunnel_id', YLeaf(YType.str, 'fec-extended-tunnel-id')),
                    ('fec_source', YLeaf(YType.str, 'fec-source')),
                    ('fec_destination', YLeaf(YType.str, 'fec-destination')),
                    ('fecp2mpid', YLeaf(YType.int32, 'fecp2mpid')),
                    ('fec_subgroup_originator', YLeaf(YType.str, 'fec-subgroup-originator')),
                    ('fec_ctype', YLeaf(YType.int32, 'fec-ctype')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('session_flags', YLeaf(YType.uint32, 'session-flags')),
                ])
                self.vrf_name = None
                self.incoming_label = None
                self.fe_ctype = None
                self.fec_subgroup_id = None
                self.feclspid = None
                self.fec_tunnel_id = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_destination = None
                self.fecp2mpid = None
                self.fec_subgroup_originator = None
                self.fec_ctype = None
                self.location = None
                self.node_id = None
                self.state = None
                self.session_type = None
                self.session_subtype = None
                self.session_flags = None

                self.status_brief_information = Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self._children_name_map["status_brief_information"] = "status-brief-information"
                self._children_yang_names.add("status-brief-information")
                self._segment_path = lambda: "ipv4bf-do-mplste-tail-session-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief, ['vrf_name', 'incoming_label', 'fe_ctype', 'fec_subgroup_id', 'feclspid', 'fec_tunnel_id', 'fec_extended_tunnel_id', 'fec_source', 'fec_destination', 'fecp2mpid', 'fec_subgroup_originator', 'fec_ctype', 'location', 'node_id', 'state', 'session_type', 'session_subtype', 'session_flags'], name, value)


            class StatusBriefInformation(Entity):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation, self).__init__()

                    self.yang_name = "status-brief-information"
                    self.yang_parent_name = "ipv4bf-do-mplste-tail-session-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.EchoIntervalMultiplier))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.async_interval_multiplier = Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                    self._children_yang_names.add("async-interval-multiplier")

                    self.echo_interval_multiplier = Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self
                    self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                    self._children_yang_names.add("echo-interval-multiplier")
                    self._segment_path = lambda: "status-brief-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-briefs/ipv4bf-do-mplste-tail-session-brief/%s" % self._segment_path()


                class AsyncIntervalMultiplier(Entity):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                        self.yang_name = "async-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                            ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_remote_transmit_interval = None
                        self.negotiated_local_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "async-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-briefs/ipv4bf-do-mplste-tail-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class EchoIntervalMultiplier(Entity):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                        self.yang_name = "echo-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "echo-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-session-briefs/ipv4bf-do-mplste-tail-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


    class Ipv6MultiHopNodeLocationSummaries(Entity):
        """
        Table of summary information about BFD IPv6
        multihop sessions per location
        
        .. attribute:: ipv6_multi_hop_node_location_summary
        
        	Summary information for BFD IPv6 multihop sessions for location
        	**type**\: list of  		 :py:class:`Ipv6MultiHopNodeLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6MultiHopNodeLocationSummaries, self).__init__()

            self.yang_name = "ipv6-multi-hop-node-location-summaries"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv6-multi-hop-node-location-summary", ("ipv6_multi_hop_node_location_summary", Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary))])
            self._leafs = OrderedDict()

            self.ipv6_multi_hop_node_location_summary = YList(self)
            self._segment_path = lambda: "ipv6-multi-hop-node-location-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv6MultiHopNodeLocationSummaries, [], name, value)


        class Ipv6MultiHopNodeLocationSummary(Entity):
            """
            Summary information for BFD IPv6 multihop
            sessions for location
            
            .. attribute:: location  (key)
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary, self).__init__()

                self.yang_name = "ipv6-multi-hop-node-location-summary"
                self.yang_parent_name = "ipv6-multi-hop-node-location-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['location']
                self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary.SessionState))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('location', YLeaf(YType.str, 'location')),
                ])
                self.location = None

                self.session_state = Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary.SessionState()
                self.session_state.parent = self
                self._children_name_map["session_state"] = "session-state"
                self._children_yang_names.add("session-state")
                self._segment_path = lambda: "ipv6-multi-hop-node-location-summary" + "[location='" + str(self.location) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-node-location-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary, ['location'], name, value)


            class SessionState(Entity):
                """
                Statistics of states for sessions
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary.SessionState, self).__init__()

                    self.yang_name = "session-state"
                    self.yang_parent_name = "ipv6-multi-hop-node-location-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_count', YLeaf(YType.uint32, 'total-count')),
                        ('up_count', YLeaf(YType.uint32, 'up-count')),
                        ('down_count', YLeaf(YType.uint32, 'down-count')),
                        ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                        ('retry_count', YLeaf(YType.uint32, 'retry-count')),
                        ('standby_count', YLeaf(YType.uint32, 'standby-count')),
                    ])
                    self.total_count = None
                    self.up_count = None
                    self.down_count = None
                    self.unknown_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self._segment_path = lambda: "session-state"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary.SessionState, ['total_count', 'up_count', 'down_count', 'unknown_count', 'retry_count', 'standby_count'], name, value)


    class Ipv4MultiHopSummary(Entity):
        """
        Summary information of BFD IPv4 multihop
        sessions
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4MultiHopSummary, self).__init__()

            self.yang_name = "ipv4-multi-hop-summary"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv4MultiHopSummary.SessionState))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.session_state = Bfd.Ipv4MultiHopSummary.SessionState()
            self.session_state.parent = self
            self._children_name_map["session_state"] = "session-state"
            self._children_yang_names.add("session-state")
            self._segment_path = lambda: "ipv4-multi-hop-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class SessionState(Entity):
            """
            Statistics of states for sessions
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4MultiHopSummary.SessionState, self).__init__()

                self.yang_name = "session-state"
                self.yang_parent_name = "ipv4-multi-hop-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total_count', YLeaf(YType.uint32, 'total-count')),
                    ('down_count', YLeaf(YType.uint32, 'down-count')),
                    ('up_count', YLeaf(YType.uint32, 'up-count')),
                    ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                ])
                self.total_count = None
                self.down_count = None
                self.up_count = None
                self.unknown_count = None
                self._segment_path = lambda: "session-state"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4MultiHopSummary.SessionState, ['total_count', 'down_count', 'up_count', 'unknown_count'], name, value)


    class Ipv4SingleHopCounters(Entity):
        """
        IPv4 single hop Counters
        
        .. attribute:: ipv4_single_hop_packet_counters
        
        	Table of IPv4 single hop Packet counters
        	**type**\:  :py:class:`Ipv4SingleHopPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4SingleHopCounters, self).__init__()

            self.yang_name = "ipv4-single-hop-counters"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("ipv4-single-hop-packet-counters", ("ipv4_single_hop_packet_counters", Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.ipv4_single_hop_packet_counters = Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters()
            self.ipv4_single_hop_packet_counters.parent = self
            self._children_name_map["ipv4_single_hop_packet_counters"] = "ipv4-single-hop-packet-counters"
            self._children_yang_names.add("ipv4-single-hop-packet-counters")
            self._segment_path = lambda: "ipv4-single-hop-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class Ipv4SingleHopPacketCounters(Entity):
            """
            Table of IPv4 single hop Packet counters
            
            .. attribute:: ipv4_single_hop_packet_counter
            
            	Interface IPv4 single hop Packet counters
            	**type**\: list of  		 :py:class:`Ipv4SingleHopPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters, self).__init__()

                self.yang_name = "ipv4-single-hop-packet-counters"
                self.yang_parent_name = "ipv4-single-hop-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("ipv4-single-hop-packet-counter", ("ipv4_single_hop_packet_counter", Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter))])
                self._leafs = OrderedDict()

                self.ipv4_single_hop_packet_counter = YList(self)
                self._segment_path = lambda: "ipv4-single-hop-packet-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters, [], name, value)


            class Ipv4SingleHopPacketCounter(Entity):
                """
                Interface IPv4 single hop Packet counters
                
                .. attribute:: interface_name  (key)
                
                	Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:  :py:class:`BfdMgmtPktDisplay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplay>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter, self).__init__()

                    self.yang_name = "ipv4-single-hop-packet-counter"
                    self.yang_parent_name = "ipv4-single-hop-packet-counters"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('hello_transmit_count', YLeaf(YType.uint32, 'hello-transmit-count')),
                        ('hello_receive_count', YLeaf(YType.uint32, 'hello-receive-count')),
                        ('echo_transmit_count', YLeaf(YType.uint32, 'echo-transmit-count')),
                        ('echo_receive_count', YLeaf(YType.uint32, 'echo-receive-count')),
                        ('display_type', YLeaf(YType.enumeration, 'display-type')),
                    ])
                    self.interface_name = None
                    self.hello_transmit_count = None
                    self.hello_receive_count = None
                    self.echo_transmit_count = None
                    self.echo_receive_count = None
                    self.display_type = None
                    self._segment_path = lambda: "ipv4-single-hop-packet-counter" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-counters/ipv4-single-hop-packet-counters/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4SingleHopCounters.Ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter, ['interface_name', 'hello_transmit_count', 'hello_receive_count', 'echo_transmit_count', 'echo_receive_count', 'display_type'], name, value)


    class Ipv6MultiHopSessionDetails(Entity):
        """
        Table of detailed information about all IPv6
        multihop BFD sessions in the System 
        
        .. attribute:: ipv6_multi_hop_session_detail
        
        	Detailed information for a single IPv6 multihop BFD session
        	**type**\: list of  		 :py:class:`Ipv6MultiHopSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6MultiHopSessionDetails, self).__init__()

            self.yang_name = "ipv6-multi-hop-session-details"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv6-multi-hop-session-detail", ("ipv6_multi_hop_session_detail", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail))])
            self._leafs = OrderedDict()

            self.ipv6_multi_hop_session_detail = YList(self)
            self._segment_path = lambda: "ipv6-multi-hop-session-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails, [], name, value)


        class Ipv6MultiHopSessionDetail(Entity):
            """
            Detailed information for a single IPv6 multihop
            BFD session
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:  :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:  :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState>`
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:  :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.OwnerInformation>`
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of  		 :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail, self).__init__()

                self.yang_name = "ipv6-multi-hop-session-detail"
                self.yang_parent_name = "ipv6-multi-hop-session-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-information", ("status_information", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation)), ("mp-download-state", ("mp_download_state", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState)), ("lsp-ping-info", ("lsp_ping_info", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo))])
                self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.OwnerInformation)), ("association-information", ("association_information", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation))])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ])
                self.source_address = None
                self.destination_address = None
                self.location = None
                self.vrf_name = None

                self.status_information = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation()
                self.status_information.parent = self
                self._children_name_map["status_information"] = "status-information"
                self._children_yang_names.add("status-information")

                self.mp_download_state = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self._children_name_map["mp_download_state"] = "mp-download-state"
                self._children_yang_names.add("mp-download-state")

                self.lsp_ping_info = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self._children_name_map["lsp_ping_info"] = "lsp-ping-info"
                self._children_yang_names.add("lsp-ping-info")

                self.owner_information = YList(self)
                self.association_information = YList(self)
                self._segment_path = lambda: "ipv6-multi-hop-session-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail, ['source_address', 'destination_address', 'location', 'vrf_name'], name, value)


            class StatusInformation(Entity):
                """
                Session status information
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:  :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:  :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.TransmitPacket>`
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:  :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\: str
                
                .. attribute:: state
                
                	State
                	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation, self).__init__()

                    self.yang_name = "status-information"
                    self.yang_parent_name = "ipv6-multi-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("source-address", ("source_address", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.SourceAddress)), ("last-state-change", ("last_state_change", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.LastStateChange)), ("transmit-packet", ("transmit_packet", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.TransmitPacket)), ("receive-packet", ("receive_packet", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.ReceivePacket)), ("status-brief-information", ("status_brief_information", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation)), ("async-transmit-statistics", ("async_transmit_statistics", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics)), ("async-receive-statistics", ("async_receive_statistics", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics)), ("echo-transmit-statistics", ("echo_transmit_statistics", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics)), ("echo-received-statistics", ("echo_received_statistics", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                        ('state', YLeaf(YType.enumeration, 'state')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                        ('remote_discriminator', YLeaf(YType.uint32, 'remote-discriminator')),
                        ('to_up_state_count', YLeaf(YType.uint32, 'to-up-state-count')),
                        ('desired_minimum_echo_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-echo-transmit-interval')),
                        ('remote_negotiated_interval', YLeaf(YType.uint32, 'remote-negotiated-interval')),
                        ('latency_number', YLeaf(YType.uint32, 'latency-number')),
                        ('latency_minimum', YLeaf(YType.uint32, 'latency-minimum')),
                        ('latency_maximum', YLeaf(YType.uint32, 'latency-maximum')),
                        ('latency_average', YLeaf(YType.uint32, 'latency-average')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                        ('internal_label', YLeaf(YType.uint32, 'internal-label')),
                    ])
                    self.sessiontype = None
                    self.session_subtype = None
                    self.state = None
                    self.local_discriminator = None
                    self.remote_discriminator = None
                    self.to_up_state_count = None
                    self.desired_minimum_echo_transmit_interval = None
                    self.remote_negotiated_interval = None
                    self.latency_number = None
                    self.latency_minimum = None
                    self.latency_maximum = None
                    self.latency_average = None
                    self.node_id = None
                    self.internal_label = None

                    self.source_address = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self._children_name_map["source_address"] = "source-address"
                    self._children_yang_names.add("source-address")

                    self.last_state_change = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self._children_name_map["last_state_change"] = "last-state-change"
                    self._children_yang_names.add("last-state-change")

                    self.transmit_packet = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self
                    self._children_name_map["transmit_packet"] = "transmit-packet"
                    self._children_yang_names.add("transmit-packet")

                    self.receive_packet = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self._children_name_map["receive_packet"] = "receive-packet"
                    self._children_yang_names.add("receive-packet")

                    self.status_brief_information = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self._children_name_map["status_brief_information"] = "status-brief-information"
                    self._children_yang_names.add("status-brief-information")

                    self.async_transmit_statistics = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self._children_name_map["async_transmit_statistics"] = "async-transmit-statistics"
                    self._children_yang_names.add("async-transmit-statistics")

                    self.async_receive_statistics = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self._children_name_map["async_receive_statistics"] = "async-receive-statistics"
                    self._children_yang_names.add("async-receive-statistics")

                    self.echo_transmit_statistics = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self._children_name_map["echo_transmit_statistics"] = "echo-transmit-statistics"
                    self._children_yang_names.add("echo-transmit-statistics")

                    self.echo_received_statistics = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self._children_name_map["echo_received_statistics"] = "echo-received-statistics"
                    self._children_yang_names.add("echo-received-statistics")
                    self._segment_path = lambda: "status-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation, ['sessiontype', 'session_subtype', 'state', 'local_discriminator', 'remote_discriminator', 'to_up_state_count', 'desired_minimum_echo_transmit_interval', 'remote_negotiated_interval', 'latency_number', 'latency_minimum', 'latency_maximum', 'latency_average', 'node_id', 'internal_label'], name, value)


                class SourceAddress(Entity):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.SourceAddress, self).__init__()

                        self.yang_name = "source-address"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "source-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.SourceAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class LastStateChange(Entity):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.LastStateChange, self).__init__()

                        self.yang_name = "last-state-change"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('days', YLeaf(YType.uint32, 'days')),
                            ('hours', YLeaf(YType.uint8, 'hours')),
                            ('minutes', YLeaf(YType.uint8, 'minutes')),
                            ('seconds', YLeaf(YType.uint8, 'seconds')),
                        ])
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None
                        self._segment_path = lambda: "last-state-change"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.LastStateChange, ['days', 'hours', 'minutes', 'seconds'], name, value)


                class TransmitPacket(Entity):
                    """
                    Transmit Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.TransmitPacket, self).__init__()

                        self.yang_name = "transmit-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "transmit-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.TransmitPacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class ReceivePacket(Entity):
                    """
                    Receive Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.ReceivePacket, self).__init__()

                        self.yang_name = "receive-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "receive-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.ReceivePacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class StatusBriefInformation(Entity):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation, self).__init__()

                        self.yang_name = "status-brief-information"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.async_interval_multiplier = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                        self._children_yang_names.add("async-interval-multiplier")

                        self.echo_interval_multiplier = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self
                        self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                        self._children_yang_names.add("echo-interval-multiplier")
                        self._segment_path = lambda: "status-brief-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/%s" % self._segment_path()


                    class AsyncIntervalMultiplier(Entity):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                            self.yang_name = "async-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                                ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_remote_transmit_interval = None
                            self.negotiated_local_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "async-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                    class EchoIntervalMultiplier(Entity):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                            self.yang_name = "echo-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "echo-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class AsyncTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics, self).__init__()

                        self.yang_name = "async-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class AsyncReceiveStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics, self).__init__()

                        self.yang_name = "async-receive-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-receive-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.AsyncReceiveStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics, self).__init__()

                        self.yang_name = "echo-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoReceivedStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics, self).__init__()

                        self.yang_name = "echo-received-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-received-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.StatusInformation.EchoReceivedStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


            class MpDownloadState(Entity):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:  :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:  :py:class:`BfdMpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadState>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState, self).__init__()

                    self.yang_name = "mp-download-state"
                    self.yang_parent_name = "ipv6-multi-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("change-time", ("change_time", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState.ChangeTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('mp_download_state', YLeaf(YType.enumeration, 'mp-download-state')),
                    ])
                    self.mp_download_state = None

                    self.change_time = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self._children_name_map["change_time"] = "change-time"
                    self._children_yang_names.add("change-time")
                    self._segment_path = lambda: "mp-download-state"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState, ['mp_download_state'], name, value)


                class ChangeTime(Entity):
                    """
                    Change time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState.ChangeTime, self).__init__()

                        self.yang_name = "change-time"
                        self.yang_parent_name = "mp-download-state"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "change-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/mp-download-state/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.MpDownloadState.ChangeTime, ['seconds', 'nanoseconds'], name, value)


            class LspPingInfo(Entity):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:  :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:  :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:  :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\: str
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\: str
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\: str
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo, self).__init__()

                    self.yang_name = "lsp-ping-info"
                    self.yang_parent_name = "ipv6-multi-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("lsp-ping-tx-last-time", ("lsp_ping_tx_last_time", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime)), ("lsp-ping-tx-last-error-time", ("lsp_ping_tx_last_error_time", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime)), ("lsp-ping-rx-last-time", ("lsp_ping_rx_last_time", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lsp_ping_tx_count', YLeaf(YType.uint32, 'lsp-ping-tx-count')),
                        ('lsp_ping_tx_error_count', YLeaf(YType.uint32, 'lsp-ping-tx-error-count')),
                        ('lsp_ping_tx_last_rc', YLeaf(YType.str, 'lsp-ping-tx-last-rc')),
                        ('lsp_ping_tx_last_error_rc', YLeaf(YType.str, 'lsp-ping-tx-last-error-rc')),
                        ('lsp_ping_rx_last_discr', YLeaf(YType.uint32, 'lsp-ping-rx-last-discr')),
                        ('lsp_ping_rx_count', YLeaf(YType.uint32, 'lsp-ping-rx-count')),
                        ('lsp_ping_rx_last_code', YLeaf(YType.uint8, 'lsp-ping-rx-last-code')),
                        ('lsp_ping_rx_last_subcode', YLeaf(YType.uint8, 'lsp-ping-rx-last-subcode')),
                        ('lsp_ping_rx_last_output', YLeaf(YType.str, 'lsp-ping-rx-last-output')),
                    ])
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_output = None

                    self.lsp_ping_tx_last_time = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_time"] = "lsp-ping-tx-last-time"
                    self._children_yang_names.add("lsp-ping-tx-last-time")

                    self.lsp_ping_tx_last_error_time = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_error_time"] = "lsp-ping-tx-last-error-time"
                    self._children_yang_names.add("lsp-ping-tx-last-error-time")

                    self.lsp_ping_rx_last_time = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self._children_name_map["lsp_ping_rx_last_time"] = "lsp-ping-rx-last-time"
                    self._children_yang_names.add("lsp-ping-rx-last-time")
                    self._segment_path = lambda: "lsp-ping-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo, ['lsp_ping_tx_count', 'lsp_ping_tx_error_count', 'lsp_ping_tx_last_rc', 'lsp_ping_tx_last_error_rc', 'lsp_ping_rx_last_discr', 'lsp_ping_rx_count', 'lsp_ping_rx_last_code', 'lsp_ping_rx_last_subcode', 'lsp_ping_rx_last_output'], name, value)


                class LspPingTxLastTime(Entity):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingTxLastErrorTime(Entity):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-error-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-error-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingRxLastTime(Entity):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-rx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-rx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.LspPingInfo.LspPingRxLastTime, ['seconds', 'nanoseconds'], name, value)


            class OwnerInformation(Entity):
                """
                Client applications owning the session
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: name
                
                	Client process name
                	**type**\: str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.OwnerInformation, self).__init__()

                    self.yang_name = "owner-information"
                    self.yang_parent_name = "ipv6-multi-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interval', YLeaf(YType.uint32, 'interval')),
                        ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                        ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                        ('name', YLeaf(YType.str, 'name')),
                    ])
                    self.interval = None
                    self.detection_multiplier = None
                    self.adjusted_interval = None
                    self.adjusted_detection_multiplier = None
                    self.name = None
                    self._segment_path = lambda: "owner-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


            class AssociationInformation(Entity):
                """
                Association session information
                
                .. attribute:: ip_destination_address
                
                	IPv4/v6 dest address
                	**type**\:  :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.IpDestinationAddress>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.OwnerInformation>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation, self).__init__()

                    self.yang_name = "association-information"
                    self.yang_parent_name = "ipv6-multi-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ip-destination-address", ("ip_destination_address", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.IpDestinationAddress))])
                    self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.OwnerInformation))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ])
                    self.interface_name = None
                    self.sessiontype = None
                    self.local_discriminator = None

                    self.ip_destination_address = Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.IpDestinationAddress()
                    self.ip_destination_address.parent = self
                    self._children_name_map["ip_destination_address"] = "ip-destination-address"
                    self._children_yang_names.add("ip-destination-address")

                    self.owner_information = YList(self)
                    self._segment_path = lambda: "association-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation, ['interface_name', 'sessiontype', 'local_discriminator'], name, value)


                class IpDestinationAddress(Entity):
                    """
                    IPv4/v6 dest address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.IpDestinationAddress, self).__init__()

                        self.yang_name = "ip-destination-address"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "ip-destination-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.IpDestinationAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class OwnerInformation(Entity):
                    """
                    Client applications owning the session
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.OwnerInformation, self).__init__()

                        self.yang_name = "owner-information"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', YLeaf(YType.uint32, 'interval')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                            ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                            ('name', YLeaf(YType.str, 'name')),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.adjusted_interval = None
                        self.adjusted_detection_multiplier = None
                        self.name = None
                        self._segment_path = lambda: "owner-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-details/ipv6-multi-hop-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail.AssociationInformation.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


    class Ipv6MultiHopMultiPaths(Entity):
        """
        IPv6 multi hop multipath
        
        .. attribute:: ipv6_multi_hop_multi_path
        
        	IPv6 multihop multipath table
        	**type**\: list of  		 :py:class:`Ipv6MultiHopMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6MultiHopMultiPaths, self).__init__()

            self.yang_name = "ipv6-multi-hop-multi-paths"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv6-multi-hop-multi-path", ("ipv6_multi_hop_multi_path", Bfd.Ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath))])
            self._leafs = OrderedDict()

            self.ipv6_multi_hop_multi_path = YList(self)
            self._segment_path = lambda: "ipv6-multi-hop-multi-paths"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv6MultiHopMultiPaths, [], name, value)


        class Ipv6MultiHopMultiPath(Entity):
            """
            IPv6 multihop multipath table
            
            .. attribute:: source_address
            
            	Source address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address
            
            	Destination address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath, self).__init__()

                self.yang_name = "ipv6-multi-hop-multi-path"
                self.yang_parent_name = "ipv6-multi-hop-multi-paths"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('incoming_label_xr', YLeaf(YType.uint32, 'incoming-label-xr')),
                    ('session_interface_name', YLeaf(YType.str, 'session-interface-name')),
                ])
                self.source_address = None
                self.destination_address = None
                self.location = None
                self.vrf_name = None
                self.session_subtype = None
                self.state = None
                self.local_discriminator = None
                self.node_id = None
                self.incoming_label_xr = None
                self.session_interface_name = None
                self._segment_path = lambda: "ipv6-multi-hop-multi-path"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-multi-paths/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath, ['source_address', 'destination_address', 'location', 'vrf_name', 'session_subtype', 'state', 'local_discriminator', 'node_id', 'incoming_label_xr', 'session_interface_name'], name, value)


    class Ipv4BfDoMplsteHeadCounters(Entity):
        """
        IPv4 BFD over MPLS\-TE Counters
        
        .. attribute:: ipv4bf_do_mplste_head_packet_counters
        
        	Table of IPv4 BFD over MPLS\-TE Packet counters
        	**type**\:  :py:class:`Ipv4BfDoMplsteHeadPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfDoMplsteHeadCounters, self).__init__()

            self.yang_name = "ipv4bf-do-mplste-head-counters"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("ipv4bf-do-mplste-head-packet-counters", ("ipv4bf_do_mplste_head_packet_counters", Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.ipv4bf_do_mplste_head_packet_counters = Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters()
            self.ipv4bf_do_mplste_head_packet_counters.parent = self
            self._children_name_map["ipv4bf_do_mplste_head_packet_counters"] = "ipv4bf-do-mplste-head-packet-counters"
            self._children_yang_names.add("ipv4bf-do-mplste-head-packet-counters")
            self._segment_path = lambda: "ipv4bf-do-mplste-head-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class Ipv4BfDoMplsteHeadPacketCounters(Entity):
            """
            Table of IPv4 BFD over MPLS\-TE Packet counters
            
            .. attribute:: ipv4bf_do_mplste_head_packet_counter
            
            	Interface  IPv4 BFD over MPLS\-TE Packet counters
            	**type**\: list of  		 :py:class:`Ipv4BfDoMplsteHeadPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters, self).__init__()

                self.yang_name = "ipv4bf-do-mplste-head-packet-counters"
                self.yang_parent_name = "ipv4bf-do-mplste-head-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("ipv4bf-do-mplste-head-packet-counter", ("ipv4bf_do_mplste_head_packet_counter", Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter))])
                self._leafs = OrderedDict()

                self.ipv4bf_do_mplste_head_packet_counter = YList(self)
                self._segment_path = lambda: "ipv4bf-do-mplste-head-packet-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters, [], name, value)


            class Ipv4BfDoMplsteHeadPacketCounter(Entity):
                """
                Interface  IPv4 BFD over MPLS\-TE Packet
                counters
                
                .. attribute:: interface_name
                
                	Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: location
                
                	Location
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:  :py:class:`BfdMgmtPktDisplay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplay>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter, self).__init__()

                    self.yang_name = "ipv4bf-do-mplste-head-packet-counter"
                    self.yang_parent_name = "ipv4bf-do-mplste-head-packet-counters"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('location', YLeaf(YType.str, 'location')),
                        ('hello_transmit_count', YLeaf(YType.uint32, 'hello-transmit-count')),
                        ('hello_receive_count', YLeaf(YType.uint32, 'hello-receive-count')),
                        ('echo_transmit_count', YLeaf(YType.uint32, 'echo-transmit-count')),
                        ('echo_receive_count', YLeaf(YType.uint32, 'echo-receive-count')),
                        ('display_type', YLeaf(YType.enumeration, 'display-type')),
                    ])
                    self.interface_name = None
                    self.location = None
                    self.hello_transmit_count = None
                    self.hello_receive_count = None
                    self.echo_transmit_count = None
                    self.echo_receive_count = None
                    self.display_type = None
                    self._segment_path = lambda: "ipv4bf-do-mplste-head-packet-counter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-counters/ipv4bf-do-mplste-head-packet-counters/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter, ['interface_name', 'location', 'hello_transmit_count', 'hello_receive_count', 'echo_transmit_count', 'echo_receive_count', 'display_type'], name, value)


    class SessionMibs(Entity):
        """
        BFD session MIB database
        
        .. attribute:: session_mib
        
        	Brief information for BFD session MIB
        	**type**\: list of  		 :py:class:`SessionMib <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionMibs.SessionMib>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.SessionMibs, self).__init__()

            self.yang_name = "session-mibs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("session-mib", ("session_mib", Bfd.SessionMibs.SessionMib))])
            self._leafs = OrderedDict()

            self.session_mib = YList(self)
            self._segment_path = lambda: "session-mibs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.SessionMibs, [], name, value)


        class SessionMib(Entity):
            """
            Brief information for BFD session MIB
            
            .. attribute:: discriminator  (key)
            
            	Session Discr
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: dest_address
            
            	Session Destination address
            	**type**\:  :py:class:`DestAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionMibs.SessionMib.DestAddress>`
            
            .. attribute:: local_discriminator
            
            	Sessions' Local Discriminator
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: remote_discriminator
            
            	Sessions' Remote Discriminator
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: sessionversion
            
            	Session BFD Version
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_state
            
            	Session State
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: trap_bitmap
            
            	Trap Generator Bitmap
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pkt_in
            
            	Packet In Counter
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: pkt_out
            
            	Packet Out Counter
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: last_up_time_sec
            
            	Last Session Up Time (seconds)
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            	**units**\: second
            
            .. attribute:: last_up_time_nsec
            
            	Last Session Up Time (nanoseconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: nanosecond
            
            .. attribute:: last_down_time_sec
            
            	Last Session Down Time (seconds)
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            	**units**\: second
            
            .. attribute:: last_down_time_nsec
            
            	Last Session Down Time (nanoseconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: nanosecond
            
            .. attribute:: last_down_diag
            
            	Last Session Down Diag
            	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
            
            .. attribute:: up_counter
            
            	Up Count
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: last_time_cached
            
            	Last Time Session Info Queried
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: interface_name
            
            	Session Interface Name
            	**type**\: str
            
            	**length:** 0..64
            
            .. attribute:: int_handle
            
            	Session Interface Handle
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: detection_multiplier
            
            	Detection Multiplier
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: desired_min_tx_interval
            
            	Desired Min TX Interval
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: required_min_rx_interval
            
            	Required Min RX Interval
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: required_min_rx_echo_interval
            
            	Required Min RX Echo Interval
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.SessionMibs.SessionMib, self).__init__()

                self.yang_name = "session-mib"
                self.yang_parent_name = "session-mibs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['discriminator']
                self._child_container_classes = OrderedDict([("dest-address", ("dest_address", Bfd.SessionMibs.SessionMib.DestAddress))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('discriminator', YLeaf(YType.uint32, 'discriminator')),
                    ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ('remote_discriminator', YLeaf(YType.uint32, 'remote-discriminator')),
                    ('sessionversion', YLeaf(YType.uint32, 'sessionversion')),
                    ('session_state', YLeaf(YType.uint32, 'session-state')),
                    ('trap_bitmap', YLeaf(YType.uint32, 'trap-bitmap')),
                    ('pkt_in', YLeaf(YType.uint64, 'pkt-in')),
                    ('pkt_out', YLeaf(YType.uint64, 'pkt-out')),
                    ('last_up_time_sec', YLeaf(YType.uint64, 'last-up-time-sec')),
                    ('last_up_time_nsec', YLeaf(YType.uint32, 'last-up-time-nsec')),
                    ('last_down_time_sec', YLeaf(YType.uint64, 'last-down-time-sec')),
                    ('last_down_time_nsec', YLeaf(YType.uint32, 'last-down-time-nsec')),
                    ('last_down_diag', YLeaf(YType.enumeration, 'last-down-diag')),
                    ('up_counter', YLeaf(YType.uint32, 'up-counter')),
                    ('last_time_cached', YLeaf(YType.uint64, 'last-time-cached')),
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('int_handle', YLeaf(YType.uint32, 'int-handle')),
                    ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                    ('desired_min_tx_interval', YLeaf(YType.uint32, 'desired-min-tx-interval')),
                    ('required_min_rx_interval', YLeaf(YType.uint32, 'required-min-rx-interval')),
                    ('required_min_rx_echo_interval', YLeaf(YType.uint32, 'required-min-rx-echo-interval')),
                ])
                self.discriminator = None
                self.local_discriminator = None
                self.remote_discriminator = None
                self.sessionversion = None
                self.session_state = None
                self.trap_bitmap = None
                self.pkt_in = None
                self.pkt_out = None
                self.last_up_time_sec = None
                self.last_up_time_nsec = None
                self.last_down_time_sec = None
                self.last_down_time_nsec = None
                self.last_down_diag = None
                self.up_counter = None
                self.last_time_cached = None
                self.interface_name = None
                self.int_handle = None
                self.detection_multiplier = None
                self.desired_min_tx_interval = None
                self.required_min_rx_interval = None
                self.required_min_rx_echo_interval = None

                self.dest_address = Bfd.SessionMibs.SessionMib.DestAddress()
                self.dest_address.parent = self
                self._children_name_map["dest_address"] = "dest-address"
                self._children_yang_names.add("dest-address")
                self._segment_path = lambda: "session-mib" + "[discriminator='" + str(self.discriminator) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-mibs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.SessionMibs.SessionMib, ['discriminator', 'local_discriminator', 'remote_discriminator', 'sessionversion', 'session_state', 'trap_bitmap', 'pkt_in', 'pkt_out', 'last_up_time_sec', 'last_up_time_nsec', 'last_down_time_sec', 'last_down_time_nsec', 'last_down_diag', 'up_counter', 'last_time_cached', 'interface_name', 'int_handle', 'detection_multiplier', 'desired_min_tx_interval', 'required_min_rx_interval', 'required_min_rx_echo_interval'], name, value)


            class DestAddress(Entity):
                """
                Session Destination address
                
                .. attribute:: afi
                
                	AFI
                	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                
                .. attribute:: dummy
                
                	No Address
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ipv4
                
                	IPv4 address type
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ipv6
                
                	IPv6 address type
                	**type**\: str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.SessionMibs.SessionMib.DestAddress, self).__init__()

                    self.yang_name = "dest-address"
                    self.yang_parent_name = "session-mib"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('afi', YLeaf(YType.enumeration, 'afi')),
                        ('dummy', YLeaf(YType.uint8, 'dummy')),
                        ('ipv4', YLeaf(YType.str, 'ipv4')),
                        ('ipv6', YLeaf(YType.str, 'ipv6')),
                    ])
                    self.afi = None
                    self.dummy = None
                    self.ipv4 = None
                    self.ipv6 = None
                    self._segment_path = lambda: "dest-address"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.SessionMibs.SessionMib.DestAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


    class Ipv6MultiHopSummary(Entity):
        """
        Summary information of BFD IPv6 multihop
        sessions
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6MultiHopSummary, self).__init__()

            self.yang_name = "ipv6-multi-hop-summary"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv6MultiHopSummary.SessionState))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.session_state = Bfd.Ipv6MultiHopSummary.SessionState()
            self.session_state.parent = self
            self._children_name_map["session_state"] = "session-state"
            self._children_yang_names.add("session-state")
            self._segment_path = lambda: "ipv6-multi-hop-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class SessionState(Entity):
            """
            Statistics of states for sessions
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6MultiHopSummary.SessionState, self).__init__()

                self.yang_name = "session-state"
                self.yang_parent_name = "ipv6-multi-hop-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total_count', YLeaf(YType.uint32, 'total-count')),
                    ('down_count', YLeaf(YType.uint32, 'down-count')),
                    ('up_count', YLeaf(YType.uint32, 'up-count')),
                    ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                ])
                self.total_count = None
                self.down_count = None
                self.up_count = None
                self.unknown_count = None
                self._segment_path = lambda: "session-state"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6MultiHopSummary.SessionState, ['total_count', 'down_count', 'up_count', 'unknown_count'], name, value)


    class LabelSummaryNodes(Entity):
        """
        Table of summary about Label BFD sessions for
        location
        
        .. attribute:: label_summary_node
        
        	Summary of Label BFD 
        	**type**\: list of  		 :py:class:`LabelSummaryNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSummaryNodes.LabelSummaryNode>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.LabelSummaryNodes, self).__init__()

            self.yang_name = "label-summary-nodes"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("label-summary-node", ("label_summary_node", Bfd.LabelSummaryNodes.LabelSummaryNode))])
            self._leafs = OrderedDict()

            self.label_summary_node = YList(self)
            self._segment_path = lambda: "label-summary-nodes"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.LabelSummaryNodes, [], name, value)


        class LabelSummaryNode(Entity):
            """
            Summary of Label BFD 
            
            .. attribute:: location_name  (key)
            
            	Location name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSummaryNodes.LabelSummaryNode.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.LabelSummaryNodes.LabelSummaryNode, self).__init__()

                self.yang_name = "label-summary-node"
                self.yang_parent_name = "label-summary-nodes"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['location_name']
                self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.LabelSummaryNodes.LabelSummaryNode.SessionState))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('location_name', YLeaf(YType.str, 'location-name')),
                ])
                self.location_name = None

                self.session_state = Bfd.LabelSummaryNodes.LabelSummaryNode.SessionState()
                self.session_state.parent = self
                self._children_name_map["session_state"] = "session-state"
                self._children_yang_names.add("session-state")
                self._segment_path = lambda: "label-summary-node" + "[location-name='" + str(self.location_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-summary-nodes/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.LabelSummaryNodes.LabelSummaryNode, ['location_name'], name, value)


            class SessionState(Entity):
                """
                Statistics of states for sessions
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.LabelSummaryNodes.LabelSummaryNode.SessionState, self).__init__()

                    self.yang_name = "session-state"
                    self.yang_parent_name = "label-summary-node"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_count', YLeaf(YType.uint32, 'total-count')),
                        ('up_count', YLeaf(YType.uint32, 'up-count')),
                        ('down_count', YLeaf(YType.uint32, 'down-count')),
                        ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                        ('retry_count', YLeaf(YType.uint32, 'retry-count')),
                        ('standby_count', YLeaf(YType.uint32, 'standby-count')),
                    ])
                    self.total_count = None
                    self.up_count = None
                    self.down_count = None
                    self.unknown_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self._segment_path = lambda: "session-state"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.LabelSummaryNodes.LabelSummaryNode.SessionState, ['total_count', 'up_count', 'down_count', 'unknown_count', 'retry_count', 'standby_count'], name, value)


    class Ipv6MultiHopSessionBriefs(Entity):
        """
        Table of brief information about all IPv6
        multihop BFD sessions in the System
        
        .. attribute:: ipv6_multi_hop_session_brief
        
        	Brief information for a single IPv6 multihop BFD session
        	**type**\: list of  		 :py:class:`Ipv6MultiHopSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6MultiHopSessionBriefs, self).__init__()

            self.yang_name = "ipv6-multi-hop-session-briefs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv6-multi-hop-session-brief", ("ipv6_multi_hop_session_brief", Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief))])
            self._leafs = OrderedDict()

            self.ipv6_multi_hop_session_brief = YList(self)
            self._segment_path = lambda: "ipv6-multi-hop-session-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv6MultiHopSessionBriefs, [], name, value)


        class Ipv6MultiHopSessionBrief(Entity):
            """
            Brief information for a single IPv6 multihop
            BFD session
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation>`
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief, self).__init__()

                self.yang_name = "ipv6-multi-hop-session-brief"
                self.yang_parent_name = "ipv6-multi-hop-session-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-brief-information", ("status_brief_information", Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('session_flags', YLeaf(YType.uint32, 'session-flags')),
                ])
                self.source_address = None
                self.destination_address = None
                self.location = None
                self.vrf_name = None
                self.node_id = None
                self.state = None
                self.session_type = None
                self.session_subtype = None
                self.session_flags = None

                self.status_brief_information = Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self._children_name_map["status_brief_information"] = "status-brief-information"
                self._children_yang_names.add("status-brief-information")
                self._segment_path = lambda: "ipv6-multi-hop-session-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief, ['source_address', 'destination_address', 'location', 'vrf_name', 'node_id', 'state', 'session_type', 'session_subtype', 'session_flags'], name, value)


            class StatusBriefInformation(Entity):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation, self).__init__()

                    self.yang_name = "status-brief-information"
                    self.yang_parent_name = "ipv6-multi-hop-session-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.async_interval_multiplier = Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                    self._children_yang_names.add("async-interval-multiplier")

                    self.echo_interval_multiplier = Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self
                    self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                    self._children_yang_names.add("echo-interval-multiplier")
                    self._segment_path = lambda: "status-brief-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-briefs/ipv6-multi-hop-session-brief/%s" % self._segment_path()


                class AsyncIntervalMultiplier(Entity):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                        self.yang_name = "async-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                            ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_remote_transmit_interval = None
                        self.negotiated_local_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "async-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-briefs/ipv6-multi-hop-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class EchoIntervalMultiplier(Entity):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                        self.yang_name = "echo-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "echo-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-session-briefs/ipv6-multi-hop-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


    class SessionBriefs(Entity):
        """
        Table of brief information about singlehop IPv4
        BFD sessions in the System
        
        .. attribute:: session_brief
        
        	Brief information for a single IPv4 singlehop BFD session
        	**type**\: list of  		 :py:class:`SessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionBriefs.SessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.SessionBriefs, self).__init__()

            self.yang_name = "session-briefs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("session-brief", ("session_brief", Bfd.SessionBriefs.SessionBrief))])
            self._leafs = OrderedDict()

            self.session_brief = YList(self)
            self._segment_path = lambda: "session-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.SessionBriefs, [], name, value)


        class SessionBrief(Entity):
            """
            Brief information for a single IPv4 singlehop
            BFD session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionBriefs.SessionBrief.StatusBriefInformation>`
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.SessionBriefs.SessionBrief, self).__init__()

                self.yang_name = "session-brief"
                self.yang_parent_name = "session-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-brief-information", ("status_brief_information", Bfd.SessionBriefs.SessionBrief.StatusBriefInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('session_flags', YLeaf(YType.uint32, 'session-flags')),
                ])
                self.interface_name = None
                self.destination_address = None
                self.location = None
                self.node_id = None
                self.state = None
                self.session_type = None
                self.session_subtype = None
                self.session_flags = None

                self.status_brief_information = Bfd.SessionBriefs.SessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self._children_name_map["status_brief_information"] = "status-brief-information"
                self._children_yang_names.add("status-brief-information")
                self._segment_path = lambda: "session-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.SessionBriefs.SessionBrief, ['interface_name', 'destination_address', 'location', 'node_id', 'state', 'session_type', 'session_subtype', 'session_flags'], name, value)


            class StatusBriefInformation(Entity):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.SessionBriefs.SessionBrief.StatusBriefInformation, self).__init__()

                    self.yang_name = "status-brief-information"
                    self.yang_parent_name = "session-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.EchoIntervalMultiplier))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.async_interval_multiplier = Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                    self._children_yang_names.add("async-interval-multiplier")

                    self.echo_interval_multiplier = Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self
                    self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                    self._children_yang_names.add("echo-interval-multiplier")
                    self._segment_path = lambda: "status-brief-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-briefs/session-brief/%s" % self._segment_path()


                class AsyncIntervalMultiplier(Entity):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                        self.yang_name = "async-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                            ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_remote_transmit_interval = None
                        self.negotiated_local_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "async-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-briefs/session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class EchoIntervalMultiplier(Entity):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                        self.yang_name = "echo-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "echo-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-briefs/session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionBriefs.SessionBrief.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


    class Ipv6SingleHopNodeLocationSummaries(Entity):
        """
        Table of summary information about BFD IPv6
        singlehop sessions per location
        
        .. attribute:: ipv6_single_hop_node_location_summary
        
        	Summary information for BFD IPv6 singlehop sessions for location
        	**type**\: list of  		 :py:class:`Ipv6SingleHopNodeLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6SingleHopNodeLocationSummaries, self).__init__()

            self.yang_name = "ipv6-single-hop-node-location-summaries"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv6-single-hop-node-location-summary", ("ipv6_single_hop_node_location_summary", Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary))])
            self._leafs = OrderedDict()

            self.ipv6_single_hop_node_location_summary = YList(self)
            self._segment_path = lambda: "ipv6-single-hop-node-location-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv6SingleHopNodeLocationSummaries, [], name, value)


        class Ipv6SingleHopNodeLocationSummary(Entity):
            """
            Summary information for BFD IPv6 singlehop
            sessions for location
            
            .. attribute:: location  (key)
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary, self).__init__()

                self.yang_name = "ipv6-single-hop-node-location-summary"
                self.yang_parent_name = "ipv6-single-hop-node-location-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['location']
                self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary.SessionState))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('location', YLeaf(YType.str, 'location')),
                ])
                self.location = None

                self.session_state = Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary.SessionState()
                self.session_state.parent = self
                self._children_name_map["session_state"] = "session-state"
                self._children_yang_names.add("session-state")
                self._segment_path = lambda: "ipv6-single-hop-node-location-summary" + "[location='" + str(self.location) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-node-location-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary, ['location'], name, value)


            class SessionState(Entity):
                """
                Statistics of states for sessions
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary.SessionState, self).__init__()

                    self.yang_name = "session-state"
                    self.yang_parent_name = "ipv6-single-hop-node-location-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_count', YLeaf(YType.uint32, 'total-count')),
                        ('up_count', YLeaf(YType.uint32, 'up-count')),
                        ('down_count', YLeaf(YType.uint32, 'down-count')),
                        ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                        ('retry_count', YLeaf(YType.uint32, 'retry-count')),
                        ('standby_count', YLeaf(YType.uint32, 'standby-count')),
                    ])
                    self.total_count = None
                    self.up_count = None
                    self.down_count = None
                    self.unknown_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self._segment_path = lambda: "session-state"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary.SessionState, ['total_count', 'up_count', 'down_count', 'unknown_count', 'retry_count', 'standby_count'], name, value)


    class Summary(Entity):
        """
        Summary information of BFD IPv4 singlehop
        sessions
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Summary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Summary, self).__init__()

            self.yang_name = "summary"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Summary.SessionState))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.session_state = Bfd.Summary.SessionState()
            self.session_state.parent = self
            self._children_name_map["session_state"] = "session-state"
            self._children_yang_names.add("session-state")
            self._segment_path = lambda: "summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class SessionState(Entity):
            """
            Statistics of states for sessions
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Summary.SessionState, self).__init__()

                self.yang_name = "session-state"
                self.yang_parent_name = "summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total_count', YLeaf(YType.uint32, 'total-count')),
                    ('down_count', YLeaf(YType.uint32, 'down-count')),
                    ('up_count', YLeaf(YType.uint32, 'up-count')),
                    ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                ])
                self.total_count = None
                self.down_count = None
                self.up_count = None
                self.unknown_count = None
                self._segment_path = lambda: "session-state"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Summary.SessionState, ['total_count', 'down_count', 'up_count', 'unknown_count'], name, value)


    class Ipv4BfdMplsteTailNodeSummaries(Entity):
        """
        Table of summary about IPv4 TE tail BFD sessions
        for location
        
        .. attribute:: ipv4bfd_mplste_tail_node_summary
        
        	Summary of IPv4 BFD over MPLS\-TE tail
        	**type**\: list of  		 :py:class:`Ipv4BfdMplsteTailNodeSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfdMplsteTailNodeSummaries, self).__init__()

            self.yang_name = "ipv4bfd-mplste-tail-node-summaries"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4bfd-mplste-tail-node-summary", ("ipv4bfd_mplste_tail_node_summary", Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary))])
            self._leafs = OrderedDict()

            self.ipv4bfd_mplste_tail_node_summary = YList(self)
            self._segment_path = lambda: "ipv4bfd-mplste-tail-node-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4BfdMplsteTailNodeSummaries, [], name, value)


        class Ipv4BfdMplsteTailNodeSummary(Entity):
            """
            Summary of IPv4 BFD over MPLS\-TE tail
            
            .. attribute:: location_name  (key)
            
            	Location name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary, self).__init__()

                self.yang_name = "ipv4bfd-mplste-tail-node-summary"
                self.yang_parent_name = "ipv4bfd-mplste-tail-node-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['location_name']
                self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary.SessionState))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('location_name', YLeaf(YType.str, 'location-name')),
                ])
                self.location_name = None

                self.session_state = Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary.SessionState()
                self.session_state.parent = self
                self._children_name_map["session_state"] = "session-state"
                self._children_yang_names.add("session-state")
                self._segment_path = lambda: "ipv4bfd-mplste-tail-node-summary" + "[location-name='" + str(self.location_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bfd-mplste-tail-node-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary, ['location_name'], name, value)


            class SessionState(Entity):
                """
                Statistics of states for sessions
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary.SessionState, self).__init__()

                    self.yang_name = "session-state"
                    self.yang_parent_name = "ipv4bfd-mplste-tail-node-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_count', YLeaf(YType.uint32, 'total-count')),
                        ('up_count', YLeaf(YType.uint32, 'up-count')),
                        ('down_count', YLeaf(YType.uint32, 'down-count')),
                        ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                        ('retry_count', YLeaf(YType.uint32, 'retry-count')),
                        ('standby_count', YLeaf(YType.uint32, 'standby-count')),
                    ])
                    self.total_count = None
                    self.up_count = None
                    self.down_count = None
                    self.unknown_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self._segment_path = lambda: "session-state"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary.SessionState, ['total_count', 'up_count', 'down_count', 'unknown_count', 'retry_count', 'standby_count'], name, value)


    class Ipv4SingleHopLocationSummaries(Entity):
        """
        Table of summary information about IPv4
        singlehop BFD sessions for location
        
        .. attribute:: ipv4_single_hop_location_summary
        
        	Summary information for BFD IPv4 singlehop sessions for location
        	**type**\: list of  		 :py:class:`Ipv4SingleHopLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4SingleHopLocationSummaries, self).__init__()

            self.yang_name = "ipv4-single-hop-location-summaries"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4-single-hop-location-summary", ("ipv4_single_hop_location_summary", Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary))])
            self._leafs = OrderedDict()

            self.ipv4_single_hop_location_summary = YList(self)
            self._segment_path = lambda: "ipv4-single-hop-location-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4SingleHopLocationSummaries, [], name, value)


        class Ipv4SingleHopLocationSummary(Entity):
            """
            Summary information for BFD IPv4 singlehop
            sessions for location
            
            .. attribute:: location_name  (key)
            
            	Location Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary, self).__init__()

                self.yang_name = "ipv4-single-hop-location-summary"
                self.yang_parent_name = "ipv4-single-hop-location-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['location_name']
                self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary.SessionState))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('location_name', YLeaf(YType.str, 'location-name')),
                ])
                self.location_name = None

                self.session_state = Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary.SessionState()
                self.session_state.parent = self
                self._children_name_map["session_state"] = "session-state"
                self._children_yang_names.add("session-state")
                self._segment_path = lambda: "ipv4-single-hop-location-summary" + "[location-name='" + str(self.location_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-location-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary, ['location_name'], name, value)


            class SessionState(Entity):
                """
                Statistics of states for sessions
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary.SessionState, self).__init__()

                    self.yang_name = "session-state"
                    self.yang_parent_name = "ipv4-single-hop-location-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_count', YLeaf(YType.uint32, 'total-count')),
                        ('up_count', YLeaf(YType.uint32, 'up-count')),
                        ('down_count', YLeaf(YType.uint32, 'down-count')),
                        ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                        ('retry_count', YLeaf(YType.uint32, 'retry-count')),
                        ('standby_count', YLeaf(YType.uint32, 'standby-count')),
                    ])
                    self.total_count = None
                    self.up_count = None
                    self.down_count = None
                    self.unknown_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self._segment_path = lambda: "session-state"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary.SessionState, ['total_count', 'up_count', 'down_count', 'unknown_count', 'retry_count', 'standby_count'], name, value)


    class Ipv4BfdMplsteHeadSummaryNodes(Entity):
        """
        Table of summary about IPv4 TE head BFD sessions
        for location
        
        .. attribute:: ipv4bfd_mplste_head_summary_node
        
        	Summary of IPv4 BFD over MPLS\-TE head
        	**type**\: list of  		 :py:class:`Ipv4BfdMplsteHeadSummaryNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfdMplsteHeadSummaryNodes, self).__init__()

            self.yang_name = "ipv4bfd-mplste-head-summary-nodes"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4bfd-mplste-head-summary-node", ("ipv4bfd_mplste_head_summary_node", Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode))])
            self._leafs = OrderedDict()

            self.ipv4bfd_mplste_head_summary_node = YList(self)
            self._segment_path = lambda: "ipv4bfd-mplste-head-summary-nodes"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4BfdMplsteHeadSummaryNodes, [], name, value)


        class Ipv4BfdMplsteHeadSummaryNode(Entity):
            """
            Summary of IPv4 BFD over MPLS\-TE head
            
            .. attribute:: location_name  (key)
            
            	Location name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode, self).__init__()

                self.yang_name = "ipv4bfd-mplste-head-summary-node"
                self.yang_parent_name = "ipv4bfd-mplste-head-summary-nodes"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['location_name']
                self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode.SessionState))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('location_name', YLeaf(YType.str, 'location-name')),
                ])
                self.location_name = None

                self.session_state = Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode.SessionState()
                self.session_state.parent = self
                self._children_name_map["session_state"] = "session-state"
                self._children_yang_names.add("session-state")
                self._segment_path = lambda: "ipv4bfd-mplste-head-summary-node" + "[location-name='" + str(self.location_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bfd-mplste-head-summary-nodes/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode, ['location_name'], name, value)


            class SessionState(Entity):
                """
                Statistics of states for sessions
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode.SessionState, self).__init__()

                    self.yang_name = "session-state"
                    self.yang_parent_name = "ipv4bfd-mplste-head-summary-node"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_count', YLeaf(YType.uint32, 'total-count')),
                        ('up_count', YLeaf(YType.uint32, 'up-count')),
                        ('down_count', YLeaf(YType.uint32, 'down-count')),
                        ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                        ('retry_count', YLeaf(YType.uint32, 'retry-count')),
                        ('standby_count', YLeaf(YType.uint32, 'standby-count')),
                    ])
                    self.total_count = None
                    self.up_count = None
                    self.down_count = None
                    self.unknown_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self._segment_path = lambda: "session-state"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode.SessionState, ['total_count', 'up_count', 'down_count', 'unknown_count', 'retry_count', 'standby_count'], name, value)


    class LabelSessionDetails(Entity):
        """
        Table of detailed information about all Label
        BFD sessions in the System 
        
        .. attribute:: label_session_detail
        
        	Detailed information for a single BFD session
        	**type**\: list of  		 :py:class:`LabelSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.LabelSessionDetails, self).__init__()

            self.yang_name = "label-session-details"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("label-session-detail", ("label_session_detail", Bfd.LabelSessionDetails.LabelSessionDetail))])
            self._leafs = OrderedDict()

            self.label_session_detail = YList(self)
            self._segment_path = lambda: "label-session-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.LabelSessionDetails, [], name, value)


        class LabelSessionDetail(Entity):
            """
            Detailed information for a single BFD session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:  :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:  :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState>`
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:  :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.OwnerInformation>`
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of  		 :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.LabelSessionDetails.LabelSessionDetail, self).__init__()

                self.yang_name = "label-session-detail"
                self.yang_parent_name = "label-session-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-information", ("status_information", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation)), ("mp-download-state", ("mp_download_state", Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState)), ("lsp-ping-info", ("lsp_ping_info", Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo))])
                self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.LabelSessionDetails.LabelSessionDetail.OwnerInformation)), ("association-information", ("association_information", Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation))])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('incoming_label', YLeaf(YType.int32, 'incoming-label')),
                    ('location', YLeaf(YType.str, 'location')),
                ])
                self.interface_name = None
                self.incoming_label = None
                self.location = None

                self.status_information = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation()
                self.status_information.parent = self
                self._children_name_map["status_information"] = "status-information"
                self._children_yang_names.add("status-information")

                self.mp_download_state = Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self._children_name_map["mp_download_state"] = "mp-download-state"
                self._children_yang_names.add("mp-download-state")

                self.lsp_ping_info = Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self._children_name_map["lsp_ping_info"] = "lsp-ping-info"
                self._children_yang_names.add("lsp-ping-info")

                self.owner_information = YList(self)
                self.association_information = YList(self)
                self._segment_path = lambda: "label-session-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail, ['interface_name', 'incoming_label', 'location'], name, value)


            class StatusInformation(Entity):
                """
                Session status information
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:  :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:  :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.TransmitPacket>`
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:  :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\: str
                
                .. attribute:: state
                
                	State
                	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation, self).__init__()

                    self.yang_name = "status-information"
                    self.yang_parent_name = "label-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("source-address", ("source_address", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.SourceAddress)), ("last-state-change", ("last_state_change", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.LastStateChange)), ("transmit-packet", ("transmit_packet", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.TransmitPacket)), ("receive-packet", ("receive_packet", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.ReceivePacket)), ("status-brief-information", ("status_brief_information", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation)), ("async-transmit-statistics", ("async_transmit_statistics", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncTransmitStatistics)), ("async-receive-statistics", ("async_receive_statistics", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncReceiveStatistics)), ("echo-transmit-statistics", ("echo_transmit_statistics", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoTransmitStatistics)), ("echo-received-statistics", ("echo_received_statistics", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoReceivedStatistics))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                        ('state', YLeaf(YType.enumeration, 'state')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                        ('remote_discriminator', YLeaf(YType.uint32, 'remote-discriminator')),
                        ('to_up_state_count', YLeaf(YType.uint32, 'to-up-state-count')),
                        ('desired_minimum_echo_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-echo-transmit-interval')),
                        ('remote_negotiated_interval', YLeaf(YType.uint32, 'remote-negotiated-interval')),
                        ('latency_number', YLeaf(YType.uint32, 'latency-number')),
                        ('latency_minimum', YLeaf(YType.uint32, 'latency-minimum')),
                        ('latency_maximum', YLeaf(YType.uint32, 'latency-maximum')),
                        ('latency_average', YLeaf(YType.uint32, 'latency-average')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                        ('internal_label', YLeaf(YType.uint32, 'internal-label')),
                    ])
                    self.sessiontype = None
                    self.session_subtype = None
                    self.state = None
                    self.local_discriminator = None
                    self.remote_discriminator = None
                    self.to_up_state_count = None
                    self.desired_minimum_echo_transmit_interval = None
                    self.remote_negotiated_interval = None
                    self.latency_number = None
                    self.latency_minimum = None
                    self.latency_maximum = None
                    self.latency_average = None
                    self.node_id = None
                    self.internal_label = None

                    self.source_address = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self._children_name_map["source_address"] = "source-address"
                    self._children_yang_names.add("source-address")

                    self.last_state_change = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self._children_name_map["last_state_change"] = "last-state-change"
                    self._children_yang_names.add("last-state-change")

                    self.transmit_packet = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self
                    self._children_name_map["transmit_packet"] = "transmit-packet"
                    self._children_yang_names.add("transmit-packet")

                    self.receive_packet = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self._children_name_map["receive_packet"] = "receive-packet"
                    self._children_yang_names.add("receive-packet")

                    self.status_brief_information = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self._children_name_map["status_brief_information"] = "status-brief-information"
                    self._children_yang_names.add("status-brief-information")

                    self.async_transmit_statistics = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self._children_name_map["async_transmit_statistics"] = "async-transmit-statistics"
                    self._children_yang_names.add("async-transmit-statistics")

                    self.async_receive_statistics = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self._children_name_map["async_receive_statistics"] = "async-receive-statistics"
                    self._children_yang_names.add("async-receive-statistics")

                    self.echo_transmit_statistics = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self._children_name_map["echo_transmit_statistics"] = "echo-transmit-statistics"
                    self._children_yang_names.add("echo-transmit-statistics")

                    self.echo_received_statistics = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self._children_name_map["echo_received_statistics"] = "echo-received-statistics"
                    self._children_yang_names.add("echo-received-statistics")
                    self._segment_path = lambda: "status-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation, ['sessiontype', 'session_subtype', 'state', 'local_discriminator', 'remote_discriminator', 'to_up_state_count', 'desired_minimum_echo_transmit_interval', 'remote_negotiated_interval', 'latency_number', 'latency_minimum', 'latency_maximum', 'latency_average', 'node_id', 'internal_label'], name, value)


                class SourceAddress(Entity):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.SourceAddress, self).__init__()

                        self.yang_name = "source-address"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "source-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.SourceAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class LastStateChange(Entity):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.LastStateChange, self).__init__()

                        self.yang_name = "last-state-change"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('days', YLeaf(YType.uint32, 'days')),
                            ('hours', YLeaf(YType.uint8, 'hours')),
                            ('minutes', YLeaf(YType.uint8, 'minutes')),
                            ('seconds', YLeaf(YType.uint8, 'seconds')),
                        ])
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None
                        self._segment_path = lambda: "last-state-change"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.LastStateChange, ['days', 'hours', 'minutes', 'seconds'], name, value)


                class TransmitPacket(Entity):
                    """
                    Transmit Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.TransmitPacket, self).__init__()

                        self.yang_name = "transmit-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "transmit-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.TransmitPacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class ReceivePacket(Entity):
                    """
                    Receive Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.ReceivePacket, self).__init__()

                        self.yang_name = "receive-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "receive-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.ReceivePacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class StatusBriefInformation(Entity):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation, self).__init__()

                        self.yang_name = "status-brief-information"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.async_interval_multiplier = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                        self._children_yang_names.add("async-interval-multiplier")

                        self.echo_interval_multiplier = Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self
                        self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                        self._children_yang_names.add("echo-interval-multiplier")
                        self._segment_path = lambda: "status-brief-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/%s" % self._segment_path()


                    class AsyncIntervalMultiplier(Entity):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                            self.yang_name = "async-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                                ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_remote_transmit_interval = None
                            self.negotiated_local_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "async-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                    class EchoIntervalMultiplier(Entity):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                            self.yang_name = "echo-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "echo-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class AsyncTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncTransmitStatistics, self).__init__()

                        self.yang_name = "async-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class AsyncReceiveStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncReceiveStatistics, self).__init__()

                        self.yang_name = "async-receive-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-receive-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.AsyncReceiveStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoTransmitStatistics, self).__init__()

                        self.yang_name = "echo-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoReceivedStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoReceivedStatistics, self).__init__()

                        self.yang_name = "echo-received-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-received-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.StatusInformation.EchoReceivedStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


            class MpDownloadState(Entity):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:  :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:  :py:class:`BfdMpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadState>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState, self).__init__()

                    self.yang_name = "mp-download-state"
                    self.yang_parent_name = "label-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("change-time", ("change_time", Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState.ChangeTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('mp_download_state', YLeaf(YType.enumeration, 'mp-download-state')),
                    ])
                    self.mp_download_state = None

                    self.change_time = Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self._children_name_map["change_time"] = "change-time"
                    self._children_yang_names.add("change-time")
                    self._segment_path = lambda: "mp-download-state"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState, ['mp_download_state'], name, value)


                class ChangeTime(Entity):
                    """
                    Change time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState.ChangeTime, self).__init__()

                        self.yang_name = "change-time"
                        self.yang_parent_name = "mp-download-state"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "change-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/mp-download-state/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.MpDownloadState.ChangeTime, ['seconds', 'nanoseconds'], name, value)


            class LspPingInfo(Entity):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:  :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:  :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:  :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\: str
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\: str
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\: str
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo, self).__init__()

                    self.yang_name = "lsp-ping-info"
                    self.yang_parent_name = "label-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("lsp-ping-tx-last-time", ("lsp_ping_tx_last_time", Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastTime)), ("lsp-ping-tx-last-error-time", ("lsp_ping_tx_last_error_time", Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastErrorTime)), ("lsp-ping-rx-last-time", ("lsp_ping_rx_last_time", Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingRxLastTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lsp_ping_tx_count', YLeaf(YType.uint32, 'lsp-ping-tx-count')),
                        ('lsp_ping_tx_error_count', YLeaf(YType.uint32, 'lsp-ping-tx-error-count')),
                        ('lsp_ping_tx_last_rc', YLeaf(YType.str, 'lsp-ping-tx-last-rc')),
                        ('lsp_ping_tx_last_error_rc', YLeaf(YType.str, 'lsp-ping-tx-last-error-rc')),
                        ('lsp_ping_rx_last_discr', YLeaf(YType.uint32, 'lsp-ping-rx-last-discr')),
                        ('lsp_ping_rx_count', YLeaf(YType.uint32, 'lsp-ping-rx-count')),
                        ('lsp_ping_rx_last_code', YLeaf(YType.uint8, 'lsp-ping-rx-last-code')),
                        ('lsp_ping_rx_last_subcode', YLeaf(YType.uint8, 'lsp-ping-rx-last-subcode')),
                        ('lsp_ping_rx_last_output', YLeaf(YType.str, 'lsp-ping-rx-last-output')),
                    ])
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_output = None

                    self.lsp_ping_tx_last_time = Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_time"] = "lsp-ping-tx-last-time"
                    self._children_yang_names.add("lsp-ping-tx-last-time")

                    self.lsp_ping_tx_last_error_time = Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_error_time"] = "lsp-ping-tx-last-error-time"
                    self._children_yang_names.add("lsp-ping-tx-last-error-time")

                    self.lsp_ping_rx_last_time = Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self._children_name_map["lsp_ping_rx_last_time"] = "lsp-ping-rx-last-time"
                    self._children_yang_names.add("lsp-ping-rx-last-time")
                    self._segment_path = lambda: "lsp-ping-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo, ['lsp_ping_tx_count', 'lsp_ping_tx_error_count', 'lsp_ping_tx_last_rc', 'lsp_ping_tx_last_error_rc', 'lsp_ping_rx_last_discr', 'lsp_ping_rx_count', 'lsp_ping_rx_last_code', 'lsp_ping_rx_last_subcode', 'lsp_ping_rx_last_output'], name, value)


                class LspPingTxLastTime(Entity):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingTxLastErrorTime(Entity):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastErrorTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-error-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-error-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingTxLastErrorTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingRxLastTime(Entity):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingRxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-rx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-rx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.LspPingInfo.LspPingRxLastTime, ['seconds', 'nanoseconds'], name, value)


            class OwnerInformation(Entity):
                """
                Client applications owning the session
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: name
                
                	Client process name
                	**type**\: str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.LabelSessionDetails.LabelSessionDetail.OwnerInformation, self).__init__()

                    self.yang_name = "owner-information"
                    self.yang_parent_name = "label-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interval', YLeaf(YType.uint32, 'interval')),
                        ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                        ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                        ('name', YLeaf(YType.str, 'name')),
                    ])
                    self.interval = None
                    self.detection_multiplier = None
                    self.adjusted_interval = None
                    self.adjusted_detection_multiplier = None
                    self.name = None
                    self._segment_path = lambda: "owner-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


            class AssociationInformation(Entity):
                """
                Association session information
                
                .. attribute:: ip_destination_address
                
                	IPv4/v6 dest address
                	**type**\:  :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.IpDestinationAddress>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.OwnerInformation>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation, self).__init__()

                    self.yang_name = "association-information"
                    self.yang_parent_name = "label-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ip-destination-address", ("ip_destination_address", Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.IpDestinationAddress))])
                    self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.OwnerInformation))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ])
                    self.interface_name = None
                    self.sessiontype = None
                    self.local_discriminator = None

                    self.ip_destination_address = Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.IpDestinationAddress()
                    self.ip_destination_address.parent = self
                    self._children_name_map["ip_destination_address"] = "ip-destination-address"
                    self._children_yang_names.add("ip-destination-address")

                    self.owner_information = YList(self)
                    self._segment_path = lambda: "association-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation, ['interface_name', 'sessiontype', 'local_discriminator'], name, value)


                class IpDestinationAddress(Entity):
                    """
                    IPv4/v6 dest address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.IpDestinationAddress, self).__init__()

                        self.yang_name = "ip-destination-address"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "ip-destination-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.IpDestinationAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class OwnerInformation(Entity):
                    """
                    Client applications owning the session
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.OwnerInformation, self).__init__()

                        self.yang_name = "owner-information"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', YLeaf(YType.uint32, 'interval')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                            ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                            ('name', YLeaf(YType.str, 'name')),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.adjusted_interval = None
                        self.adjusted_detection_multiplier = None
                        self.name = None
                        self._segment_path = lambda: "owner-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-session-details/label-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.LabelSessionDetails.LabelSessionDetail.AssociationInformation.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


    class Ipv6SingleHopSessionDetails(Entity):
        """
        Table of detailed information about all IPv6
        singlehop BFD sessions in the System 
        
        .. attribute:: ipv6_single_hop_session_detail
        
        	Detailed information for a single IPv6 singlehop BFD session
        	**type**\: list of  		 :py:class:`Ipv6SingleHopSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6SingleHopSessionDetails, self).__init__()

            self.yang_name = "ipv6-single-hop-session-details"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv6-single-hop-session-detail", ("ipv6_single_hop_session_detail", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail))])
            self._leafs = OrderedDict()

            self.ipv6_single_hop_session_detail = YList(self)
            self._segment_path = lambda: "ipv6-single-hop-session-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails, [], name, value)


        class Ipv6SingleHopSessionDetail(Entity):
            """
            Detailed information for a single IPv6
            singlehop BFD session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:  :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:  :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState>`
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:  :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.OwnerInformation>`
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of  		 :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail, self).__init__()

                self.yang_name = "ipv6-single-hop-session-detail"
                self.yang_parent_name = "ipv6-single-hop-session-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-information", ("status_information", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation)), ("mp-download-state", ("mp_download_state", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState)), ("lsp-ping-info", ("lsp_ping_info", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo))])
                self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.OwnerInformation)), ("association-information", ("association_information", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation))])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                ])
                self.interface_name = None
                self.destination_address = None
                self.location = None

                self.status_information = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation()
                self.status_information.parent = self
                self._children_name_map["status_information"] = "status-information"
                self._children_yang_names.add("status-information")

                self.mp_download_state = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self._children_name_map["mp_download_state"] = "mp-download-state"
                self._children_yang_names.add("mp-download-state")

                self.lsp_ping_info = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self._children_name_map["lsp_ping_info"] = "lsp-ping-info"
                self._children_yang_names.add("lsp-ping-info")

                self.owner_information = YList(self)
                self.association_information = YList(self)
                self._segment_path = lambda: "ipv6-single-hop-session-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail, ['interface_name', 'destination_address', 'location'], name, value)


            class StatusInformation(Entity):
                """
                Session status information
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:  :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:  :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.TransmitPacket>`
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:  :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\: str
                
                .. attribute:: state
                
                	State
                	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation, self).__init__()

                    self.yang_name = "status-information"
                    self.yang_parent_name = "ipv6-single-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("source-address", ("source_address", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.SourceAddress)), ("last-state-change", ("last_state_change", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.LastStateChange)), ("transmit-packet", ("transmit_packet", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.TransmitPacket)), ("receive-packet", ("receive_packet", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.ReceivePacket)), ("status-brief-information", ("status_brief_information", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation)), ("async-transmit-statistics", ("async_transmit_statistics", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics)), ("async-receive-statistics", ("async_receive_statistics", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics)), ("echo-transmit-statistics", ("echo_transmit_statistics", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics)), ("echo-received-statistics", ("echo_received_statistics", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                        ('state', YLeaf(YType.enumeration, 'state')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                        ('remote_discriminator', YLeaf(YType.uint32, 'remote-discriminator')),
                        ('to_up_state_count', YLeaf(YType.uint32, 'to-up-state-count')),
                        ('desired_minimum_echo_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-echo-transmit-interval')),
                        ('remote_negotiated_interval', YLeaf(YType.uint32, 'remote-negotiated-interval')),
                        ('latency_number', YLeaf(YType.uint32, 'latency-number')),
                        ('latency_minimum', YLeaf(YType.uint32, 'latency-minimum')),
                        ('latency_maximum', YLeaf(YType.uint32, 'latency-maximum')),
                        ('latency_average', YLeaf(YType.uint32, 'latency-average')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                        ('internal_label', YLeaf(YType.uint32, 'internal-label')),
                    ])
                    self.sessiontype = None
                    self.session_subtype = None
                    self.state = None
                    self.local_discriminator = None
                    self.remote_discriminator = None
                    self.to_up_state_count = None
                    self.desired_minimum_echo_transmit_interval = None
                    self.remote_negotiated_interval = None
                    self.latency_number = None
                    self.latency_minimum = None
                    self.latency_maximum = None
                    self.latency_average = None
                    self.node_id = None
                    self.internal_label = None

                    self.source_address = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self._children_name_map["source_address"] = "source-address"
                    self._children_yang_names.add("source-address")

                    self.last_state_change = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self._children_name_map["last_state_change"] = "last-state-change"
                    self._children_yang_names.add("last-state-change")

                    self.transmit_packet = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self
                    self._children_name_map["transmit_packet"] = "transmit-packet"
                    self._children_yang_names.add("transmit-packet")

                    self.receive_packet = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self._children_name_map["receive_packet"] = "receive-packet"
                    self._children_yang_names.add("receive-packet")

                    self.status_brief_information = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self._children_name_map["status_brief_information"] = "status-brief-information"
                    self._children_yang_names.add("status-brief-information")

                    self.async_transmit_statistics = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self._children_name_map["async_transmit_statistics"] = "async-transmit-statistics"
                    self._children_yang_names.add("async-transmit-statistics")

                    self.async_receive_statistics = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self._children_name_map["async_receive_statistics"] = "async-receive-statistics"
                    self._children_yang_names.add("async-receive-statistics")

                    self.echo_transmit_statistics = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self._children_name_map["echo_transmit_statistics"] = "echo-transmit-statistics"
                    self._children_yang_names.add("echo-transmit-statistics")

                    self.echo_received_statistics = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self._children_name_map["echo_received_statistics"] = "echo-received-statistics"
                    self._children_yang_names.add("echo-received-statistics")
                    self._segment_path = lambda: "status-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation, ['sessiontype', 'session_subtype', 'state', 'local_discriminator', 'remote_discriminator', 'to_up_state_count', 'desired_minimum_echo_transmit_interval', 'remote_negotiated_interval', 'latency_number', 'latency_minimum', 'latency_maximum', 'latency_average', 'node_id', 'internal_label'], name, value)


                class SourceAddress(Entity):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.SourceAddress, self).__init__()

                        self.yang_name = "source-address"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "source-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.SourceAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class LastStateChange(Entity):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.LastStateChange, self).__init__()

                        self.yang_name = "last-state-change"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('days', YLeaf(YType.uint32, 'days')),
                            ('hours', YLeaf(YType.uint8, 'hours')),
                            ('minutes', YLeaf(YType.uint8, 'minutes')),
                            ('seconds', YLeaf(YType.uint8, 'seconds')),
                        ])
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None
                        self._segment_path = lambda: "last-state-change"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.LastStateChange, ['days', 'hours', 'minutes', 'seconds'], name, value)


                class TransmitPacket(Entity):
                    """
                    Transmit Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.TransmitPacket, self).__init__()

                        self.yang_name = "transmit-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "transmit-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.TransmitPacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class ReceivePacket(Entity):
                    """
                    Receive Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.ReceivePacket, self).__init__()

                        self.yang_name = "receive-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "receive-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.ReceivePacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class StatusBriefInformation(Entity):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation, self).__init__()

                        self.yang_name = "status-brief-information"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.async_interval_multiplier = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                        self._children_yang_names.add("async-interval-multiplier")

                        self.echo_interval_multiplier = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self
                        self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                        self._children_yang_names.add("echo-interval-multiplier")
                        self._segment_path = lambda: "status-brief-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/%s" % self._segment_path()


                    class AsyncIntervalMultiplier(Entity):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                            self.yang_name = "async-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                                ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_remote_transmit_interval = None
                            self.negotiated_local_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "async-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                    class EchoIntervalMultiplier(Entity):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                            self.yang_name = "echo-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "echo-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class AsyncTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics, self).__init__()

                        self.yang_name = "async-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class AsyncReceiveStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics, self).__init__()

                        self.yang_name = "async-receive-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-receive-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.AsyncReceiveStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics, self).__init__()

                        self.yang_name = "echo-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoReceivedStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics, self).__init__()

                        self.yang_name = "echo-received-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-received-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.StatusInformation.EchoReceivedStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


            class MpDownloadState(Entity):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:  :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:  :py:class:`BfdMpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadState>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState, self).__init__()

                    self.yang_name = "mp-download-state"
                    self.yang_parent_name = "ipv6-single-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("change-time", ("change_time", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState.ChangeTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('mp_download_state', YLeaf(YType.enumeration, 'mp-download-state')),
                    ])
                    self.mp_download_state = None

                    self.change_time = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self._children_name_map["change_time"] = "change-time"
                    self._children_yang_names.add("change-time")
                    self._segment_path = lambda: "mp-download-state"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState, ['mp_download_state'], name, value)


                class ChangeTime(Entity):
                    """
                    Change time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState.ChangeTime, self).__init__()

                        self.yang_name = "change-time"
                        self.yang_parent_name = "mp-download-state"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "change-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/mp-download-state/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.MpDownloadState.ChangeTime, ['seconds', 'nanoseconds'], name, value)


            class LspPingInfo(Entity):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:  :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:  :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:  :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\: str
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\: str
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\: str
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo, self).__init__()

                    self.yang_name = "lsp-ping-info"
                    self.yang_parent_name = "ipv6-single-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("lsp-ping-tx-last-time", ("lsp_ping_tx_last_time", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime)), ("lsp-ping-tx-last-error-time", ("lsp_ping_tx_last_error_time", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime)), ("lsp-ping-rx-last-time", ("lsp_ping_rx_last_time", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lsp_ping_tx_count', YLeaf(YType.uint32, 'lsp-ping-tx-count')),
                        ('lsp_ping_tx_error_count', YLeaf(YType.uint32, 'lsp-ping-tx-error-count')),
                        ('lsp_ping_tx_last_rc', YLeaf(YType.str, 'lsp-ping-tx-last-rc')),
                        ('lsp_ping_tx_last_error_rc', YLeaf(YType.str, 'lsp-ping-tx-last-error-rc')),
                        ('lsp_ping_rx_last_discr', YLeaf(YType.uint32, 'lsp-ping-rx-last-discr')),
                        ('lsp_ping_rx_count', YLeaf(YType.uint32, 'lsp-ping-rx-count')),
                        ('lsp_ping_rx_last_code', YLeaf(YType.uint8, 'lsp-ping-rx-last-code')),
                        ('lsp_ping_rx_last_subcode', YLeaf(YType.uint8, 'lsp-ping-rx-last-subcode')),
                        ('lsp_ping_rx_last_output', YLeaf(YType.str, 'lsp-ping-rx-last-output')),
                    ])
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_output = None

                    self.lsp_ping_tx_last_time = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_time"] = "lsp-ping-tx-last-time"
                    self._children_yang_names.add("lsp-ping-tx-last-time")

                    self.lsp_ping_tx_last_error_time = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_error_time"] = "lsp-ping-tx-last-error-time"
                    self._children_yang_names.add("lsp-ping-tx-last-error-time")

                    self.lsp_ping_rx_last_time = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self._children_name_map["lsp_ping_rx_last_time"] = "lsp-ping-rx-last-time"
                    self._children_yang_names.add("lsp-ping-rx-last-time")
                    self._segment_path = lambda: "lsp-ping-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo, ['lsp_ping_tx_count', 'lsp_ping_tx_error_count', 'lsp_ping_tx_last_rc', 'lsp_ping_tx_last_error_rc', 'lsp_ping_rx_last_discr', 'lsp_ping_rx_count', 'lsp_ping_rx_last_code', 'lsp_ping_rx_last_subcode', 'lsp_ping_rx_last_output'], name, value)


                class LspPingTxLastTime(Entity):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingTxLastErrorTime(Entity):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-error-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-error-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingTxLastErrorTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingRxLastTime(Entity):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-rx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-rx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.LspPingInfo.LspPingRxLastTime, ['seconds', 'nanoseconds'], name, value)


            class OwnerInformation(Entity):
                """
                Client applications owning the session
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: name
                
                	Client process name
                	**type**\: str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.OwnerInformation, self).__init__()

                    self.yang_name = "owner-information"
                    self.yang_parent_name = "ipv6-single-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interval', YLeaf(YType.uint32, 'interval')),
                        ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                        ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                        ('name', YLeaf(YType.str, 'name')),
                    ])
                    self.interval = None
                    self.detection_multiplier = None
                    self.adjusted_interval = None
                    self.adjusted_detection_multiplier = None
                    self.name = None
                    self._segment_path = lambda: "owner-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


            class AssociationInformation(Entity):
                """
                Association session information
                
                .. attribute:: ip_destination_address
                
                	IPv4/v6 dest address
                	**type**\:  :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.IpDestinationAddress>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.OwnerInformation>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation, self).__init__()

                    self.yang_name = "association-information"
                    self.yang_parent_name = "ipv6-single-hop-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ip-destination-address", ("ip_destination_address", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.IpDestinationAddress))])
                    self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.OwnerInformation))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ])
                    self.interface_name = None
                    self.sessiontype = None
                    self.local_discriminator = None

                    self.ip_destination_address = Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.IpDestinationAddress()
                    self.ip_destination_address.parent = self
                    self._children_name_map["ip_destination_address"] = "ip-destination-address"
                    self._children_yang_names.add("ip-destination-address")

                    self.owner_information = YList(self)
                    self._segment_path = lambda: "association-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation, ['interface_name', 'sessiontype', 'local_discriminator'], name, value)


                class IpDestinationAddress(Entity):
                    """
                    IPv4/v6 dest address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.IpDestinationAddress, self).__init__()

                        self.yang_name = "ip-destination-address"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "ip-destination-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.IpDestinationAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class OwnerInformation(Entity):
                    """
                    Client applications owning the session
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.OwnerInformation, self).__init__()

                        self.yang_name = "owner-information"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', YLeaf(YType.uint32, 'interval')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                            ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                            ('name', YLeaf(YType.str, 'name')),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.adjusted_interval = None
                        self.adjusted_detection_multiplier = None
                        self.name = None
                        self._segment_path = lambda: "owner-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-details/ipv6-single-hop-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail.AssociationInformation.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


    class Ipv4MultiHopCounters(Entity):
        """
        IPv4 multiple hop Counters
        
        .. attribute:: ipv4_multi_hop_packet_counters
        
        	Table of IPv4 multiple hop Packet counters
        	**type**\:  :py:class:`Ipv4MultiHopPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4MultiHopCounters, self).__init__()

            self.yang_name = "ipv4-multi-hop-counters"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("ipv4-multi-hop-packet-counters", ("ipv4_multi_hop_packet_counters", Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.ipv4_multi_hop_packet_counters = Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters()
            self.ipv4_multi_hop_packet_counters.parent = self
            self._children_name_map["ipv4_multi_hop_packet_counters"] = "ipv4-multi-hop-packet-counters"
            self._children_yang_names.add("ipv4-multi-hop-packet-counters")
            self._segment_path = lambda: "ipv4-multi-hop-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class Ipv4MultiHopPacketCounters(Entity):
            """
            Table of IPv4 multiple hop Packet counters
            
            .. attribute:: ipv4_multi_hop_packet_counter
            
            	IPv4 multiple hop Packet counters
            	**type**\: list of  		 :py:class:`Ipv4MultiHopPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters, self).__init__()

                self.yang_name = "ipv4-multi-hop-packet-counters"
                self.yang_parent_name = "ipv4-multi-hop-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("ipv4-multi-hop-packet-counter", ("ipv4_multi_hop_packet_counter", Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter))])
                self._leafs = OrderedDict()

                self.ipv4_multi_hop_packet_counter = YList(self)
                self._segment_path = lambda: "ipv4-multi-hop-packet-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters, [], name, value)


            class Ipv4MultiHopPacketCounter(Entity):
                """
                IPv4 multiple hop Packet counters
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\: union of the below types:
                
                		**type**\: str
                
                			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                		**type**\: str
                
                			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_address
                
                	Destination Address
                	**type**\: union of the below types:
                
                		**type**\: str
                
                			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                		**type**\: str
                
                			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: location
                
                	Location
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: vrf_name
                
                	VRF name
                	**type**\: str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:  :py:class:`BfdMgmtPktDisplay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplay>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter, self).__init__()

                    self.yang_name = "ipv4-multi-hop-packet-counter"
                    self.yang_parent_name = "ipv4-multi-hop-packet-counters"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('source_address', YLeaf(YType.str, 'source-address')),
                        ('destination_address', YLeaf(YType.str, 'destination-address')),
                        ('location', YLeaf(YType.str, 'location')),
                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                        ('hello_transmit_count', YLeaf(YType.uint32, 'hello-transmit-count')),
                        ('hello_receive_count', YLeaf(YType.uint32, 'hello-receive-count')),
                        ('echo_transmit_count', YLeaf(YType.uint32, 'echo-transmit-count')),
                        ('echo_receive_count', YLeaf(YType.uint32, 'echo-receive-count')),
                        ('display_type', YLeaf(YType.enumeration, 'display-type')),
                    ])
                    self.source_address = None
                    self.destination_address = None
                    self.location = None
                    self.vrf_name = None
                    self.hello_transmit_count = None
                    self.hello_receive_count = None
                    self.echo_transmit_count = None
                    self.echo_receive_count = None
                    self.display_type = None
                    self._segment_path = lambda: "ipv4-multi-hop-packet-counter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-counters/ipv4-multi-hop-packet-counters/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4MultiHopCounters.Ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter, ['source_address', 'destination_address', 'location', 'vrf_name', 'hello_transmit_count', 'hello_receive_count', 'echo_transmit_count', 'echo_receive_count', 'display_type'], name, value)


    class SessionDetails(Entity):
        """
        Table of detailed information about IPv4
        singlehop BFD sessions in the System 
        
        .. attribute:: session_detail
        
        	Detailed information for a single IPv4 singlehop BFD session
        	**type**\: list of  		 :py:class:`SessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.SessionDetails, self).__init__()

            self.yang_name = "session-details"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("session-detail", ("session_detail", Bfd.SessionDetails.SessionDetail))])
            self._leafs = OrderedDict()

            self.session_detail = YList(self)
            self._segment_path = lambda: "session-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.SessionDetails, [], name, value)


        class SessionDetail(Entity):
            """
            Detailed information for a single IPv4
            singlehop BFD session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:  :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:  :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.MpDownloadState>`
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:  :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.LspPingInfo>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.OwnerInformation>`
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of  		 :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.SessionDetails.SessionDetail, self).__init__()

                self.yang_name = "session-detail"
                self.yang_parent_name = "session-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-information", ("status_information", Bfd.SessionDetails.SessionDetail.StatusInformation)), ("mp-download-state", ("mp_download_state", Bfd.SessionDetails.SessionDetail.MpDownloadState)), ("lsp-ping-info", ("lsp_ping_info", Bfd.SessionDetails.SessionDetail.LspPingInfo))])
                self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.SessionDetails.SessionDetail.OwnerInformation)), ("association-information", ("association_information", Bfd.SessionDetails.SessionDetail.AssociationInformation))])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                ])
                self.interface_name = None
                self.destination_address = None
                self.location = None

                self.status_information = Bfd.SessionDetails.SessionDetail.StatusInformation()
                self.status_information.parent = self
                self._children_name_map["status_information"] = "status-information"
                self._children_yang_names.add("status-information")

                self.mp_download_state = Bfd.SessionDetails.SessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self._children_name_map["mp_download_state"] = "mp-download-state"
                self._children_yang_names.add("mp-download-state")

                self.lsp_ping_info = Bfd.SessionDetails.SessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self._children_name_map["lsp_ping_info"] = "lsp-ping-info"
                self._children_yang_names.add("lsp-ping-info")

                self.owner_information = YList(self)
                self.association_information = YList(self)
                self._segment_path = lambda: "session-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.SessionDetails.SessionDetail, ['interface_name', 'destination_address', 'location'], name, value)


            class StatusInformation(Entity):
                """
                Session status information
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:  :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:  :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.TransmitPacket>`
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:  :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\: str
                
                .. attribute:: state
                
                	State
                	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.SessionDetails.SessionDetail.StatusInformation, self).__init__()

                    self.yang_name = "status-information"
                    self.yang_parent_name = "session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("source-address", ("source_address", Bfd.SessionDetails.SessionDetail.StatusInformation.SourceAddress)), ("last-state-change", ("last_state_change", Bfd.SessionDetails.SessionDetail.StatusInformation.LastStateChange)), ("transmit-packet", ("transmit_packet", Bfd.SessionDetails.SessionDetail.StatusInformation.TransmitPacket)), ("receive-packet", ("receive_packet", Bfd.SessionDetails.SessionDetail.StatusInformation.ReceivePacket)), ("status-brief-information", ("status_brief_information", Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation)), ("async-transmit-statistics", ("async_transmit_statistics", Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncTransmitStatistics)), ("async-receive-statistics", ("async_receive_statistics", Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncReceiveStatistics)), ("echo-transmit-statistics", ("echo_transmit_statistics", Bfd.SessionDetails.SessionDetail.StatusInformation.EchoTransmitStatistics)), ("echo-received-statistics", ("echo_received_statistics", Bfd.SessionDetails.SessionDetail.StatusInformation.EchoReceivedStatistics))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                        ('state', YLeaf(YType.enumeration, 'state')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                        ('remote_discriminator', YLeaf(YType.uint32, 'remote-discriminator')),
                        ('to_up_state_count', YLeaf(YType.uint32, 'to-up-state-count')),
                        ('desired_minimum_echo_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-echo-transmit-interval')),
                        ('remote_negotiated_interval', YLeaf(YType.uint32, 'remote-negotiated-interval')),
                        ('latency_number', YLeaf(YType.uint32, 'latency-number')),
                        ('latency_minimum', YLeaf(YType.uint32, 'latency-minimum')),
                        ('latency_maximum', YLeaf(YType.uint32, 'latency-maximum')),
                        ('latency_average', YLeaf(YType.uint32, 'latency-average')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                        ('internal_label', YLeaf(YType.uint32, 'internal-label')),
                    ])
                    self.sessiontype = None
                    self.session_subtype = None
                    self.state = None
                    self.local_discriminator = None
                    self.remote_discriminator = None
                    self.to_up_state_count = None
                    self.desired_minimum_echo_transmit_interval = None
                    self.remote_negotiated_interval = None
                    self.latency_number = None
                    self.latency_minimum = None
                    self.latency_maximum = None
                    self.latency_average = None
                    self.node_id = None
                    self.internal_label = None

                    self.source_address = Bfd.SessionDetails.SessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self._children_name_map["source_address"] = "source-address"
                    self._children_yang_names.add("source-address")

                    self.last_state_change = Bfd.SessionDetails.SessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self._children_name_map["last_state_change"] = "last-state-change"
                    self._children_yang_names.add("last-state-change")

                    self.transmit_packet = Bfd.SessionDetails.SessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self
                    self._children_name_map["transmit_packet"] = "transmit-packet"
                    self._children_yang_names.add("transmit-packet")

                    self.receive_packet = Bfd.SessionDetails.SessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self._children_name_map["receive_packet"] = "receive-packet"
                    self._children_yang_names.add("receive-packet")

                    self.status_brief_information = Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self._children_name_map["status_brief_information"] = "status-brief-information"
                    self._children_yang_names.add("status-brief-information")

                    self.async_transmit_statistics = Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self._children_name_map["async_transmit_statistics"] = "async-transmit-statistics"
                    self._children_yang_names.add("async-transmit-statistics")

                    self.async_receive_statistics = Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self._children_name_map["async_receive_statistics"] = "async-receive-statistics"
                    self._children_yang_names.add("async-receive-statistics")

                    self.echo_transmit_statistics = Bfd.SessionDetails.SessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self._children_name_map["echo_transmit_statistics"] = "echo-transmit-statistics"
                    self._children_yang_names.add("echo-transmit-statistics")

                    self.echo_received_statistics = Bfd.SessionDetails.SessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self._children_name_map["echo_received_statistics"] = "echo-received-statistics"
                    self._children_yang_names.add("echo-received-statistics")
                    self._segment_path = lambda: "status-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation, ['sessiontype', 'session_subtype', 'state', 'local_discriminator', 'remote_discriminator', 'to_up_state_count', 'desired_minimum_echo_transmit_interval', 'remote_negotiated_interval', 'latency_number', 'latency_minimum', 'latency_maximum', 'latency_average', 'node_id', 'internal_label'], name, value)


                class SourceAddress(Entity):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.StatusInformation.SourceAddress, self).__init__()

                        self.yang_name = "source-address"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "source-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation.SourceAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class LastStateChange(Entity):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.StatusInformation.LastStateChange, self).__init__()

                        self.yang_name = "last-state-change"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('days', YLeaf(YType.uint32, 'days')),
                            ('hours', YLeaf(YType.uint8, 'hours')),
                            ('minutes', YLeaf(YType.uint8, 'minutes')),
                            ('seconds', YLeaf(YType.uint8, 'seconds')),
                        ])
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None
                        self._segment_path = lambda: "last-state-change"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation.LastStateChange, ['days', 'hours', 'minutes', 'seconds'], name, value)


                class TransmitPacket(Entity):
                    """
                    Transmit Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.StatusInformation.TransmitPacket, self).__init__()

                        self.yang_name = "transmit-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "transmit-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation.TransmitPacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class ReceivePacket(Entity):
                    """
                    Receive Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.StatusInformation.ReceivePacket, self).__init__()

                        self.yang_name = "receive-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "receive-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation.ReceivePacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class StatusBriefInformation(Entity):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation, self).__init__()

                        self.yang_name = "status-brief-information"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.async_interval_multiplier = Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                        self._children_yang_names.add("async-interval-multiplier")

                        self.echo_interval_multiplier = Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self
                        self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                        self._children_yang_names.add("echo-interval-multiplier")
                        self._segment_path = lambda: "status-brief-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/%s" % self._segment_path()


                    class AsyncIntervalMultiplier(Entity):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                            self.yang_name = "async-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                                ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_remote_transmit_interval = None
                            self.negotiated_local_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "async-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                    class EchoIntervalMultiplier(Entity):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                            self.yang_name = "echo-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "echo-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class AsyncTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncTransmitStatistics, self).__init__()

                        self.yang_name = "async-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class AsyncReceiveStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncReceiveStatistics, self).__init__()

                        self.yang_name = "async-receive-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-receive-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation.AsyncReceiveStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.StatusInformation.EchoTransmitStatistics, self).__init__()

                        self.yang_name = "echo-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation.EchoTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoReceivedStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.StatusInformation.EchoReceivedStatistics, self).__init__()

                        self.yang_name = "echo-received-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-received-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.StatusInformation.EchoReceivedStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


            class MpDownloadState(Entity):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:  :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:  :py:class:`BfdMpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadState>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.SessionDetails.SessionDetail.MpDownloadState, self).__init__()

                    self.yang_name = "mp-download-state"
                    self.yang_parent_name = "session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("change-time", ("change_time", Bfd.SessionDetails.SessionDetail.MpDownloadState.ChangeTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('mp_download_state', YLeaf(YType.enumeration, 'mp-download-state')),
                    ])
                    self.mp_download_state = None

                    self.change_time = Bfd.SessionDetails.SessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self._children_name_map["change_time"] = "change-time"
                    self._children_yang_names.add("change-time")
                    self._segment_path = lambda: "mp-download-state"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.SessionDetails.SessionDetail.MpDownloadState, ['mp_download_state'], name, value)


                class ChangeTime(Entity):
                    """
                    Change time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.MpDownloadState.ChangeTime, self).__init__()

                        self.yang_name = "change-time"
                        self.yang_parent_name = "mp-download-state"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "change-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/mp-download-state/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.MpDownloadState.ChangeTime, ['seconds', 'nanoseconds'], name, value)


            class LspPingInfo(Entity):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:  :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:  :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:  :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\: str
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\: str
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\: str
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.SessionDetails.SessionDetail.LspPingInfo, self).__init__()

                    self.yang_name = "lsp-ping-info"
                    self.yang_parent_name = "session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("lsp-ping-tx-last-time", ("lsp_ping_tx_last_time", Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastTime)), ("lsp-ping-tx-last-error-time", ("lsp_ping_tx_last_error_time", Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastErrorTime)), ("lsp-ping-rx-last-time", ("lsp_ping_rx_last_time", Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingRxLastTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lsp_ping_tx_count', YLeaf(YType.uint32, 'lsp-ping-tx-count')),
                        ('lsp_ping_tx_error_count', YLeaf(YType.uint32, 'lsp-ping-tx-error-count')),
                        ('lsp_ping_tx_last_rc', YLeaf(YType.str, 'lsp-ping-tx-last-rc')),
                        ('lsp_ping_tx_last_error_rc', YLeaf(YType.str, 'lsp-ping-tx-last-error-rc')),
                        ('lsp_ping_rx_last_discr', YLeaf(YType.uint32, 'lsp-ping-rx-last-discr')),
                        ('lsp_ping_rx_count', YLeaf(YType.uint32, 'lsp-ping-rx-count')),
                        ('lsp_ping_rx_last_code', YLeaf(YType.uint8, 'lsp-ping-rx-last-code')),
                        ('lsp_ping_rx_last_subcode', YLeaf(YType.uint8, 'lsp-ping-rx-last-subcode')),
                        ('lsp_ping_rx_last_output', YLeaf(YType.str, 'lsp-ping-rx-last-output')),
                    ])
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_output = None

                    self.lsp_ping_tx_last_time = Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_time"] = "lsp-ping-tx-last-time"
                    self._children_yang_names.add("lsp-ping-tx-last-time")

                    self.lsp_ping_tx_last_error_time = Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_error_time"] = "lsp-ping-tx-last-error-time"
                    self._children_yang_names.add("lsp-ping-tx-last-error-time")

                    self.lsp_ping_rx_last_time = Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self._children_name_map["lsp_ping_rx_last_time"] = "lsp-ping-rx-last-time"
                    self._children_yang_names.add("lsp-ping-rx-last-time")
                    self._segment_path = lambda: "lsp-ping-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.SessionDetails.SessionDetail.LspPingInfo, ['lsp_ping_tx_count', 'lsp_ping_tx_error_count', 'lsp_ping_tx_last_rc', 'lsp_ping_tx_last_error_rc', 'lsp_ping_rx_last_discr', 'lsp_ping_rx_count', 'lsp_ping_rx_last_code', 'lsp_ping_rx_last_subcode', 'lsp_ping_rx_last_output'], name, value)


                class LspPingTxLastTime(Entity):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingTxLastErrorTime(Entity):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastErrorTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-error-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-error-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingTxLastErrorTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingRxLastTime(Entity):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingRxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-rx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-rx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.LspPingInfo.LspPingRxLastTime, ['seconds', 'nanoseconds'], name, value)


            class OwnerInformation(Entity):
                """
                Client applications owning the session
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: name
                
                	Client process name
                	**type**\: str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.SessionDetails.SessionDetail.OwnerInformation, self).__init__()

                    self.yang_name = "owner-information"
                    self.yang_parent_name = "session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interval', YLeaf(YType.uint32, 'interval')),
                        ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                        ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                        ('name', YLeaf(YType.str, 'name')),
                    ])
                    self.interval = None
                    self.detection_multiplier = None
                    self.adjusted_interval = None
                    self.adjusted_detection_multiplier = None
                    self.name = None
                    self._segment_path = lambda: "owner-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.SessionDetails.SessionDetail.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


            class AssociationInformation(Entity):
                """
                Association session information
                
                .. attribute:: ip_destination_address
                
                	IPv4/v6 dest address
                	**type**\:  :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation.IpDestinationAddress>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.SessionDetails.SessionDetail.AssociationInformation.OwnerInformation>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.SessionDetails.SessionDetail.AssociationInformation, self).__init__()

                    self.yang_name = "association-information"
                    self.yang_parent_name = "session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ip-destination-address", ("ip_destination_address", Bfd.SessionDetails.SessionDetail.AssociationInformation.IpDestinationAddress))])
                    self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.SessionDetails.SessionDetail.AssociationInformation.OwnerInformation))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ])
                    self.interface_name = None
                    self.sessiontype = None
                    self.local_discriminator = None

                    self.ip_destination_address = Bfd.SessionDetails.SessionDetail.AssociationInformation.IpDestinationAddress()
                    self.ip_destination_address.parent = self
                    self._children_name_map["ip_destination_address"] = "ip-destination-address"
                    self._children_yang_names.add("ip-destination-address")

                    self.owner_information = YList(self)
                    self._segment_path = lambda: "association-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.SessionDetails.SessionDetail.AssociationInformation, ['interface_name', 'sessiontype', 'local_discriminator'], name, value)


                class IpDestinationAddress(Entity):
                    """
                    IPv4/v6 dest address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.AssociationInformation.IpDestinationAddress, self).__init__()

                        self.yang_name = "ip-destination-address"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "ip-destination-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.AssociationInformation.IpDestinationAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class OwnerInformation(Entity):
                    """
                    Client applications owning the session
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.SessionDetails.SessionDetail.AssociationInformation.OwnerInformation, self).__init__()

                        self.yang_name = "owner-information"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', YLeaf(YType.uint32, 'interval')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                            ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                            ('name', YLeaf(YType.str, 'name')),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.adjusted_interval = None
                        self.adjusted_detection_multiplier = None
                        self.name = None
                        self._segment_path = lambda: "owner-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/session-details/session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.SessionDetails.SessionDetail.AssociationInformation.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


    class Ipv4SingleHopMultiPaths(Entity):
        """
        IPv4 single hop multipath
        
        .. attribute:: ipv4_single_hop_multi_path
        
        	IPv4 single hop multipath table
        	**type**\: list of  		 :py:class:`Ipv4SingleHopMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4SingleHopMultiPaths, self).__init__()

            self.yang_name = "ipv4-single-hop-multi-paths"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4-single-hop-multi-path", ("ipv4_single_hop_multi_path", Bfd.Ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath))])
            self._leafs = OrderedDict()

            self.ipv4_single_hop_multi_path = YList(self)
            self._segment_path = lambda: "ipv4-single-hop-multi-paths"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4SingleHopMultiPaths, [], name, value)


        class Ipv4SingleHopMultiPath(Entity):
            """
            IPv4 single hop multipath table
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath, self).__init__()

                self.yang_name = "ipv4-single-hop-multi-path"
                self.yang_parent_name = "ipv4-single-hop-multi-paths"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('incoming_label_xr', YLeaf(YType.uint32, 'incoming-label-xr')),
                    ('session_interface_name', YLeaf(YType.str, 'session-interface-name')),
                ])
                self.interface_name = None
                self.destination_address = None
                self.location = None
                self.session_subtype = None
                self.state = None
                self.local_discriminator = None
                self.node_id = None
                self.incoming_label_xr = None
                self.session_interface_name = None
                self._segment_path = lambda: "ipv4-single-hop-multi-path"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-multi-paths/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath, ['interface_name', 'destination_address', 'location', 'session_subtype', 'state', 'local_discriminator', 'node_id', 'incoming_label_xr', 'session_interface_name'], name, value)


    class Ipv4SingleHopSessionBriefs(Entity):
        """
        Table of brief information about all IPv4
        singlehop BFD sessions in the System
        
        .. attribute:: ipv4_single_hop_session_brief
        
        	Brief information for a single IPv4 singlehop BFD session
        	**type**\: list of  		 :py:class:`Ipv4SingleHopSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4SingleHopSessionBriefs, self).__init__()

            self.yang_name = "ipv4-single-hop-session-briefs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4-single-hop-session-brief", ("ipv4_single_hop_session_brief", Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief))])
            self._leafs = OrderedDict()

            self.ipv4_single_hop_session_brief = YList(self)
            self._segment_path = lambda: "ipv4-single-hop-session-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4SingleHopSessionBriefs, [], name, value)


        class Ipv4SingleHopSessionBrief(Entity):
            """
            Brief information for a single IPv4 singlehop
            BFD session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation>`
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief, self).__init__()

                self.yang_name = "ipv4-single-hop-session-brief"
                self.yang_parent_name = "ipv4-single-hop-session-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-brief-information", ("status_brief_information", Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('session_flags', YLeaf(YType.uint32, 'session-flags')),
                ])
                self.interface_name = None
                self.destination_address = None
                self.location = None
                self.node_id = None
                self.state = None
                self.session_type = None
                self.session_subtype = None
                self.session_flags = None

                self.status_brief_information = Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self._children_name_map["status_brief_information"] = "status-brief-information"
                self._children_yang_names.add("status-brief-information")
                self._segment_path = lambda: "ipv4-single-hop-session-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief, ['interface_name', 'destination_address', 'location', 'node_id', 'state', 'session_type', 'session_subtype', 'session_flags'], name, value)


            class StatusBriefInformation(Entity):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation, self).__init__()

                    self.yang_name = "status-brief-information"
                    self.yang_parent_name = "ipv4-single-hop-session-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.async_interval_multiplier = Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                    self._children_yang_names.add("async-interval-multiplier")

                    self.echo_interval_multiplier = Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self
                    self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                    self._children_yang_names.add("echo-interval-multiplier")
                    self._segment_path = lambda: "status-brief-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-briefs/ipv4-single-hop-session-brief/%s" % self._segment_path()


                class AsyncIntervalMultiplier(Entity):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                        self.yang_name = "async-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                            ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_remote_transmit_interval = None
                        self.negotiated_local_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "async-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-briefs/ipv4-single-hop-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class EchoIntervalMultiplier(Entity):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                        self.yang_name = "echo-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "echo-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-single-hop-session-briefs/ipv4-single-hop-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


    class Ipv6MultiHopCounters(Entity):
        """
        IPv6 multiple hop Counters
        
        .. attribute:: ipv6_multi_hop_packet_counters
        
        	Table of IPv6 multiple hop Packet counters
        	**type**\:  :py:class:`Ipv6MultiHopPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6MultiHopCounters, self).__init__()

            self.yang_name = "ipv6-multi-hop-counters"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("ipv6-multi-hop-packet-counters", ("ipv6_multi_hop_packet_counters", Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.ipv6_multi_hop_packet_counters = Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters()
            self.ipv6_multi_hop_packet_counters.parent = self
            self._children_name_map["ipv6_multi_hop_packet_counters"] = "ipv6-multi-hop-packet-counters"
            self._children_yang_names.add("ipv6-multi-hop-packet-counters")
            self._segment_path = lambda: "ipv6-multi-hop-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class Ipv6MultiHopPacketCounters(Entity):
            """
            Table of IPv6 multiple hop Packet counters
            
            .. attribute:: ipv6_multi_hop_packet_counter
            
            	IPv4 multiple hop Packet counters
            	**type**\: list of  		 :py:class:`Ipv6MultiHopPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters, self).__init__()

                self.yang_name = "ipv6-multi-hop-packet-counters"
                self.yang_parent_name = "ipv6-multi-hop-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("ipv6-multi-hop-packet-counter", ("ipv6_multi_hop_packet_counter", Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter))])
                self._leafs = OrderedDict()

                self.ipv6_multi_hop_packet_counter = YList(self)
                self._segment_path = lambda: "ipv6-multi-hop-packet-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters, [], name, value)


            class Ipv6MultiHopPacketCounter(Entity):
                """
                IPv4 multiple hop Packet counters
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\: union of the below types:
                
                		**type**\: str
                
                			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                		**type**\: str
                
                			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_address
                
                	Destination Address
                	**type**\: union of the below types:
                
                		**type**\: str
                
                			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                		**type**\: str
                
                			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: location
                
                	Location
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: vrf_name
                
                	VRF name
                	**type**\: str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:  :py:class:`BfdMgmtPktDisplay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplay>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter, self).__init__()

                    self.yang_name = "ipv6-multi-hop-packet-counter"
                    self.yang_parent_name = "ipv6-multi-hop-packet-counters"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('source_address', YLeaf(YType.str, 'source-address')),
                        ('destination_address', YLeaf(YType.str, 'destination-address')),
                        ('location', YLeaf(YType.str, 'location')),
                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                        ('hello_transmit_count', YLeaf(YType.uint32, 'hello-transmit-count')),
                        ('hello_receive_count', YLeaf(YType.uint32, 'hello-receive-count')),
                        ('echo_transmit_count', YLeaf(YType.uint32, 'echo-transmit-count')),
                        ('echo_receive_count', YLeaf(YType.uint32, 'echo-receive-count')),
                        ('display_type', YLeaf(YType.enumeration, 'display-type')),
                    ])
                    self.source_address = None
                    self.destination_address = None
                    self.location = None
                    self.vrf_name = None
                    self.hello_transmit_count = None
                    self.hello_receive_count = None
                    self.echo_transmit_count = None
                    self.echo_receive_count = None
                    self.display_type = None
                    self._segment_path = lambda: "ipv6-multi-hop-packet-counter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-multi-hop-counters/ipv6-multi-hop-packet-counters/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6MultiHopCounters.Ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter, ['source_address', 'destination_address', 'location', 'vrf_name', 'hello_transmit_count', 'hello_receive_count', 'echo_transmit_count', 'echo_receive_count', 'display_type'], name, value)


    class Ipv6SingleHopLocationSummaries(Entity):
        """
        Table of summary information about BFD IPv6
        singlehop sessions per location
        
        .. attribute:: ipv6_single_hop_location_summary
        
        	Summary information for BFD IPv6 singlehop sessions for location
        	**type**\: list of  		 :py:class:`Ipv6SingleHopLocationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6SingleHopLocationSummaries, self).__init__()

            self.yang_name = "ipv6-single-hop-location-summaries"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv6-single-hop-location-summary", ("ipv6_single_hop_location_summary", Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary))])
            self._leafs = OrderedDict()

            self.ipv6_single_hop_location_summary = YList(self)
            self._segment_path = lambda: "ipv6-single-hop-location-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv6SingleHopLocationSummaries, [], name, value)


        class Ipv6SingleHopLocationSummary(Entity):
            """
            Summary information for BFD IPv6 singlehop
            sessions for location
            
            .. attribute:: location_name  (key)
            
            	Location Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_state
            
            	Statistics of states for sessions
            	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary.SessionState>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary, self).__init__()

                self.yang_name = "ipv6-single-hop-location-summary"
                self.yang_parent_name = "ipv6-single-hop-location-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['location_name']
                self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary.SessionState))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('location_name', YLeaf(YType.str, 'location-name')),
                ])
                self.location_name = None

                self.session_state = Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary.SessionState()
                self.session_state.parent = self
                self._children_name_map["session_state"] = "session-state"
                self._children_yang_names.add("session-state")
                self._segment_path = lambda: "ipv6-single-hop-location-summary" + "[location-name='" + str(self.location_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-location-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary, ['location_name'], name, value)


            class SessionState(Entity):
                """
                Statistics of states for sessions
                
                .. attribute:: total_count
                
                	Number of sessions in database
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: up_count
                
                	Number of sessions in up state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: down_count
                
                	Number of sessions in down state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_count
                
                	Number of sessions in unknown state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retry_count
                
                	Number of sessions in retry state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: standby_count
                
                	Number of sessions in standby state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary.SessionState, self).__init__()

                    self.yang_name = "session-state"
                    self.yang_parent_name = "ipv6-single-hop-location-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_count', YLeaf(YType.uint32, 'total-count')),
                        ('up_count', YLeaf(YType.uint32, 'up-count')),
                        ('down_count', YLeaf(YType.uint32, 'down-count')),
                        ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                        ('retry_count', YLeaf(YType.uint32, 'retry-count')),
                        ('standby_count', YLeaf(YType.uint32, 'standby-count')),
                    ])
                    self.total_count = None
                    self.up_count = None
                    self.down_count = None
                    self.unknown_count = None
                    self.retry_count = None
                    self.standby_count = None
                    self._segment_path = lambda: "session-state"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary.SessionState, ['total_count', 'up_count', 'down_count', 'unknown_count', 'retry_count', 'standby_count'], name, value)


    class LabelCounters(Entity):
        """
        Label Counters
        
        .. attribute:: label_packet_counters
        
        	Table of Label Packet counters
        	**type**\:  :py:class:`LabelPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelCounters.LabelPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.LabelCounters, self).__init__()

            self.yang_name = "label-counters"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("label-packet-counters", ("label_packet_counters", Bfd.LabelCounters.LabelPacketCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.label_packet_counters = Bfd.LabelCounters.LabelPacketCounters()
            self.label_packet_counters.parent = self
            self._children_name_map["label_packet_counters"] = "label-packet-counters"
            self._children_yang_names.add("label-packet-counters")
            self._segment_path = lambda: "label-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class LabelPacketCounters(Entity):
            """
            Table of Label Packet counters
            
            .. attribute:: label_packet_counter
            
            	Interface Label Packet counters
            	**type**\: list of  		 :py:class:`LabelPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.LabelCounters.LabelPacketCounters.LabelPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.LabelCounters.LabelPacketCounters, self).__init__()

                self.yang_name = "label-packet-counters"
                self.yang_parent_name = "label-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("label-packet-counter", ("label_packet_counter", Bfd.LabelCounters.LabelPacketCounters.LabelPacketCounter))])
                self._leafs = OrderedDict()

                self.label_packet_counter = YList(self)
                self._segment_path = lambda: "label-packet-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.LabelCounters.LabelPacketCounters, [], name, value)


            class LabelPacketCounter(Entity):
                """
                Interface Label Packet counters
                
                .. attribute:: interface_name
                
                	Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: location
                
                	Location
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:  :py:class:`BfdMgmtPktDisplay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplay>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.LabelCounters.LabelPacketCounters.LabelPacketCounter, self).__init__()

                    self.yang_name = "label-packet-counter"
                    self.yang_parent_name = "label-packet-counters"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('location', YLeaf(YType.str, 'location')),
                        ('hello_transmit_count', YLeaf(YType.uint32, 'hello-transmit-count')),
                        ('hello_receive_count', YLeaf(YType.uint32, 'hello-receive-count')),
                        ('echo_transmit_count', YLeaf(YType.uint32, 'echo-transmit-count')),
                        ('echo_receive_count', YLeaf(YType.uint32, 'echo-receive-count')),
                        ('display_type', YLeaf(YType.enumeration, 'display-type')),
                    ])
                    self.interface_name = None
                    self.location = None
                    self.hello_transmit_count = None
                    self.hello_receive_count = None
                    self.echo_transmit_count = None
                    self.echo_receive_count = None
                    self.display_type = None
                    self._segment_path = lambda: "label-packet-counter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/label-counters/label-packet-counters/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.LabelCounters.LabelPacketCounters.LabelPacketCounter, ['interface_name', 'location', 'hello_transmit_count', 'hello_receive_count', 'echo_transmit_count', 'echo_receive_count', 'display_type'], name, value)


    class Ipv4BfDoMplsteHeadSessionDetails(Entity):
        """
        Table of detailed information about all IPv4 BFD
        over MPLS\-TE Head sessions in the System
        
        .. attribute:: ipv4bf_do_mplste_head_session_detail
        
        	Detailed information for a single IPv4 BFD over MPLS\-TE head session
        	**type**\: list of  		 :py:class:`Ipv4BfDoMplsteHeadSessionDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfDoMplsteHeadSessionDetails, self).__init__()

            self.yang_name = "ipv4bf-do-mplste-head-session-details"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4bf-do-mplste-head-session-detail", ("ipv4bf_do_mplste_head_session_detail", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail))])
            self._leafs = OrderedDict()

            self.ipv4bf_do_mplste_head_session_detail = YList(self)
            self._segment_path = lambda: "ipv4bf-do-mplste-head-session-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails, [], name, value)


        class Ipv4BfDoMplsteHeadSessionDetail(Entity):
            """
            Detailed information for a single IPv4 BFD over
            MPLS\-TE head session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_information
            
            	Session status information
            	**type**\:  :py:class:`StatusInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation>`
            
            .. attribute:: mp_download_state
            
            	MP Dowload State
            	**type**\:  :py:class:`MpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState>`
            
            .. attribute:: lsp_ping_info
            
            	LSP Ping Info
            	**type**\:  :py:class:`LspPingInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo>`
            
            .. attribute:: owner_information
            
            	Client applications owning the session
            	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.OwnerInformation>`
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of  		 :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail, self).__init__()

                self.yang_name = "ipv4bf-do-mplste-head-session-detail"
                self.yang_parent_name = "ipv4bf-do-mplste-head-session-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-information", ("status_information", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation)), ("mp-download-state", ("mp_download_state", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState)), ("lsp-ping-info", ("lsp_ping_info", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo))])
                self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.OwnerInformation)), ("association-information", ("association_information", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation))])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('incoming_label', YLeaf(YType.int32, 'incoming-label')),
                    ('fe_ctype', YLeaf(YType.int32, 'fe-ctype')),
                    ('fec_subgroup_id', YLeaf(YType.int32, 'fec-subgroup-id')),
                    ('feclspid', YLeaf(YType.int32, 'feclspid')),
                    ('fec_tunnel_id', YLeaf(YType.int32, 'fec-tunnel-id')),
                    ('fec_extended_tunnel_id', YLeaf(YType.str, 'fec-extended-tunnel-id')),
                    ('fec_source', YLeaf(YType.str, 'fec-source')),
                    ('fec_destination', YLeaf(YType.str, 'fec-destination')),
                    ('fecp2mpid', YLeaf(YType.int32, 'fecp2mpid')),
                    ('fec_subgroup_originator', YLeaf(YType.str, 'fec-subgroup-originator')),
                    ('fec_ctype', YLeaf(YType.int32, 'fec-ctype')),
                    ('location', YLeaf(YType.str, 'location')),
                ])
                self.interface_name = None
                self.vrf_name = None
                self.incoming_label = None
                self.fe_ctype = None
                self.fec_subgroup_id = None
                self.feclspid = None
                self.fec_tunnel_id = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_destination = None
                self.fecp2mpid = None
                self.fec_subgroup_originator = None
                self.fec_ctype = None
                self.location = None

                self.status_information = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation()
                self.status_information.parent = self
                self._children_name_map["status_information"] = "status-information"
                self._children_yang_names.add("status-information")

                self.mp_download_state = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState()
                self.mp_download_state.parent = self
                self._children_name_map["mp_download_state"] = "mp-download-state"
                self._children_yang_names.add("mp-download-state")

                self.lsp_ping_info = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo()
                self.lsp_ping_info.parent = self
                self._children_name_map["lsp_ping_info"] = "lsp-ping-info"
                self._children_yang_names.add("lsp-ping-info")

                self.owner_information = YList(self)
                self.association_information = YList(self)
                self._segment_path = lambda: "ipv4bf-do-mplste-head-session-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail, ['interface_name', 'vrf_name', 'incoming_label', 'fe_ctype', 'fec_subgroup_id', 'feclspid', 'fec_tunnel_id', 'fec_extended_tunnel_id', 'fec_source', 'fec_destination', 'fecp2mpid', 'fec_subgroup_originator', 'fec_ctype', 'location'], name, value)


            class StatusInformation(Entity):
                """
                Session status information
                
                .. attribute:: source_address
                
                	Source address
                	**type**\:  :py:class:`SourceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.SourceAddress>`
                
                .. attribute:: last_state_change
                
                	Time since last state change
                	**type**\:  :py:class:`LastStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.LastStateChange>`
                
                .. attribute:: transmit_packet
                
                	Transmit Packet
                	**type**\:  :py:class:`TransmitPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.TransmitPacket>`
                
                .. attribute:: receive_packet
                
                	Receive Packet
                	**type**\:  :py:class:`ReceivePacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.ReceivePacket>`
                
                .. attribute:: status_brief_information
                
                	Brief Status Information
                	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation>`
                
                .. attribute:: async_transmit_statistics
                
                	Statistics of Interval between Async Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`AsyncTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncTransmitStatistics>`
                
                .. attribute:: async_receive_statistics
                
                	Statistics of Interval between Async Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`AsyncReceiveStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncReceiveStatistics>`
                
                .. attribute:: echo_transmit_statistics
                
                	Statistics of Interval between Echo Packets Transmitted (in milli\-seconds)
                	**type**\:  :py:class:`EchoTransmitStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoTransmitStatistics>`
                
                .. attribute:: echo_received_statistics
                
                	Statistics of Interval between Echo Packets Received (in milli\-seconds)
                	**type**\:  :py:class:`EchoReceivedStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoReceivedStatistics>`
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: session_subtype
                
                	Session subtype
                	**type**\: str
                
                .. attribute:: state
                
                	State
                	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: remote_discriminator
                
                	Session's Remote discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: to_up_state_count
                
                	Number of times session state went to UP
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: desired_minimum_echo_transmit_interval
                
                	Desired minimum echo transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: remote_negotiated_interval
                
                	Remote Negotiated Interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: latency_number
                
                	Number of Latency Samples. Time between Transmit and Receive
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: latency_minimum
                
                	Minimum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_maximum
                
                	Maximum value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: latency_average
                
                	Average value of Latency (in micro\-seconds)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: node_id
                
                	Location where session is housed
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: internal_label
                
                	Internal Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation, self).__init__()

                    self.yang_name = "status-information"
                    self.yang_parent_name = "ipv4bf-do-mplste-head-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("source-address", ("source_address", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.SourceAddress)), ("last-state-change", ("last_state_change", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.LastStateChange)), ("transmit-packet", ("transmit_packet", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.TransmitPacket)), ("receive-packet", ("receive_packet", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.ReceivePacket)), ("status-brief-information", ("status_brief_information", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation)), ("async-transmit-statistics", ("async_transmit_statistics", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncTransmitStatistics)), ("async-receive-statistics", ("async_receive_statistics", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncReceiveStatistics)), ("echo-transmit-statistics", ("echo_transmit_statistics", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoTransmitStatistics)), ("echo-received-statistics", ("echo_received_statistics", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoReceivedStatistics))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                        ('state', YLeaf(YType.enumeration, 'state')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                        ('remote_discriminator', YLeaf(YType.uint32, 'remote-discriminator')),
                        ('to_up_state_count', YLeaf(YType.uint32, 'to-up-state-count')),
                        ('desired_minimum_echo_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-echo-transmit-interval')),
                        ('remote_negotiated_interval', YLeaf(YType.uint32, 'remote-negotiated-interval')),
                        ('latency_number', YLeaf(YType.uint32, 'latency-number')),
                        ('latency_minimum', YLeaf(YType.uint32, 'latency-minimum')),
                        ('latency_maximum', YLeaf(YType.uint32, 'latency-maximum')),
                        ('latency_average', YLeaf(YType.uint32, 'latency-average')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                        ('internal_label', YLeaf(YType.uint32, 'internal-label')),
                    ])
                    self.sessiontype = None
                    self.session_subtype = None
                    self.state = None
                    self.local_discriminator = None
                    self.remote_discriminator = None
                    self.to_up_state_count = None
                    self.desired_minimum_echo_transmit_interval = None
                    self.remote_negotiated_interval = None
                    self.latency_number = None
                    self.latency_minimum = None
                    self.latency_maximum = None
                    self.latency_average = None
                    self.node_id = None
                    self.internal_label = None

                    self.source_address = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.SourceAddress()
                    self.source_address.parent = self
                    self._children_name_map["source_address"] = "source-address"
                    self._children_yang_names.add("source-address")

                    self.last_state_change = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.LastStateChange()
                    self.last_state_change.parent = self
                    self._children_name_map["last_state_change"] = "last-state-change"
                    self._children_yang_names.add("last-state-change")

                    self.transmit_packet = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.TransmitPacket()
                    self.transmit_packet.parent = self
                    self._children_name_map["transmit_packet"] = "transmit-packet"
                    self._children_yang_names.add("transmit-packet")

                    self.receive_packet = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.ReceivePacket()
                    self.receive_packet.parent = self
                    self._children_name_map["receive_packet"] = "receive-packet"
                    self._children_yang_names.add("receive-packet")

                    self.status_brief_information = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation()
                    self.status_brief_information.parent = self
                    self._children_name_map["status_brief_information"] = "status-brief-information"
                    self._children_yang_names.add("status-brief-information")

                    self.async_transmit_statistics = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncTransmitStatistics()
                    self.async_transmit_statistics.parent = self
                    self._children_name_map["async_transmit_statistics"] = "async-transmit-statistics"
                    self._children_yang_names.add("async-transmit-statistics")

                    self.async_receive_statistics = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncReceiveStatistics()
                    self.async_receive_statistics.parent = self
                    self._children_name_map["async_receive_statistics"] = "async-receive-statistics"
                    self._children_yang_names.add("async-receive-statistics")

                    self.echo_transmit_statistics = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoTransmitStatistics()
                    self.echo_transmit_statistics.parent = self
                    self._children_name_map["echo_transmit_statistics"] = "echo-transmit-statistics"
                    self._children_yang_names.add("echo-transmit-statistics")

                    self.echo_received_statistics = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoReceivedStatistics()
                    self.echo_received_statistics.parent = self
                    self._children_name_map["echo_received_statistics"] = "echo-received-statistics"
                    self._children_yang_names.add("echo-received-statistics")
                    self._segment_path = lambda: "status-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation, ['sessiontype', 'session_subtype', 'state', 'local_discriminator', 'remote_discriminator', 'to_up_state_count', 'desired_minimum_echo_transmit_interval', 'remote_negotiated_interval', 'latency_number', 'latency_minimum', 'latency_maximum', 'latency_average', 'node_id', 'internal_label'], name, value)


                class SourceAddress(Entity):
                    """
                    Source address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.SourceAddress, self).__init__()

                        self.yang_name = "source-address"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "source-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.SourceAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class LastStateChange(Entity):
                    """
                    Time since last state change
                    
                    .. attribute:: days
                    
                    	Number of days since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: day
                    
                    .. attribute:: hours
                    
                    	Number of hours since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: hour
                    
                    .. attribute:: minutes
                    
                    	Number of mins since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: minute
                    
                    .. attribute:: seconds
                    
                    	Number of seconds since last session state transition
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.LastStateChange, self).__init__()

                        self.yang_name = "last-state-change"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('days', YLeaf(YType.uint32, 'days')),
                            ('hours', YLeaf(YType.uint8, 'hours')),
                            ('minutes', YLeaf(YType.uint8, 'minutes')),
                            ('seconds', YLeaf(YType.uint8, 'seconds')),
                        ])
                        self.days = None
                        self.hours = None
                        self.minutes = None
                        self.seconds = None
                        self._segment_path = lambda: "last-state-change"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.LastStateChange, ['days', 'hours', 'minutes', 'seconds'], name, value)


                class TransmitPacket(Entity):
                    """
                    Transmit Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.TransmitPacket, self).__init__()

                        self.yang_name = "transmit-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "transmit-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.TransmitPacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class ReceivePacket(Entity):
                    """
                    Receive Packet
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: diagnostic
                    
                    	Diagnostic
                    	**type**\:  :py:class:`BfdMgmtSessionDiag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionDiag>`
                    
                    .. attribute:: ihear_you
                    
                    	I Hear You (v0)
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: state
                    
                    	State (v1)
                    	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                    
                    .. attribute:: demand
                    
                    	Demand mode
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: poll
                    
                    	Poll bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: final
                    
                    	Final bit
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: control_plane_independent
                    
                    	BFD implementation does not share fate with its control plane
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: authentication_present
                    
                    	Requesting authentication for the session
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: length
                    
                    	Length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: my_discriminator
                    
                    	My Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: your_discriminator
                    
                    	Your Discriminator
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: desired_minimum_transmit_interval
                    
                    	Desired minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_receive_interval
                    
                    	Required receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: required_minimum_echo_receive_interval
                    
                    	Required echo receive interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.ReceivePacket, self).__init__()

                        self.yang_name = "receive-packet"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('version', YLeaf(YType.uint8, 'version')),
                            ('diagnostic', YLeaf(YType.enumeration, 'diagnostic')),
                            ('ihear_you', YLeaf(YType.int32, 'ihear-you')),
                            ('state', YLeaf(YType.enumeration, 'state')),
                            ('demand', YLeaf(YType.int32, 'demand')),
                            ('poll', YLeaf(YType.int32, 'poll')),
                            ('final', YLeaf(YType.int32, 'final')),
                            ('control_plane_independent', YLeaf(YType.int32, 'control-plane-independent')),
                            ('authentication_present', YLeaf(YType.int32, 'authentication-present')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('length', YLeaf(YType.uint32, 'length')),
                            ('my_discriminator', YLeaf(YType.uint32, 'my-discriminator')),
                            ('your_discriminator', YLeaf(YType.uint32, 'your-discriminator')),
                            ('desired_minimum_transmit_interval', YLeaf(YType.uint32, 'desired-minimum-transmit-interval')),
                            ('required_minimum_receive_interval', YLeaf(YType.uint32, 'required-minimum-receive-interval')),
                            ('required_minimum_echo_receive_interval', YLeaf(YType.uint32, 'required-minimum-echo-receive-interval')),
                        ])
                        self.version = None
                        self.diagnostic = None
                        self.ihear_you = None
                        self.state = None
                        self.demand = None
                        self.poll = None
                        self.final = None
                        self.control_plane_independent = None
                        self.authentication_present = None
                        self.detection_multiplier = None
                        self.length = None
                        self.my_discriminator = None
                        self.your_discriminator = None
                        self.desired_minimum_transmit_interval = None
                        self.required_minimum_receive_interval = None
                        self.required_minimum_echo_receive_interval = None
                        self._segment_path = lambda: "receive-packet"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.ReceivePacket, ['version', 'diagnostic', 'ihear_you', 'state', 'demand', 'poll', 'final', 'control_plane_independent', 'authentication_present', 'detection_multiplier', 'length', 'my_discriminator', 'your_discriminator', 'desired_minimum_transmit_interval', 'required_minimum_receive_interval', 'required_minimum_echo_receive_interval'], name, value)


                class StatusBriefInformation(Entity):
                    """
                    Brief Status Information
                    
                    .. attribute:: async_interval_multiplier
                    
                    	Async Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier>`
                    
                    .. attribute:: echo_interval_multiplier
                    
                    	Echo Interval and Detect Multiplier Information
                    	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier>`
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation, self).__init__()

                        self.yang_name = "status-brief-information"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.async_interval_multiplier = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier()
                        self.async_interval_multiplier.parent = self
                        self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                        self._children_yang_names.add("async-interval-multiplier")

                        self.echo_interval_multiplier = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier()
                        self.echo_interval_multiplier.parent = self
                        self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                        self._children_yang_names.add("echo-interval-multiplier")
                        self._segment_path = lambda: "status-brief-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/%s" % self._segment_path()


                    class AsyncIntervalMultiplier(Entity):
                        """
                        Async Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_remote_transmit_interval
                        
                        	Negotiated remote transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: negotiated_local_transmit_interval
                        
                        	Negotiated local transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                            self.yang_name = "async-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                                ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_remote_transmit_interval = None
                            self.negotiated_local_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "async-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                    class EchoIntervalMultiplier(Entity):
                        """
                        Echo Interval and Detect Multiplier Information
                        
                        .. attribute:: negotiated_transmit_interval
                        
                        	Negotiated transmit interval in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_time
                        
                        	Detection time in micro\-seconds
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: microsecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detection Multiplier
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-bfd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                            self.yang_name = "echo-interval-multiplier"
                            self.yang_parent_name = "status-brief-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                                ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                                ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ])
                            self.negotiated_transmit_interval = None
                            self.detection_time = None
                            self.detection_multiplier = None
                            self._segment_path = lambda: "echo-interval-multiplier"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/status-brief-information/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class AsyncTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncTransmitStatistics, self).__init__()

                        self.yang_name = "async-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class AsyncReceiveStatistics(Entity):
                    """
                    Statistics of Interval between Async Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncReceiveStatistics, self).__init__()

                        self.yang_name = "async-receive-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "async-receive-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.AsyncReceiveStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoTransmitStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Transmitted (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoTransmitStatistics, self).__init__()

                        self.yang_name = "echo-transmit-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-transmit-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoTransmitStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


                class EchoReceivedStatistics(Entity):
                    """
                    Statistics of Interval between Echo Packets
                    Received (in milli\-seconds)
                    
                    .. attribute:: number
                    
                    	Number of Interval Samples between Packets sent/received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum
                    
                    	Minimum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: maximum
                    
                    	Maximum of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: average
                    
                    	Average of Transmit/Receive Interval (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: last
                    
                    	Time since last Transmit/Receive (in milli\-seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoReceivedStatistics, self).__init__()

                        self.yang_name = "echo-received-statistics"
                        self.yang_parent_name = "status-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('number', YLeaf(YType.uint32, 'number')),
                            ('minimum', YLeaf(YType.uint32, 'minimum')),
                            ('maximum', YLeaf(YType.uint32, 'maximum')),
                            ('average', YLeaf(YType.uint32, 'average')),
                            ('last', YLeaf(YType.uint32, 'last')),
                        ])
                        self.number = None
                        self.minimum = None
                        self.maximum = None
                        self.average = None
                        self.last = None
                        self._segment_path = lambda: "echo-received-statistics"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/status-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.StatusInformation.EchoReceivedStatistics, ['number', 'minimum', 'maximum', 'average', 'last'], name, value)


            class MpDownloadState(Entity):
                """
                MP Dowload State
                
                .. attribute:: change_time
                
                	Change time
                	**type**\:  :py:class:`ChangeTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState.ChangeTime>`
                
                .. attribute:: mp_download_state
                
                	MP Download State
                	**type**\:  :py:class:`BfdMpDownloadState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMpDownloadState>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState, self).__init__()

                    self.yang_name = "mp-download-state"
                    self.yang_parent_name = "ipv4bf-do-mplste-head-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("change-time", ("change_time", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState.ChangeTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('mp_download_state', YLeaf(YType.enumeration, 'mp-download-state')),
                    ])
                    self.mp_download_state = None

                    self.change_time = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState.ChangeTime()
                    self.change_time.parent = self
                    self._children_name_map["change_time"] = "change-time"
                    self._children_yang_names.add("change-time")
                    self._segment_path = lambda: "mp-download-state"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState, ['mp_download_state'], name, value)


                class ChangeTime(Entity):
                    """
                    Change time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState.ChangeTime, self).__init__()

                        self.yang_name = "change-time"
                        self.yang_parent_name = "mp-download-state"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "change-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/mp-download-state/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.MpDownloadState.ChangeTime, ['seconds', 'nanoseconds'], name, value)


            class LspPingInfo(Entity):
                """
                LSP Ping Info
                
                .. attribute:: lsp_ping_tx_last_time
                
                	LSP Ping last sent time
                	**type**\:  :py:class:`LspPingTxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastTime>`
                
                .. attribute:: lsp_ping_tx_last_error_time
                
                	LSP Ping last error time
                	**type**\:  :py:class:`LspPingTxLastErrorTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastErrorTime>`
                
                .. attribute:: lsp_ping_rx_last_time
                
                	LSP Ping last received time
                	**type**\:  :py:class:`LspPingRxLastTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingRxLastTime>`
                
                .. attribute:: lsp_ping_tx_count
                
                	LSP Ping Tx count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_error_count
                
                	LSP Ping Tx error count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_tx_last_rc
                
                	LSP Ping Tx last result
                	**type**\: str
                
                .. attribute:: lsp_ping_tx_last_error_rc
                
                	LSP Ping Tx last error
                	**type**\: str
                
                .. attribute:: lsp_ping_rx_last_discr
                
                	LSP Ping Rx last received discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_count
                
                	LSP Ping numer of times received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_ping_rx_last_code
                
                	LSP Ping Rx Last Code
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_subcode
                
                	LSP Ping Rx Last Subcode
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsp_ping_rx_last_output
                
                	LSP Ping Rx Last Output
                	**type**\: str
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo, self).__init__()

                    self.yang_name = "lsp-ping-info"
                    self.yang_parent_name = "ipv4bf-do-mplste-head-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("lsp-ping-tx-last-time", ("lsp_ping_tx_last_time", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastTime)), ("lsp-ping-tx-last-error-time", ("lsp_ping_tx_last_error_time", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastErrorTime)), ("lsp-ping-rx-last-time", ("lsp_ping_rx_last_time", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingRxLastTime))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lsp_ping_tx_count', YLeaf(YType.uint32, 'lsp-ping-tx-count')),
                        ('lsp_ping_tx_error_count', YLeaf(YType.uint32, 'lsp-ping-tx-error-count')),
                        ('lsp_ping_tx_last_rc', YLeaf(YType.str, 'lsp-ping-tx-last-rc')),
                        ('lsp_ping_tx_last_error_rc', YLeaf(YType.str, 'lsp-ping-tx-last-error-rc')),
                        ('lsp_ping_rx_last_discr', YLeaf(YType.uint32, 'lsp-ping-rx-last-discr')),
                        ('lsp_ping_rx_count', YLeaf(YType.uint32, 'lsp-ping-rx-count')),
                        ('lsp_ping_rx_last_code', YLeaf(YType.uint8, 'lsp-ping-rx-last-code')),
                        ('lsp_ping_rx_last_subcode', YLeaf(YType.uint8, 'lsp-ping-rx-last-subcode')),
                        ('lsp_ping_rx_last_output', YLeaf(YType.str, 'lsp-ping-rx-last-output')),
                    ])
                    self.lsp_ping_tx_count = None
                    self.lsp_ping_tx_error_count = None
                    self.lsp_ping_tx_last_rc = None
                    self.lsp_ping_tx_last_error_rc = None
                    self.lsp_ping_rx_last_discr = None
                    self.lsp_ping_rx_count = None
                    self.lsp_ping_rx_last_code = None
                    self.lsp_ping_rx_last_subcode = None
                    self.lsp_ping_rx_last_output = None

                    self.lsp_ping_tx_last_time = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastTime()
                    self.lsp_ping_tx_last_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_time"] = "lsp-ping-tx-last-time"
                    self._children_yang_names.add("lsp-ping-tx-last-time")

                    self.lsp_ping_tx_last_error_time = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastErrorTime()
                    self.lsp_ping_tx_last_error_time.parent = self
                    self._children_name_map["lsp_ping_tx_last_error_time"] = "lsp-ping-tx-last-error-time"
                    self._children_yang_names.add("lsp-ping-tx-last-error-time")

                    self.lsp_ping_rx_last_time = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingRxLastTime()
                    self.lsp_ping_rx_last_time.parent = self
                    self._children_name_map["lsp_ping_rx_last_time"] = "lsp-ping-rx-last-time"
                    self._children_yang_names.add("lsp-ping-rx-last-time")
                    self._segment_path = lambda: "lsp-ping-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo, ['lsp_ping_tx_count', 'lsp_ping_tx_error_count', 'lsp_ping_tx_last_rc', 'lsp_ping_tx_last_error_rc', 'lsp_ping_rx_last_discr', 'lsp_ping_rx_count', 'lsp_ping_rx_last_code', 'lsp_ping_rx_last_subcode', 'lsp_ping_rx_last_output'], name, value)


                class LspPingTxLastTime(Entity):
                    """
                    LSP Ping last sent time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingTxLastErrorTime(Entity):
                    """
                    LSP Ping last error time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastErrorTime, self).__init__()

                        self.yang_name = "lsp-ping-tx-last-error-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-tx-last-error-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingTxLastErrorTime, ['seconds', 'nanoseconds'], name, value)


                class LspPingRxLastTime(Entity):
                    """
                    LSP Ping last received time
                    
                    .. attribute:: seconds
                    
                    	seconds
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	nanoseconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingRxLastTime, self).__init__()

                        self.yang_name = "lsp-ping-rx-last-time"
                        self.yang_parent_name = "lsp-ping-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.uint64, 'seconds')),
                            ('nanoseconds', YLeaf(YType.uint32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "lsp-ping-rx-last-time"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/lsp-ping-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.LspPingInfo.LspPingRxLastTime, ['seconds', 'nanoseconds'], name, value)


            class OwnerInformation(Entity):
                """
                Client applications owning the session
                
                .. attribute:: interval
                
                	Client specified minimum transmit interval in micro\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: microsecond
                
                .. attribute:: detection_multiplier
                
                	Client specified detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adjusted_interval
                
                	Adjusted minimum transmit interval in milli\-seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: millisecond
                
                .. attribute:: adjusted_detection_multiplier
                
                	Adjusted detection multiplier to compute detection time
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: name
                
                	Client process name
                	**type**\: str
                
                	**length:** 0..257
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.OwnerInformation, self).__init__()

                    self.yang_name = "owner-information"
                    self.yang_parent_name = "ipv4bf-do-mplste-head-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interval', YLeaf(YType.uint32, 'interval')),
                        ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                        ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                        ('name', YLeaf(YType.str, 'name')),
                    ])
                    self.interval = None
                    self.detection_multiplier = None
                    self.adjusted_interval = None
                    self.adjusted_detection_multiplier = None
                    self.name = None
                    self._segment_path = lambda: "owner-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


            class AssociationInformation(Entity):
                """
                Association session information
                
                .. attribute:: ip_destination_address
                
                	IPv4/v6 dest address
                	**type**\:  :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.IpDestinationAddress>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.OwnerInformation>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation, self).__init__()

                    self.yang_name = "association-information"
                    self.yang_parent_name = "ipv4bf-do-mplste-head-session-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ip-destination-address", ("ip_destination_address", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.IpDestinationAddress))])
                    self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.OwnerInformation))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ])
                    self.interface_name = None
                    self.sessiontype = None
                    self.local_discriminator = None

                    self.ip_destination_address = Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.IpDestinationAddress()
                    self.ip_destination_address.parent = self
                    self._children_name_map["ip_destination_address"] = "ip-destination-address"
                    self._children_yang_names.add("ip-destination-address")

                    self.owner_information = YList(self)
                    self._segment_path = lambda: "association-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation, ['interface_name', 'sessiontype', 'local_discriminator'], name, value)


                class IpDestinationAddress(Entity):
                    """
                    IPv4/v6 dest address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.IpDestinationAddress, self).__init__()

                        self.yang_name = "ip-destination-address"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "ip-destination-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.IpDestinationAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class OwnerInformation(Entity):
                    """
                    Client applications owning the session
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.OwnerInformation, self).__init__()

                        self.yang_name = "owner-information"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', YLeaf(YType.uint32, 'interval')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                            ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                            ('name', YLeaf(YType.str, 'name')),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.adjusted_interval = None
                        self.adjusted_detection_multiplier = None
                        self.name = None
                        self._segment_path = lambda: "owner-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-session-details/ipv4bf-do-mplste-head-session-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail.AssociationInformation.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


    class RelationBriefs(Entity):
        """
        Table of brief information about all BFD
        relations in the System
        
        .. attribute:: relation_brief
        
        	Brief information for relation of a single BFD session
        	**type**\: list of  		 :py:class:`RelationBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationBriefs.RelationBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.RelationBriefs, self).__init__()

            self.yang_name = "relation-briefs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("relation-brief", ("relation_brief", Bfd.RelationBriefs.RelationBrief))])
            self._leafs = OrderedDict()

            self.relation_brief = YList(self)
            self._segment_path = lambda: "relation-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.RelationBriefs, [], name, value)


        class RelationBrief(Entity):
            """
            Brief information for relation of a single BFD
            session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: link_information
            
            	Brief Member Link Information
            	**type**\: list of  		 :py:class:`LinkInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationBriefs.RelationBrief.LinkInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.RelationBriefs.RelationBrief, self).__init__()

                self.yang_name = "relation-brief"
                self.yang_parent_name = "relation-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("link-information", ("link_information", Bfd.RelationBriefs.RelationBrief.LinkInformation))])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                ])
                self.interface_name = None
                self.destination_address = None
                self.state = None

                self.link_information = YList(self)
                self._segment_path = lambda: "relation-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/relation-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.RelationBriefs.RelationBrief, ['interface_name', 'destination_address', 'state'], name, value)


            class LinkInformation(Entity):
                """
                Brief Member Link Information
                
                .. attribute:: state
                
                	State
                	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.RelationBriefs.RelationBrief.LinkInformation, self).__init__()

                    self.yang_name = "link-information"
                    self.yang_parent_name = "relation-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('state', YLeaf(YType.enumeration, 'state')),
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ])
                    self.state = None
                    self.interface_name = None
                    self._segment_path = lambda: "link-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/relation-briefs/relation-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.RelationBriefs.RelationBrief.LinkInformation, ['state', 'interface_name'], name, value)


    class ClientBriefs(Entity):
        """
        Table of Brief information about BFD clients
        
        .. attribute:: client_brief
        
        	Brief information of client
        	**type**\: list of  		 :py:class:`ClientBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.ClientBriefs.ClientBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.ClientBriefs, self).__init__()

            self.yang_name = "client-briefs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("client-brief", ("client_brief", Bfd.ClientBriefs.ClientBrief))])
            self._leafs = OrderedDict()

            self.client_brief = YList(self)
            self._segment_path = lambda: "client-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.ClientBriefs, [], name, value)


        class ClientBrief(Entity):
            """
            Brief information of client
            
            .. attribute:: name  (key)
            
            	Client Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: name_xr
            
            	Client process name
            	**type**\: str
            
            	**length:** 0..257
            
            .. attribute:: node_id
            
            	Location where client resides
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_count
            
            	Number of sessions created by this client
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.ClientBriefs.ClientBrief, self).__init__()

                self.yang_name = "client-brief"
                self.yang_parent_name = "client-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['name']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('name', YLeaf(YType.str, 'name')),
                    ('name_xr', YLeaf(YType.str, 'name-xr')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('session_count', YLeaf(YType.uint32, 'session-count')),
                ])
                self.name = None
                self.name_xr = None
                self.node_id = None
                self.session_count = None
                self._segment_path = lambda: "client-brief" + "[name='" + str(self.name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/client-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.ClientBriefs.ClientBrief, ['name', 'name_xr', 'node_id', 'session_count'], name, value)


    class Ipv4BfDoMplsteHeadMultiPaths(Entity):
        """
        IPv4 BFD over MPLS\-TE Head multipath
        
        .. attribute:: ipv4bf_do_mplste_head_multi_path
        
        	Label multipath table
        	**type**\: list of  		 :py:class:`Ipv4BfDoMplsteHeadMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfDoMplsteHeadMultiPaths, self).__init__()

            self.yang_name = "ipv4bf-do-mplste-head-multi-paths"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4bf-do-mplste-head-multi-path", ("ipv4bf_do_mplste_head_multi_path", Bfd.Ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath))])
            self._leafs = OrderedDict()

            self.ipv4bf_do_mplste_head_multi_path = YList(self)
            self._segment_path = lambda: "ipv4bf-do-mplste-head-multi-paths"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadMultiPaths, [], name, value)


        class Ipv4BfDoMplsteHeadMultiPath(Entity):
            """
            Label multipath table
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath, self).__init__()

                self.yang_name = "ipv4bf-do-mplste-head-multi-path"
                self.yang_parent_name = "ipv4bf-do-mplste-head-multi-paths"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('incoming_label', YLeaf(YType.int32, 'incoming-label')),
                    ('fe_ctype', YLeaf(YType.int32, 'fe-ctype')),
                    ('fec_subgroup_id', YLeaf(YType.int32, 'fec-subgroup-id')),
                    ('feclspid', YLeaf(YType.int32, 'feclspid')),
                    ('fec_tunnel_id', YLeaf(YType.int32, 'fec-tunnel-id')),
                    ('fec_extended_tunnel_id', YLeaf(YType.str, 'fec-extended-tunnel-id')),
                    ('fec_source', YLeaf(YType.str, 'fec-source')),
                    ('fec_destination', YLeaf(YType.str, 'fec-destination')),
                    ('fecp2mpid', YLeaf(YType.int32, 'fecp2mpid')),
                    ('fec_subgroup_originator', YLeaf(YType.str, 'fec-subgroup-originator')),
                    ('fec_ctype', YLeaf(YType.int32, 'fec-ctype')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('incoming_label_xr', YLeaf(YType.uint32, 'incoming-label-xr')),
                    ('session_interface_name', YLeaf(YType.str, 'session-interface-name')),
                ])
                self.interface_name = None
                self.vrf_name = None
                self.incoming_label = None
                self.fe_ctype = None
                self.fec_subgroup_id = None
                self.feclspid = None
                self.fec_tunnel_id = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_destination = None
                self.fecp2mpid = None
                self.fec_subgroup_originator = None
                self.fec_ctype = None
                self.location = None
                self.session_subtype = None
                self.state = None
                self.local_discriminator = None
                self.node_id = None
                self.incoming_label_xr = None
                self.session_interface_name = None
                self._segment_path = lambda: "ipv4bf-do-mplste-head-multi-path"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-multi-paths/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath, ['interface_name', 'vrf_name', 'incoming_label', 'fe_ctype', 'fec_subgroup_id', 'feclspid', 'fec_tunnel_id', 'fec_extended_tunnel_id', 'fec_source', 'fec_destination', 'fecp2mpid', 'fec_subgroup_originator', 'fec_ctype', 'location', 'session_subtype', 'state', 'local_discriminator', 'node_id', 'incoming_label_xr', 'session_interface_name'], name, value)


    class RelationDetails(Entity):
        """
        Table of detail information about all BFD
        relations in the System
        
        .. attribute:: relation_detail
        
        	Detail information for relation of a single BFD session
        	**type**\: list of  		 :py:class:`RelationDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.RelationDetails, self).__init__()

            self.yang_name = "relation-details"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("relation-detail", ("relation_detail", Bfd.RelationDetails.RelationDetail))])
            self._leafs = OrderedDict()

            self.relation_detail = YList(self)
            self._segment_path = lambda: "relation-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.RelationDetails, [], name, value)


        class RelationDetail(Entity):
            """
            Detail information for relation of a single BFD
            session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: link_information
            
            	Detail Member Link Information
            	**type**\: list of  		 :py:class:`LinkInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.LinkInformation>`
            
            .. attribute:: association_information
            
            	Association session information
            	**type**\: list of  		 :py:class:`AssociationInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.RelationDetails.RelationDetail, self).__init__()

                self.yang_name = "relation-detail"
                self.yang_parent_name = "relation-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("link-information", ("link_information", Bfd.RelationDetails.RelationDetail.LinkInformation)), ("association-information", ("association_information", Bfd.RelationDetails.RelationDetail.AssociationInformation))])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                ])
                self.interface_name = None
                self.destination_address = None
                self.state = None
                self.local_discriminator = None

                self.link_information = YList(self)
                self.association_information = YList(self)
                self._segment_path = lambda: "relation-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/relation-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.RelationDetails.RelationDetail, ['interface_name', 'destination_address', 'state', 'local_discriminator'], name, value)


            class LinkInformation(Entity):
                """
                Detail Member Link Information
                
                .. attribute:: state
                
                	State
                	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.RelationDetails.RelationDetail.LinkInformation, self).__init__()

                    self.yang_name = "link-information"
                    self.yang_parent_name = "relation-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('state', YLeaf(YType.enumeration, 'state')),
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ])
                    self.state = None
                    self.interface_name = None
                    self.local_discriminator = None
                    self._segment_path = lambda: "link-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/relation-details/relation-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.RelationDetails.RelationDetail.LinkInformation, ['state', 'interface_name', 'local_discriminator'], name, value)


            class AssociationInformation(Entity):
                """
                Association session information
                
                .. attribute:: ip_destination_address
                
                	IPv4/v6 dest address
                	**type**\:  :py:class:`IpDestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation.IpDestinationAddress>`
                
                .. attribute:: interface_name
                
                	Session Interface Name
                	**type**\: str
                
                	**length:** 0..64
                
                .. attribute:: sessiontype
                
                	Session type
                	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
                
                .. attribute:: local_discriminator
                
                	Session's Local discriminator
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: owner_information
                
                	Client applications owning the session
                	**type**\: list of  		 :py:class:`OwnerInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.RelationDetails.RelationDetail.AssociationInformation.OwnerInformation>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.RelationDetails.RelationDetail.AssociationInformation, self).__init__()

                    self.yang_name = "association-information"
                    self.yang_parent_name = "relation-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ip-destination-address", ("ip_destination_address", Bfd.RelationDetails.RelationDetail.AssociationInformation.IpDestinationAddress))])
                    self._child_list_classes = OrderedDict([("owner-information", ("owner_information", Bfd.RelationDetails.RelationDetail.AssociationInformation.OwnerInformation))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('sessiontype', YLeaf(YType.enumeration, 'sessiontype')),
                        ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ])
                    self.interface_name = None
                    self.sessiontype = None
                    self.local_discriminator = None

                    self.ip_destination_address = Bfd.RelationDetails.RelationDetail.AssociationInformation.IpDestinationAddress()
                    self.ip_destination_address.parent = self
                    self._children_name_map["ip_destination_address"] = "ip-destination-address"
                    self._children_yang_names.add("ip-destination-address")

                    self.owner_information = YList(self)
                    self._segment_path = lambda: "association-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/relation-details/relation-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.RelationDetails.RelationDetail.AssociationInformation, ['interface_name', 'sessiontype', 'local_discriminator'], name, value)


                class IpDestinationAddress(Entity):
                    """
                    IPv4/v6 dest address
                    
                    .. attribute:: afi
                    
                    	AFI
                    	**type**\:  :py:class:`BfdAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdAfId>`
                    
                    .. attribute:: dummy
                    
                    	No Address
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ipv4
                    
                    	IPv4 address type
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6
                    
                    	IPv6 address type
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.RelationDetails.RelationDetail.AssociationInformation.IpDestinationAddress, self).__init__()

                        self.yang_name = "ip-destination-address"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('afi', YLeaf(YType.enumeration, 'afi')),
                            ('dummy', YLeaf(YType.uint8, 'dummy')),
                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                        ])
                        self.afi = None
                        self.dummy = None
                        self.ipv4 = None
                        self.ipv6 = None
                        self._segment_path = lambda: "ip-destination-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/relation-details/relation-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.RelationDetails.RelationDetail.AssociationInformation.IpDestinationAddress, ['afi', 'dummy', 'ipv4', 'ipv6'], name, value)


                class OwnerInformation(Entity):
                    """
                    Client applications owning the session
                    
                    .. attribute:: interval
                    
                    	Client specified minimum transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Client specified detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: adjusted_interval
                    
                    	Adjusted minimum transmit interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: millisecond
                    
                    .. attribute:: adjusted_detection_multiplier
                    
                    	Adjusted detection multiplier to compute detection time
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Client process name
                    	**type**\: str
                    
                    	**length:** 0..257
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.RelationDetails.RelationDetail.AssociationInformation.OwnerInformation, self).__init__()

                        self.yang_name = "owner-information"
                        self.yang_parent_name = "association-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', YLeaf(YType.uint32, 'interval')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                            ('adjusted_interval', YLeaf(YType.uint32, 'adjusted-interval')),
                            ('adjusted_detection_multiplier', YLeaf(YType.uint32, 'adjusted-detection-multiplier')),
                            ('name', YLeaf(YType.str, 'name')),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.adjusted_interval = None
                        self.adjusted_detection_multiplier = None
                        self.name = None
                        self._segment_path = lambda: "owner-information"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/relation-details/relation-detail/association-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.RelationDetails.RelationDetail.AssociationInformation.OwnerInformation, ['interval', 'detection_multiplier', 'adjusted_interval', 'adjusted_detection_multiplier', 'name'], name, value)


    class Ipv4BfDoMplsteTailCounters(Entity):
        """
        IPv4 BFD over MPLS\-TE Counters
        
        .. attribute:: ipv4bf_do_mplste_tail_packet_counters
        
        	Table of IPv4 BFD over MPLS\-TE Packet counters
        	**type**\:  :py:class:`Ipv4BfDoMplsteTailPacketCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfDoMplsteTailCounters, self).__init__()

            self.yang_name = "ipv4bf-do-mplste-tail-counters"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("ipv4bf-do-mplste-tail-packet-counters", ("ipv4bf_do_mplste_tail_packet_counters", Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.ipv4bf_do_mplste_tail_packet_counters = Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters()
            self.ipv4bf_do_mplste_tail_packet_counters.parent = self
            self._children_name_map["ipv4bf_do_mplste_tail_packet_counters"] = "ipv4bf-do-mplste-tail-packet-counters"
            self._children_yang_names.add("ipv4bf-do-mplste-tail-packet-counters")
            self._segment_path = lambda: "ipv4bf-do-mplste-tail-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class Ipv4BfDoMplsteTailPacketCounters(Entity):
            """
            Table of IPv4 BFD over MPLS\-TE Packet counters
            
            .. attribute:: ipv4bf_do_mplste_tail_packet_counter
            
            	Interface  IPv4 BFD over MPLS\-TE Packet counters
            	**type**\: list of  		 :py:class:`Ipv4BfDoMplsteTailPacketCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter>`
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters, self).__init__()

                self.yang_name = "ipv4bf-do-mplste-tail-packet-counters"
                self.yang_parent_name = "ipv4bf-do-mplste-tail-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("ipv4bf-do-mplste-tail-packet-counter", ("ipv4bf_do_mplste_tail_packet_counter", Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter))])
                self._leafs = OrderedDict()

                self.ipv4bf_do_mplste_tail_packet_counter = YList(self)
                self._segment_path = lambda: "ipv4bf-do-mplste-tail-packet-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters, [], name, value)


            class Ipv4BfDoMplsteTailPacketCounter(Entity):
                """
                Interface  IPv4 BFD over MPLS\-TE Packet
                counters
                
                .. attribute:: vrf_name
                
                	VRF name
                	**type**\: str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: incoming_label
                
                	Incoming Label
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fe_ctype
                
                	FEC Type
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fec_subgroup_id
                
                	FEC Subgroup ID
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: feclspid
                
                	FEC LSP ID
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fec_tunnel_id
                
                	FEC Tunnel ID
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fec_extended_tunnel_id
                
                	FEC Extended Tunnel ID
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: fec_source
                
                	FEC Source
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: fec_destination
                
                	FEC Destination
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: fecp2mpid
                
                	FEC P2MP ID
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fec_subgroup_originator
                
                	FEC Subgroup originator
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: fec_ctype
                
                	FEC C Type
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: location
                
                	Location
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: hello_transmit_count
                
                	Number of Hellos transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello_receive_count
                
                	Number of Hellos received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_transmit_count
                
                	Number of echo packets transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: echo_receive_count
                
                	Number of echo packets received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: display_type
                
                	Packet Display Type
                	**type**\:  :py:class:`BfdMgmtPktDisplay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtPktDisplay>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter, self).__init__()

                    self.yang_name = "ipv4bf-do-mplste-tail-packet-counter"
                    self.yang_parent_name = "ipv4bf-do-mplste-tail-packet-counters"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                        ('incoming_label', YLeaf(YType.int32, 'incoming-label')),
                        ('fe_ctype', YLeaf(YType.int32, 'fe-ctype')),
                        ('fec_subgroup_id', YLeaf(YType.int32, 'fec-subgroup-id')),
                        ('feclspid', YLeaf(YType.int32, 'feclspid')),
                        ('fec_tunnel_id', YLeaf(YType.int32, 'fec-tunnel-id')),
                        ('fec_extended_tunnel_id', YLeaf(YType.str, 'fec-extended-tunnel-id')),
                        ('fec_source', YLeaf(YType.str, 'fec-source')),
                        ('fec_destination', YLeaf(YType.str, 'fec-destination')),
                        ('fecp2mpid', YLeaf(YType.int32, 'fecp2mpid')),
                        ('fec_subgroup_originator', YLeaf(YType.str, 'fec-subgroup-originator')),
                        ('fec_ctype', YLeaf(YType.int32, 'fec-ctype')),
                        ('location', YLeaf(YType.str, 'location')),
                        ('hello_transmit_count', YLeaf(YType.uint32, 'hello-transmit-count')),
                        ('hello_receive_count', YLeaf(YType.uint32, 'hello-receive-count')),
                        ('echo_transmit_count', YLeaf(YType.uint32, 'echo-transmit-count')),
                        ('echo_receive_count', YLeaf(YType.uint32, 'echo-receive-count')),
                        ('display_type', YLeaf(YType.enumeration, 'display-type')),
                    ])
                    self.vrf_name = None
                    self.incoming_label = None
                    self.fe_ctype = None
                    self.fec_subgroup_id = None
                    self.feclspid = None
                    self.fec_tunnel_id = None
                    self.fec_extended_tunnel_id = None
                    self.fec_source = None
                    self.fec_destination = None
                    self.fecp2mpid = None
                    self.fec_subgroup_originator = None
                    self.fec_ctype = None
                    self.location = None
                    self.hello_transmit_count = None
                    self.hello_receive_count = None
                    self.echo_transmit_count = None
                    self.echo_receive_count = None
                    self.display_type = None
                    self._segment_path = lambda: "ipv4bf-do-mplste-tail-packet-counter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-counters/ipv4bf-do-mplste-tail-packet-counters/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Bfd.Ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter, ['vrf_name', 'incoming_label', 'fe_ctype', 'fec_subgroup_id', 'feclspid', 'fec_tunnel_id', 'fec_extended_tunnel_id', 'fec_source', 'fec_destination', 'fecp2mpid', 'fec_subgroup_originator', 'fec_ctype', 'location', 'hello_transmit_count', 'hello_receive_count', 'echo_transmit_count', 'echo_receive_count', 'display_type'], name, value)


    class Ipv6SingleHopSessionBriefs(Entity):
        """
        Table of brief information about all IPv6
        singlehop BFD sessions in the System
        
        .. attribute:: ipv6_single_hop_session_brief
        
        	Brief information for a single IPv6 singlehop BFD session
        	**type**\: list of  		 :py:class:`Ipv6SingleHopSessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv6SingleHopSessionBriefs, self).__init__()

            self.yang_name = "ipv6-single-hop-session-briefs"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv6-single-hop-session-brief", ("ipv6_single_hop_session_brief", Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief))])
            self._leafs = OrderedDict()

            self.ipv6_single_hop_session_brief = YList(self)
            self._segment_path = lambda: "ipv6-single-hop-session-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv6SingleHopSessionBriefs, [], name, value)


        class Ipv6SingleHopSessionBrief(Entity):
            """
            Brief information for a single IPv6 singlehop
            BFD session
            
            .. attribute:: interface_name
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: status_brief_information
            
            	Brief Status Information
            	**type**\:  :py:class:`StatusBriefInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation>`
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: session_type
            
            	Session type
            	**type**\:  :py:class:`BfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdSession>`
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: session_flags
            
            	Session Flags
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief, self).__init__()

                self.yang_name = "ipv6-single-hop-session-brief"
                self.yang_parent_name = "ipv6-single-hop-session-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("status-brief-information", ("status_brief_information", Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('session_flags', YLeaf(YType.uint32, 'session-flags')),
                ])
                self.interface_name = None
                self.destination_address = None
                self.location = None
                self.node_id = None
                self.state = None
                self.session_type = None
                self.session_subtype = None
                self.session_flags = None

                self.status_brief_information = Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation()
                self.status_brief_information.parent = self
                self._children_name_map["status_brief_information"] = "status-brief-information"
                self._children_yang_names.add("status-brief-information")
                self._segment_path = lambda: "ipv6-single-hop-session-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief, ['interface_name', 'destination_address', 'location', 'node_id', 'state', 'session_type', 'session_subtype', 'session_flags'], name, value)


            class StatusBriefInformation(Entity):
                """
                Brief Status Information
                
                .. attribute:: async_interval_multiplier
                
                	Async Interval and Detect Multiplier Information
                	**type**\:  :py:class:`AsyncIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier>`
                
                .. attribute:: echo_interval_multiplier
                
                	Echo Interval and Detect Multiplier Information
                	**type**\:  :py:class:`EchoIntervalMultiplier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier>`
                
                

                """

                _prefix = 'ip-bfd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation, self).__init__()

                    self.yang_name = "status-brief-information"
                    self.yang_parent_name = "ipv6-single-hop-session-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("async-interval-multiplier", ("async_interval_multiplier", Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier)), ("echo-interval-multiplier", ("echo_interval_multiplier", Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.async_interval_multiplier = Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier()
                    self.async_interval_multiplier.parent = self
                    self._children_name_map["async_interval_multiplier"] = "async-interval-multiplier"
                    self._children_yang_names.add("async-interval-multiplier")

                    self.echo_interval_multiplier = Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier()
                    self.echo_interval_multiplier.parent = self
                    self._children_name_map["echo_interval_multiplier"] = "echo-interval-multiplier"
                    self._children_yang_names.add("echo-interval-multiplier")
                    self._segment_path = lambda: "status-brief-information"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-briefs/ipv6-single-hop-session-brief/%s" % self._segment_path()


                class AsyncIntervalMultiplier(Entity):
                    """
                    Async Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_remote_transmit_interval
                    
                    	Negotiated remote transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: negotiated_local_transmit_interval
                    
                    	Negotiated local transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, self).__init__()

                        self.yang_name = "async-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_remote_transmit_interval', YLeaf(YType.uint32, 'negotiated-remote-transmit-interval')),
                            ('negotiated_local_transmit_interval', YLeaf(YType.uint32, 'negotiated-local-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_remote_transmit_interval = None
                        self.negotiated_local_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "async-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-briefs/ipv6-single-hop-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.AsyncIntervalMultiplier, ['negotiated_remote_transmit_interval', 'negotiated_local_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


                class EchoIntervalMultiplier(Entity):
                    """
                    Echo Interval and Detect Multiplier Information
                    
                    .. attribute:: negotiated_transmit_interval
                    
                    	Negotiated transmit interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_time
                    
                    	Detection time in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: microsecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection Multiplier
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-bfd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, self).__init__()

                        self.yang_name = "echo-interval-multiplier"
                        self.yang_parent_name = "status-brief-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('negotiated_transmit_interval', YLeaf(YType.uint32, 'negotiated-transmit-interval')),
                            ('detection_time', YLeaf(YType.uint32, 'detection-time')),
                            ('detection_multiplier', YLeaf(YType.uint32, 'detection-multiplier')),
                        ])
                        self.negotiated_transmit_interval = None
                        self.detection_time = None
                        self.detection_multiplier = None
                        self._segment_path = lambda: "echo-interval-multiplier"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv6-single-hop-session-briefs/ipv6-single-hop-session-brief/status-brief-information/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bfd.Ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief.StatusBriefInformation.EchoIntervalMultiplier, ['negotiated_transmit_interval', 'detection_time', 'detection_multiplier'], name, value)


    class Ipv4BfDoMplsteTailMultiPaths(Entity):
        """
        IPv4 BFD over MPLS\-TE Tail multipath
        
        .. attribute:: ipv4bf_do_mplste_tail_multi_path
        
        	Label multipath table
        	**type**\: list of  		 :py:class:`Ipv4BfDoMplsteTailMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfDoMplsteTailMultiPaths, self).__init__()

            self.yang_name = "ipv4bf-do-mplste-tail-multi-paths"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4bf-do-mplste-tail-multi-path", ("ipv4bf_do_mplste_tail_multi_path", Bfd.Ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath))])
            self._leafs = OrderedDict()

            self.ipv4bf_do_mplste_tail_multi_path = YList(self)
            self._segment_path = lambda: "ipv4bf-do-mplste-tail-multi-paths"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4BfDoMplsteTailMultiPaths, [], name, value)


        class Ipv4BfDoMplsteTailMultiPath(Entity):
            """
            Label multipath table
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: incoming_label
            
            	Incoming Label
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fe_ctype
            
            	FEC Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_id
            
            	FEC Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: feclspid
            
            	FEC LSP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_tunnel_id
            
            	FEC Tunnel ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_extended_tunnel_id
            
            	FEC Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_source
            
            	FEC Source
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_destination
            
            	FEC Destination
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fecp2mpid
            
            	FEC P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: fec_subgroup_originator
            
            	FEC Subgroup originator
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fec_ctype
            
            	FEC C Type
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath, self).__init__()

                self.yang_name = "ipv4bf-do-mplste-tail-multi-path"
                self.yang_parent_name = "ipv4bf-do-mplste-tail-multi-paths"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('incoming_label', YLeaf(YType.int32, 'incoming-label')),
                    ('fe_ctype', YLeaf(YType.int32, 'fe-ctype')),
                    ('fec_subgroup_id', YLeaf(YType.int32, 'fec-subgroup-id')),
                    ('feclspid', YLeaf(YType.int32, 'feclspid')),
                    ('fec_tunnel_id', YLeaf(YType.int32, 'fec-tunnel-id')),
                    ('fec_extended_tunnel_id', YLeaf(YType.str, 'fec-extended-tunnel-id')),
                    ('fec_source', YLeaf(YType.str, 'fec-source')),
                    ('fec_destination', YLeaf(YType.str, 'fec-destination')),
                    ('fecp2mpid', YLeaf(YType.int32, 'fecp2mpid')),
                    ('fec_subgroup_originator', YLeaf(YType.str, 'fec-subgroup-originator')),
                    ('fec_ctype', YLeaf(YType.int32, 'fec-ctype')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('incoming_label_xr', YLeaf(YType.uint32, 'incoming-label-xr')),
                    ('session_interface_name', YLeaf(YType.str, 'session-interface-name')),
                ])
                self.vrf_name = None
                self.incoming_label = None
                self.fe_ctype = None
                self.fec_subgroup_id = None
                self.feclspid = None
                self.fec_tunnel_id = None
                self.fec_extended_tunnel_id = None
                self.fec_source = None
                self.fec_destination = None
                self.fecp2mpid = None
                self.fec_subgroup_originator = None
                self.fec_ctype = None
                self.location = None
                self.session_subtype = None
                self.state = None
                self.local_discriminator = None
                self.node_id = None
                self.incoming_label_xr = None
                self.session_interface_name = None
                self._segment_path = lambda: "ipv4bf-do-mplste-tail-multi-path"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-tail-multi-paths/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath, ['vrf_name', 'incoming_label', 'fe_ctype', 'fec_subgroup_id', 'feclspid', 'fec_tunnel_id', 'fec_extended_tunnel_id', 'fec_source', 'fec_destination', 'fecp2mpid', 'fec_subgroup_originator', 'fec_ctype', 'location', 'session_subtype', 'state', 'local_discriminator', 'node_id', 'incoming_label_xr', 'session_interface_name'], name, value)


    class Ipv4MultiHopMultiPaths(Entity):
        """
        IPv4 multi\-hop multipath
        
        .. attribute:: ipv4_multi_hop_multi_path
        
        	IPv4 multi hop multipath table
        	**type**\: list of  		 :py:class:`Ipv4MultiHopMultiPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4MultiHopMultiPaths, self).__init__()

            self.yang_name = "ipv4-multi-hop-multi-paths"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("ipv4-multi-hop-multi-path", ("ipv4_multi_hop_multi_path", Bfd.Ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath))])
            self._leafs = OrderedDict()

            self.ipv4_multi_hop_multi_path = YList(self)
            self._segment_path = lambda: "ipv4-multi-hop-multi-paths"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bfd.Ipv4MultiHopMultiPaths, [], name, value)


        class Ipv4MultiHopMultiPath(Entity):
            """
            IPv4 multi hop multipath table
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: union of the below types:
            
            		**type**\: str
            
            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            		**type**\: str
            
            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: location
            
            	Location
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: vrf_name
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session_subtype
            
            	Session subtype
            	**type**\: str
            
            .. attribute:: state
            
            	State
            	**type**\:  :py:class:`BfdMgmtSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.BfdMgmtSessionState>`
            
            .. attribute:: local_discriminator
            
            	Session's Local discriminator
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_id
            
            	Location where session is housed
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: incoming_label_xr
            
            	Incoming Label
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: session_interface_name
            
            	Interface name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath, self).__init__()

                self.yang_name = "ipv4-multi-hop-multi-path"
                self.yang_parent_name = "ipv4-multi-hop-multi-paths"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('location', YLeaf(YType.str, 'location')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('session_subtype', YLeaf(YType.str, 'session-subtype')),
                    ('state', YLeaf(YType.enumeration, 'state')),
                    ('local_discriminator', YLeaf(YType.uint32, 'local-discriminator')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                    ('incoming_label_xr', YLeaf(YType.uint32, 'incoming-label-xr')),
                    ('session_interface_name', YLeaf(YType.str, 'session-interface-name')),
                ])
                self.source_address = None
                self.destination_address = None
                self.location = None
                self.vrf_name = None
                self.session_subtype = None
                self.state = None
                self.local_discriminator = None
                self.node_id = None
                self.incoming_label_xr = None
                self.session_interface_name = None
                self._segment_path = lambda: "ipv4-multi-hop-multi-path"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4-multi-hop-multi-paths/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath, ['source_address', 'destination_address', 'location', 'vrf_name', 'session_subtype', 'state', 'local_discriminator', 'node_id', 'incoming_label_xr', 'session_interface_name'], name, value)


    class Ipv4BfDoMplsteHeadSummary(Entity):
        """
        Summary information of IPv4 BFD over MPLS\-TE
        Head
        
        .. attribute:: session_state
        
        	Statistics of states for sessions
        	**type**\:  :py:class:`SessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_bfd_oper.Bfd.Ipv4BfDoMplsteHeadSummary.SessionState>`
        
        

        """

        _prefix = 'ip-bfd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Bfd.Ipv4BfDoMplsteHeadSummary, self).__init__()

            self.yang_name = "ipv4bf-do-mplste-head-summary"
            self.yang_parent_name = "bfd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("session-state", ("session_state", Bfd.Ipv4BfDoMplsteHeadSummary.SessionState))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.session_state = Bfd.Ipv4BfDoMplsteHeadSummary.SessionState()
            self.session_state.parent = self
            self._children_name_map["session_state"] = "session-state"
            self._children_yang_names.add("session-state")
            self._segment_path = lambda: "ipv4bf-do-mplste-head-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/%s" % self._segment_path()


        class SessionState(Entity):
            """
            Statistics of states for sessions
            
            .. attribute:: total_count
            
            	Number of sessions in database
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: down_count
            
            	Number of sessions in down state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: up_count
            
            	Number of sessions in up state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: unknown_count
            
            	Number of sessions in unknown state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-bfd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Bfd.Ipv4BfDoMplsteHeadSummary.SessionState, self).__init__()

                self.yang_name = "session-state"
                self.yang_parent_name = "ipv4bf-do-mplste-head-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total_count', YLeaf(YType.uint32, 'total-count')),
                    ('down_count', YLeaf(YType.uint32, 'down-count')),
                    ('up_count', YLeaf(YType.uint32, 'up-count')),
                    ('unknown_count', YLeaf(YType.uint32, 'unknown-count')),
                ])
                self.total_count = None
                self.down_count = None
                self.up_count = None
                self.unknown_count = None
                self._segment_path = lambda: "session-state"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-bfd-oper:bfd/ipv4bf-do-mplste-head-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bfd.Ipv4BfDoMplsteHeadSummary.SessionState, ['total_count', 'down_count', 'up_count', 'unknown_count'], name, value)

    def clone_ptr(self):
        self._top_entity = Bfd()
        return self._top_entity

