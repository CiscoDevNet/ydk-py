""" ietf_dmm_fpc 

This module contains YANG definition for
Forwarding Policy Configuration Protocol (FPCP).

Copyright (c) 2016 IETF Trust and the persons identified as the
document authors. All rights reserved.

This document is subject to BCP 78 and the IETF Trust's Legal
Provisions Relating to IETF Documents
(http\://trustee.ietf.org/license\-info) in effect on the date of
publication of this document. Please review these documents
carefully, as they describe your rights and restrictions with
respect to this document. Code Components extracted from this
document must include Simplified BSD License text as described
in Section 4.e of the Trust Legal Provisions and are provided
without warranty as described in the Simplified BSD License.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError



class AdminStatusEnum(Enum):
    """
    AdminStatusEnum

    Adminstrative Status

    .. data:: enabled = 0

    	enabled

    .. data:: disabled = 1

    	disabled

    .. data:: virtual = 2

    	virtual

    """

    enabled = 0

    disabled = 1

    virtual = 2


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['AdminStatusEnum']


class FpcDirectionEnum(Enum):
    """
    FpcDirectionEnum

    FPC Direction

    .. data:: lylebe551144 = 0

    	lylebe551144

    .. data:: downlink = 1

    	Downlink

    .. data:: both = 2

    	Both

    """

    lylebe551144 = 0

    downlink = 1

    both = 2


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcDirectionEnum']


class RefScopeEnum(Enum):
    """
    RefScopeEnum

    Search scope for references in the operation.

    .. data:: none = 0

    	no references

    .. data:: op = 1

    	op - All references are contained in the

    	operation body (intra-op)

    .. data:: bundle = 2

    	bundle - All references in exist in bundle

    	(inter-operation/intra-bundle).

    	NOTE - If this value comes in CONFIG call it is

    	equivalent to 'op'.

    .. data:: storage = 3

    	storage - One or more references exist outside

    	of the operation and bundle. A lookup to a cache /

    	storage is required.

    .. data:: unknown = 4

    	 unknown - the location of the references are

    	unknown.  This is treated as a 'storage' type.

    """

    none = 0

    op = 1

    bundle = 2

    storage = 3

    unknown = 4


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['RefScopeEnum']


class ResultEnum(Enum):
    """
    ResultEnum

    Result Status

    .. data:: ok = 0

    	OK

    .. data:: err = 1

    	Error

    .. data:: ok_notify_follows = 2

    	OK with NOTIFY following

    """

    ok = 0

    err = 1

    ok_notify_follows = 2


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['ResultEnum']


class SessionStatusEnum(Enum):
    """
    SessionStatusEnum

    Session Status

    .. data:: complete = 0

    	complete

    .. data:: incomplete = 1

    	incomplete

    .. data:: outdated = 2

    	outdated

    """

    complete = 0

    incomplete = 1

    outdated = 2


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['SessionStatusEnum']



class FpcMobilityProfileTypeIdentity(object):
    """
    Mobility Profile Type
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcMobilityProfileTypeIdentity']['meta_info']


class FpcDescriptorTypeIdentity(object):
    """
    A traffic descriptor
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcDescriptorTypeIdentity']['meta_info']


class ReportTypeIdentity(object):
    """
    Type of Report
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['ReportTypeIdentity']['meta_info']


class FpcActionTypeIdentity(object):
    """
    Action Type
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcActionTypeIdentity']['meta_info']


class FpcNexthopTypeIdentity(object):
    """
    Next Hop Type
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcNexthopTypeIdentity']['meta_info']


class EventTypeIdentity(object):
    """
    Base Event Type
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['EventTypeIdentity']['meta_info']


class CommandSetIdentity(object):
    """
    protocol specific commands
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['CommandSetIdentity']['meta_info']


class VendorSpecificTypeIdentity(object):
    """
    Vendor Specific Attribute Type
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['VendorSpecificTypeIdentity']['meta_info']


class ErrorTypeIdentity(object):
    """
    Base Error Type
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['ErrorTypeIdentity']['meta_info']


class NameAlreadyExistsIdentity(object):
    """
    Notification that an entity of the same name
    already exists
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['NameAlreadyExistsIdentity']['meta_info']


class FpcDpnControlProtocolIdentity(object):
    """
    DPN Control Protocol
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcDpnControlProtocolIdentity']['meta_info']


class FpcQosTypeIdentity(object):
    """
    Base identity from which specific uses of QoS
    types are derived.
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcQosTypeIdentity']['meta_info']


class FpcAccessTypeIdentity(object):
    """
    Access Type of the DPN Group
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcAccessTypeIdentity']['meta_info']


class FpcDataPlaneRoleIdentity(object):
    """
    Role of DPN Group in the Forwarding Plane
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcDataPlaneRoleIdentity']['meta_info']


class Tenants(object):
    """
    Tenant List
    
    .. attribute:: tenant
    
    	Tenant
    	**type**\: list of    :py:class:`Tenant <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant>`
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        self.tenant = YList()
        self.tenant.parent = self
        self.tenant.name = 'tenant'


    class Tenant(object):
        """
        Tenant
        
        .. attribute:: tenant_id  <key>
        
        	Tenant ID
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        
        ----
        	**type**\:  str
        
        
        ----
        	**type**\:  str
        
        
        ----
        .. attribute:: fpc_mobility
        
        	Mobility
        	**type**\:   :py:class:`FpcMobility <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility>`
        
        .. attribute:: fpc_policy
        
        	Policy
        	**type**\:   :py:class:`FpcPolicy <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy>`
        
        .. attribute:: fpc_topology
        
        	Topology
        	**type**\:   :py:class:`FpcTopology <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcTopology>`
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.tenant_id = None
            self.fpc_mobility = Tenants.Tenant.FpcMobility()
            self.fpc_mobility.parent = self
            self.fpc_policy = Tenants.Tenant.FpcPolicy()
            self.fpc_policy.parent = self
            self.fpc_topology = Tenants.Tenant.FpcTopology()
            self.fpc_topology.parent = self


        class FpcPolicy(object):
            """
            Policy
            
            .. attribute:: actions
            
            	Actions
            	**type**\: list of    :py:class:`Actions <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Actions>`
            
            .. attribute:: descriptors
            
            	Descriptors
            	**type**\: list of    :py:class:`Descriptors <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors>`
            
            .. attribute:: policies
            
            	Policies
            	**type**\: list of    :py:class:`Policies <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Policies>`
            
            .. attribute:: policy_groups
            
            	Policy Groups
            	**type**\: list of    :py:class:`PolicyGroups <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.PolicyGroups>`
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.actions = YList()
                self.actions.parent = self
                self.actions.name = 'actions'
                self.descriptors = YList()
                self.descriptors.parent = self
                self.descriptors.name = 'descriptors'
                self.policies = YList()
                self.policies.parent = self
                self.policies.name = 'policies'
                self.policy_groups = YList()
                self.policy_groups.parent = self
                self.policy_groups.name = 'policy_groups'


            class PolicyGroups(object):
                """
                Policy Groups
                
                .. attribute:: policy_group_id  <key>
                
                	Policy Group ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: policies
                
                	Policies
                	**type**\: one of the below types:
                
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.policy_group_id = None
                    self.policies = YLeafList()
                    self.policies.parent = self
                    self.policies.name = 'policies'

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.policy_group_id is None:
                        raise YPYModelError('Key property policy_group_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:policy-groups[ietf-dmm-fpc:policy-group-id = ' + str(self.policy_group_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.policy_group_id is not None:
                        return True

                    if self.policies is not None:
                        for child in self.policies:
                            if child is not None:
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['Tenants.Tenant.FpcPolicy.PolicyGroups']['meta_info']


            class Policies(object):
                """
                Policies
                
                .. attribute:: policy_id  <key>
                
                	Policy Id
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: rules
                
                	Rules
                	**type**\: list of    :py:class:`Rules <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Policies.Rules>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.policy_id = None
                    self.rules = YList()
                    self.rules.parent = self
                    self.rules.name = 'rules'


                class Rules(object):
                    """
                    Rules
                    
                    .. attribute:: order  <key>
                    
                    	Rule Order
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: actions
                    
                    	Actions
                    	**type**\: list of    :py:class:`Actions <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Policies.Rules.Actions>`
                    
                    .. attribute:: descriptors
                    
                    	Descriptors
                    	**type**\: list of    :py:class:`Descriptors <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Policies.Rules.Descriptors>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.order = None
                        self.actions = YList()
                        self.actions.parent = self
                        self.actions.name = 'actions'
                        self.descriptors = YList()
                        self.descriptors.parent = self
                        self.descriptors.name = 'descriptors'


                    class Descriptors(object):
                        """
                        Descriptors
                        
                        .. attribute:: descriptor_id  <key>
                        
                        	Descriptor Id
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: direction
                        
                        	Direction
                        	**type**\:   :py:class:`FpcDirectionEnum <ydk.models.ietf.ietf_dmm_fpc.FpcDirectionEnum>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.descriptor_id = None
                            self.direction = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.descriptor_id is None:
                                raise YPYModelError('Key property descriptor_id is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:descriptors[ietf-dmm-fpc:descriptor-id = ' + str(self.descriptor_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.descriptor_id is not None:
                                return True

                            if self.direction is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcPolicy.Policies.Rules.Descriptors']['meta_info']


                    class Actions(object):
                        """
                        Actions
                        
                        .. attribute:: action_id  <key>
                        
                        	Action Identifier
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: action_order
                        
                        	Action Execution Order
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.action_id = None
                            self.action_order = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.action_id is None:
                                raise YPYModelError('Key property action_id is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:actions[ietf-dmm-fpc:action-id = ' + str(self.action_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.action_id is not None:
                                return True

                            if self.action_order is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcPolicy.Policies.Rules.Actions']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.order is None:
                            raise YPYModelError('Key property order is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:rules[ietf-dmm-fpc:order = ' + str(self.order) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.order is not None:
                            return True

                        if self.actions is not None:
                            for child_ref in self.actions:
                                if child_ref._has_data():
                                    return True

                        if self.descriptors is not None:
                            for child_ref in self.descriptors:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Policies.Rules']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.policy_id is None:
                        raise YPYModelError('Key property policy_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:policies[ietf-dmm-fpc:policy-id = ' + str(self.policy_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.policy_id is not None:
                        return True

                    if self.rules is not None:
                        for child_ref in self.rules:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['Tenants.Tenant.FpcPolicy.Policies']['meta_info']


            class Descriptors(object):
                """
                Descriptors
                
                .. attribute:: descriptor_id  <key>
                
                	Descriptor Id
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: all_traffic
                
                	Empty Value
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: descriptor_type
                
                	Descriptor Type
                	**type**\:   :py:class:`FpcDescriptorTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcDescriptorTypeIdentity>`
                
                	**mandatory**\: True
                
                .. attribute:: destination_address_range_v4
                
                	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.DestinationAddressRangeV4>`
                
                	**presence node**\: True
                
                .. attribute:: destination_address_range_v6
                
                	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.DestinationAddressRangeV6>`
                
                	**presence node**\: True
                
                .. attribute:: destination_ip
                
                	Rule of destination IP
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                
                
                ----
                .. attribute:: destination_port_range
                
                	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.DestinationPortRange>`
                
                	**presence node**\: True
                
                .. attribute:: ds_range
                
                	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.DsRange>`
                
                	**presence node**\: True
                
                .. attribute:: flow_label_range
                
                	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.FlowLabelRange>`
                
                	**presence node**\: True
                
                .. attribute:: ipsec_spi_range
                
                	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.IpsecSpiRange>`
                
                	**presence node**\: True
                
                .. attribute:: next_header_range
                
                	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.NextHeaderRange>`
                
                	**presence node**\: True
                
                .. attribute:: packet_filters
                
                	List of Packet Filters
                	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.PacketFilters>`
                
                .. attribute:: protocol_range
                
                	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.ProtocolRange>`
                
                	**presence node**\: True
                
                .. attribute:: source_address_range_v4
                
                	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.SourceAddressRangeV4>`
                
                	**presence node**\: True
                
                .. attribute:: source_address_range_v6
                
                	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.SourceAddressRangeV6>`
                
                	**presence node**\: True
                
                .. attribute:: source_ip
                
                	Rule of source IP
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                
                
                ----
                .. attribute:: source_port_range
                
                	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.SourcePortRange>`
                
                	**presence node**\: True
                
                .. attribute:: traffic_class_range
                
                	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.TrafficClassRange>`
                
                	**presence node**\: True
                
                .. attribute:: ts_format
                
                	Traffic Selector Format
                	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.descriptor_id = None
                    self.all_traffic = None
                    self.descriptor_type = None
                    self.destination_address_range_v4 = None
                    self.destination_address_range_v6 = None
                    self.destination_ip = None
                    self.destination_port_range = None
                    self.ds_range = None
                    self.flow_label_range = None
                    self.ipsec_spi_range = None
                    self.next_header_range = None
                    self.packet_filters = YList()
                    self.packet_filters.parent = self
                    self.packet_filters.name = 'packet_filters'
                    self.protocol_range = None
                    self.source_address_range_v4 = None
                    self.source_address_range_v6 = None
                    self.source_ip = None
                    self.source_port_range = None
                    self.traffic_class_range = None
                    self.ts_format = None


                class IpsecSpiRange(object):
                    """
                    Inclusive range representing IPSec Security Parameter
                    Indices to be used. When only start\-spi is present, it
                    represents a single spi.
                    
                    .. attribute:: end_spi
                    
                    	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: start_spi
                    
                    	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_spi = None
                        self.start_spi = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_spi is not None:
                            return True

                        if self.start_spi is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.IpsecSpiRange']['meta_info']


                class SourcePortRange(object):
                    """
                    Inclusive range representing source ports to be used.
                    When only start\-port is present, it represents a single
                          port.
                    
                    .. attribute:: end_port
                    
                    	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: start_port
                    
                    	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    	**mandatory**\: True
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_port = None
                        self.start_port = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_port is not None:
                            return True

                        if self.start_port is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.SourcePortRange']['meta_info']


                class DestinationPortRange(object):
                    """
                    Inclusive range representing destination ports to be used.
                    When only start\-port is present, it represents a single
                    port.
                    
                    .. attribute:: end_port
                    
                    	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: start_port
                    
                    	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    	**mandatory**\: True
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_port = None
                        self.start_port = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_port is not None:
                            return True

                        if self.start_port is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.DestinationPortRange']['meta_info']


                class SourceAddressRangeV4(object):
                    """
                    Inclusive range representing IPv4 addresses to be used. When
                    only start\-address is present, it represents a single
                    address.
                    
                    .. attribute:: end_address
                    
                    	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: start_address
                    
                    	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_address = None
                        self.start_address = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_address is not None:
                            return True

                        if self.start_address is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.SourceAddressRangeV4']['meta_info']


                class DestinationAddressRangeV4(object):
                    """
                    Inclusive range representing IPv4 addresses to be used.
                    When only start\-address is present, it represents a
                    single address.
                    
                    .. attribute:: end_address
                    
                    	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: start_address
                    
                    	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_address = None
                        self.start_address = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_address is not None:
                            return True

                        if self.start_address is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.DestinationAddressRangeV4']['meta_info']


                class DsRange(object):
                    """
                    Inclusive range representing DiffServ Codepoints to be used.
                    When only start\-ds is present, it represents a single
                    Codepoint.
                    
                    .. attribute:: end_ds
                    
                    	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                    	**type**\:  int
                    
                    	**range:** 0..63
                    
                    .. attribute:: start_ds
                    
                    	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                    	**type**\:  int
                    
                    	**range:** 0..63
                    
                    	**mandatory**\: True
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_ds = None
                        self.start_ds = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_ds is not None:
                            return True

                        if self.start_ds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.DsRange']['meta_info']


                class ProtocolRange(object):
                    """
                    Inclusive range representing IP protocol(s) to be used. When
                    only start\-protocol is present, it represents a single
                    protocol.
                    
                    .. attribute:: end_protocol
                    
                    	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: start_protocol
                    
                    	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_protocol = None
                        self.start_protocol = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_protocol is not None:
                            return True

                        if self.start_protocol is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.ProtocolRange']['meta_info']


                class SourceAddressRangeV6(object):
                    """
                    Inclusive range representing IPv6 addresses to be used.
                    When only start\-address is present, it represents a
                    single address.
                    
                    .. attribute:: end_address
                    
                    	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: start_address
                    
                    	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_address = None
                        self.start_address = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_address is not None:
                            return True

                        if self.start_address is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.SourceAddressRangeV6']['meta_info']


                class DestinationAddressRangeV6(object):
                    """
                    Inclusive range representing IPv6 addresses to be used.
                    When only start\-address is present, it represents a
                    single address.
                    
                    .. attribute:: end_address
                    
                    	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: start_address
                    
                    	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_address = None
                        self.start_address = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_address is not None:
                            return True

                        if self.start_address is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.DestinationAddressRangeV6']['meta_info']


                class FlowLabelRange(object):
                    """
                    Inclusive range representing IPv4 addresses to be used. When
                    only start\-flow\-label is present, it represents a single
                    flow label.
                    
                    .. attribute:: end_flow_label
                    
                    	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                    	**type**\:  int
                    
                    	**range:** 0..1048575
                    
                    .. attribute:: start_flow_label
                    
                    	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                    	**type**\:  int
                    
                    	**range:** 0..1048575
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_flow_label = None
                        self.start_flow_label = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_flow_label is not None:
                            return True

                        if self.start_flow_label is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.FlowLabelRange']['meta_info']


                class TrafficClassRange(object):
                    """
                    Inclusive range representing IPv4 addresses to be used. When
                    only start\-traffic\-class is present, it represents a single
                    traffic class.
                    
                    .. attribute:: end_traffic_class
                    
                    	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                    	**type**\:  int
                    
                    	**range:** 0..63
                    
                    .. attribute:: start_traffic_class
                    
                    	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                    	**type**\:  int
                    
                    	**range:** 0..63
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_traffic_class = None
                        self.start_traffic_class = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_traffic_class is not None:
                            return True

                        if self.start_traffic_class is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.TrafficClassRange']['meta_info']


                class NextHeaderRange(object):
                    """
                    Inclusive range representing Next Headers to be used. When
                    only start\-next\-header is present, it represents a
                    single Next Header.
                    
                    .. attribute:: end_next_header
                    
                    	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: start_next_header
                    
                    	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'fpc-pmip'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self._is_presence = True
                        self.end_next_header = None
                        self.start_next_header = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self._is_presence:
                            return True
                        if self.end_next_header is not None:
                            return True

                        if self.start_next_header is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.NextHeaderRange']['meta_info']


                class PacketFilters(object):
                    """
                    List of Packet Filters
                    
                    .. attribute:: identifier  <key>
                    
                    	Filter Identifier
                    	**type**\:  int
                    
                    	**range:** 1..15
                    
                    .. attribute:: contents
                    
                    	Filter Contents
                    	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Descriptors.PacketFilters.Contents>`
                    
                    .. attribute:: direction
                    
                    	Filter Direction
                    	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                    
                    .. attribute:: evaluation_precedence
                    
                    	Evaluation Precedence
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'threegpp'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.identifier = None
                        self.contents = YList()
                        self.contents.parent = self
                        self.contents.name = 'contents'
                        self.direction = None
                        self.evaluation_precedence = None


                    class Contents(object):
                        """
                        Filter Contents
                        
                        .. attribute:: component_type_identifier  <key>
                        
                        	Component Type
                        	**type**\:  int
                        
                        	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                        
                        .. attribute:: flow_label
                        
                        	Flow Label
                        	**type**\:  list of int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: ipsec_index
                        
                        	IPSec Index
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipv4_ipv6_remote
                        
                        	Ipv4 Ipv6 remote address
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: ipv4_local
                        
                        	IPv4 Local Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6_prefix_local
                        
                        	IPv6 Local Prefix
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        .. attribute:: ipv6_prefix_remote
                        
                        	IPv6 Remote Prefix
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        .. attribute:: local_port
                        
                        	Local Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: local_port_hi
                        
                        	Local Port Max Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: local_port_lo
                        
                        	Local Port Min Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: next_header
                        
                        	Next Header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: remote_port
                        
                        	Remote Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: remote_port_hi
                        
                        	Remote Port Max Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: remote_port_lo
                        
                        	Remote Por Min Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: traffic_class
                        
                        	Traffic Class
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: traffic_class_hi
                        
                        	Traffic Class Max Value
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: traffic_class_lo
                        
                        	Traffic Class Min Value
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.component_type_identifier = None
                            self.flow_label = YLeafList()
                            self.flow_label.parent = self
                            self.flow_label.name = 'flow_label'
                            self.ipsec_index = None
                            self.ipv4_ipv6_remote = None
                            self.ipv4_local = None
                            self.ipv6_prefix_local = None
                            self.ipv6_prefix_remote = None
                            self.local_port = None
                            self.local_port_hi = None
                            self.local_port_lo = None
                            self.next_header = None
                            self.remote_port = None
                            self.remote_port_hi = None
                            self.remote_port_lo = None
                            self.traffic_class = None
                            self.traffic_class_hi = None
                            self.traffic_class_lo = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.component_type_identifier is None:
                                raise YPYModelError('Key property component_type_identifier is None')

                            return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.component_type_identifier is not None:
                                return True

                            if self.flow_label is not None:
                                for child in self.flow_label:
                                    if child is not None:
                                        return True

                            if self.ipsec_index is not None:
                                return True

                            if self.ipv4_ipv6_remote is not None:
                                return True

                            if self.ipv4_local is not None:
                                return True

                            if self.ipv6_prefix_local is not None:
                                return True

                            if self.ipv6_prefix_remote is not None:
                                return True

                            if self.local_port is not None:
                                return True

                            if self.local_port_hi is not None:
                                return True

                            if self.local_port_lo is not None:
                                return True

                            if self.next_header is not None:
                                return True

                            if self.remote_port is not None:
                                return True

                            if self.remote_port_hi is not None:
                                return True

                            if self.remote_port_lo is not None:
                                return True

                            if self.traffic_class is not None:
                                return True

                            if self.traffic_class_hi is not None:
                                return True

                            if self.traffic_class_lo is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.PacketFilters.Contents']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.identifier is None:
                            raise YPYModelError('Key property identifier is None')

                        return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.identifier is not None:
                            return True

                        if self.contents is not None:
                            for child_ref in self.contents:
                                if child_ref._has_data():
                                    return True

                        if self.direction is not None:
                            return True

                        if self.evaluation_precedence is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors.PacketFilters']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.descriptor_id is None:
                        raise YPYModelError('Key property descriptor_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:descriptors[ietf-dmm-fpc:descriptor-id = ' + str(self.descriptor_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.descriptor_id is not None:
                        return True

                    if self.all_traffic is not None:
                        return True

                    if self.descriptor_type is not None:
                        return True

                    if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                        return True

                    if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                        return True

                    if self.destination_ip is not None:
                        return True

                    if self.destination_port_range is not None and self.destination_port_range._has_data():
                        return True

                    if self.ds_range is not None and self.ds_range._has_data():
                        return True

                    if self.flow_label_range is not None and self.flow_label_range._has_data():
                        return True

                    if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                        return True

                    if self.next_header_range is not None and self.next_header_range._has_data():
                        return True

                    if self.packet_filters is not None:
                        for child_ref in self.packet_filters:
                            if child_ref._has_data():
                                return True

                    if self.protocol_range is not None and self.protocol_range._has_data():
                        return True

                    if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                        return True

                    if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                        return True

                    if self.source_ip is not None:
                        return True

                    if self.source_port_range is not None and self.source_port_range._has_data():
                        return True

                    if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                        return True

                    if self.ts_format is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['Tenants.Tenant.FpcPolicy.Descriptors']['meta_info']


            class Actions(object):
                """
                Actions
                
                .. attribute:: action_id  <key>
                
                	Action Identifier
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: action_type
                
                	Action Type
                	**type**\:   :py:class:`FpcActionTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcActionTypeIdentity>`
                
                	**mandatory**\: True
                
                .. attribute:: destination
                
                	destination
                	**type**\:   :py:class:`Destination <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcPolicy.Actions.Destination>`
                
                .. attribute:: destination_port
                
                	Destination Port
                	**type**\:  int
                
                	**range:** 0..65535
                
                .. attribute:: drop
                
                	Empty Value
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: outbound_napt_address
                
                	Outbound NAPT Address
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: outbound_nat_address
                
                	Outbound NAT Address
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: source_port
                
                	Source Port
                	**type**\:  int
                
                	**range:** 0..65535
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.action_id = None
                    self.action_type = None
                    self.destination = Tenants.Tenant.FpcPolicy.Actions.Destination()
                    self.destination.parent = self
                    self.destination_port = None
                    self.drop = None
                    self.outbound_napt_address = None
                    self.outbound_nat_address = None
                    self.source_port = None


                class Destination(object):
                    """
                    destination
                    
                    .. attribute:: context_ref
                    
                    	Context
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: port_ref
                    
                    	Port
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    

                    """

                    _prefix = 'fpcpolicyext'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.context_ref = None
                        self.port_ref = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc-policyext:destination'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.context_ref is not None:
                            return True

                        if self.port_ref is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcPolicy.Actions.Destination']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.action_id is None:
                        raise YPYModelError('Key property action_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:actions[ietf-dmm-fpc:action-id = ' + str(self.action_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.action_id is not None:
                        return True

                    if self.action_type is not None:
                        return True

                    if self.destination is not None and self.destination._has_data():
                        return True

                    if self.destination_port is not None:
                        return True

                    if self.drop is not None:
                        return True

                    if self.outbound_napt_address is not None:
                        return True

                    if self.outbound_nat_address is not None:
                        return True

                    if self.source_port is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['Tenants.Tenant.FpcPolicy.Actions']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/ietf-dmm-fpc:fpc-policy'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.actions is not None:
                    for child_ref in self.actions:
                        if child_ref._has_data():
                            return True

                if self.descriptors is not None:
                    for child_ref in self.descriptors:
                        if child_ref._has_data():
                            return True

                if self.policies is not None:
                    for child_ref in self.policies:
                        if child_ref._has_data():
                            return True

                if self.policy_groups is not None:
                    for child_ref in self.policy_groups:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['Tenants.Tenant.FpcPolicy']['meta_info']


        class FpcMobility(object):
            """
            Mobility
            
            .. attribute:: contexts
            
            	Contexts
            	**type**\: list of    :py:class:`Contexts <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts>`
            
            .. attribute:: monitors
            
            	Monitors
            	**type**\: list of    :py:class:`Monitors <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Monitors>`
            
            .. attribute:: vports
            
            	Ports
            	**type**\: list of    :py:class:`Vports <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Vports>`
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.contexts = YList()
                self.contexts.parent = self
                self.contexts.name = 'contexts'
                self.monitors = YList()
                self.monitors.parent = self
                self.monitors.name = 'monitors'
                self.vports = YList()
                self.vports.parent = self
                self.vports.name = 'vports'


            class Contexts(object):
                """
                Contexts
                
                .. attribute:: context_id  <key>
                
                	Context ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: delegated_ip_prefixes
                
                	Delegated Prefix(es)
                	**type**\: one of the below types:
                
                	**type**\:  list of str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                
                
                ----
                	**type**\:  list of str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                
                
                ----
                .. attribute:: dl
                
                	Downlink
                	**type**\:   :py:class:`Dl <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl>`
                
                .. attribute:: dpn_group
                
                	DPN Group
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: dpns
                
                	DPNs
                	**type**\: list of    :py:class:`Dpns <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns>`
                
                .. attribute:: ebi
                
                	EUTRAN Bearere Identifier (EBI)
                	**type**\:  int
                
                	**range:** 0..15
                
                .. attribute:: imsi
                
                	IMSI
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: lbi
                
                	Linked Bearer Identifier (LBI)
                	**type**\:  int
                
                	**range:** 0..15
                
                .. attribute:: parent_context
                
                	Parent Context
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: ul
                
                	lylebe551144
                	**type**\:   :py:class:`Ul <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul>`
                
                .. attribute:: vports
                
                	Vports
                	**type**\: one of the below types:
                
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.context_id = None
                    self.delegated_ip_prefixes = YLeafList()
                    self.delegated_ip_prefixes.parent = self
                    self.delegated_ip_prefixes.name = 'delegated_ip_prefixes'
                    self.dl = Tenants.Tenant.FpcMobility.Contexts.Dl()
                    self.dl.parent = self
                    self.dpn_group = None
                    self.dpns = YList()
                    self.dpns.parent = self
                    self.dpns.name = 'dpns'
                    self.ebi = None
                    self.imsi = None
                    self.lbi = None
                    self.parent_context = None
                    self.ul = Tenants.Tenant.FpcMobility.Contexts.Ul()
                    self.ul.parent = self
                    self.vports = YLeafList()
                    self.vports.parent = self
                    self.vports.name = 'vports'


                class Ul(object):
                    """
                    lylebe551144
                    
                    .. attribute:: dpn_parameters
                    
                    	DPN Parameters
                    	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.DpnParameters>`
                    
                    .. attribute:: mobility_tunnel_parameters
                    
                    	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                    	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters>`
                    
                    .. attribute:: mtu_size
                    
                    	MTU size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop
                    
                    	Next Hop
                    	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.Nexthop>`
                    
                    .. attribute:: qos_profile_parameters
                    
                    	QoS Parameters
                    	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters>`
                    
                    .. attribute:: tunnel_local_address
                    
                    	endpoint address of the DPN which a gent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: tunnel_remote_address
                    
                    	endpoint address of the DPN which agent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: vendor_parameters
                    
                    	Vendor Parameters
                    	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.VendorParameters>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.dpn_parameters = Tenants.Tenant.FpcMobility.Contexts.Ul.DpnParameters()
                        self.dpn_parameters.parent = self
                        self.mobility_tunnel_parameters = Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters()
                        self.mobility_tunnel_parameters.parent = self
                        self.mtu_size = None
                        self.nexthop = Tenants.Tenant.FpcMobility.Contexts.Ul.Nexthop()
                        self.nexthop.parent = self
                        self.qos_profile_parameters = Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters()
                        self.qos_profile_parameters.parent = self
                        self.tunnel_local_address = None
                        self.tunnel_remote_address = None
                        self.vendor_parameters = YList()
                        self.vendor_parameters.parent = self
                        self.vendor_parameters.name = 'vendor_parameters'


                    class MobilityTunnelParameters(object):
                        """
                        Specifies profile specific lylebe551144 tunnel
                        parameters to the DPN which the agent exists. The
                        profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                        ietf\-pmip profile, or new profile if anyone will define
                        it.
                        
                        .. attribute:: destination_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_port_range
                        
                        	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                        	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.DestinationPortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ds_range
                        
                        	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                        	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.DsRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: flow_label_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                        	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.FlowLabelRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ipsec_spi_range
                        
                        	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                        	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.IpsecSpiRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: key
                        
                        	GRE\_KEY
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: next_header_range
                        
                        	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                        	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.NextHeaderRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: none
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: packet_filters
                        
                        	List of Packet Filters
                        	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.PacketFilters>`
                        
                        .. attribute:: protocol_range
                        
                        	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                        	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.ProtocolRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: selector_reference
                        
                        	Pre\-configured selector
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: source_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_port_range
                        
                        	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                        	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.SourcePortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: tft_reference
                        
                        	Pre\-configured TFT
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: traffic_class_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                        	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.TrafficClassRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ts_format
                        
                        	Traffic Selector Format
                        	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                        
                        .. attribute:: tunnel_identifier
                        
                        	Tunnel Endpoint IDentifier (TEID)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_type
                        
                        	3GPP Tunnel Subtype
                        	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                        
                        .. attribute:: type
                        
                        	PMIP Mobility
                        	**type**\:   :py:class:`PmipTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipTunnelTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.destination_address_range_v4 = None
                            self.destination_address_range_v6 = None
                            self.destination_port_range = None
                            self.ds_range = None
                            self.flow_label_range = None
                            self.ipsec_spi_range = None
                            self.key = None
                            self.next_header_range = None
                            self.none = None
                            self.packet_filters = YList()
                            self.packet_filters.parent = self
                            self.packet_filters.name = 'packet_filters'
                            self.protocol_range = None
                            self.selector_reference = None
                            self.source_address_range_v4 = None
                            self.source_address_range_v6 = None
                            self.source_port_range = None
                            self.tft_reference = None
                            self.traffic_class_range = None
                            self.ts_format = None
                            self.tunnel_identifier = None
                            self.tunnel_type = None
                            self.type = None


                        class IpsecSpiRange(object):
                            """
                            Inclusive range representing IPSec Security Parameter
                            Indices to be used. When only start\-spi is present, it
                            represents a single spi.
                            
                            .. attribute:: end_spi
                            
                            	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: start_spi
                            
                            	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_spi = None
                                self.start_spi = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_spi is not None:
                                    return True

                                if self.start_spi is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.IpsecSpiRange']['meta_info']


                        class SourcePortRange(object):
                            """
                            Inclusive range representing source ports to be used.
                            When only start\-port is present, it represents a single
                                  port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.SourcePortRange']['meta_info']


                        class DestinationPortRange(object):
                            """
                            Inclusive range representing destination ports to be used.
                            When only start\-port is present, it represents a single
                            port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.DestinationPortRange']['meta_info']


                        class SourceAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-address is present, it represents a single
                            address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV4']['meta_info']


                        class DestinationAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV4']['meta_info']


                        class DsRange(object):
                            """
                            Inclusive range representing DiffServ Codepoints to be used.
                            When only start\-ds is present, it represents a single
                            Codepoint.
                            
                            .. attribute:: end_ds
                            
                            	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_ds
                            
                            	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_ds = None
                                self.start_ds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_ds is not None:
                                    return True

                                if self.start_ds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.DsRange']['meta_info']


                        class ProtocolRange(object):
                            """
                            Inclusive range representing IP protocol(s) to be used. When
                            only start\-protocol is present, it represents a single
                            protocol.
                            
                            .. attribute:: end_protocol
                            
                            	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_protocol
                            
                            	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_protocol = None
                                self.start_protocol = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_protocol is not None:
                                    return True

                                if self.start_protocol is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.ProtocolRange']['meta_info']


                        class SourceAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV6']['meta_info']


                        class DestinationAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV6']['meta_info']


                        class FlowLabelRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-flow\-label is present, it represents a single
                            flow label.
                            
                            .. attribute:: end_flow_label
                            
                            	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: start_flow_label
                            
                            	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_flow_label = None
                                self.start_flow_label = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_flow_label is not None:
                                    return True

                                if self.start_flow_label is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.FlowLabelRange']['meta_info']


                        class TrafficClassRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-traffic\-class is present, it represents a single
                            traffic class.
                            
                            .. attribute:: end_traffic_class
                            
                            	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_traffic_class
                            
                            	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_traffic_class = None
                                self.start_traffic_class = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_traffic_class is not None:
                                    return True

                                if self.start_traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.TrafficClassRange']['meta_info']


                        class NextHeaderRange(object):
                            """
                            Inclusive range representing Next Headers to be used. When
                            only start\-next\-header is present, it represents a
                            single Next Header.
                            
                            .. attribute:: end_next_header
                            
                            	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_next_header
                            
                            	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_next_header = None
                                self.start_next_header = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_next_header is not None:
                                    return True

                                if self.start_next_header is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.NextHeaderRange']['meta_info']


                        class PacketFilters(object):
                            """
                            List of Packet Filters
                            
                            .. attribute:: identifier  <key>
                            
                            	Filter Identifier
                            	**type**\:  int
                            
                            	**range:** 1..15
                            
                            .. attribute:: contents
                            
                            	Filter Contents
                            	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.PacketFilters.Contents>`
                            
                            .. attribute:: direction
                            
                            	Filter Direction
                            	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                            
                            .. attribute:: evaluation_precedence
                            
                            	Evaluation Precedence
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.identifier = None
                                self.contents = YList()
                                self.contents.parent = self
                                self.contents.name = 'contents'
                                self.direction = None
                                self.evaluation_precedence = None


                            class Contents(object):
                                """
                                Filter Contents
                                
                                .. attribute:: component_type_identifier  <key>
                                
                                	Component Type
                                	**type**\:  int
                                
                                	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                                
                                .. attribute:: flow_label
                                
                                	Flow Label
                                	**type**\:  list of int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: ipsec_index
                                
                                	IPSec Index
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_ipv6_remote
                                
                                	Ipv4 Ipv6 remote address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: ipv4_local
                                
                                	IPv4 Local Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6_prefix_local
                                
                                	IPv6 Local Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: ipv6_prefix_remote
                                
                                	IPv6 Remote Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: local_port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_hi
                                
                                	Local Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_lo
                                
                                	Local Port Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_header
                                
                                	Next Header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: remote_port
                                
                                	Remote Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_hi
                                
                                	Remote Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_lo
                                
                                	Remote Por Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_class
                                
                                	Traffic Class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_hi
                                
                                	Traffic Class Max Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_lo
                                
                                	Traffic Class Min Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                

                                """

                                _prefix = 'threegpp'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self.component_type_identifier = None
                                    self.flow_label = YLeafList()
                                    self.flow_label.parent = self
                                    self.flow_label.name = 'flow_label'
                                    self.ipsec_index = None
                                    self.ipv4_ipv6_remote = None
                                    self.ipv4_local = None
                                    self.ipv6_prefix_local = None
                                    self.ipv6_prefix_remote = None
                                    self.local_port = None
                                    self.local_port_hi = None
                                    self.local_port_lo = None
                                    self.next_header = None
                                    self.remote_port = None
                                    self.remote_port_hi = None
                                    self.remote_port_lo = None
                                    self.traffic_class = None
                                    self.traffic_class_hi = None
                                    self.traffic_class_lo = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.component_type_identifier is None:
                                        raise YPYModelError('Key property component_type_identifier is None')

                                    return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.component_type_identifier is not None:
                                        return True

                                    if self.flow_label is not None:
                                        for child in self.flow_label:
                                            if child is not None:
                                                return True

                                    if self.ipsec_index is not None:
                                        return True

                                    if self.ipv4_ipv6_remote is not None:
                                        return True

                                    if self.ipv4_local is not None:
                                        return True

                                    if self.ipv6_prefix_local is not None:
                                        return True

                                    if self.ipv6_prefix_remote is not None:
                                        return True

                                    if self.local_port is not None:
                                        return True

                                    if self.local_port_hi is not None:
                                        return True

                                    if self.local_port_lo is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.remote_port is not None:
                                        return True

                                    if self.remote_port_hi is not None:
                                        return True

                                    if self.remote_port_lo is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.traffic_class_hi is not None:
                                        return True

                                    if self.traffic_class_lo is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.identifier is None:
                                    raise YPYModelError('Key property identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.identifier is not None:
                                    return True

                                if self.contents is not None:
                                    for child_ref in self.contents:
                                        if child_ref._has_data():
                                            return True

                                if self.direction is not None:
                                    return True

                                if self.evaluation_precedence is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters.PacketFilters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                return True

                            if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                return True

                            if self.destination_port_range is not None and self.destination_port_range._has_data():
                                return True

                            if self.ds_range is not None and self.ds_range._has_data():
                                return True

                            if self.flow_label_range is not None and self.flow_label_range._has_data():
                                return True

                            if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                return True

                            if self.key is not None:
                                return True

                            if self.next_header_range is not None and self.next_header_range._has_data():
                                return True

                            if self.none is not None:
                                return True

                            if self.packet_filters is not None:
                                for child_ref in self.packet_filters:
                                    if child_ref._has_data():
                                        return True

                            if self.protocol_range is not None and self.protocol_range._has_data():
                                return True

                            if self.selector_reference is not None:
                                return True

                            if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                return True

                            if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                return True

                            if self.source_port_range is not None and self.source_port_range._has_data():
                                return True

                            if self.tft_reference is not None:
                                return True

                            if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                return True

                            if self.ts_format is not None:
                                return True

                            if self.tunnel_identifier is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            if self.type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.MobilityTunnelParameters']['meta_info']


                    class Nexthop(object):
                        """
                        Next Hop
                        
                        .. attribute:: if_index
                        
                        	If (interface) Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: ip
                        
                        	IP Value
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: lsp
                        
                        	MPLS Value
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: macaddress
                        
                        	MAC Address Value
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: nexthop_type
                        
                        	Nexthop Type
                        	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                        
                        .. attribute:: servicepath
                        
                        	Service Path Value
                        	**type**\:  int
                        
                        	**range:** 0..33554431
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.if_index = None
                            self.ip = None
                            self.lsp = None
                            self.macaddress = None
                            self.nexthop_type = None
                            self.servicepath = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.if_index is not None:
                                return True

                            if self.ip is not None:
                                return True

                            if self.lsp is not None:
                                return True

                            if self.macaddress is not None:
                                return True

                            if self.nexthop_type is not None:
                                return True

                            if self.servicepath is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.Nexthop']['meta_info']


                    class QosProfileParameters(object):
                        """
                        QoS Parameters
                        
                        .. attribute:: agg_max_dl
                        
                        	Aggregate\-Max\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: agg_max_ul
                        
                        	Aggregate\-Max\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: apn_ambr
                        
                        	Access Point Name Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: arp
                        
                        	Allocation Retention Priority
                        	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.Arp>`
                        
                        .. attribute:: attributetype
                        
                        	the attribute type
                        	**type**\:   :py:class:`QosAttributeTypeIdentity <ydk.models.ietf.ietf_pmip_qos.QosAttributeTypeIdentity>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: gbr
                        
                        	Guaranteed Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: gbr_dl
                        
                        	Guaranteed\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: gbr_ul
                        
                        	Guaranteed\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mbr
                        
                        	Maximum Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_mn_agg_max_dl
                        
                        	Per\-MN\-Agg\-Max\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_mn_agg_max_ul
                        
                        	Per\-MN\-Agg\-Max\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_session_agg_max_dl
                        
                        	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        	**type**\:   :py:class:`PerSessionAggMaxDl <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.PerSessionAggMaxDl>`
                        
                        .. attribute:: per_session_agg_max_ul
                        
                        	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        	**type**\:   :py:class:`PerSessionAggMaxUl <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.PerSessionAggMaxUl>`
                        
                        .. attribute:: premption_capability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.PremptionCapabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: premption_vulnerability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.PremptionVulnerabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: prioirty_level
                        
                        	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                        	**type**\:  int
                        
                        	**range:** 0..15
                        
                        	**mandatory**\: True
                        
                        .. attribute:: qci
                        
                        	QCI
                        	**type**\:  int
                        
                        	**range:** 1..9
                        
                        .. attribute:: qos_type
                        
                        	the profile type
                        	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                        
                        .. attribute:: traffic_selector
                        
                        	traffic selector
                        	**type**\:   :py:class:`TrafficSelector <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector>`
                        
                        .. attribute:: ue_ambr
                        
                        	User Equipment Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.agg_max_dl = None
                            self.agg_max_ul = None
                            self.apn_ambr = None
                            self.arp = Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.Arp()
                            self.arp.parent = self
                            self.attributetype = None
                            self.gbr = None
                            self.gbr_dl = None
                            self.gbr_ul = None
                            self.mbr = None
                            self.per_mn_agg_max_dl = None
                            self.per_mn_agg_max_ul = None
                            self.per_session_agg_max_dl = Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.PerSessionAggMaxDl()
                            self.per_session_agg_max_dl.parent = self
                            self.per_session_agg_max_ul = Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.PerSessionAggMaxUl()
                            self.per_session_agg_max_ul.parent = self
                            self.premption_capability = None
                            self.premption_vulnerability = None
                            self.prioirty_level = None
                            self.qci = None
                            self.qos_type = None
                            self.traffic_selector = Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector()
                            self.traffic_selector.parent = self
                            self.ue_ambr = None

                        class PremptionCapabilityEnum(Enum):
                            """
                            PremptionCapabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                            service data flow can get resources that were already

                            assigned to another service data flow with a lower priority

                            level.  The following values are defined\:

                             Enabled (0)\: This value indicates that the service data flow

                             is allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.

                             Disabled (1)\: This value indicates that the service data flow

                             is not allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.  The values

                             (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.PremptionCapabilityEnum']


                        class PremptionVulnerabilityEnum(Enum):
                            """
                            PremptionVulnerabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                             service data flow can lose the resources assigned to it in

                             order to admit a service data flow with a higher priority

                             level.  The following values are defined\:

                               Enabled (0)\: This value indicates that the resources

                               assigned to the IP data flow can be preempted and

                               allocated to a service data flow with a higher

                               priority level.

                               Disabled (1)\: This value indicates that the resources

                               assigned to the IP data flow shall not be preempted and

                               allocated to a service data flow with a higher priority

                               level.  The values (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.PremptionVulnerabilityEnum']



                        class PerSessionAggMaxDl(object):
                            """
                            Per\-Session\-Agg\-Max\-Bit\-Rate Value
                            
                            .. attribute:: exclude_flag
                            
                            	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            .. attribute:: max_rate
                            
                            	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: service_flag
                            
                            	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.exclude_flag = None
                                self.max_rate = None
                                self.service_flag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:per-session-agg-max-dl'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exclude_flag is not None:
                                    return True

                                if self.max_rate is not None:
                                    return True

                                if self.service_flag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.PerSessionAggMaxDl']['meta_info']


                        class PerSessionAggMaxUl(object):
                            """
                            Per\-Session\-Agg\-Max\-Bit\-Rate Value
                            
                            .. attribute:: exclude_flag
                            
                            	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            .. attribute:: max_rate
                            
                            	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: service_flag
                            
                            	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.exclude_flag = None
                                self.max_rate = None
                                self.service_flag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:per-session-agg-max-ul'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exclude_flag is not None:
                                    return True

                                if self.max_rate is not None:
                                    return True

                                if self.service_flag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.PerSessionAggMaxUl']['meta_info']


                        class TrafficSelector(object):
                            """
                            traffic selector
                            
                            .. attribute:: destination_address_range_v4
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: destination_address_range_v6
                            
                            	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: destination_port_range
                            
                            	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                            	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationPortRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ds_range
                            
                            	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                            	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.DsRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: flow_label_range
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                            	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.FlowLabelRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ipsec_spi_range
                            
                            	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                            	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.IpsecSpiRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: next_header_range
                            
                            	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                            	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.NextHeaderRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: protocol_range
                            
                            	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                            	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.ProtocolRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_address_range_v4
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV4>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_address_range_v6
                            
                            	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV6>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_port_range
                            
                            	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                            	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.SourcePortRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: traffic_class_range
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                            	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.TrafficClassRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ts_format
                            
                            	Traffic Selector Format
                            	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.destination_address_range_v4 = None
                                self.destination_address_range_v6 = None
                                self.destination_port_range = None
                                self.ds_range = None
                                self.flow_label_range = None
                                self.ipsec_spi_range = None
                                self.next_header_range = None
                                self.protocol_range = None
                                self.source_address_range_v4 = None
                                self.source_address_range_v6 = None
                                self.source_port_range = None
                                self.traffic_class_range = None
                                self.ts_format = None


                            class IpsecSpiRange(object):
                                """
                                Inclusive range representing IPSec Security Parameter
                                Indices to be used. When only start\-spi is present, it
                                represents a single spi.
                                
                                .. attribute:: end_spi
                                
                                	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: start_spi
                                
                                	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_spi = None
                                    self.start_spi = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_spi is not None:
                                        return True

                                    if self.start_spi is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.IpsecSpiRange']['meta_info']


                            class SourcePortRange(object):
                                """
                                Inclusive range representing source ports to be used.
                                When only start\-port is present, it represents a single
                                      port.
                                
                                .. attribute:: end_port
                                
                                	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: start_port
                                
                                	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_port = None
                                    self.start_port = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_port is not None:
                                        return True

                                    if self.start_port is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.SourcePortRange']['meta_info']


                            class DestinationPortRange(object):
                                """
                                Inclusive range representing destination ports to be used.
                                When only start\-port is present, it represents a single
                                port.
                                
                                .. attribute:: end_port
                                
                                	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: start_port
                                
                                	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_port = None
                                    self.start_port = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_port is not None:
                                        return True

                                    if self.start_port is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationPortRange']['meta_info']


                            class SourceAddressRangeV4(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-address is present, it represents a single
                                address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV4']['meta_info']


                            class DestinationAddressRangeV4(object):
                                """
                                Inclusive range representing IPv4 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4']['meta_info']


                            class DsRange(object):
                                """
                                Inclusive range representing DiffServ Codepoints to be used.
                                When only start\-ds is present, it represents a single
                                Codepoint.
                                
                                .. attribute:: end_ds
                                
                                	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: start_ds
                                
                                	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_ds = None
                                    self.start_ds = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_ds is not None:
                                        return True

                                    if self.start_ds is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.DsRange']['meta_info']


                            class ProtocolRange(object):
                                """
                                Inclusive range representing IP protocol(s) to be used. When
                                only start\-protocol is present, it represents a single
                                protocol.
                                
                                .. attribute:: end_protocol
                                
                                	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: start_protocol
                                
                                	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_protocol = None
                                    self.start_protocol = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_protocol is not None:
                                        return True

                                    if self.start_protocol is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.ProtocolRange']['meta_info']


                            class SourceAddressRangeV6(object):
                                """
                                Inclusive range representing IPv6 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV6']['meta_info']


                            class DestinationAddressRangeV6(object):
                                """
                                Inclusive range representing IPv6 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6']['meta_info']


                            class FlowLabelRange(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-flow\-label is present, it represents a single
                                flow label.
                                
                                .. attribute:: end_flow_label
                                
                                	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                                	**type**\:  int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: start_flow_label
                                
                                	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                                	**type**\:  int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_flow_label = None
                                    self.start_flow_label = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_flow_label is not None:
                                        return True

                                    if self.start_flow_label is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.FlowLabelRange']['meta_info']


                            class TrafficClassRange(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-traffic\-class is present, it represents a single
                                traffic class.
                                
                                .. attribute:: end_traffic_class
                                
                                	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: start_traffic_class
                                
                                	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_traffic_class = None
                                    self.start_traffic_class = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_traffic_class is not None:
                                        return True

                                    if self.start_traffic_class is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.TrafficClassRange']['meta_info']


                            class NextHeaderRange(object):
                                """
                                Inclusive range representing Next Headers to be used. When
                                only start\-next\-header is present, it represents a
                                single Next Header.
                                
                                .. attribute:: end_next_header
                                
                                	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: start_next_header
                                
                                	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_next_header = None
                                    self.start_next_header = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_next_header is not None:
                                        return True

                                    if self.start_next_header is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector.NextHeaderRange']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-selector'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                    return True

                                if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                    return True

                                if self.destination_port_range is not None and self.destination_port_range._has_data():
                                    return True

                                if self.ds_range is not None and self.ds_range._has_data():
                                    return True

                                if self.flow_label_range is not None and self.flow_label_range._has_data():
                                    return True

                                if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                    return True

                                if self.next_header_range is not None and self.next_header_range._has_data():
                                    return True

                                if self.protocol_range is not None and self.protocol_range._has_data():
                                    return True

                                if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                    return True

                                if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                    return True

                                if self.source_port_range is not None and self.source_port_range._has_data():
                                    return True

                                if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                    return True

                                if self.ts_format is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.TrafficSelector']['meta_info']


                        class Arp(object):
                            """
                            Allocation Retention Priority
                            
                            .. attribute:: premption_capability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.Arp.PremptionCapabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: premption_vulnerability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.Arp.PremptionVulnerabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: prioirty_level
                            
                            	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                            	**type**\:  int
                            
                            	**range:** 0..15
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.premption_capability = None
                                self.premption_vulnerability = None
                                self.prioirty_level = None

                            class PremptionCapabilityEnum(Enum):
                                """
                                PremptionCapabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                service data flow can get resources that were already

                                assigned to another service data flow with a lower priority

                                level.  The following values are defined\:

                                 Enabled (0)\: This value indicates that the service data flow

                                 is allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.

                                 Disabled (1)\: This value indicates that the service data flow

                                 is not allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.  The values

                                 (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.Arp.PremptionCapabilityEnum']


                            class PremptionVulnerabilityEnum(Enum):
                                """
                                PremptionVulnerabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                 service data flow can lose the resources assigned to it in

                                 order to admit a service data flow with a higher priority

                                 level.  The following values are defined\:

                                   Enabled (0)\: This value indicates that the resources

                                   assigned to the IP data flow can be preempted and

                                   allocated to a service data flow with a higher

                                   priority level.

                                   Disabled (1)\: This value indicates that the resources

                                   assigned to the IP data flow shall not be preempted and

                                   allocated to a service data flow with a higher priority

                                   level.  The values (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.Arp.PremptionVulnerabilityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-threegpp:arp'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.premption_capability is not None:
                                    return True

                                if self.premption_vulnerability is not None:
                                    return True

                                if self.prioirty_level is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters.Arp']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.agg_max_dl is not None:
                                return True

                            if self.agg_max_ul is not None:
                                return True

                            if self.apn_ambr is not None:
                                return True

                            if self.arp is not None and self.arp._has_data():
                                return True

                            if self.attributetype is not None:
                                return True

                            if self.gbr is not None:
                                return True

                            if self.gbr_dl is not None:
                                return True

                            if self.gbr_ul is not None:
                                return True

                            if self.mbr is not None:
                                return True

                            if self.per_mn_agg_max_dl is not None:
                                return True

                            if self.per_mn_agg_max_ul is not None:
                                return True

                            if self.per_session_agg_max_dl is not None and self.per_session_agg_max_dl._has_data():
                                return True

                            if self.per_session_agg_max_ul is not None and self.per_session_agg_max_ul._has_data():
                                return True

                            if self.premption_capability is not None:
                                return True

                            if self.premption_vulnerability is not None:
                                return True

                            if self.prioirty_level is not None:
                                return True

                            if self.qci is not None:
                                return True

                            if self.qos_type is not None:
                                return True

                            if self.traffic_selector is not None and self.traffic_selector._has_data():
                                return True

                            if self.ue_ambr is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.QosProfileParameters']['meta_info']


                    class DpnParameters(object):
                        """
                        DPN Parameters
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.DpnParameters']['meta_info']


                    class VendorParameters(object):
                        """
                        Vendor Parameters
                        
                        .. attribute:: vendor_id  <key>
                        
                        	Vendor ID
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: vendor_type  <key>
                        
                        	Attribute Type
                        	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                        
                        .. attribute:: empty_type
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.vendor_id = None
                            self.vendor_type = None
                            self.empty_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.vendor_id is None:
                                raise YPYModelError('Key property vendor_id is None')
                            if self.vendor_type is None:
                                raise YPYModelError('Key property vendor_type is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.vendor_id is not None:
                                return True

                            if self.vendor_type is not None:
                                return True

                            if self.empty_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul.VendorParameters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:ul'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                            return True

                        if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                            return True

                        if self.mtu_size is not None:
                            return True

                        if self.nexthop is not None and self.nexthop._has_data():
                            return True

                        if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                            return True

                        if self.tunnel_local_address is not None:
                            return True

                        if self.tunnel_remote_address is not None:
                            return True

                        if self.vendor_parameters is not None:
                            for child_ref in self.vendor_parameters:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Ul']['meta_info']


                class Dl(object):
                    """
                    Downlink
                    
                    .. attribute:: dpn_parameters
                    
                    	DPN Parameters
                    	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.DpnParameters>`
                    
                    .. attribute:: mobility_tunnel_parameters
                    
                    	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                    	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters>`
                    
                    .. attribute:: mtu_size
                    
                    	MTU size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop
                    
                    	Next Hop
                    	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.Nexthop>`
                    
                    .. attribute:: qos_profile_parameters
                    
                    	QoS Parameters
                    	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters>`
                    
                    .. attribute:: tunnel_local_address
                    
                    	endpoint address of the DPN which a gent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: tunnel_remote_address
                    
                    	endpoint address of the DPN which agent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: vendor_parameters
                    
                    	Vendor Parameters
                    	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.VendorParameters>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.dpn_parameters = Tenants.Tenant.FpcMobility.Contexts.Dl.DpnParameters()
                        self.dpn_parameters.parent = self
                        self.mobility_tunnel_parameters = Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters()
                        self.mobility_tunnel_parameters.parent = self
                        self.mtu_size = None
                        self.nexthop = Tenants.Tenant.FpcMobility.Contexts.Dl.Nexthop()
                        self.nexthop.parent = self
                        self.qos_profile_parameters = Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters()
                        self.qos_profile_parameters.parent = self
                        self.tunnel_local_address = None
                        self.tunnel_remote_address = None
                        self.vendor_parameters = YList()
                        self.vendor_parameters.parent = self
                        self.vendor_parameters.name = 'vendor_parameters'


                    class MobilityTunnelParameters(object):
                        """
                        Specifies profile specific lylebe551144 tunnel
                        parameters to the DPN which the agent exists. The
                        profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                        ietf\-pmip profile, or new profile if anyone will define
                        it.
                        
                        .. attribute:: destination_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_port_range
                        
                        	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                        	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.DestinationPortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ds_range
                        
                        	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                        	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.DsRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: flow_label_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                        	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.FlowLabelRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ipsec_spi_range
                        
                        	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                        	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.IpsecSpiRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: key
                        
                        	GRE\_KEY
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: next_header_range
                        
                        	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                        	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.NextHeaderRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: none
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: packet_filters
                        
                        	List of Packet Filters
                        	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.PacketFilters>`
                        
                        .. attribute:: protocol_range
                        
                        	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                        	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.ProtocolRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: selector_reference
                        
                        	Pre\-configured selector
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: source_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_port_range
                        
                        	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                        	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.SourcePortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: tft_reference
                        
                        	Pre\-configured TFT
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: traffic_class_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                        	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.TrafficClassRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ts_format
                        
                        	Traffic Selector Format
                        	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                        
                        .. attribute:: tunnel_identifier
                        
                        	Tunnel Endpoint IDentifier (TEID)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_type
                        
                        	3GPP Tunnel Subtype
                        	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                        
                        .. attribute:: type
                        
                        	PMIP Mobility
                        	**type**\:   :py:class:`PmipTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipTunnelTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.destination_address_range_v4 = None
                            self.destination_address_range_v6 = None
                            self.destination_port_range = None
                            self.ds_range = None
                            self.flow_label_range = None
                            self.ipsec_spi_range = None
                            self.key = None
                            self.next_header_range = None
                            self.none = None
                            self.packet_filters = YList()
                            self.packet_filters.parent = self
                            self.packet_filters.name = 'packet_filters'
                            self.protocol_range = None
                            self.selector_reference = None
                            self.source_address_range_v4 = None
                            self.source_address_range_v6 = None
                            self.source_port_range = None
                            self.tft_reference = None
                            self.traffic_class_range = None
                            self.ts_format = None
                            self.tunnel_identifier = None
                            self.tunnel_type = None
                            self.type = None


                        class IpsecSpiRange(object):
                            """
                            Inclusive range representing IPSec Security Parameter
                            Indices to be used. When only start\-spi is present, it
                            represents a single spi.
                            
                            .. attribute:: end_spi
                            
                            	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: start_spi
                            
                            	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_spi = None
                                self.start_spi = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_spi is not None:
                                    return True

                                if self.start_spi is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.IpsecSpiRange']['meta_info']


                        class SourcePortRange(object):
                            """
                            Inclusive range representing source ports to be used.
                            When only start\-port is present, it represents a single
                                  port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.SourcePortRange']['meta_info']


                        class DestinationPortRange(object):
                            """
                            Inclusive range representing destination ports to be used.
                            When only start\-port is present, it represents a single
                            port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.DestinationPortRange']['meta_info']


                        class SourceAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-address is present, it represents a single
                            address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV4']['meta_info']


                        class DestinationAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV4']['meta_info']


                        class DsRange(object):
                            """
                            Inclusive range representing DiffServ Codepoints to be used.
                            When only start\-ds is present, it represents a single
                            Codepoint.
                            
                            .. attribute:: end_ds
                            
                            	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_ds
                            
                            	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_ds = None
                                self.start_ds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_ds is not None:
                                    return True

                                if self.start_ds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.DsRange']['meta_info']


                        class ProtocolRange(object):
                            """
                            Inclusive range representing IP protocol(s) to be used. When
                            only start\-protocol is present, it represents a single
                            protocol.
                            
                            .. attribute:: end_protocol
                            
                            	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_protocol
                            
                            	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_protocol = None
                                self.start_protocol = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_protocol is not None:
                                    return True

                                if self.start_protocol is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.ProtocolRange']['meta_info']


                        class SourceAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV6']['meta_info']


                        class DestinationAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV6']['meta_info']


                        class FlowLabelRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-flow\-label is present, it represents a single
                            flow label.
                            
                            .. attribute:: end_flow_label
                            
                            	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: start_flow_label
                            
                            	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_flow_label = None
                                self.start_flow_label = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_flow_label is not None:
                                    return True

                                if self.start_flow_label is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.FlowLabelRange']['meta_info']


                        class TrafficClassRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-traffic\-class is present, it represents a single
                            traffic class.
                            
                            .. attribute:: end_traffic_class
                            
                            	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_traffic_class
                            
                            	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_traffic_class = None
                                self.start_traffic_class = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_traffic_class is not None:
                                    return True

                                if self.start_traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.TrafficClassRange']['meta_info']


                        class NextHeaderRange(object):
                            """
                            Inclusive range representing Next Headers to be used. When
                            only start\-next\-header is present, it represents a
                            single Next Header.
                            
                            .. attribute:: end_next_header
                            
                            	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_next_header
                            
                            	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_next_header = None
                                self.start_next_header = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_next_header is not None:
                                    return True

                                if self.start_next_header is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.NextHeaderRange']['meta_info']


                        class PacketFilters(object):
                            """
                            List of Packet Filters
                            
                            .. attribute:: identifier  <key>
                            
                            	Filter Identifier
                            	**type**\:  int
                            
                            	**range:** 1..15
                            
                            .. attribute:: contents
                            
                            	Filter Contents
                            	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.PacketFilters.Contents>`
                            
                            .. attribute:: direction
                            
                            	Filter Direction
                            	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                            
                            .. attribute:: evaluation_precedence
                            
                            	Evaluation Precedence
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.identifier = None
                                self.contents = YList()
                                self.contents.parent = self
                                self.contents.name = 'contents'
                                self.direction = None
                                self.evaluation_precedence = None


                            class Contents(object):
                                """
                                Filter Contents
                                
                                .. attribute:: component_type_identifier  <key>
                                
                                	Component Type
                                	**type**\:  int
                                
                                	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                                
                                .. attribute:: flow_label
                                
                                	Flow Label
                                	**type**\:  list of int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: ipsec_index
                                
                                	IPSec Index
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_ipv6_remote
                                
                                	Ipv4 Ipv6 remote address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: ipv4_local
                                
                                	IPv4 Local Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6_prefix_local
                                
                                	IPv6 Local Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: ipv6_prefix_remote
                                
                                	IPv6 Remote Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: local_port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_hi
                                
                                	Local Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_lo
                                
                                	Local Port Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_header
                                
                                	Next Header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: remote_port
                                
                                	Remote Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_hi
                                
                                	Remote Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_lo
                                
                                	Remote Por Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_class
                                
                                	Traffic Class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_hi
                                
                                	Traffic Class Max Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_lo
                                
                                	Traffic Class Min Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                

                                """

                                _prefix = 'threegpp'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self.component_type_identifier = None
                                    self.flow_label = YLeafList()
                                    self.flow_label.parent = self
                                    self.flow_label.name = 'flow_label'
                                    self.ipsec_index = None
                                    self.ipv4_ipv6_remote = None
                                    self.ipv4_local = None
                                    self.ipv6_prefix_local = None
                                    self.ipv6_prefix_remote = None
                                    self.local_port = None
                                    self.local_port_hi = None
                                    self.local_port_lo = None
                                    self.next_header = None
                                    self.remote_port = None
                                    self.remote_port_hi = None
                                    self.remote_port_lo = None
                                    self.traffic_class = None
                                    self.traffic_class_hi = None
                                    self.traffic_class_lo = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.component_type_identifier is None:
                                        raise YPYModelError('Key property component_type_identifier is None')

                                    return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.component_type_identifier is not None:
                                        return True

                                    if self.flow_label is not None:
                                        for child in self.flow_label:
                                            if child is not None:
                                                return True

                                    if self.ipsec_index is not None:
                                        return True

                                    if self.ipv4_ipv6_remote is not None:
                                        return True

                                    if self.ipv4_local is not None:
                                        return True

                                    if self.ipv6_prefix_local is not None:
                                        return True

                                    if self.ipv6_prefix_remote is not None:
                                        return True

                                    if self.local_port is not None:
                                        return True

                                    if self.local_port_hi is not None:
                                        return True

                                    if self.local_port_lo is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.remote_port is not None:
                                        return True

                                    if self.remote_port_hi is not None:
                                        return True

                                    if self.remote_port_lo is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.traffic_class_hi is not None:
                                        return True

                                    if self.traffic_class_lo is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.identifier is None:
                                    raise YPYModelError('Key property identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.identifier is not None:
                                    return True

                                if self.contents is not None:
                                    for child_ref in self.contents:
                                        if child_ref._has_data():
                                            return True

                                if self.direction is not None:
                                    return True

                                if self.evaluation_precedence is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters.PacketFilters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                return True

                            if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                return True

                            if self.destination_port_range is not None and self.destination_port_range._has_data():
                                return True

                            if self.ds_range is not None and self.ds_range._has_data():
                                return True

                            if self.flow_label_range is not None and self.flow_label_range._has_data():
                                return True

                            if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                return True

                            if self.key is not None:
                                return True

                            if self.next_header_range is not None and self.next_header_range._has_data():
                                return True

                            if self.none is not None:
                                return True

                            if self.packet_filters is not None:
                                for child_ref in self.packet_filters:
                                    if child_ref._has_data():
                                        return True

                            if self.protocol_range is not None and self.protocol_range._has_data():
                                return True

                            if self.selector_reference is not None:
                                return True

                            if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                return True

                            if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                return True

                            if self.source_port_range is not None and self.source_port_range._has_data():
                                return True

                            if self.tft_reference is not None:
                                return True

                            if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                return True

                            if self.ts_format is not None:
                                return True

                            if self.tunnel_identifier is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            if self.type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.MobilityTunnelParameters']['meta_info']


                    class Nexthop(object):
                        """
                        Next Hop
                        
                        .. attribute:: if_index
                        
                        	If (interface) Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: ip
                        
                        	IP Value
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: lsp
                        
                        	MPLS Value
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: macaddress
                        
                        	MAC Address Value
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: nexthop_type
                        
                        	Nexthop Type
                        	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                        
                        .. attribute:: servicepath
                        
                        	Service Path Value
                        	**type**\:  int
                        
                        	**range:** 0..33554431
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.if_index = None
                            self.ip = None
                            self.lsp = None
                            self.macaddress = None
                            self.nexthop_type = None
                            self.servicepath = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.if_index is not None:
                                return True

                            if self.ip is not None:
                                return True

                            if self.lsp is not None:
                                return True

                            if self.macaddress is not None:
                                return True

                            if self.nexthop_type is not None:
                                return True

                            if self.servicepath is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.Nexthop']['meta_info']


                    class QosProfileParameters(object):
                        """
                        QoS Parameters
                        
                        .. attribute:: agg_max_dl
                        
                        	Aggregate\-Max\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: agg_max_ul
                        
                        	Aggregate\-Max\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: apn_ambr
                        
                        	Access Point Name Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: arp
                        
                        	Allocation Retention Priority
                        	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.Arp>`
                        
                        .. attribute:: attributetype
                        
                        	the attribute type
                        	**type**\:   :py:class:`QosAttributeTypeIdentity <ydk.models.ietf.ietf_pmip_qos.QosAttributeTypeIdentity>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: gbr
                        
                        	Guaranteed Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: gbr_dl
                        
                        	Guaranteed\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: gbr_ul
                        
                        	Guaranteed\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mbr
                        
                        	Maximum Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_mn_agg_max_dl
                        
                        	Per\-MN\-Agg\-Max\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_mn_agg_max_ul
                        
                        	Per\-MN\-Agg\-Max\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_session_agg_max_dl
                        
                        	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        	**type**\:   :py:class:`PerSessionAggMaxDl <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.PerSessionAggMaxDl>`
                        
                        .. attribute:: per_session_agg_max_ul
                        
                        	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        	**type**\:   :py:class:`PerSessionAggMaxUl <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.PerSessionAggMaxUl>`
                        
                        .. attribute:: premption_capability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.PremptionCapabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: premption_vulnerability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.PremptionVulnerabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: prioirty_level
                        
                        	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                        	**type**\:  int
                        
                        	**range:** 0..15
                        
                        	**mandatory**\: True
                        
                        .. attribute:: qci
                        
                        	QCI
                        	**type**\:  int
                        
                        	**range:** 1..9
                        
                        .. attribute:: qos_type
                        
                        	the profile type
                        	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                        
                        .. attribute:: traffic_selector
                        
                        	traffic selector
                        	**type**\:   :py:class:`TrafficSelector <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector>`
                        
                        .. attribute:: ue_ambr
                        
                        	User Equipment Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.agg_max_dl = None
                            self.agg_max_ul = None
                            self.apn_ambr = None
                            self.arp = Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.Arp()
                            self.arp.parent = self
                            self.attributetype = None
                            self.gbr = None
                            self.gbr_dl = None
                            self.gbr_ul = None
                            self.mbr = None
                            self.per_mn_agg_max_dl = None
                            self.per_mn_agg_max_ul = None
                            self.per_session_agg_max_dl = Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.PerSessionAggMaxDl()
                            self.per_session_agg_max_dl.parent = self
                            self.per_session_agg_max_ul = Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.PerSessionAggMaxUl()
                            self.per_session_agg_max_ul.parent = self
                            self.premption_capability = None
                            self.premption_vulnerability = None
                            self.prioirty_level = None
                            self.qci = None
                            self.qos_type = None
                            self.traffic_selector = Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector()
                            self.traffic_selector.parent = self
                            self.ue_ambr = None

                        class PremptionCapabilityEnum(Enum):
                            """
                            PremptionCapabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                            service data flow can get resources that were already

                            assigned to another service data flow with a lower priority

                            level.  The following values are defined\:

                             Enabled (0)\: This value indicates that the service data flow

                             is allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.

                             Disabled (1)\: This value indicates that the service data flow

                             is not allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.  The values

                             (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.PremptionCapabilityEnum']


                        class PremptionVulnerabilityEnum(Enum):
                            """
                            PremptionVulnerabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                             service data flow can lose the resources assigned to it in

                             order to admit a service data flow with a higher priority

                             level.  The following values are defined\:

                               Enabled (0)\: This value indicates that the resources

                               assigned to the IP data flow can be preempted and

                               allocated to a service data flow with a higher

                               priority level.

                               Disabled (1)\: This value indicates that the resources

                               assigned to the IP data flow shall not be preempted and

                               allocated to a service data flow with a higher priority

                               level.  The values (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.PremptionVulnerabilityEnum']



                        class PerSessionAggMaxDl(object):
                            """
                            Per\-Session\-Agg\-Max\-Bit\-Rate Value
                            
                            .. attribute:: exclude_flag
                            
                            	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            .. attribute:: max_rate
                            
                            	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: service_flag
                            
                            	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.exclude_flag = None
                                self.max_rate = None
                                self.service_flag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:per-session-agg-max-dl'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exclude_flag is not None:
                                    return True

                                if self.max_rate is not None:
                                    return True

                                if self.service_flag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.PerSessionAggMaxDl']['meta_info']


                        class PerSessionAggMaxUl(object):
                            """
                            Per\-Session\-Agg\-Max\-Bit\-Rate Value
                            
                            .. attribute:: exclude_flag
                            
                            	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            .. attribute:: max_rate
                            
                            	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: service_flag
                            
                            	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.exclude_flag = None
                                self.max_rate = None
                                self.service_flag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:per-session-agg-max-ul'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exclude_flag is not None:
                                    return True

                                if self.max_rate is not None:
                                    return True

                                if self.service_flag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.PerSessionAggMaxUl']['meta_info']


                        class TrafficSelector(object):
                            """
                            traffic selector
                            
                            .. attribute:: destination_address_range_v4
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: destination_address_range_v6
                            
                            	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: destination_port_range
                            
                            	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                            	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationPortRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ds_range
                            
                            	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                            	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.DsRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: flow_label_range
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                            	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.FlowLabelRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ipsec_spi_range
                            
                            	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                            	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.IpsecSpiRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: next_header_range
                            
                            	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                            	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.NextHeaderRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: protocol_range
                            
                            	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                            	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.ProtocolRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_address_range_v4
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV4>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_address_range_v6
                            
                            	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV6>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_port_range
                            
                            	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                            	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.SourcePortRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: traffic_class_range
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                            	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.TrafficClassRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ts_format
                            
                            	Traffic Selector Format
                            	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.destination_address_range_v4 = None
                                self.destination_address_range_v6 = None
                                self.destination_port_range = None
                                self.ds_range = None
                                self.flow_label_range = None
                                self.ipsec_spi_range = None
                                self.next_header_range = None
                                self.protocol_range = None
                                self.source_address_range_v4 = None
                                self.source_address_range_v6 = None
                                self.source_port_range = None
                                self.traffic_class_range = None
                                self.ts_format = None


                            class IpsecSpiRange(object):
                                """
                                Inclusive range representing IPSec Security Parameter
                                Indices to be used. When only start\-spi is present, it
                                represents a single spi.
                                
                                .. attribute:: end_spi
                                
                                	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: start_spi
                                
                                	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_spi = None
                                    self.start_spi = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_spi is not None:
                                        return True

                                    if self.start_spi is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.IpsecSpiRange']['meta_info']


                            class SourcePortRange(object):
                                """
                                Inclusive range representing source ports to be used.
                                When only start\-port is present, it represents a single
                                      port.
                                
                                .. attribute:: end_port
                                
                                	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: start_port
                                
                                	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_port = None
                                    self.start_port = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_port is not None:
                                        return True

                                    if self.start_port is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.SourcePortRange']['meta_info']


                            class DestinationPortRange(object):
                                """
                                Inclusive range representing destination ports to be used.
                                When only start\-port is present, it represents a single
                                port.
                                
                                .. attribute:: end_port
                                
                                	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: start_port
                                
                                	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_port = None
                                    self.start_port = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_port is not None:
                                        return True

                                    if self.start_port is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationPortRange']['meta_info']


                            class SourceAddressRangeV4(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-address is present, it represents a single
                                address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV4']['meta_info']


                            class DestinationAddressRangeV4(object):
                                """
                                Inclusive range representing IPv4 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4']['meta_info']


                            class DsRange(object):
                                """
                                Inclusive range representing DiffServ Codepoints to be used.
                                When only start\-ds is present, it represents a single
                                Codepoint.
                                
                                .. attribute:: end_ds
                                
                                	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: start_ds
                                
                                	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_ds = None
                                    self.start_ds = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_ds is not None:
                                        return True

                                    if self.start_ds is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.DsRange']['meta_info']


                            class ProtocolRange(object):
                                """
                                Inclusive range representing IP protocol(s) to be used. When
                                only start\-protocol is present, it represents a single
                                protocol.
                                
                                .. attribute:: end_protocol
                                
                                	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: start_protocol
                                
                                	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_protocol = None
                                    self.start_protocol = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_protocol is not None:
                                        return True

                                    if self.start_protocol is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.ProtocolRange']['meta_info']


                            class SourceAddressRangeV6(object):
                                """
                                Inclusive range representing IPv6 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV6']['meta_info']


                            class DestinationAddressRangeV6(object):
                                """
                                Inclusive range representing IPv6 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6']['meta_info']


                            class FlowLabelRange(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-flow\-label is present, it represents a single
                                flow label.
                                
                                .. attribute:: end_flow_label
                                
                                	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                                	**type**\:  int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: start_flow_label
                                
                                	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                                	**type**\:  int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_flow_label = None
                                    self.start_flow_label = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_flow_label is not None:
                                        return True

                                    if self.start_flow_label is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.FlowLabelRange']['meta_info']


                            class TrafficClassRange(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-traffic\-class is present, it represents a single
                                traffic class.
                                
                                .. attribute:: end_traffic_class
                                
                                	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: start_traffic_class
                                
                                	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_traffic_class = None
                                    self.start_traffic_class = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_traffic_class is not None:
                                        return True

                                    if self.start_traffic_class is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.TrafficClassRange']['meta_info']


                            class NextHeaderRange(object):
                                """
                                Inclusive range representing Next Headers to be used. When
                                only start\-next\-header is present, it represents a
                                single Next Header.
                                
                                .. attribute:: end_next_header
                                
                                	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: start_next_header
                                
                                	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_next_header = None
                                    self.start_next_header = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_next_header is not None:
                                        return True

                                    if self.start_next_header is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector.NextHeaderRange']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-selector'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                    return True

                                if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                    return True

                                if self.destination_port_range is not None and self.destination_port_range._has_data():
                                    return True

                                if self.ds_range is not None and self.ds_range._has_data():
                                    return True

                                if self.flow_label_range is not None and self.flow_label_range._has_data():
                                    return True

                                if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                    return True

                                if self.next_header_range is not None and self.next_header_range._has_data():
                                    return True

                                if self.protocol_range is not None and self.protocol_range._has_data():
                                    return True

                                if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                    return True

                                if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                    return True

                                if self.source_port_range is not None and self.source_port_range._has_data():
                                    return True

                                if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                    return True

                                if self.ts_format is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.TrafficSelector']['meta_info']


                        class Arp(object):
                            """
                            Allocation Retention Priority
                            
                            .. attribute:: premption_capability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.Arp.PremptionCapabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: premption_vulnerability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.Arp.PremptionVulnerabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: prioirty_level
                            
                            	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                            	**type**\:  int
                            
                            	**range:** 0..15
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.premption_capability = None
                                self.premption_vulnerability = None
                                self.prioirty_level = None

                            class PremptionCapabilityEnum(Enum):
                                """
                                PremptionCapabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                service data flow can get resources that were already

                                assigned to another service data flow with a lower priority

                                level.  The following values are defined\:

                                 Enabled (0)\: This value indicates that the service data flow

                                 is allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.

                                 Disabled (1)\: This value indicates that the service data flow

                                 is not allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.  The values

                                 (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.Arp.PremptionCapabilityEnum']


                            class PremptionVulnerabilityEnum(Enum):
                                """
                                PremptionVulnerabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                 service data flow can lose the resources assigned to it in

                                 order to admit a service data flow with a higher priority

                                 level.  The following values are defined\:

                                   Enabled (0)\: This value indicates that the resources

                                   assigned to the IP data flow can be preempted and

                                   allocated to a service data flow with a higher

                                   priority level.

                                   Disabled (1)\: This value indicates that the resources

                                   assigned to the IP data flow shall not be preempted and

                                   allocated to a service data flow with a higher priority

                                   level.  The values (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.Arp.PremptionVulnerabilityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-threegpp:arp'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.premption_capability is not None:
                                    return True

                                if self.premption_vulnerability is not None:
                                    return True

                                if self.prioirty_level is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters.Arp']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.agg_max_dl is not None:
                                return True

                            if self.agg_max_ul is not None:
                                return True

                            if self.apn_ambr is not None:
                                return True

                            if self.arp is not None and self.arp._has_data():
                                return True

                            if self.attributetype is not None:
                                return True

                            if self.gbr is not None:
                                return True

                            if self.gbr_dl is not None:
                                return True

                            if self.gbr_ul is not None:
                                return True

                            if self.mbr is not None:
                                return True

                            if self.per_mn_agg_max_dl is not None:
                                return True

                            if self.per_mn_agg_max_ul is not None:
                                return True

                            if self.per_session_agg_max_dl is not None and self.per_session_agg_max_dl._has_data():
                                return True

                            if self.per_session_agg_max_ul is not None and self.per_session_agg_max_ul._has_data():
                                return True

                            if self.premption_capability is not None:
                                return True

                            if self.premption_vulnerability is not None:
                                return True

                            if self.prioirty_level is not None:
                                return True

                            if self.qci is not None:
                                return True

                            if self.qos_type is not None:
                                return True

                            if self.traffic_selector is not None and self.traffic_selector._has_data():
                                return True

                            if self.ue_ambr is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.QosProfileParameters']['meta_info']


                    class DpnParameters(object):
                        """
                        DPN Parameters
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.DpnParameters']['meta_info']


                    class VendorParameters(object):
                        """
                        Vendor Parameters
                        
                        .. attribute:: vendor_id  <key>
                        
                        	Vendor ID
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: vendor_type  <key>
                        
                        	Attribute Type
                        	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                        
                        .. attribute:: empty_type
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.vendor_id = None
                            self.vendor_type = None
                            self.empty_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.vendor_id is None:
                                raise YPYModelError('Key property vendor_id is None')
                            if self.vendor_type is None:
                                raise YPYModelError('Key property vendor_type is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.vendor_id is not None:
                                return True

                            if self.vendor_type is not None:
                                return True

                            if self.empty_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl.VendorParameters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:dl'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                            return True

                        if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                            return True

                        if self.mtu_size is not None:
                            return True

                        if self.nexthop is not None and self.nexthop._has_data():
                            return True

                        if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                            return True

                        if self.tunnel_local_address is not None:
                            return True

                        if self.tunnel_remote_address is not None:
                            return True

                        if self.vendor_parameters is not None:
                            for child_ref in self.vendor_parameters:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dl']['meta_info']


                class Dpns(object):
                    """
                    DPNs
                    
                    .. attribute:: direction  <key>
                    
                    	Direction
                    	**type**\:   :py:class:`FpcDirectionEnum <ydk.models.ietf.ietf_dmm_fpc.FpcDirectionEnum>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dpn_id  <key>
                    
                    	DPN
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: dpn_parameters
                    
                    	DPN Parameters
                    	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.DpnParameters>`
                    
                    .. attribute:: mobility_tunnel_parameters
                    
                    	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                    	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters>`
                    
                    .. attribute:: mtu_size
                    
                    	MTU size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop
                    
                    	Next Hop
                    	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.Nexthop>`
                    
                    .. attribute:: qos_profile_parameters
                    
                    	QoS Parameters
                    	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.QosProfileParameters>`
                    
                    .. attribute:: tunnel_local_address
                    
                    	endpoint address of the DPN which a gent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: tunnel_remote_address
                    
                    	endpoint address of the DPN which agent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: vendor_parameters
                    
                    	Vendor Parameters
                    	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.VendorParameters>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.direction = None
                        self.dpn_id = None
                        self.dpn_parameters = Tenants.Tenant.FpcMobility.Contexts.Dpns.DpnParameters()
                        self.dpn_parameters.parent = self
                        self.mobility_tunnel_parameters = Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters()
                        self.mobility_tunnel_parameters.parent = self
                        self.mtu_size = None
                        self.nexthop = Tenants.Tenant.FpcMobility.Contexts.Dpns.Nexthop()
                        self.nexthop.parent = self
                        self.qos_profile_parameters = Tenants.Tenant.FpcMobility.Contexts.Dpns.QosProfileParameters()
                        self.qos_profile_parameters.parent = self
                        self.tunnel_local_address = None
                        self.tunnel_remote_address = None
                        self.vendor_parameters = YList()
                        self.vendor_parameters.parent = self
                        self.vendor_parameters.name = 'vendor_parameters'


                    class MobilityTunnelParameters(object):
                        """
                        Specifies profile specific lylebe551144 tunnel
                        parameters to the DPN which the agent exists. The
                        profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                        ietf\-pmip profile, or new profile if anyone will define
                        it.
                        
                        .. attribute:: destination_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_port_range
                        
                        	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                        	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.DestinationPortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ds_range
                        
                        	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                        	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.DsRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: flow_label_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                        	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.FlowLabelRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ipsec_spi_range
                        
                        	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                        	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.IpsecSpiRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: key
                        
                        	GRE\_KEY
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: next_header_range
                        
                        	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                        	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.NextHeaderRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: none
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: packet_filters
                        
                        	List of Packet Filters
                        	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.PacketFilters>`
                        
                        .. attribute:: protocol_range
                        
                        	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                        	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.ProtocolRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: selector_reference
                        
                        	Pre\-configured selector
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: source_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_port_range
                        
                        	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                        	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.SourcePortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: tft_reference
                        
                        	Pre\-configured TFT
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: traffic_class_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                        	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.TrafficClassRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ts_format
                        
                        	Traffic Selector Format
                        	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                        
                        .. attribute:: tunnel_identifier
                        
                        	Tunnel Endpoint IDentifier (TEID)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_type
                        
                        	3GPP Tunnel Subtype
                        	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                        
                        .. attribute:: type
                        
                        	PMIP Mobility
                        	**type**\:   :py:class:`PmipTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipTunnelTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.destination_address_range_v4 = None
                            self.destination_address_range_v6 = None
                            self.destination_port_range = None
                            self.ds_range = None
                            self.flow_label_range = None
                            self.ipsec_spi_range = None
                            self.key = None
                            self.next_header_range = None
                            self.none = None
                            self.packet_filters = YList()
                            self.packet_filters.parent = self
                            self.packet_filters.name = 'packet_filters'
                            self.protocol_range = None
                            self.selector_reference = None
                            self.source_address_range_v4 = None
                            self.source_address_range_v6 = None
                            self.source_port_range = None
                            self.tft_reference = None
                            self.traffic_class_range = None
                            self.ts_format = None
                            self.tunnel_identifier = None
                            self.tunnel_type = None
                            self.type = None


                        class IpsecSpiRange(object):
                            """
                            Inclusive range representing IPSec Security Parameter
                            Indices to be used. When only start\-spi is present, it
                            represents a single spi.
                            
                            .. attribute:: end_spi
                            
                            	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: start_spi
                            
                            	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_spi = None
                                self.start_spi = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_spi is not None:
                                    return True

                                if self.start_spi is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.IpsecSpiRange']['meta_info']


                        class SourcePortRange(object):
                            """
                            Inclusive range representing source ports to be used.
                            When only start\-port is present, it represents a single
                                  port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.SourcePortRange']['meta_info']


                        class DestinationPortRange(object):
                            """
                            Inclusive range representing destination ports to be used.
                            When only start\-port is present, it represents a single
                            port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.DestinationPortRange']['meta_info']


                        class SourceAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-address is present, it represents a single
                            address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV4']['meta_info']


                        class DestinationAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV4']['meta_info']


                        class DsRange(object):
                            """
                            Inclusive range representing DiffServ Codepoints to be used.
                            When only start\-ds is present, it represents a single
                            Codepoint.
                            
                            .. attribute:: end_ds
                            
                            	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_ds
                            
                            	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_ds = None
                                self.start_ds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_ds is not None:
                                    return True

                                if self.start_ds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.DsRange']['meta_info']


                        class ProtocolRange(object):
                            """
                            Inclusive range representing IP protocol(s) to be used. When
                            only start\-protocol is present, it represents a single
                            protocol.
                            
                            .. attribute:: end_protocol
                            
                            	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_protocol
                            
                            	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_protocol = None
                                self.start_protocol = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_protocol is not None:
                                    return True

                                if self.start_protocol is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.ProtocolRange']['meta_info']


                        class SourceAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV6']['meta_info']


                        class DestinationAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV6']['meta_info']


                        class FlowLabelRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-flow\-label is present, it represents a single
                            flow label.
                            
                            .. attribute:: end_flow_label
                            
                            	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: start_flow_label
                            
                            	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_flow_label = None
                                self.start_flow_label = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_flow_label is not None:
                                    return True

                                if self.start_flow_label is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.FlowLabelRange']['meta_info']


                        class TrafficClassRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-traffic\-class is present, it represents a single
                            traffic class.
                            
                            .. attribute:: end_traffic_class
                            
                            	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_traffic_class
                            
                            	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_traffic_class = None
                                self.start_traffic_class = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_traffic_class is not None:
                                    return True

                                if self.start_traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.TrafficClassRange']['meta_info']


                        class NextHeaderRange(object):
                            """
                            Inclusive range representing Next Headers to be used. When
                            only start\-next\-header is present, it represents a
                            single Next Header.
                            
                            .. attribute:: end_next_header
                            
                            	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_next_header
                            
                            	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_next_header = None
                                self.start_next_header = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_next_header is not None:
                                    return True

                                if self.start_next_header is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.NextHeaderRange']['meta_info']


                        class PacketFilters(object):
                            """
                            List of Packet Filters
                            
                            .. attribute:: identifier  <key>
                            
                            	Filter Identifier
                            	**type**\:  int
                            
                            	**range:** 1..15
                            
                            .. attribute:: contents
                            
                            	Filter Contents
                            	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.PacketFilters.Contents>`
                            
                            .. attribute:: direction
                            
                            	Filter Direction
                            	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                            
                            .. attribute:: evaluation_precedence
                            
                            	Evaluation Precedence
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.identifier = None
                                self.contents = YList()
                                self.contents.parent = self
                                self.contents.name = 'contents'
                                self.direction = None
                                self.evaluation_precedence = None


                            class Contents(object):
                                """
                                Filter Contents
                                
                                .. attribute:: component_type_identifier  <key>
                                
                                	Component Type
                                	**type**\:  int
                                
                                	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                                
                                .. attribute:: flow_label
                                
                                	Flow Label
                                	**type**\:  list of int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: ipsec_index
                                
                                	IPSec Index
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_ipv6_remote
                                
                                	Ipv4 Ipv6 remote address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: ipv4_local
                                
                                	IPv4 Local Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6_prefix_local
                                
                                	IPv6 Local Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: ipv6_prefix_remote
                                
                                	IPv6 Remote Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: local_port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_hi
                                
                                	Local Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_lo
                                
                                	Local Port Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_header
                                
                                	Next Header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: remote_port
                                
                                	Remote Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_hi
                                
                                	Remote Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_lo
                                
                                	Remote Por Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_class
                                
                                	Traffic Class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_hi
                                
                                	Traffic Class Max Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_lo
                                
                                	Traffic Class Min Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                

                                """

                                _prefix = 'threegpp'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self.component_type_identifier = None
                                    self.flow_label = YLeafList()
                                    self.flow_label.parent = self
                                    self.flow_label.name = 'flow_label'
                                    self.ipsec_index = None
                                    self.ipv4_ipv6_remote = None
                                    self.ipv4_local = None
                                    self.ipv6_prefix_local = None
                                    self.ipv6_prefix_remote = None
                                    self.local_port = None
                                    self.local_port_hi = None
                                    self.local_port_lo = None
                                    self.next_header = None
                                    self.remote_port = None
                                    self.remote_port_hi = None
                                    self.remote_port_lo = None
                                    self.traffic_class = None
                                    self.traffic_class_hi = None
                                    self.traffic_class_lo = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.component_type_identifier is None:
                                        raise YPYModelError('Key property component_type_identifier is None')

                                    return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.component_type_identifier is not None:
                                        return True

                                    if self.flow_label is not None:
                                        for child in self.flow_label:
                                            if child is not None:
                                                return True

                                    if self.ipsec_index is not None:
                                        return True

                                    if self.ipv4_ipv6_remote is not None:
                                        return True

                                    if self.ipv4_local is not None:
                                        return True

                                    if self.ipv6_prefix_local is not None:
                                        return True

                                    if self.ipv6_prefix_remote is not None:
                                        return True

                                    if self.local_port is not None:
                                        return True

                                    if self.local_port_hi is not None:
                                        return True

                                    if self.local_port_lo is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.remote_port is not None:
                                        return True

                                    if self.remote_port_hi is not None:
                                        return True

                                    if self.remote_port_lo is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.traffic_class_hi is not None:
                                        return True

                                    if self.traffic_class_lo is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.identifier is None:
                                    raise YPYModelError('Key property identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.identifier is not None:
                                    return True

                                if self.contents is not None:
                                    for child_ref in self.contents:
                                        if child_ref._has_data():
                                            return True

                                if self.direction is not None:
                                    return True

                                if self.evaluation_precedence is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters.PacketFilters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                return True

                            if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                return True

                            if self.destination_port_range is not None and self.destination_port_range._has_data():
                                return True

                            if self.ds_range is not None and self.ds_range._has_data():
                                return True

                            if self.flow_label_range is not None and self.flow_label_range._has_data():
                                return True

                            if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                return True

                            if self.key is not None:
                                return True

                            if self.next_header_range is not None and self.next_header_range._has_data():
                                return True

                            if self.none is not None:
                                return True

                            if self.packet_filters is not None:
                                for child_ref in self.packet_filters:
                                    if child_ref._has_data():
                                        return True

                            if self.protocol_range is not None and self.protocol_range._has_data():
                                return True

                            if self.selector_reference is not None:
                                return True

                            if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                return True

                            if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                return True

                            if self.source_port_range is not None and self.source_port_range._has_data():
                                return True

                            if self.tft_reference is not None:
                                return True

                            if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                return True

                            if self.ts_format is not None:
                                return True

                            if self.tunnel_identifier is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            if self.type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.MobilityTunnelParameters']['meta_info']


                    class Nexthop(object):
                        """
                        Next Hop
                        
                        .. attribute:: if_index
                        
                        	If (interface) Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: ip
                        
                        	IP Value
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: lsp
                        
                        	MPLS Value
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: macaddress
                        
                        	MAC Address Value
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: nexthop_type
                        
                        	Nexthop Type
                        	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                        
                        .. attribute:: servicepath
                        
                        	Service Path Value
                        	**type**\:  int
                        
                        	**range:** 0..33554431
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.if_index = None
                            self.ip = None
                            self.lsp = None
                            self.macaddress = None
                            self.nexthop_type = None
                            self.servicepath = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.if_index is not None:
                                return True

                            if self.ip is not None:
                                return True

                            if self.lsp is not None:
                                return True

                            if self.macaddress is not None:
                                return True

                            if self.nexthop_type is not None:
                                return True

                            if self.servicepath is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.Nexthop']['meta_info']


                    class QosProfileParameters(object):
                        """
                        QoS Parameters
                        
                        .. attribute:: qos_type
                        
                        	the profile type
                        	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.qos_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.qos_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.QosProfileParameters']['meta_info']


                    class DpnParameters(object):
                        """
                        DPN Parameters
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.DpnParameters']['meta_info']


                    class VendorParameters(object):
                        """
                        Vendor Parameters
                        
                        .. attribute:: vendor_id  <key>
                        
                        	Vendor ID
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: vendor_type  <key>
                        
                        	Attribute Type
                        	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                        
                        .. attribute:: empty_type
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.vendor_id = None
                            self.vendor_type = None
                            self.empty_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.vendor_id is None:
                                raise YPYModelError('Key property vendor_id is None')
                            if self.vendor_type is None:
                                raise YPYModelError('Key property vendor_type is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.vendor_id is not None:
                                return True

                            if self.vendor_type is not None:
                                return True

                            if self.empty_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns.VendorParameters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.direction is None:
                            raise YPYModelError('Key property direction is None')
                        if self.dpn_id is None:
                            raise YPYModelError('Key property dpn_id is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:dpns[ietf-dmm-fpc:direction = ' + str(self.direction) + '][ietf-dmm-fpc:dpn-id = ' + str(self.dpn_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.direction is not None:
                            return True

                        if self.dpn_id is not None:
                            return True

                        if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                            return True

                        if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                            return True

                        if self.mtu_size is not None:
                            return True

                        if self.nexthop is not None and self.nexthop._has_data():
                            return True

                        if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                            return True

                        if self.tunnel_local_address is not None:
                            return True

                        if self.tunnel_remote_address is not None:
                            return True

                        if self.vendor_parameters is not None:
                            for child_ref in self.vendor_parameters:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts.Dpns']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.context_id is None:
                        raise YPYModelError('Key property context_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:contexts[ietf-dmm-fpc:context-id = ' + str(self.context_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.context_id is not None:
                        return True

                    if self.delegated_ip_prefixes is not None:
                        for child in self.delegated_ip_prefixes:
                            if child is not None:
                                return True

                    if self.dl is not None and self.dl._has_data():
                        return True

                    if self.dpn_group is not None:
                        return True

                    if self.dpns is not None:
                        for child_ref in self.dpns:
                            if child_ref._has_data():
                                return True

                    if self.ebi is not None:
                        return True

                    if self.imsi is not None:
                        return True

                    if self.lbi is not None:
                        return True

                    if self.parent_context is not None:
                        return True

                    if self.ul is not None and self.ul._has_data():
                        return True

                    if self.vports is not None:
                        for child in self.vports:
                            if child is not None:
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['Tenants.Tenant.FpcMobility.Contexts']['meta_info']


            class Vports(object):
                """
                Ports
                
                .. attribute:: vport_id  <key>
                
                	Port ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: policy_groups
                
                	Policy Groups
                	**type**\: one of the below types:
                
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.vport_id = None
                    self.policy_groups = YLeafList()
                    self.policy_groups.parent = self
                    self.policy_groups.name = 'policy_groups'

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.vport_id is None:
                        raise YPYModelError('Key property vport_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:vports[ietf-dmm-fpc:vport-id = ' + str(self.vport_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.vport_id is not None:
                        return True

                    if self.policy_groups is not None:
                        for child in self.policy_groups:
                            if child is not None:
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['Tenants.Tenant.FpcMobility.Vports']['meta_info']


            class Monitors(object):
                """
                Monitors
                
                .. attribute:: event_identities
                
                	Event Identities
                	**type**\:  
                		list of  
                
                .. attribute:: event_ids
                
                	Event IDs
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                .. attribute:: hi_thresh
                
                	hi threshold
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lo_thresh
                
                	lo threshold
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: monitor_id
                
                	Monitor Identifier
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: period
                
                	Period
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: report_time
                
                	Reporting Time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: target
                
                	Target Identity
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.event_identities = YLeafList()
                    self.event_identities.parent = self
                    self.event_identities.name = 'event_identities'
                    self.event_ids = YLeafList()
                    self.event_ids.parent = self
                    self.event_ids.name = 'event_ids'
                    self.hi_thresh = None
                    self.lo_thresh = None
                    self.monitor_id = None
                    self.period = None
                    self.report_time = None
                    self.target = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-dmm-fpc:monitors'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.event_identities is not None:
                        for child_ref in self.event_identities:
                            if child_ref._has_data():
                                return True

                    if self.event_ids is not None:
                        for child in self.event_ids:
                            if child is not None:
                                return True

                    if self.hi_thresh is not None:
                        return True

                    if self.lo_thresh is not None:
                        return True

                    if self.monitor_id is not None:
                        return True

                    if self.period is not None:
                        return True

                    if self.report_time is not None:
                        return True

                    if self.target is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['Tenants.Tenant.FpcMobility.Monitors']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/ietf-dmm-fpc:fpc-mobility'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.contexts is not None:
                    for child_ref in self.contexts:
                        if child_ref._has_data():
                            return True

                if self.monitors is not None:
                    for child_ref in self.monitors:
                        if child_ref._has_data():
                            return True

                if self.vports is not None:
                    for child_ref in self.vports:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['Tenants.Tenant.FpcMobility']['meta_info']


        class FpcTopology(object):
            """
            Topology
            
            .. attribute:: control_protocols
            
            	Control Protocols
            	**type**\:  
            		list of  
            
            .. attribute:: domains
            
            	Domains
            	**type**\: list of    :py:class:`Domains <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcTopology.Domains>`
            
            .. attribute:: dpn_groups
            
            	DPN Groups
            	**type**\: list of    :py:class:`DpnGroups <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcTopology.DpnGroups>`
            
            .. attribute:: dpn_id
            
            	DPN ID
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: dpns
            
            	DPNs
            	**type**\: list of    :py:class:`Dpns <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcTopology.Dpns>`
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.control_protocols = YLeafList()
                self.control_protocols.parent = self
                self.control_protocols.name = 'control_protocols'
                self.domains = YList()
                self.domains.parent = self
                self.domains.name = 'domains'
                self.dpn_groups = YList()
                self.dpn_groups.parent = self
                self.dpn_groups.name = 'dpn_groups'
                self.dpn_id = None
                self.dpns = YList()
                self.dpns.parent = self
                self.dpns.name = 'dpns'


            class Domains(object):
                """
                Domains
                
                .. attribute:: domain_id  <key>
                
                	Domain ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: base_checkpoint
                
                	Checkpoint
                	**type**\:  str
                
                .. attribute:: base_state
                
                	Current State
                	**type**\:  str
                
                .. attribute:: basename
                
                	Rules Basename
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: domain_name
                
                	Domain Name
                	**type**\:  str
                
                .. attribute:: domain_reference
                
                	Indicates a set of resources for the domain
                	**type**\:  str
                
                .. attribute:: domain_type
                
                	Domain Type
                	**type**\:  str
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.domain_id = None
                    self.base_checkpoint = None
                    self.base_state = None
                    self.basename = None
                    self.domain_name = None
                    self.domain_reference = None
                    self.domain_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.domain_id is None:
                        raise YPYModelError('Key property domain_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:domains[ietf-dmm-fpc:domain-id = ' + str(self.domain_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.domain_id is not None:
                        return True

                    if self.base_checkpoint is not None:
                        return True

                    if self.base_state is not None:
                        return True

                    if self.basename is not None:
                        return True

                    if self.domain_name is not None:
                        return True

                    if self.domain_reference is not None:
                        return True

                    if self.domain_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['Tenants.Tenant.FpcTopology.Domains']['meta_info']


            class DpnGroups(object):
                """
                DPN Groups
                
                .. attribute:: dpn_group_id  <key>
                
                	DPN Group ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: access_type
                
                	Access Type
                	**type**\:   :py:class:`FpcAccessTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcAccessTypeIdentity>`
                
                .. attribute:: data_plane_role
                
                	Dataplane Role
                	**type**\:   :py:class:`FpcDataPlaneRoleIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcDataPlaneRoleIdentity>`
                
                .. attribute:: domains
                
                	Domains
                	**type**\: list of    :py:class:`Domains <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcTopology.DpnGroups.Domains>`
                
                .. attribute:: dpn_group_peers
                
                	Peer DPN Groups
                	**type**\: list of    :py:class:`DpnGroupPeers <ydk.models.ietf.ietf_dmm_fpc.Tenants.Tenant.FpcTopology.DpnGroups.DpnGroupPeers>`
                
                .. attribute:: mobility_profile
                
                	Mobility Profile
                	**type**\:   :py:class:`FpcMobilityProfileTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcMobilityProfileTypeIdentity>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.dpn_group_id = None
                    self.access_type = None
                    self.data_plane_role = None
                    self.domains = YList()
                    self.domains.parent = self
                    self.domains.name = 'domains'
                    self.dpn_group_peers = YList()
                    self.dpn_group_peers.parent = self
                    self.dpn_group_peers.name = 'dpn_group_peers'
                    self.mobility_profile = None


                class DpnGroupPeers(object):
                    """
                    Peer DPN Groups
                    
                    .. attribute:: remote_dpn_group_id  <key>
                    
                    	Remote DPN Group ID
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: local_endpoint_address
                    
                    	Local Endpoint Address
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: mtu_size
                    
                    	MTU Size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_data_plane_role
                    
                    	Forwarding Plane Role
                    	**type**\:   :py:class:`FpcDataPlaneRoleIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcDataPlaneRoleIdentity>`
                    
                    .. attribute:: remote_endpoint_address
                    
                    	Remote Endpoint Address
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: remote_mobility_profile
                    
                    	Mobility Profile
                    	**type**\:   :py:class:`FpcMobilityProfileTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcMobilityProfileTypeIdentity>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.remote_dpn_group_id = None
                        self.local_endpoint_address = None
                        self.mtu_size = None
                        self.remote_data_plane_role = None
                        self.remote_endpoint_address = None
                        self.remote_mobility_profile = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.remote_dpn_group_id is None:
                            raise YPYModelError('Key property remote_dpn_group_id is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:dpn-group-peers[ietf-dmm-fpc:remote-dpn-group-id = ' + str(self.remote_dpn_group_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.remote_dpn_group_id is not None:
                            return True

                        if self.local_endpoint_address is not None:
                            return True

                        if self.mtu_size is not None:
                            return True

                        if self.remote_data_plane_role is not None:
                            return True

                        if self.remote_endpoint_address is not None:
                            return True

                        if self.remote_mobility_profile is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcTopology.DpnGroups.DpnGroupPeers']['meta_info']


                class Domains(object):
                    """
                    Domains
                    
                    .. attribute:: domain_id  <key>
                    
                    	Domain ID
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: base_checkpoint
                    
                    	Checkpoint
                    	**type**\:  str
                    
                    .. attribute:: base_state
                    
                    	Current State
                    	**type**\:  str
                    
                    .. attribute:: basename
                    
                    	Rules Basename
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: domain_name
                    
                    	Domain Name
                    	**type**\:  str
                    
                    .. attribute:: domain_reference
                    
                    	Indicates a set of resources for the domain
                    	**type**\:  str
                    
                    .. attribute:: domain_type
                    
                    	Domain Type
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.domain_id = None
                        self.base_checkpoint = None
                        self.base_state = None
                        self.basename = None
                        self.domain_name = None
                        self.domain_reference = None
                        self.domain_type = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.domain_id is None:
                            raise YPYModelError('Key property domain_id is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:domains[ietf-dmm-fpc:domain-id = ' + str(self.domain_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.domain_id is not None:
                            return True

                        if self.base_checkpoint is not None:
                            return True

                        if self.base_state is not None:
                            return True

                        if self.basename is not None:
                            return True

                        if self.domain_name is not None:
                            return True

                        if self.domain_reference is not None:
                            return True

                        if self.domain_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['Tenants.Tenant.FpcTopology.DpnGroups.Domains']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.dpn_group_id is None:
                        raise YPYModelError('Key property dpn_group_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:dpn-groups[ietf-dmm-fpc:dpn-group-id = ' + str(self.dpn_group_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dpn_group_id is not None:
                        return True

                    if self.access_type is not None:
                        return True

                    if self.data_plane_role is not None:
                        return True

                    if self.domains is not None:
                        for child_ref in self.domains:
                            if child_ref._has_data():
                                return True

                    if self.dpn_group_peers is not None:
                        for child_ref in self.dpn_group_peers:
                            if child_ref._has_data():
                                return True

                    if self.mobility_profile is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['Tenants.Tenant.FpcTopology.DpnGroups']['meta_info']


            class Dpns(object):
                """
                DPNs
                
                .. attribute:: dpn_id  <key>
                
                	DPN ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: dpn_groups
                
                	DPN Groups
                	**type**\: one of the below types:
                
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                .. attribute:: dpn_name
                
                	DPN Name
                	**type**\:  str
                
                .. attribute:: node_reference
                
                	DPN => Node (Topology) Mapping
                	**type**\:  str
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.dpn_id = None
                    self.dpn_groups = YLeafList()
                    self.dpn_groups.parent = self
                    self.dpn_groups.name = 'dpn_groups'
                    self.dpn_name = None
                    self.node_reference = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.dpn_id is None:
                        raise YPYModelError('Key property dpn_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:dpns[ietf-dmm-fpc:dpn-id = ' + str(self.dpn_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dpn_id is not None:
                        return True

                    if self.dpn_groups is not None:
                        for child in self.dpn_groups:
                            if child is not None:
                                return True

                    if self.dpn_name is not None:
                        return True

                    if self.node_reference is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['Tenants.Tenant.FpcTopology.Dpns']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/ietf-dmm-fpc:fpc-topology'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.control_protocols is not None:
                    for child_ref in self.control_protocols:
                        if child_ref._has_data():
                            return True

                if self.domains is not None:
                    for child_ref in self.domains:
                        if child_ref._has_data():
                            return True

                if self.dpn_groups is not None:
                    for child_ref in self.dpn_groups:
                        if child_ref._has_data():
                            return True

                if self.dpn_id is not None:
                    return True

                if self.dpns is not None:
                    for child_ref in self.dpns:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['Tenants.Tenant.FpcTopology']['meta_info']

        @property
        def _common_path(self):
            if self.tenant_id is None:
                raise YPYModelError('Key property tenant_id is None')

            return '/ietf-dmm-fpc:tenants/ietf-dmm-fpc:tenant[ietf-dmm-fpc:tenant-id = ' + str(self.tenant_id) + ']'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.tenant_id is not None:
                return True

            if self.fpc_mobility is not None and self.fpc_mobility._has_data():
                return True

            if self.fpc_policy is not None and self.fpc_policy._has_data():
                return True

            if self.fpc_topology is not None and self.fpc_topology._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['Tenants.Tenant']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-dmm-fpc:tenants'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.tenant is not None:
            for child_ref in self.tenant:
                if child_ref._has_data():
                    return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['Tenants']['meta_info']


class FpcAgentInfo(object):
    """
    General Agent Information
    
    .. attribute:: supported_error_types
    
    	Supported Error Types
    	**type**\: list of    :py:class:`SupportedErrorTypes <ydk.models.ietf.ietf_dmm_fpc.FpcAgentInfo.SupportedErrorTypes>`
    
    .. attribute:: supported_events
    
    	Supported Events
    	**type**\: list of    :py:class:`SupportedEvents <ydk.models.ietf.ietf_dmm_fpc.FpcAgentInfo.SupportedEvents>`
    
    .. attribute:: supported_features
    
    	Agent Features
    	**type**\:  list of str
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        self.supported_error_types = YList()
        self.supported_error_types.parent = self
        self.supported_error_types.name = 'supported_error_types'
        self.supported_events = YList()
        self.supported_events.parent = self
        self.supported_events.name = 'supported_events'
        self.supported_features = YLeafList()
        self.supported_features.parent = self
        self.supported_features.name = 'supported_features'


    class SupportedEvents(object):
        """
        Supported Events
        
        .. attribute:: event  <key>
        
        	Event Types
        	**type**\:   :py:class:`EventTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.EventTypeIdentity>`
        
        .. attribute:: event_id
        
        	Event ID
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.event = None
            self.event_id = None

        @property
        def _common_path(self):
            if self.event is None:
                raise YPYModelError('Key property event is None')

            return '/ietf-dmm-fpc:fpc-agent-info/ietf-dmm-fpc:supported-events[ietf-dmm-fpc:event = ' + str(self.event) + ']'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.event is not None:
                return True

            if self.event_id is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['FpcAgentInfo.SupportedEvents']['meta_info']


    class SupportedErrorTypes(object):
        """
        Supported Error Types
        
        .. attribute:: error_type  <key>
        
        	Error Type
        	**type**\:   :py:class:`ErrorTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.ErrorTypeIdentity>`
        
        .. attribute:: error_type_id
        
        	Error Type ID
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.error_type = None
            self.error_type_id = None

        @property
        def _common_path(self):
            if self.error_type is None:
                raise YPYModelError('Key property error_type is None')

            return '/ietf-dmm-fpc:fpc-agent-info/ietf-dmm-fpc:supported-error-types[ietf-dmm-fpc:error-type = ' + str(self.error_type) + ']'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.error_type is not None:
                return True

            if self.error_type_id is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['FpcAgentInfo.SupportedErrorTypes']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-dmm-fpc:fpc-agent-info'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.supported_error_types is not None:
            for child_ref in self.supported_error_types:
                if child_ref._has_data():
                    return True

        if self.supported_events is not None:
            for child_ref in self.supported_events:
                if child_ref._has_data():
                    return True

        if self.supported_features is not None:
            for child in self.supported_features:
                if child is not None:
                    return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcAgentInfo']['meta_info']


class ConfigureRpc(object):
    """
    CONF message
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output>`
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        self.input = ConfigureRpc.Input()
        self.input.parent = self
        self.output = ConfigureRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: actions
        
        	Actions
        	**type**\: list of    :py:class:`Actions <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Actions>`
        
        .. attribute:: admin_state
        
        	Admin State
        	**type**\:   :py:class:`AdminStatusEnum <ydk.models.ietf.ietf_dmm_fpc.AdminStatusEnum>`
        
        .. attribute:: client_id
        
        	Client ID
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        
        ----
        	**type**\:  str
        
        
        ----
        	**type**\:  str
        
        
        ----
        .. attribute:: clones
        
        	Clones
        	**type**\: list of    :py:class:`Clones <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Clones>`
        
        .. attribute:: contexts
        
        	Contexts
        	**type**\: list of    :py:class:`Contexts <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts>`
        
        .. attribute:: delay
        
        	Delay
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: descriptors
        
        	Descriptors
        	**type**\: list of    :py:class:`Descriptors <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Descriptors>`
        
        .. attribute:: instructions
        
        	Instructions
        	**type**\:   :py:class:`Instructions <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Instructions>`
        
        .. attribute:: op_id
        
        	Operation ID
        	**type**\:  int
        
        	**range:** 0..18446744073709551615
        
        .. attribute:: op_ref_scope
        
        	Reference Scope
        	**type**\:   :py:class:`RefScopeEnum <ydk.models.ietf.ietf_dmm_fpc.RefScopeEnum>`
        
        .. attribute:: op_type
        
        	Type
        	**type**\:   :py:class:`OpTypeEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.OpTypeEnum>`
        
        .. attribute:: policies
        
        	Policies
        	**type**\: list of    :py:class:`Policies <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Policies>`
        
        .. attribute:: policy_groups
        
        	Policy Groups
        	**type**\: list of    :py:class:`PolicyGroups <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.PolicyGroups>`
        
        .. attribute:: ports
        
        	Ports
        	**type**\: list of    :py:class:`Ports <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Ports>`
        
        .. attribute:: session_state
        
        	Session State
        	**type**\:   :py:class:`SessionStatusEnum <ydk.models.ietf.ietf_dmm_fpc.SessionStatusEnum>`
        
        .. attribute:: targets
        
        	List of Targets
        	**type**\: list of    :py:class:`Targets <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Targets>`
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.actions = YList()
            self.actions.parent = self
            self.actions.name = 'actions'
            self.admin_state = None
            self.client_id = None
            self.clones = YList()
            self.clones.parent = self
            self.clones.name = 'clones'
            self.contexts = YList()
            self.contexts.parent = self
            self.contexts.name = 'contexts'
            self.delay = None
            self.descriptors = YList()
            self.descriptors.parent = self
            self.descriptors.name = 'descriptors'
            self.instructions = ConfigureRpc.Input.Instructions()
            self.instructions.parent = self
            self.op_id = None
            self.op_ref_scope = None
            self.op_type = None
            self.policies = YList()
            self.policies.parent = self
            self.policies.name = 'policies'
            self.policy_groups = YList()
            self.policy_groups.parent = self
            self.policy_groups.name = 'policy_groups'
            self.ports = YList()
            self.ports.parent = self
            self.ports.name = 'ports'
            self.session_state = None
            self.targets = YList()
            self.targets.parent = self
            self.targets.name = 'targets'

        class OpTypeEnum(Enum):
            """
            OpTypeEnum

            Type

            .. data:: create = 0

            	create

            .. data:: update = 1

            	update

            .. data:: query = 2

            	query

            .. data:: delete = 3

            	delete

            """

            create = 0

            update = 1

            query = 2

            delete = 3


            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Input.OpTypeEnum']



        class Instructions(object):
            """
            Instructions
            
            .. attribute:: instr_3gpp_mob
            
            	3GPP Specific Command Set
            	**type**\:   :py:class:`ThreegppInstr <ydk.models.ietf.ietf_dmm_threegpp.ThreegppInstr>`
            
            .. attribute:: instr_pmip
            
            	PMIP Instructions
            	**type**\:   :py:class:`PmipInstr <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipInstr>`
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.instr_3gpp_mob = ThreegppInstr()
                self.instr_pmip = PmipInstr()

            @property
            def _common_path(self):

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:instructions'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.instr_3gpp_mob is not None:
                    if self.instr_3gpp_mob._has_data():
                        return True

                if self.instr_pmip is not None:
                    if self.instr_pmip._has_data():
                        return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Input.Instructions']['meta_info']


        class Clones(object):
            """
            Clones
            
            .. attribute:: entity  <key>
            
            	Clone ID
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: source
            
            	Source
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.entity = None
                self.source = None

            @property
            def _common_path(self):
                if self.entity is None:
                    raise YPYModelError('Key property entity is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:clones[ietf-dmm-fpc:entity = ' + str(self.entity) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.entity is not None:
                    return True

                if self.source is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Input.Clones']['meta_info']


        class Ports(object):
            """
            Ports
            
            .. attribute:: policy_groups
            
            	Policy Groups
            	**type**\: one of the below types:
            
            	**type**\:  list of int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            .. attribute:: vport_id
            
            	Port ID
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.policy_groups = YLeafList()
                self.policy_groups.parent = self
                self.policy_groups.name = 'policy_groups'
                self.vport_id = None

            @property
            def _common_path(self):

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:ports'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.policy_groups is not None:
                    for child in self.policy_groups:
                        if child is not None:
                            return True

                if self.vport_id is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Input.Ports']['meta_info']


        class Contexts(object):
            """
            Contexts
            
            .. attribute:: context_id
            
            	Context ID
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: delegated_ip_prefixes
            
            	Delegated Prefix(es)
            	**type**\: one of the below types:
            
            	**type**\:  list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
            
            
            ----
            	**type**\:  list of str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
            
            
            ----
            .. attribute:: dl
            
            	Downlink
            	**type**\:   :py:class:`Dl <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl>`
            
            .. attribute:: dpn_group
            
            	DPN Group
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: dpns
            
            	DPNs
            	**type**\: list of    :py:class:`Dpns <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns>`
            
            .. attribute:: ebi
            
            	EUTRAN Bearere Identifier (EBI)
            	**type**\:  int
            
            	**range:** 0..15
            
            .. attribute:: imsi
            
            	IMSI
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: instructions
            
            	Instructions
            	**type**\:   :py:class:`Instructions <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Instructions>`
            
            .. attribute:: lbi
            
            	Linked Bearer Identifier (LBI)
            	**type**\:  int
            
            	**range:** 0..15
            
            .. attribute:: parent_context
            
            	Parent Context
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: ul
            
            	lylebe551144
            	**type**\:   :py:class:`Ul <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul>`
            
            .. attribute:: vports
            
            	Vports
            	**type**\: one of the below types:
            
            	**type**\:  list of int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.context_id = None
                self.delegated_ip_prefixes = YLeafList()
                self.delegated_ip_prefixes.parent = self
                self.delegated_ip_prefixes.name = 'delegated_ip_prefixes'
                self.dl = ConfigureRpc.Input.Contexts.Dl()
                self.dl.parent = self
                self.dpn_group = None
                self.dpns = YList()
                self.dpns.parent = self
                self.dpns.name = 'dpns'
                self.ebi = None
                self.imsi = None
                self.instructions = ConfigureRpc.Input.Contexts.Instructions()
                self.instructions.parent = self
                self.lbi = None
                self.parent_context = None
                self.ul = ConfigureRpc.Input.Contexts.Ul()
                self.ul.parent = self
                self.vports = YLeafList()
                self.vports.parent = self
                self.vports.name = 'vports'


            class Ul(object):
                """
                lylebe551144
                
                .. attribute:: dpn_parameters
                
                	DPN Parameters
                	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.DpnParameters>`
                
                .. attribute:: mobility_tunnel_parameters
                
                	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters>`
                
                .. attribute:: mtu_size
                
                	MTU size
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nexthop
                
                	Next Hop
                	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.Nexthop>`
                
                .. attribute:: qos_profile_parameters
                
                	QoS Parameters
                	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters>`
                
                .. attribute:: tunnel_local_address
                
                	endpoint address of the DPN which a gent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: tunnel_remote_address
                
                	endpoint address of the DPN which agent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: vendor_parameters
                
                	Vendor Parameters
                	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.VendorParameters>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.dpn_parameters = ConfigureRpc.Input.Contexts.Ul.DpnParameters()
                    self.dpn_parameters.parent = self
                    self.mobility_tunnel_parameters = ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters()
                    self.mobility_tunnel_parameters.parent = self
                    self.mtu_size = None
                    self.nexthop = ConfigureRpc.Input.Contexts.Ul.Nexthop()
                    self.nexthop.parent = self
                    self.qos_profile_parameters = ConfigureRpc.Input.Contexts.Ul.QosProfileParameters()
                    self.qos_profile_parameters.parent = self
                    self.tunnel_local_address = None
                    self.tunnel_remote_address = None
                    self.vendor_parameters = YList()
                    self.vendor_parameters.parent = self
                    self.vendor_parameters.name = 'vendor_parameters'


                class MobilityTunnelParameters(object):
                    """
                    Specifies profile specific lylebe551144 tunnel
                    parameters to the DPN which the agent exists. The
                    profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                    ietf\-pmip profile, or new profile if anyone will define
                    it.
                    
                    .. attribute:: destination_address_range_v4
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV4>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: destination_address_range_v6
                    
                    	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV6>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: destination_port_range
                    
                    	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                    	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.DestinationPortRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: ds_range
                    
                    	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                    	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.DsRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: flow_label_range
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                    	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.FlowLabelRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: ipsec_spi_range
                    
                    	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                    	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.IpsecSpiRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: key
                    
                    	GRE\_KEY
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: next_header_range
                    
                    	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                    	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.NextHeaderRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: none
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: packet_filters
                    
                    	List of Packet Filters
                    	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.PacketFilters>`
                    
                    .. attribute:: protocol_range
                    
                    	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                    	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.ProtocolRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: selector_reference
                    
                    	Pre\-configured selector
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: source_address_range_v4
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV4>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: source_address_range_v6
                    
                    	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV6>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: source_port_range
                    
                    	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                    	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.SourcePortRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: tft_reference
                    
                    	Pre\-configured TFT
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: traffic_class_range
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                    	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.TrafficClassRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: ts_format
                    
                    	Traffic Selector Format
                    	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                    
                    .. attribute:: tunnel_identifier
                    
                    	Tunnel Endpoint IDentifier (TEID)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: tunnel_type
                    
                    	3GPP Tunnel Subtype
                    	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                    
                    .. attribute:: type
                    
                    	PMIP Mobility
                    	**type**\:   :py:class:`PmipTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipTunnelTypeIdentity>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.destination_address_range_v4 = None
                        self.destination_address_range_v6 = None
                        self.destination_port_range = None
                        self.ds_range = None
                        self.flow_label_range = None
                        self.ipsec_spi_range = None
                        self.key = None
                        self.next_header_range = None
                        self.none = None
                        self.packet_filters = YList()
                        self.packet_filters.parent = self
                        self.packet_filters.name = 'packet_filters'
                        self.protocol_range = None
                        self.selector_reference = None
                        self.source_address_range_v4 = None
                        self.source_address_range_v6 = None
                        self.source_port_range = None
                        self.tft_reference = None
                        self.traffic_class_range = None
                        self.ts_format = None
                        self.tunnel_identifier = None
                        self.tunnel_type = None
                        self.type = None


                    class IpsecSpiRange(object):
                        """
                        Inclusive range representing IPSec Security Parameter
                        Indices to be used. When only start\-spi is present, it
                        represents a single spi.
                        
                        .. attribute:: end_spi
                        
                        	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: start_spi
                        
                        	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_spi = None
                            self.start_spi = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:ipsec-spi-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_spi is not None:
                                return True

                            if self.start_spi is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.IpsecSpiRange']['meta_info']


                    class SourcePortRange(object):
                        """
                        Inclusive range representing source ports to be used.
                        When only start\-port is present, it represents a single
                              port.
                        
                        .. attribute:: end_port
                        
                        	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: start_port
                        
                        	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_port = None
                            self.start_port = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:source-port-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_port is not None:
                                return True

                            if self.start_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.SourcePortRange']['meta_info']


                    class DestinationPortRange(object):
                        """
                        Inclusive range representing destination ports to be used.
                        When only start\-port is present, it represents a single
                        port.
                        
                        .. attribute:: end_port
                        
                        	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: start_port
                        
                        	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_port = None
                            self.start_port = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:destination-port-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_port is not None:
                                return True

                            if self.start_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.DestinationPortRange']['meta_info']


                    class SourceAddressRangeV4(object):
                        """
                        Inclusive range representing IPv4 addresses to be used. When
                        only start\-address is present, it represents a single
                        address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:source-address-range-v4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV4']['meta_info']


                    class DestinationAddressRangeV4(object):
                        """
                        Inclusive range representing IPv4 addresses to be used.
                        When only start\-address is present, it represents a
                        single address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:destination-address-range-v4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV4']['meta_info']


                    class DsRange(object):
                        """
                        Inclusive range representing DiffServ Codepoints to be used.
                        When only start\-ds is present, it represents a single
                        Codepoint.
                        
                        .. attribute:: end_ds
                        
                        	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: start_ds
                        
                        	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_ds = None
                            self.start_ds = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:ds-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_ds is not None:
                                return True

                            if self.start_ds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.DsRange']['meta_info']


                    class ProtocolRange(object):
                        """
                        Inclusive range representing IP protocol(s) to be used. When
                        only start\-protocol is present, it represents a single
                        protocol.
                        
                        .. attribute:: end_protocol
                        
                        	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: start_protocol
                        
                        	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_protocol = None
                            self.start_protocol = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:protocol-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_protocol is not None:
                                return True

                            if self.start_protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.ProtocolRange']['meta_info']


                    class SourceAddressRangeV6(object):
                        """
                        Inclusive range representing IPv6 addresses to be used.
                        When only start\-address is present, it represents a
                        single address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:source-address-range-v6'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV6']['meta_info']


                    class DestinationAddressRangeV6(object):
                        """
                        Inclusive range representing IPv6 addresses to be used.
                        When only start\-address is present, it represents a
                        single address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:destination-address-range-v6'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV6']['meta_info']


                    class FlowLabelRange(object):
                        """
                        Inclusive range representing IPv4 addresses to be used. When
                        only start\-flow\-label is present, it represents a single
                        flow label.
                        
                        .. attribute:: end_flow_label
                        
                        	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: start_flow_label
                        
                        	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_flow_label = None
                            self.start_flow_label = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:flow-label-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_flow_label is not None:
                                return True

                            if self.start_flow_label is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.FlowLabelRange']['meta_info']


                    class TrafficClassRange(object):
                        """
                        Inclusive range representing IPv4 addresses to be used. When
                        only start\-traffic\-class is present, it represents a single
                        traffic class.
                        
                        .. attribute:: end_traffic_class
                        
                        	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: start_traffic_class
                        
                        	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_traffic_class = None
                            self.start_traffic_class = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:traffic-class-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_traffic_class is not None:
                                return True

                            if self.start_traffic_class is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.TrafficClassRange']['meta_info']


                    class NextHeaderRange(object):
                        """
                        Inclusive range representing Next Headers to be used. When
                        only start\-next\-header is present, it represents a
                        single Next Header.
                        
                        .. attribute:: end_next_header
                        
                        	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: start_next_header
                        
                        	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_next_header = None
                            self.start_next_header = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:next-header-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_next_header is not None:
                                return True

                            if self.start_next_header is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.NextHeaderRange']['meta_info']


                    class PacketFilters(object):
                        """
                        List of Packet Filters
                        
                        .. attribute:: identifier  <key>
                        
                        	Filter Identifier
                        	**type**\:  int
                        
                        	**range:** 1..15
                        
                        .. attribute:: contents
                        
                        	Filter Contents
                        	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.PacketFilters.Contents>`
                        
                        .. attribute:: direction
                        
                        	Filter Direction
                        	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                        
                        .. attribute:: evaluation_precedence
                        
                        	Evaluation Precedence
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.identifier = None
                            self.contents = YList()
                            self.contents.parent = self
                            self.contents.name = 'contents'
                            self.direction = None
                            self.evaluation_precedence = None


                        class Contents(object):
                            """
                            Filter Contents
                            
                            .. attribute:: component_type_identifier  <key>
                            
                            	Component Type
                            	**type**\:  int
                            
                            	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                            
                            .. attribute:: flow_label
                            
                            	Flow Label
                            	**type**\:  list of int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: ipsec_index
                            
                            	IPSec Index
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv4_ipv6_remote
                            
                            	Ipv4 Ipv6 remote address
                            	**type**\: one of the below types:
                            
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            .. attribute:: ipv4_local
                            
                            	IPv4 Local Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: ipv6_prefix_local
                            
                            	IPv6 Local Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: ipv6_prefix_remote
                            
                            	IPv6 Remote Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: local_port
                            
                            	Local Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_hi
                            
                            	Local Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_lo
                            
                            	Local Port Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: next_header
                            
                            	Next Header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: remote_port
                            
                            	Remote Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_hi
                            
                            	Remote Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_lo
                            
                            	Remote Por Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_class
                            
                            	Traffic Class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_hi
                            
                            	Traffic Class Max Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_lo
                            
                            	Traffic Class Min Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.component_type_identifier = None
                                self.flow_label = YLeafList()
                                self.flow_label.parent = self
                                self.flow_label.name = 'flow_label'
                                self.ipsec_index = None
                                self.ipv4_ipv6_remote = None
                                self.ipv4_local = None
                                self.ipv6_prefix_local = None
                                self.ipv6_prefix_remote = None
                                self.local_port = None
                                self.local_port_hi = None
                                self.local_port_lo = None
                                self.next_header = None
                                self.remote_port = None
                                self.remote_port_hi = None
                                self.remote_port_lo = None
                                self.traffic_class = None
                                self.traffic_class_hi = None
                                self.traffic_class_lo = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.component_type_identifier is None:
                                    raise YPYModelError('Key property component_type_identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.component_type_identifier is not None:
                                    return True

                                if self.flow_label is not None:
                                    for child in self.flow_label:
                                        if child is not None:
                                            return True

                                if self.ipsec_index is not None:
                                    return True

                                if self.ipv4_ipv6_remote is not None:
                                    return True

                                if self.ipv4_local is not None:
                                    return True

                                if self.ipv6_prefix_local is not None:
                                    return True

                                if self.ipv6_prefix_remote is not None:
                                    return True

                                if self.local_port is not None:
                                    return True

                                if self.local_port_hi is not None:
                                    return True

                                if self.local_port_lo is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.remote_port is not None:
                                    return True

                                if self.remote_port_hi is not None:
                                    return True

                                if self.remote_port_lo is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.traffic_class_hi is not None:
                                    return True

                                if self.traffic_class_lo is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                        @property
                        def _common_path(self):
                            if self.identifier is None:
                                raise YPYModelError('Key property identifier is None')

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.identifier is not None:
                                return True

                            if self.contents is not None:
                                for child_ref in self.contents:
                                    if child_ref._has_data():
                                        return True

                            if self.direction is not None:
                                return True

                            if self.evaluation_precedence is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters.PacketFilters']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                            return True

                        if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                            return True

                        if self.destination_port_range is not None and self.destination_port_range._has_data():
                            return True

                        if self.ds_range is not None and self.ds_range._has_data():
                            return True

                        if self.flow_label_range is not None and self.flow_label_range._has_data():
                            return True

                        if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                            return True

                        if self.key is not None:
                            return True

                        if self.next_header_range is not None and self.next_header_range._has_data():
                            return True

                        if self.none is not None:
                            return True

                        if self.packet_filters is not None:
                            for child_ref in self.packet_filters:
                                if child_ref._has_data():
                                    return True

                        if self.protocol_range is not None and self.protocol_range._has_data():
                            return True

                        if self.selector_reference is not None:
                            return True

                        if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                            return True

                        if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                            return True

                        if self.source_port_range is not None and self.source_port_range._has_data():
                            return True

                        if self.tft_reference is not None:
                            return True

                        if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                            return True

                        if self.ts_format is not None:
                            return True

                        if self.tunnel_identifier is not None:
                            return True

                        if self.tunnel_type is not None:
                            return True

                        if self.type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.MobilityTunnelParameters']['meta_info']


                class Nexthop(object):
                    """
                    Next Hop
                    
                    .. attribute:: if_index
                    
                    	If (interface) Value
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: ip
                    
                    	IP Value
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: lsp
                    
                    	MPLS Value
                    	**type**\:  int
                    
                    	**range:** 0..1048575
                    
                    .. attribute:: macaddress
                    
                    	MAC Address Value
                    	**type**\:  str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    .. attribute:: nexthop_type
                    
                    	Nexthop Type
                    	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                    
                    .. attribute:: servicepath
                    
                    	Service Path Value
                    	**type**\:  int
                    
                    	**range:** 0..33554431
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.if_index = None
                        self.ip = None
                        self.lsp = None
                        self.macaddress = None
                        self.nexthop_type = None
                        self.servicepath = None

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:nexthop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.if_index is not None:
                            return True

                        if self.ip is not None:
                            return True

                        if self.lsp is not None:
                            return True

                        if self.macaddress is not None:
                            return True

                        if self.nexthop_type is not None:
                            return True

                        if self.servicepath is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.Nexthop']['meta_info']


                class QosProfileParameters(object):
                    """
                    QoS Parameters
                    
                    .. attribute:: agg_max_dl
                    
                    	Aggregate\-Max\-DL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: agg_max_ul
                    
                    	Aggregate\-Max\-UL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: apn_ambr
                    
                    	Access Point Name Aggregate Max Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: arp
                    
                    	Allocation Retention Priority
                    	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.Arp>`
                    
                    .. attribute:: attributetype
                    
                    	the attribute type
                    	**type**\:   :py:class:`QosAttributeTypeIdentity <ydk.models.ietf.ietf_pmip_qos.QosAttributeTypeIdentity>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: gbr
                    
                    	Guaranteed Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: gbr_dl
                    
                    	Guaranteed\-DL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: gbr_ul
                    
                    	Guaranteed\-UL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: mbr
                    
                    	Maximum Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: per_mn_agg_max_dl
                    
                    	Per\-MN\-Agg\-Max\-DL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: per_mn_agg_max_ul
                    
                    	Per\-MN\-Agg\-Max\-UL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: per_session_agg_max_dl
                    
                    	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                    	**type**\:   :py:class:`PerSessionAggMaxDl <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.PerSessionAggMaxDl>`
                    
                    .. attribute:: per_session_agg_max_ul
                    
                    	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                    	**type**\:   :py:class:`PerSessionAggMaxUl <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.PerSessionAggMaxUl>`
                    
                    .. attribute:: premption_capability
                    
                    	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                    	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.PremptionCapabilityEnum>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: premption_vulnerability
                    
                    	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                    	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.PremptionVulnerabilityEnum>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: prioirty_level
                    
                    	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                    	**type**\:  int
                    
                    	**range:** 0..15
                    
                    	**mandatory**\: True
                    
                    .. attribute:: qci
                    
                    	QCI
                    	**type**\:  int
                    
                    	**range:** 1..9
                    
                    .. attribute:: qos_type
                    
                    	the profile type
                    	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                    
                    .. attribute:: traffic_selector
                    
                    	traffic selector
                    	**type**\:   :py:class:`TrafficSelector <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector>`
                    
                    .. attribute:: ue_ambr
                    
                    	User Equipment Aggregate Max Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.agg_max_dl = None
                        self.agg_max_ul = None
                        self.apn_ambr = None
                        self.arp = ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.Arp()
                        self.arp.parent = self
                        self.attributetype = None
                        self.gbr = None
                        self.gbr_dl = None
                        self.gbr_ul = None
                        self.mbr = None
                        self.per_mn_agg_max_dl = None
                        self.per_mn_agg_max_ul = None
                        self.per_session_agg_max_dl = ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.PerSessionAggMaxDl()
                        self.per_session_agg_max_dl.parent = self
                        self.per_session_agg_max_ul = ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.PerSessionAggMaxUl()
                        self.per_session_agg_max_ul.parent = self
                        self.premption_capability = None
                        self.premption_vulnerability = None
                        self.prioirty_level = None
                        self.qci = None
                        self.qos_type = None
                        self.traffic_selector = ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector()
                        self.traffic_selector.parent = self
                        self.ue_ambr = None

                    class PremptionCapabilityEnum(Enum):
                        """
                        PremptionCapabilityEnum

                        This is a 2\-bit unsigned integer value.  It defines whether a

                        service data flow can get resources that were already

                        assigned to another service data flow with a lower priority

                        level.  The following values are defined\:

                         Enabled (0)\: This value indicates that the service data flow

                         is allowed to get resources that were already assigned to

                         another IP data flow with a lower priority level.

                         Disabled (1)\: This value indicates that the service data flow

                         is not allowed to get resources that were already assigned to

                         another IP data flow with a lower priority level.  The values

                         (2) and (3) are reserved.

                        .. data:: enabled = 0

                        	enabled

                        .. data:: disabled = 1

                        	disabled

                        .. data:: reserved1 = 2

                        	reserved1

                        .. data:: reserved2 = 3

                        	reserved2

                        """

                        enabled = 0

                        disabled = 1

                        reserved1 = 2

                        reserved2 = 3


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.PremptionCapabilityEnum']


                    class PremptionVulnerabilityEnum(Enum):
                        """
                        PremptionVulnerabilityEnum

                        This is a 2\-bit unsigned integer value.  It defines whether a

                         service data flow can lose the resources assigned to it in

                         order to admit a service data flow with a higher priority

                         level.  The following values are defined\:

                           Enabled (0)\: This value indicates that the resources

                           assigned to the IP data flow can be preempted and

                           allocated to a service data flow with a higher

                           priority level.

                           Disabled (1)\: This value indicates that the resources

                           assigned to the IP data flow shall not be preempted and

                           allocated to a service data flow with a higher priority

                           level.  The values (2) and (3) are reserved.

                        .. data:: enabled = 0

                        	enabled

                        .. data:: disabled = 1

                        	disabled

                        .. data:: reserved1 = 2

                        	reserved1

                        .. data:: reserved2 = 3

                        	reserved2

                        """

                        enabled = 0

                        disabled = 1

                        reserved1 = 2

                        reserved2 = 3


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.PremptionVulnerabilityEnum']



                    class PerSessionAggMaxDl(object):
                        """
                        Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        
                        .. attribute:: exclude_flag
                        
                        	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                        	**type**\:  bool
                        
                        	**mandatory**\: True
                        
                        .. attribute:: max_rate
                        
                        	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: service_flag
                        
                        	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                        	**type**\:  bool
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.exclude_flag = None
                            self.max_rate = None
                            self.service_flag = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:per-session-agg-max-dl'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.exclude_flag is not None:
                                return True

                            if self.max_rate is not None:
                                return True

                            if self.service_flag is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.PerSessionAggMaxDl']['meta_info']


                    class PerSessionAggMaxUl(object):
                        """
                        Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        
                        .. attribute:: exclude_flag
                        
                        	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                        	**type**\:  bool
                        
                        	**mandatory**\: True
                        
                        .. attribute:: max_rate
                        
                        	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: service_flag
                        
                        	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                        	**type**\:  bool
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.exclude_flag = None
                            self.max_rate = None
                            self.service_flag = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:per-session-agg-max-ul'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.exclude_flag is not None:
                                return True

                            if self.max_rate is not None:
                                return True

                            if self.service_flag is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.PerSessionAggMaxUl']['meta_info']


                    class TrafficSelector(object):
                        """
                        traffic selector
                        
                        .. attribute:: destination_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_port_range
                        
                        	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                        	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationPortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ds_range
                        
                        	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                        	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.DsRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: flow_label_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                        	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.FlowLabelRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ipsec_spi_range
                        
                        	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                        	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.IpsecSpiRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: next_header_range
                        
                        	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                        	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.NextHeaderRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: protocol_range
                        
                        	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                        	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.ProtocolRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_port_range
                        
                        	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                        	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.SourcePortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: traffic_class_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                        	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.TrafficClassRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ts_format
                        
                        	Traffic Selector Format
                        	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                        
                        

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.destination_address_range_v4 = None
                            self.destination_address_range_v6 = None
                            self.destination_port_range = None
                            self.ds_range = None
                            self.flow_label_range = None
                            self.ipsec_spi_range = None
                            self.next_header_range = None
                            self.protocol_range = None
                            self.source_address_range_v4 = None
                            self.source_address_range_v6 = None
                            self.source_port_range = None
                            self.traffic_class_range = None
                            self.ts_format = None


                        class IpsecSpiRange(object):
                            """
                            Inclusive range representing IPSec Security Parameter
                            Indices to be used. When only start\-spi is present, it
                            represents a single spi.
                            
                            .. attribute:: end_spi
                            
                            	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: start_spi
                            
                            	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_spi = None
                                self.start_spi = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:ipsec-spi-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_spi is not None:
                                    return True

                                if self.start_spi is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.IpsecSpiRange']['meta_info']


                        class SourcePortRange(object):
                            """
                            Inclusive range representing source ports to be used.
                            When only start\-port is present, it represents a single
                                  port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:source-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.SourcePortRange']['meta_info']


                        class DestinationPortRange(object):
                            """
                            Inclusive range representing destination ports to be used.
                            When only start\-port is present, it represents a single
                            port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:destination-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationPortRange']['meta_info']


                        class SourceAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-address is present, it represents a single
                            address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:source-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV4']['meta_info']


                        class DestinationAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:destination-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4']['meta_info']


                        class DsRange(object):
                            """
                            Inclusive range representing DiffServ Codepoints to be used.
                            When only start\-ds is present, it represents a single
                            Codepoint.
                            
                            .. attribute:: end_ds
                            
                            	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_ds
                            
                            	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_ds = None
                                self.start_ds = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:ds-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_ds is not None:
                                    return True

                                if self.start_ds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.DsRange']['meta_info']


                        class ProtocolRange(object):
                            """
                            Inclusive range representing IP protocol(s) to be used. When
                            only start\-protocol is present, it represents a single
                            protocol.
                            
                            .. attribute:: end_protocol
                            
                            	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_protocol
                            
                            	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_protocol = None
                                self.start_protocol = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:protocol-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_protocol is not None:
                                    return True

                                if self.start_protocol is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.ProtocolRange']['meta_info']


                        class SourceAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:source-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV6']['meta_info']


                        class DestinationAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:destination-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6']['meta_info']


                        class FlowLabelRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-flow\-label is present, it represents a single
                            flow label.
                            
                            .. attribute:: end_flow_label
                            
                            	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: start_flow_label
                            
                            	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_flow_label = None
                                self.start_flow_label = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:flow-label-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_flow_label is not None:
                                    return True

                                if self.start_flow_label is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.FlowLabelRange']['meta_info']


                        class TrafficClassRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-traffic\-class is present, it represents a single
                            traffic class.
                            
                            .. attribute:: end_traffic_class
                            
                            	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_traffic_class
                            
                            	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_traffic_class = None
                                self.start_traffic_class = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:traffic-class-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_traffic_class is not None:
                                    return True

                                if self.start_traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.TrafficClassRange']['meta_info']


                        class NextHeaderRange(object):
                            """
                            Inclusive range representing Next Headers to be used. When
                            only start\-next\-header is present, it represents a
                            single Next Header.
                            
                            .. attribute:: end_next_header
                            
                            	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_next_header
                            
                            	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_next_header = None
                                self.start_next_header = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:next-header-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_next_header is not None:
                                    return True

                                if self.start_next_header is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector.NextHeaderRange']['meta_info']

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                return True

                            if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                return True

                            if self.destination_port_range is not None and self.destination_port_range._has_data():
                                return True

                            if self.ds_range is not None and self.ds_range._has_data():
                                return True

                            if self.flow_label_range is not None and self.flow_label_range._has_data():
                                return True

                            if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                return True

                            if self.next_header_range is not None and self.next_header_range._has_data():
                                return True

                            if self.protocol_range is not None and self.protocol_range._has_data():
                                return True

                            if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                return True

                            if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                return True

                            if self.source_port_range is not None and self.source_port_range._has_data():
                                return True

                            if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                return True

                            if self.ts_format is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.TrafficSelector']['meta_info']


                    class Arp(object):
                        """
                        Allocation Retention Priority
                        
                        .. attribute:: premption_capability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.Arp.PremptionCapabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: premption_vulnerability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.Arp.PremptionVulnerabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: prioirty_level
                        
                        	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                        	**type**\:  int
                        
                        	**range:** 0..15
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.premption_capability = None
                            self.premption_vulnerability = None
                            self.prioirty_level = None

                        class PremptionCapabilityEnum(Enum):
                            """
                            PremptionCapabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                            service data flow can get resources that were already

                            assigned to another service data flow with a lower priority

                            level.  The following values are defined\:

                             Enabled (0)\: This value indicates that the service data flow

                             is allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.

                             Disabled (1)\: This value indicates that the service data flow

                             is not allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.  The values

                             (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.Arp.PremptionCapabilityEnum']


                        class PremptionVulnerabilityEnum(Enum):
                            """
                            PremptionVulnerabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                             service data flow can lose the resources assigned to it in

                             order to admit a service data flow with a higher priority

                             level.  The following values are defined\:

                               Enabled (0)\: This value indicates that the resources

                               assigned to the IP data flow can be preempted and

                               allocated to a service data flow with a higher

                               priority level.

                               Disabled (1)\: This value indicates that the resources

                               assigned to the IP data flow shall not be preempted and

                               allocated to a service data flow with a higher priority

                               level.  The values (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.Arp.PremptionVulnerabilityEnum']


                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-threegpp:arp'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.premption_capability is not None:
                                return True

                            if self.premption_vulnerability is not None:
                                return True

                            if self.prioirty_level is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters.Arp']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.agg_max_dl is not None:
                            return True

                        if self.agg_max_ul is not None:
                            return True

                        if self.apn_ambr is not None:
                            return True

                        if self.arp is not None and self.arp._has_data():
                            return True

                        if self.attributetype is not None:
                            return True

                        if self.gbr is not None:
                            return True

                        if self.gbr_dl is not None:
                            return True

                        if self.gbr_ul is not None:
                            return True

                        if self.mbr is not None:
                            return True

                        if self.per_mn_agg_max_dl is not None:
                            return True

                        if self.per_mn_agg_max_ul is not None:
                            return True

                        if self.per_session_agg_max_dl is not None and self.per_session_agg_max_dl._has_data():
                            return True

                        if self.per_session_agg_max_ul is not None and self.per_session_agg_max_ul._has_data():
                            return True

                        if self.premption_capability is not None:
                            return True

                        if self.premption_vulnerability is not None:
                            return True

                        if self.prioirty_level is not None:
                            return True

                        if self.qci is not None:
                            return True

                        if self.qos_type is not None:
                            return True

                        if self.traffic_selector is not None and self.traffic_selector._has_data():
                            return True

                        if self.ue_ambr is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.QosProfileParameters']['meta_info']


                class DpnParameters(object):
                    """
                    DPN Parameters
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:dpn-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.DpnParameters']['meta_info']


                class VendorParameters(object):
                    """
                    Vendor Parameters
                    
                    .. attribute:: vendor_id  <key>
                    
                    	Vendor ID
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: vendor_type  <key>
                    
                    	Attribute Type
                    	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                    
                    .. attribute:: empty_type
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.vendor_id = None
                        self.vendor_type = None
                        self.empty_type = None

                    @property
                    def _common_path(self):
                        if self.vendor_id is None:
                            raise YPYModelError('Key property vendor_id is None')
                        if self.vendor_type is None:
                            raise YPYModelError('Key property vendor_type is None')

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.vendor_id is not None:
                            return True

                        if self.vendor_type is not None:
                            return True

                        if self.empty_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Ul.VendorParameters']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                        return True

                    if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                        return True

                    if self.mtu_size is not None:
                        return True

                    if self.nexthop is not None and self.nexthop._has_data():
                        return True

                    if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                        return True

                    if self.tunnel_local_address is not None:
                        return True

                    if self.tunnel_remote_address is not None:
                        return True

                    if self.vendor_parameters is not None:
                        for child_ref in self.vendor_parameters:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureRpc.Input.Contexts.Ul']['meta_info']


            class Dl(object):
                """
                Downlink
                
                .. attribute:: dpn_parameters
                
                	DPN Parameters
                	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.DpnParameters>`
                
                .. attribute:: mobility_tunnel_parameters
                
                	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters>`
                
                .. attribute:: mtu_size
                
                	MTU size
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nexthop
                
                	Next Hop
                	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.Nexthop>`
                
                .. attribute:: qos_profile_parameters
                
                	QoS Parameters
                	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters>`
                
                .. attribute:: tunnel_local_address
                
                	endpoint address of the DPN which a gent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: tunnel_remote_address
                
                	endpoint address of the DPN which agent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: vendor_parameters
                
                	Vendor Parameters
                	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.VendorParameters>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.dpn_parameters = ConfigureRpc.Input.Contexts.Dl.DpnParameters()
                    self.dpn_parameters.parent = self
                    self.mobility_tunnel_parameters = ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters()
                    self.mobility_tunnel_parameters.parent = self
                    self.mtu_size = None
                    self.nexthop = ConfigureRpc.Input.Contexts.Dl.Nexthop()
                    self.nexthop.parent = self
                    self.qos_profile_parameters = ConfigureRpc.Input.Contexts.Dl.QosProfileParameters()
                    self.qos_profile_parameters.parent = self
                    self.tunnel_local_address = None
                    self.tunnel_remote_address = None
                    self.vendor_parameters = YList()
                    self.vendor_parameters.parent = self
                    self.vendor_parameters.name = 'vendor_parameters'


                class MobilityTunnelParameters(object):
                    """
                    Specifies profile specific lylebe551144 tunnel
                    parameters to the DPN which the agent exists. The
                    profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                    ietf\-pmip profile, or new profile if anyone will define
                    it.
                    
                    .. attribute:: destination_address_range_v4
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV4>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: destination_address_range_v6
                    
                    	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV6>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: destination_port_range
                    
                    	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                    	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.DestinationPortRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: ds_range
                    
                    	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                    	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.DsRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: flow_label_range
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                    	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.FlowLabelRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: ipsec_spi_range
                    
                    	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                    	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.IpsecSpiRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: key
                    
                    	GRE\_KEY
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: next_header_range
                    
                    	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                    	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.NextHeaderRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: none
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: packet_filters
                    
                    	List of Packet Filters
                    	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.PacketFilters>`
                    
                    .. attribute:: protocol_range
                    
                    	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                    	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.ProtocolRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: selector_reference
                    
                    	Pre\-configured selector
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: source_address_range_v4
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV4>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: source_address_range_v6
                    
                    	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV6>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: source_port_range
                    
                    	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                    	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.SourcePortRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: tft_reference
                    
                    	Pre\-configured TFT
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: traffic_class_range
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                    	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.TrafficClassRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: ts_format
                    
                    	Traffic Selector Format
                    	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                    
                    .. attribute:: tunnel_identifier
                    
                    	Tunnel Endpoint IDentifier (TEID)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: tunnel_type
                    
                    	3GPP Tunnel Subtype
                    	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                    
                    .. attribute:: type
                    
                    	PMIP Mobility
                    	**type**\:   :py:class:`PmipTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipTunnelTypeIdentity>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.destination_address_range_v4 = None
                        self.destination_address_range_v6 = None
                        self.destination_port_range = None
                        self.ds_range = None
                        self.flow_label_range = None
                        self.ipsec_spi_range = None
                        self.key = None
                        self.next_header_range = None
                        self.none = None
                        self.packet_filters = YList()
                        self.packet_filters.parent = self
                        self.packet_filters.name = 'packet_filters'
                        self.protocol_range = None
                        self.selector_reference = None
                        self.source_address_range_v4 = None
                        self.source_address_range_v6 = None
                        self.source_port_range = None
                        self.tft_reference = None
                        self.traffic_class_range = None
                        self.ts_format = None
                        self.tunnel_identifier = None
                        self.tunnel_type = None
                        self.type = None


                    class IpsecSpiRange(object):
                        """
                        Inclusive range representing IPSec Security Parameter
                        Indices to be used. When only start\-spi is present, it
                        represents a single spi.
                        
                        .. attribute:: end_spi
                        
                        	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: start_spi
                        
                        	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_spi = None
                            self.start_spi = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:ipsec-spi-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_spi is not None:
                                return True

                            if self.start_spi is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.IpsecSpiRange']['meta_info']


                    class SourcePortRange(object):
                        """
                        Inclusive range representing source ports to be used.
                        When only start\-port is present, it represents a single
                              port.
                        
                        .. attribute:: end_port
                        
                        	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: start_port
                        
                        	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_port = None
                            self.start_port = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:source-port-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_port is not None:
                                return True

                            if self.start_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.SourcePortRange']['meta_info']


                    class DestinationPortRange(object):
                        """
                        Inclusive range representing destination ports to be used.
                        When only start\-port is present, it represents a single
                        port.
                        
                        .. attribute:: end_port
                        
                        	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: start_port
                        
                        	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_port = None
                            self.start_port = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:destination-port-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_port is not None:
                                return True

                            if self.start_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.DestinationPortRange']['meta_info']


                    class SourceAddressRangeV4(object):
                        """
                        Inclusive range representing IPv4 addresses to be used. When
                        only start\-address is present, it represents a single
                        address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:source-address-range-v4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV4']['meta_info']


                    class DestinationAddressRangeV4(object):
                        """
                        Inclusive range representing IPv4 addresses to be used.
                        When only start\-address is present, it represents a
                        single address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:destination-address-range-v4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV4']['meta_info']


                    class DsRange(object):
                        """
                        Inclusive range representing DiffServ Codepoints to be used.
                        When only start\-ds is present, it represents a single
                        Codepoint.
                        
                        .. attribute:: end_ds
                        
                        	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: start_ds
                        
                        	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_ds = None
                            self.start_ds = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:ds-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_ds is not None:
                                return True

                            if self.start_ds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.DsRange']['meta_info']


                    class ProtocolRange(object):
                        """
                        Inclusive range representing IP protocol(s) to be used. When
                        only start\-protocol is present, it represents a single
                        protocol.
                        
                        .. attribute:: end_protocol
                        
                        	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: start_protocol
                        
                        	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_protocol = None
                            self.start_protocol = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:protocol-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_protocol is not None:
                                return True

                            if self.start_protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.ProtocolRange']['meta_info']


                    class SourceAddressRangeV6(object):
                        """
                        Inclusive range representing IPv6 addresses to be used.
                        When only start\-address is present, it represents a
                        single address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:source-address-range-v6'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV6']['meta_info']


                    class DestinationAddressRangeV6(object):
                        """
                        Inclusive range representing IPv6 addresses to be used.
                        When only start\-address is present, it represents a
                        single address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:destination-address-range-v6'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV6']['meta_info']


                    class FlowLabelRange(object):
                        """
                        Inclusive range representing IPv4 addresses to be used. When
                        only start\-flow\-label is present, it represents a single
                        flow label.
                        
                        .. attribute:: end_flow_label
                        
                        	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: start_flow_label
                        
                        	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_flow_label = None
                            self.start_flow_label = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:flow-label-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_flow_label is not None:
                                return True

                            if self.start_flow_label is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.FlowLabelRange']['meta_info']


                    class TrafficClassRange(object):
                        """
                        Inclusive range representing IPv4 addresses to be used. When
                        only start\-traffic\-class is present, it represents a single
                        traffic class.
                        
                        .. attribute:: end_traffic_class
                        
                        	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: start_traffic_class
                        
                        	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_traffic_class = None
                            self.start_traffic_class = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:traffic-class-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_traffic_class is not None:
                                return True

                            if self.start_traffic_class is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.TrafficClassRange']['meta_info']


                    class NextHeaderRange(object):
                        """
                        Inclusive range representing Next Headers to be used. When
                        only start\-next\-header is present, it represents a
                        single Next Header.
                        
                        .. attribute:: end_next_header
                        
                        	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: start_next_header
                        
                        	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_next_header = None
                            self.start_next_header = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-fpc-pmip:next-header-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_next_header is not None:
                                return True

                            if self.start_next_header is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.NextHeaderRange']['meta_info']


                    class PacketFilters(object):
                        """
                        List of Packet Filters
                        
                        .. attribute:: identifier  <key>
                        
                        	Filter Identifier
                        	**type**\:  int
                        
                        	**range:** 1..15
                        
                        .. attribute:: contents
                        
                        	Filter Contents
                        	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.PacketFilters.Contents>`
                        
                        .. attribute:: direction
                        
                        	Filter Direction
                        	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                        
                        .. attribute:: evaluation_precedence
                        
                        	Evaluation Precedence
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.identifier = None
                            self.contents = YList()
                            self.contents.parent = self
                            self.contents.name = 'contents'
                            self.direction = None
                            self.evaluation_precedence = None


                        class Contents(object):
                            """
                            Filter Contents
                            
                            .. attribute:: component_type_identifier  <key>
                            
                            	Component Type
                            	**type**\:  int
                            
                            	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                            
                            .. attribute:: flow_label
                            
                            	Flow Label
                            	**type**\:  list of int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: ipsec_index
                            
                            	IPSec Index
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv4_ipv6_remote
                            
                            	Ipv4 Ipv6 remote address
                            	**type**\: one of the below types:
                            
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            .. attribute:: ipv4_local
                            
                            	IPv4 Local Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: ipv6_prefix_local
                            
                            	IPv6 Local Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: ipv6_prefix_remote
                            
                            	IPv6 Remote Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: local_port
                            
                            	Local Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_hi
                            
                            	Local Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_lo
                            
                            	Local Port Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: next_header
                            
                            	Next Header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: remote_port
                            
                            	Remote Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_hi
                            
                            	Remote Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_lo
                            
                            	Remote Por Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_class
                            
                            	Traffic Class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_hi
                            
                            	Traffic Class Max Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_lo
                            
                            	Traffic Class Min Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.component_type_identifier = None
                                self.flow_label = YLeafList()
                                self.flow_label.parent = self
                                self.flow_label.name = 'flow_label'
                                self.ipsec_index = None
                                self.ipv4_ipv6_remote = None
                                self.ipv4_local = None
                                self.ipv6_prefix_local = None
                                self.ipv6_prefix_remote = None
                                self.local_port = None
                                self.local_port_hi = None
                                self.local_port_lo = None
                                self.next_header = None
                                self.remote_port = None
                                self.remote_port_hi = None
                                self.remote_port_lo = None
                                self.traffic_class = None
                                self.traffic_class_hi = None
                                self.traffic_class_lo = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.component_type_identifier is None:
                                    raise YPYModelError('Key property component_type_identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.component_type_identifier is not None:
                                    return True

                                if self.flow_label is not None:
                                    for child in self.flow_label:
                                        if child is not None:
                                            return True

                                if self.ipsec_index is not None:
                                    return True

                                if self.ipv4_ipv6_remote is not None:
                                    return True

                                if self.ipv4_local is not None:
                                    return True

                                if self.ipv6_prefix_local is not None:
                                    return True

                                if self.ipv6_prefix_remote is not None:
                                    return True

                                if self.local_port is not None:
                                    return True

                                if self.local_port_hi is not None:
                                    return True

                                if self.local_port_lo is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.remote_port is not None:
                                    return True

                                if self.remote_port_hi is not None:
                                    return True

                                if self.remote_port_lo is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.traffic_class_hi is not None:
                                    return True

                                if self.traffic_class_lo is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                        @property
                        def _common_path(self):
                            if self.identifier is None:
                                raise YPYModelError('Key property identifier is None')

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.identifier is not None:
                                return True

                            if self.contents is not None:
                                for child_ref in self.contents:
                                    if child_ref._has_data():
                                        return True

                            if self.direction is not None:
                                return True

                            if self.evaluation_precedence is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters.PacketFilters']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                            return True

                        if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                            return True

                        if self.destination_port_range is not None and self.destination_port_range._has_data():
                            return True

                        if self.ds_range is not None and self.ds_range._has_data():
                            return True

                        if self.flow_label_range is not None and self.flow_label_range._has_data():
                            return True

                        if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                            return True

                        if self.key is not None:
                            return True

                        if self.next_header_range is not None and self.next_header_range._has_data():
                            return True

                        if self.none is not None:
                            return True

                        if self.packet_filters is not None:
                            for child_ref in self.packet_filters:
                                if child_ref._has_data():
                                    return True

                        if self.protocol_range is not None and self.protocol_range._has_data():
                            return True

                        if self.selector_reference is not None:
                            return True

                        if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                            return True

                        if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                            return True

                        if self.source_port_range is not None and self.source_port_range._has_data():
                            return True

                        if self.tft_reference is not None:
                            return True

                        if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                            return True

                        if self.ts_format is not None:
                            return True

                        if self.tunnel_identifier is not None:
                            return True

                        if self.tunnel_type is not None:
                            return True

                        if self.type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.MobilityTunnelParameters']['meta_info']


                class Nexthop(object):
                    """
                    Next Hop
                    
                    .. attribute:: if_index
                    
                    	If (interface) Value
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: ip
                    
                    	IP Value
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: lsp
                    
                    	MPLS Value
                    	**type**\:  int
                    
                    	**range:** 0..1048575
                    
                    .. attribute:: macaddress
                    
                    	MAC Address Value
                    	**type**\:  str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    .. attribute:: nexthop_type
                    
                    	Nexthop Type
                    	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                    
                    .. attribute:: servicepath
                    
                    	Service Path Value
                    	**type**\:  int
                    
                    	**range:** 0..33554431
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.if_index = None
                        self.ip = None
                        self.lsp = None
                        self.macaddress = None
                        self.nexthop_type = None
                        self.servicepath = None

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:nexthop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.if_index is not None:
                            return True

                        if self.ip is not None:
                            return True

                        if self.lsp is not None:
                            return True

                        if self.macaddress is not None:
                            return True

                        if self.nexthop_type is not None:
                            return True

                        if self.servicepath is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.Nexthop']['meta_info']


                class QosProfileParameters(object):
                    """
                    QoS Parameters
                    
                    .. attribute:: agg_max_dl
                    
                    	Aggregate\-Max\-DL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: agg_max_ul
                    
                    	Aggregate\-Max\-UL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: apn_ambr
                    
                    	Access Point Name Aggregate Max Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: arp
                    
                    	Allocation Retention Priority
                    	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.Arp>`
                    
                    .. attribute:: attributetype
                    
                    	the attribute type
                    	**type**\:   :py:class:`QosAttributeTypeIdentity <ydk.models.ietf.ietf_pmip_qos.QosAttributeTypeIdentity>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: gbr
                    
                    	Guaranteed Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: gbr_dl
                    
                    	Guaranteed\-DL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: gbr_ul
                    
                    	Guaranteed\-UL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: mbr
                    
                    	Maximum Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: per_mn_agg_max_dl
                    
                    	Per\-MN\-Agg\-Max\-DL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: per_mn_agg_max_ul
                    
                    	Per\-MN\-Agg\-Max\-UL\-Bit\-Rate Value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: per_session_agg_max_dl
                    
                    	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                    	**type**\:   :py:class:`PerSessionAggMaxDl <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.PerSessionAggMaxDl>`
                    
                    .. attribute:: per_session_agg_max_ul
                    
                    	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                    	**type**\:   :py:class:`PerSessionAggMaxUl <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.PerSessionAggMaxUl>`
                    
                    .. attribute:: premption_capability
                    
                    	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                    	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.PremptionCapabilityEnum>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: premption_vulnerability
                    
                    	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                    	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.PremptionVulnerabilityEnum>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: prioirty_level
                    
                    	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                    	**type**\:  int
                    
                    	**range:** 0..15
                    
                    	**mandatory**\: True
                    
                    .. attribute:: qci
                    
                    	QCI
                    	**type**\:  int
                    
                    	**range:** 1..9
                    
                    .. attribute:: qos_type
                    
                    	the profile type
                    	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                    
                    .. attribute:: traffic_selector
                    
                    	traffic selector
                    	**type**\:   :py:class:`TrafficSelector <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector>`
                    
                    .. attribute:: ue_ambr
                    
                    	User Equipment Aggregate Max Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.agg_max_dl = None
                        self.agg_max_ul = None
                        self.apn_ambr = None
                        self.arp = ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.Arp()
                        self.arp.parent = self
                        self.attributetype = None
                        self.gbr = None
                        self.gbr_dl = None
                        self.gbr_ul = None
                        self.mbr = None
                        self.per_mn_agg_max_dl = None
                        self.per_mn_agg_max_ul = None
                        self.per_session_agg_max_dl = ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.PerSessionAggMaxDl()
                        self.per_session_agg_max_dl.parent = self
                        self.per_session_agg_max_ul = ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.PerSessionAggMaxUl()
                        self.per_session_agg_max_ul.parent = self
                        self.premption_capability = None
                        self.premption_vulnerability = None
                        self.prioirty_level = None
                        self.qci = None
                        self.qos_type = None
                        self.traffic_selector = ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector()
                        self.traffic_selector.parent = self
                        self.ue_ambr = None

                    class PremptionCapabilityEnum(Enum):
                        """
                        PremptionCapabilityEnum

                        This is a 2\-bit unsigned integer value.  It defines whether a

                        service data flow can get resources that were already

                        assigned to another service data flow with a lower priority

                        level.  The following values are defined\:

                         Enabled (0)\: This value indicates that the service data flow

                         is allowed to get resources that were already assigned to

                         another IP data flow with a lower priority level.

                         Disabled (1)\: This value indicates that the service data flow

                         is not allowed to get resources that were already assigned to

                         another IP data flow with a lower priority level.  The values

                         (2) and (3) are reserved.

                        .. data:: enabled = 0

                        	enabled

                        .. data:: disabled = 1

                        	disabled

                        .. data:: reserved1 = 2

                        	reserved1

                        .. data:: reserved2 = 3

                        	reserved2

                        """

                        enabled = 0

                        disabled = 1

                        reserved1 = 2

                        reserved2 = 3


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.PremptionCapabilityEnum']


                    class PremptionVulnerabilityEnum(Enum):
                        """
                        PremptionVulnerabilityEnum

                        This is a 2\-bit unsigned integer value.  It defines whether a

                         service data flow can lose the resources assigned to it in

                         order to admit a service data flow with a higher priority

                         level.  The following values are defined\:

                           Enabled (0)\: This value indicates that the resources

                           assigned to the IP data flow can be preempted and

                           allocated to a service data flow with a higher

                           priority level.

                           Disabled (1)\: This value indicates that the resources

                           assigned to the IP data flow shall not be preempted and

                           allocated to a service data flow with a higher priority

                           level.  The values (2) and (3) are reserved.

                        .. data:: enabled = 0

                        	enabled

                        .. data:: disabled = 1

                        	disabled

                        .. data:: reserved1 = 2

                        	reserved1

                        .. data:: reserved2 = 3

                        	reserved2

                        """

                        enabled = 0

                        disabled = 1

                        reserved1 = 2

                        reserved2 = 3


                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.PremptionVulnerabilityEnum']



                    class PerSessionAggMaxDl(object):
                        """
                        Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        
                        .. attribute:: exclude_flag
                        
                        	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                        	**type**\:  bool
                        
                        	**mandatory**\: True
                        
                        .. attribute:: max_rate
                        
                        	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: service_flag
                        
                        	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                        	**type**\:  bool
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.exclude_flag = None
                            self.max_rate = None
                            self.service_flag = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:per-session-agg-max-dl'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.exclude_flag is not None:
                                return True

                            if self.max_rate is not None:
                                return True

                            if self.service_flag is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.PerSessionAggMaxDl']['meta_info']


                    class PerSessionAggMaxUl(object):
                        """
                        Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        
                        .. attribute:: exclude_flag
                        
                        	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                        	**type**\:  bool
                        
                        	**mandatory**\: True
                        
                        .. attribute:: max_rate
                        
                        	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: service_flag
                        
                        	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                        	**type**\:  bool
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.exclude_flag = None
                            self.max_rate = None
                            self.service_flag = None

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:per-session-agg-max-ul'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.exclude_flag is not None:
                                return True

                            if self.max_rate is not None:
                                return True

                            if self.service_flag is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.PerSessionAggMaxUl']['meta_info']


                    class TrafficSelector(object):
                        """
                        traffic selector
                        
                        .. attribute:: destination_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_port_range
                        
                        	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                        	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationPortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ds_range
                        
                        	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                        	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.DsRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: flow_label_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                        	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.FlowLabelRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ipsec_spi_range
                        
                        	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                        	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.IpsecSpiRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: next_header_range
                        
                        	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                        	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.NextHeaderRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: protocol_range
                        
                        	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                        	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.ProtocolRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_port_range
                        
                        	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                        	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.SourcePortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: traffic_class_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                        	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.TrafficClassRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ts_format
                        
                        	Traffic Selector Format
                        	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                        
                        

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.destination_address_range_v4 = None
                            self.destination_address_range_v6 = None
                            self.destination_port_range = None
                            self.ds_range = None
                            self.flow_label_range = None
                            self.ipsec_spi_range = None
                            self.next_header_range = None
                            self.protocol_range = None
                            self.source_address_range_v4 = None
                            self.source_address_range_v6 = None
                            self.source_port_range = None
                            self.traffic_class_range = None
                            self.ts_format = None


                        class IpsecSpiRange(object):
                            """
                            Inclusive range representing IPSec Security Parameter
                            Indices to be used. When only start\-spi is present, it
                            represents a single spi.
                            
                            .. attribute:: end_spi
                            
                            	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: start_spi
                            
                            	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_spi = None
                                self.start_spi = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:ipsec-spi-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_spi is not None:
                                    return True

                                if self.start_spi is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.IpsecSpiRange']['meta_info']


                        class SourcePortRange(object):
                            """
                            Inclusive range representing source ports to be used.
                            When only start\-port is present, it represents a single
                                  port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:source-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.SourcePortRange']['meta_info']


                        class DestinationPortRange(object):
                            """
                            Inclusive range representing destination ports to be used.
                            When only start\-port is present, it represents a single
                            port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:destination-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationPortRange']['meta_info']


                        class SourceAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-address is present, it represents a single
                            address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:source-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV4']['meta_info']


                        class DestinationAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:destination-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4']['meta_info']


                        class DsRange(object):
                            """
                            Inclusive range representing DiffServ Codepoints to be used.
                            When only start\-ds is present, it represents a single
                            Codepoint.
                            
                            .. attribute:: end_ds
                            
                            	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_ds
                            
                            	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_ds = None
                                self.start_ds = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:ds-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_ds is not None:
                                    return True

                                if self.start_ds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.DsRange']['meta_info']


                        class ProtocolRange(object):
                            """
                            Inclusive range representing IP protocol(s) to be used. When
                            only start\-protocol is present, it represents a single
                            protocol.
                            
                            .. attribute:: end_protocol
                            
                            	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_protocol
                            
                            	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_protocol = None
                                self.start_protocol = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:protocol-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_protocol is not None:
                                    return True

                                if self.start_protocol is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.ProtocolRange']['meta_info']


                        class SourceAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:source-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV6']['meta_info']


                        class DestinationAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:destination-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6']['meta_info']


                        class FlowLabelRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-flow\-label is present, it represents a single
                            flow label.
                            
                            .. attribute:: end_flow_label
                            
                            	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: start_flow_label
                            
                            	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_flow_label = None
                                self.start_flow_label = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:flow-label-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_flow_label is not None:
                                    return True

                                if self.start_flow_label is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.FlowLabelRange']['meta_info']


                        class TrafficClassRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-traffic\-class is present, it represents a single
                            traffic class.
                            
                            .. attribute:: end_traffic_class
                            
                            	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_traffic_class
                            
                            	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_traffic_class = None
                                self.start_traffic_class = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:traffic-class-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_traffic_class is not None:
                                    return True

                                if self.start_traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.TrafficClassRange']['meta_info']


                        class NextHeaderRange(object):
                            """
                            Inclusive range representing Next Headers to be used. When
                            only start\-next\-header is present, it represents a
                            single Next Header.
                            
                            .. attribute:: end_next_header
                            
                            	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_next_header
                            
                            	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_next_header = None
                                self.start_next_header = None

                            @property
                            def _common_path(self):

                                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector/ietf-dmm-fpc-pmip:next-header-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_next_header is not None:
                                    return True

                                if self.start_next_header is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector.NextHeaderRange']['meta_info']

                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-fpc-pmip:traffic-selector'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                return True

                            if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                return True

                            if self.destination_port_range is not None and self.destination_port_range._has_data():
                                return True

                            if self.ds_range is not None and self.ds_range._has_data():
                                return True

                            if self.flow_label_range is not None and self.flow_label_range._has_data():
                                return True

                            if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                return True

                            if self.next_header_range is not None and self.next_header_range._has_data():
                                return True

                            if self.protocol_range is not None and self.protocol_range._has_data():
                                return True

                            if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                return True

                            if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                return True

                            if self.source_port_range is not None and self.source_port_range._has_data():
                                return True

                            if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                return True

                            if self.ts_format is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.TrafficSelector']['meta_info']


                    class Arp(object):
                        """
                        Allocation Retention Priority
                        
                        .. attribute:: premption_capability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.Arp.PremptionCapabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: premption_vulnerability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.Arp.PremptionVulnerabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: prioirty_level
                        
                        	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                        	**type**\:  int
                        
                        	**range:** 0..15
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.premption_capability = None
                            self.premption_vulnerability = None
                            self.prioirty_level = None

                        class PremptionCapabilityEnum(Enum):
                            """
                            PremptionCapabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                            service data flow can get resources that were already

                            assigned to another service data flow with a lower priority

                            level.  The following values are defined\:

                             Enabled (0)\: This value indicates that the service data flow

                             is allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.

                             Disabled (1)\: This value indicates that the service data flow

                             is not allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.  The values

                             (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.Arp.PremptionCapabilityEnum']


                        class PremptionVulnerabilityEnum(Enum):
                            """
                            PremptionVulnerabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                             service data flow can lose the resources assigned to it in

                             order to admit a service data flow with a higher priority

                             level.  The following values are defined\:

                               Enabled (0)\: This value indicates that the resources

                               assigned to the IP data flow can be preempted and

                               allocated to a service data flow with a higher

                               priority level.

                               Disabled (1)\: This value indicates that the resources

                               assigned to the IP data flow shall not be preempted and

                               allocated to a service data flow with a higher priority

                               level.  The values (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.Arp.PremptionVulnerabilityEnum']


                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-threegpp:arp'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.premption_capability is not None:
                                return True

                            if self.premption_vulnerability is not None:
                                return True

                            if self.prioirty_level is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters.Arp']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.agg_max_dl is not None:
                            return True

                        if self.agg_max_ul is not None:
                            return True

                        if self.apn_ambr is not None:
                            return True

                        if self.arp is not None and self.arp._has_data():
                            return True

                        if self.attributetype is not None:
                            return True

                        if self.gbr is not None:
                            return True

                        if self.gbr_dl is not None:
                            return True

                        if self.gbr_ul is not None:
                            return True

                        if self.mbr is not None:
                            return True

                        if self.per_mn_agg_max_dl is not None:
                            return True

                        if self.per_mn_agg_max_ul is not None:
                            return True

                        if self.per_session_agg_max_dl is not None and self.per_session_agg_max_dl._has_data():
                            return True

                        if self.per_session_agg_max_ul is not None and self.per_session_agg_max_ul._has_data():
                            return True

                        if self.premption_capability is not None:
                            return True

                        if self.premption_vulnerability is not None:
                            return True

                        if self.prioirty_level is not None:
                            return True

                        if self.qci is not None:
                            return True

                        if self.qos_type is not None:
                            return True

                        if self.traffic_selector is not None and self.traffic_selector._has_data():
                            return True

                        if self.ue_ambr is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.QosProfileParameters']['meta_info']


                class DpnParameters(object):
                    """
                    DPN Parameters
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:dpn-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.DpnParameters']['meta_info']


                class VendorParameters(object):
                    """
                    Vendor Parameters
                    
                    .. attribute:: vendor_id  <key>
                    
                    	Vendor ID
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: vendor_type  <key>
                    
                    	Attribute Type
                    	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                    
                    .. attribute:: empty_type
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.vendor_id = None
                        self.vendor_type = None
                        self.empty_type = None

                    @property
                    def _common_path(self):
                        if self.vendor_id is None:
                            raise YPYModelError('Key property vendor_id is None')
                        if self.vendor_type is None:
                            raise YPYModelError('Key property vendor_type is None')

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.vendor_id is not None:
                            return True

                        if self.vendor_type is not None:
                            return True

                        if self.empty_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Dl.VendorParameters']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                        return True

                    if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                        return True

                    if self.mtu_size is not None:
                        return True

                    if self.nexthop is not None and self.nexthop._has_data():
                        return True

                    if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                        return True

                    if self.tunnel_local_address is not None:
                        return True

                    if self.tunnel_remote_address is not None:
                        return True

                    if self.vendor_parameters is not None:
                        for child_ref in self.vendor_parameters:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureRpc.Input.Contexts.Dl']['meta_info']


            class Dpns(object):
                """
                DPNs
                
                .. attribute:: direction  <key>
                
                	Direction
                	**type**\:   :py:class:`FpcDirectionEnum <ydk.models.ietf.ietf_dmm_fpc.FpcDirectionEnum>`
                
                	**mandatory**\: True
                
                .. attribute:: dpn_id  <key>
                
                	DPN
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: dpn_parameters
                
                	DPN Parameters
                	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.DpnParameters>`
                
                .. attribute:: mobility_tunnel_parameters
                
                	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters>`
                
                .. attribute:: mtu_size
                
                	MTU size
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nexthop
                
                	Next Hop
                	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.Nexthop>`
                
                .. attribute:: qos_profile_parameters
                
                	QoS Parameters
                	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.QosProfileParameters>`
                
                .. attribute:: tunnel_local_address
                
                	endpoint address of the DPN which a gent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: tunnel_remote_address
                
                	endpoint address of the DPN which agent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: vendor_parameters
                
                	Vendor Parameters
                	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.VendorParameters>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.direction = None
                    self.dpn_id = None
                    self.dpn_parameters = ConfigureRpc.Input.Contexts.Dpns.DpnParameters()
                    self.dpn_parameters.parent = self
                    self.mobility_tunnel_parameters = ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters()
                    self.mobility_tunnel_parameters.parent = self
                    self.mtu_size = None
                    self.nexthop = ConfigureRpc.Input.Contexts.Dpns.Nexthop()
                    self.nexthop.parent = self
                    self.qos_profile_parameters = ConfigureRpc.Input.Contexts.Dpns.QosProfileParameters()
                    self.qos_profile_parameters.parent = self
                    self.tunnel_local_address = None
                    self.tunnel_remote_address = None
                    self.vendor_parameters = YList()
                    self.vendor_parameters.parent = self
                    self.vendor_parameters.name = 'vendor_parameters'


                class MobilityTunnelParameters(object):
                    """
                    Specifies profile specific lylebe551144 tunnel
                    parameters to the DPN which the agent exists. The
                    profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                    ietf\-pmip profile, or new profile if anyone will define
                    it.
                    
                    .. attribute:: destination_address_range_v4
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV4>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: destination_address_range_v6
                    
                    	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV6>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: destination_port_range
                    
                    	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                    	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.DestinationPortRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: ds_range
                    
                    	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                    	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.DsRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: flow_label_range
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                    	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.FlowLabelRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: ipsec_spi_range
                    
                    	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                    	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.IpsecSpiRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: key
                    
                    	GRE\_KEY
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: next_header_range
                    
                    	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                    	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.NextHeaderRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: none
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: packet_filters
                    
                    	List of Packet Filters
                    	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.PacketFilters>`
                    
                    .. attribute:: protocol_range
                    
                    	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                    	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.ProtocolRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: selector_reference
                    
                    	Pre\-configured selector
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: source_address_range_v4
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV4>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: source_address_range_v6
                    
                    	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                    	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV6>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: source_port_range
                    
                    	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                    	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.SourcePortRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: tft_reference
                    
                    	Pre\-configured TFT
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: traffic_class_range
                    
                    	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                    	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.TrafficClassRange>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: ts_format
                    
                    	Traffic Selector Format
                    	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                    
                    .. attribute:: tunnel_identifier
                    
                    	Tunnel Endpoint IDentifier (TEID)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: tunnel_type
                    
                    	3GPP Tunnel Subtype
                    	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                    
                    .. attribute:: type
                    
                    	PMIP Mobility
                    	**type**\:   :py:class:`PmipTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipTunnelTypeIdentity>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.destination_address_range_v4 = None
                        self.destination_address_range_v6 = None
                        self.destination_port_range = None
                        self.ds_range = None
                        self.flow_label_range = None
                        self.ipsec_spi_range = None
                        self.key = None
                        self.next_header_range = None
                        self.none = None
                        self.packet_filters = YList()
                        self.packet_filters.parent = self
                        self.packet_filters.name = 'packet_filters'
                        self.protocol_range = None
                        self.selector_reference = None
                        self.source_address_range_v4 = None
                        self.source_address_range_v6 = None
                        self.source_port_range = None
                        self.tft_reference = None
                        self.traffic_class_range = None
                        self.ts_format = None
                        self.tunnel_identifier = None
                        self.tunnel_type = None
                        self.type = None


                    class IpsecSpiRange(object):
                        """
                        Inclusive range representing IPSec Security Parameter
                        Indices to be used. When only start\-spi is present, it
                        represents a single spi.
                        
                        .. attribute:: end_spi
                        
                        	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: start_spi
                        
                        	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_spi = None
                            self.start_spi = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_spi is not None:
                                return True

                            if self.start_spi is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.IpsecSpiRange']['meta_info']


                    class SourcePortRange(object):
                        """
                        Inclusive range representing source ports to be used.
                        When only start\-port is present, it represents a single
                              port.
                        
                        .. attribute:: end_port
                        
                        	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: start_port
                        
                        	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_port = None
                            self.start_port = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_port is not None:
                                return True

                            if self.start_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.SourcePortRange']['meta_info']


                    class DestinationPortRange(object):
                        """
                        Inclusive range representing destination ports to be used.
                        When only start\-port is present, it represents a single
                        port.
                        
                        .. attribute:: end_port
                        
                        	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: start_port
                        
                        	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_port = None
                            self.start_port = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_port is not None:
                                return True

                            if self.start_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.DestinationPortRange']['meta_info']


                    class SourceAddressRangeV4(object):
                        """
                        Inclusive range representing IPv4 addresses to be used. When
                        only start\-address is present, it represents a single
                        address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV4']['meta_info']


                    class DestinationAddressRangeV4(object):
                        """
                        Inclusive range representing IPv4 addresses to be used.
                        When only start\-address is present, it represents a
                        single address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV4']['meta_info']


                    class DsRange(object):
                        """
                        Inclusive range representing DiffServ Codepoints to be used.
                        When only start\-ds is present, it represents a single
                        Codepoint.
                        
                        .. attribute:: end_ds
                        
                        	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: start_ds
                        
                        	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_ds = None
                            self.start_ds = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_ds is not None:
                                return True

                            if self.start_ds is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.DsRange']['meta_info']


                    class ProtocolRange(object):
                        """
                        Inclusive range representing IP protocol(s) to be used. When
                        only start\-protocol is present, it represents a single
                        protocol.
                        
                        .. attribute:: end_protocol
                        
                        	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: start_protocol
                        
                        	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_protocol = None
                            self.start_protocol = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_protocol is not None:
                                return True

                            if self.start_protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.ProtocolRange']['meta_info']


                    class SourceAddressRangeV6(object):
                        """
                        Inclusive range representing IPv6 addresses to be used.
                        When only start\-address is present, it represents a
                        single address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV6']['meta_info']


                    class DestinationAddressRangeV6(object):
                        """
                        Inclusive range representing IPv6 addresses to be used.
                        When only start\-address is present, it represents a
                        single address.
                        
                        .. attribute:: end_address
                        
                        	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: start_address
                        
                        	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_address = None
                            self.start_address = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_address is not None:
                                return True

                            if self.start_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV6']['meta_info']


                    class FlowLabelRange(object):
                        """
                        Inclusive range representing IPv4 addresses to be used. When
                        only start\-flow\-label is present, it represents a single
                        flow label.
                        
                        .. attribute:: end_flow_label
                        
                        	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: start_flow_label
                        
                        	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_flow_label = None
                            self.start_flow_label = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_flow_label is not None:
                                return True

                            if self.start_flow_label is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.FlowLabelRange']['meta_info']


                    class TrafficClassRange(object):
                        """
                        Inclusive range representing IPv4 addresses to be used. When
                        only start\-traffic\-class is present, it represents a single
                        traffic class.
                        
                        .. attribute:: end_traffic_class
                        
                        	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: start_traffic_class
                        
                        	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                        	**type**\:  int
                        
                        	**range:** 0..63
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_traffic_class = None
                            self.start_traffic_class = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_traffic_class is not None:
                                return True

                            if self.start_traffic_class is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.TrafficClassRange']['meta_info']


                    class NextHeaderRange(object):
                        """
                        Inclusive range representing Next Headers to be used. When
                        only start\-next\-header is present, it represents a
                        single Next Header.
                        
                        .. attribute:: end_next_header
                        
                        	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: start_next_header
                        
                        	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'fpc-pmip'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self._is_presence = True
                            self.end_next_header = None
                            self.start_next_header = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self._is_presence:
                                return True
                            if self.end_next_header is not None:
                                return True

                            if self.start_next_header is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.NextHeaderRange']['meta_info']


                    class PacketFilters(object):
                        """
                        List of Packet Filters
                        
                        .. attribute:: identifier  <key>
                        
                        	Filter Identifier
                        	**type**\:  int
                        
                        	**range:** 1..15
                        
                        .. attribute:: contents
                        
                        	Filter Contents
                        	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.PacketFilters.Contents>`
                        
                        .. attribute:: direction
                        
                        	Filter Direction
                        	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                        
                        .. attribute:: evaluation_precedence
                        
                        	Evaluation Precedence
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.identifier = None
                            self.contents = YList()
                            self.contents.parent = self
                            self.contents.name = 'contents'
                            self.direction = None
                            self.evaluation_precedence = None


                        class Contents(object):
                            """
                            Filter Contents
                            
                            .. attribute:: component_type_identifier  <key>
                            
                            	Component Type
                            	**type**\:  int
                            
                            	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                            
                            .. attribute:: flow_label
                            
                            	Flow Label
                            	**type**\:  list of int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: ipsec_index
                            
                            	IPSec Index
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv4_ipv6_remote
                            
                            	Ipv4 Ipv6 remote address
                            	**type**\: one of the below types:
                            
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            .. attribute:: ipv4_local
                            
                            	IPv4 Local Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: ipv6_prefix_local
                            
                            	IPv6 Local Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: ipv6_prefix_remote
                            
                            	IPv6 Remote Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: local_port
                            
                            	Local Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_hi
                            
                            	Local Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_lo
                            
                            	Local Port Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: next_header
                            
                            	Next Header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: remote_port
                            
                            	Remote Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_hi
                            
                            	Remote Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_lo
                            
                            	Remote Por Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_class
                            
                            	Traffic Class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_hi
                            
                            	Traffic Class Max Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_lo
                            
                            	Traffic Class Min Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.component_type_identifier = None
                                self.flow_label = YLeafList()
                                self.flow_label.parent = self
                                self.flow_label.name = 'flow_label'
                                self.ipsec_index = None
                                self.ipv4_ipv6_remote = None
                                self.ipv4_local = None
                                self.ipv6_prefix_local = None
                                self.ipv6_prefix_remote = None
                                self.local_port = None
                                self.local_port_hi = None
                                self.local_port_lo = None
                                self.next_header = None
                                self.remote_port = None
                                self.remote_port_hi = None
                                self.remote_port_lo = None
                                self.traffic_class = None
                                self.traffic_class_hi = None
                                self.traffic_class_lo = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.component_type_identifier is None:
                                    raise YPYModelError('Key property component_type_identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.component_type_identifier is not None:
                                    return True

                                if self.flow_label is not None:
                                    for child in self.flow_label:
                                        if child is not None:
                                            return True

                                if self.ipsec_index is not None:
                                    return True

                                if self.ipv4_ipv6_remote is not None:
                                    return True

                                if self.ipv4_local is not None:
                                    return True

                                if self.ipv6_prefix_local is not None:
                                    return True

                                if self.ipv6_prefix_remote is not None:
                                    return True

                                if self.local_port is not None:
                                    return True

                                if self.local_port_hi is not None:
                                    return True

                                if self.local_port_lo is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.remote_port is not None:
                                    return True

                                if self.remote_port_hi is not None:
                                    return True

                                if self.remote_port_lo is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.traffic_class_hi is not None:
                                    return True

                                if self.traffic_class_lo is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.identifier is None:
                                raise YPYModelError('Key property identifier is None')

                            return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.identifier is not None:
                                return True

                            if self.contents is not None:
                                for child_ref in self.contents:
                                    if child_ref._has_data():
                                        return True

                            if self.direction is not None:
                                return True

                            if self.evaluation_precedence is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters.PacketFilters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                            return True

                        if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                            return True

                        if self.destination_port_range is not None and self.destination_port_range._has_data():
                            return True

                        if self.ds_range is not None and self.ds_range._has_data():
                            return True

                        if self.flow_label_range is not None and self.flow_label_range._has_data():
                            return True

                        if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                            return True

                        if self.key is not None:
                            return True

                        if self.next_header_range is not None and self.next_header_range._has_data():
                            return True

                        if self.none is not None:
                            return True

                        if self.packet_filters is not None:
                            for child_ref in self.packet_filters:
                                if child_ref._has_data():
                                    return True

                        if self.protocol_range is not None and self.protocol_range._has_data():
                            return True

                        if self.selector_reference is not None:
                            return True

                        if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                            return True

                        if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                            return True

                        if self.source_port_range is not None and self.source_port_range._has_data():
                            return True

                        if self.tft_reference is not None:
                            return True

                        if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                            return True

                        if self.ts_format is not None:
                            return True

                        if self.tunnel_identifier is not None:
                            return True

                        if self.tunnel_type is not None:
                            return True

                        if self.type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.MobilityTunnelParameters']['meta_info']


                class Nexthop(object):
                    """
                    Next Hop
                    
                    .. attribute:: if_index
                    
                    	If (interface) Value
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: ip
                    
                    	IP Value
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: lsp
                    
                    	MPLS Value
                    	**type**\:  int
                    
                    	**range:** 0..1048575
                    
                    .. attribute:: macaddress
                    
                    	MAC Address Value
                    	**type**\:  str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    .. attribute:: nexthop_type
                    
                    	Nexthop Type
                    	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                    
                    .. attribute:: servicepath
                    
                    	Service Path Value
                    	**type**\:  int
                    
                    	**range:** 0..33554431
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.if_index = None
                        self.ip = None
                        self.lsp = None
                        self.macaddress = None
                        self.nexthop_type = None
                        self.servicepath = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.if_index is not None:
                            return True

                        if self.ip is not None:
                            return True

                        if self.lsp is not None:
                            return True

                        if self.macaddress is not None:
                            return True

                        if self.nexthop_type is not None:
                            return True

                        if self.servicepath is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.Nexthop']['meta_info']


                class QosProfileParameters(object):
                    """
                    QoS Parameters
                    
                    .. attribute:: qos_type
                    
                    	the profile type
                    	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.qos_type = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.qos_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.QosProfileParameters']['meta_info']


                class DpnParameters(object):
                    """
                    DPN Parameters
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.DpnParameters']['meta_info']


                class VendorParameters(object):
                    """
                    Vendor Parameters
                    
                    .. attribute:: vendor_id  <key>
                    
                    	Vendor ID
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: vendor_type  <key>
                    
                    	Attribute Type
                    	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                    
                    .. attribute:: empty_type
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.vendor_id = None
                        self.vendor_type = None
                        self.empty_type = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.vendor_id is None:
                            raise YPYModelError('Key property vendor_id is None')
                        if self.vendor_type is None:
                            raise YPYModelError('Key property vendor_type is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.vendor_id is not None:
                            return True

                        if self.vendor_type is not None:
                            return True

                        if self.empty_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns.VendorParameters']['meta_info']

                @property
                def _common_path(self):
                    if self.direction is None:
                        raise YPYModelError('Key property direction is None')
                    if self.dpn_id is None:
                        raise YPYModelError('Key property dpn_id is None')

                    return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dpns[ietf-dmm-fpc:direction = ' + str(self.direction) + '][ietf-dmm-fpc:dpn-id = ' + str(self.dpn_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.direction is not None:
                        return True

                    if self.dpn_id is not None:
                        return True

                    if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                        return True

                    if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                        return True

                    if self.mtu_size is not None:
                        return True

                    if self.nexthop is not None and self.nexthop._has_data():
                        return True

                    if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                        return True

                    if self.tunnel_local_address is not None:
                        return True

                    if self.tunnel_remote_address is not None:
                        return True

                    if self.vendor_parameters is not None:
                        for child_ref in self.vendor_parameters:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureRpc.Input.Contexts.Dpns']['meta_info']


            class Instructions(object):
                """
                Instructions
                
                .. attribute:: instr_3gpp_mob
                
                	3GPP Specific Command Set
                	**type**\:   :py:class:`ThreegppInstr <ydk.models.ietf.ietf_dmm_threegpp.ThreegppInstr>`
                
                .. attribute:: instr_pmip
                
                	PMIP Instructions
                	**type**\:   :py:class:`PmipInstr <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipInstr>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.instr_3gpp_mob = ThreegppInstr()
                    self.instr_pmip = PmipInstr()

                @property
                def _common_path(self):

                    return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts/ietf-dmm-fpc:instructions'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.instr_3gpp_mob is not None:
                        if self.instr_3gpp_mob._has_data():
                            return True

                    if self.instr_pmip is not None:
                        if self.instr_pmip._has_data():
                            return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureRpc.Input.Contexts.Instructions']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:contexts'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.context_id is not None:
                    return True

                if self.delegated_ip_prefixes is not None:
                    for child in self.delegated_ip_prefixes:
                        if child is not None:
                            return True

                if self.dl is not None and self.dl._has_data():
                    return True

                if self.dpn_group is not None:
                    return True

                if self.dpns is not None:
                    for child_ref in self.dpns:
                        if child_ref._has_data():
                            return True

                if self.ebi is not None:
                    return True

                if self.imsi is not None:
                    return True

                if self.instructions is not None and self.instructions._has_data():
                    return True

                if self.lbi is not None:
                    return True

                if self.parent_context is not None:
                    return True

                if self.ul is not None and self.ul._has_data():
                    return True

                if self.vports is not None:
                    for child in self.vports:
                        if child is not None:
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Input.Contexts']['meta_info']


        class PolicyGroups(object):
            """
            Policy Groups
            
            .. attribute:: policy_group_id  <key>
            
            	Policy Group ID
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: policies
            
            	Policies
            	**type**\: one of the below types:
            
            	**type**\:  list of int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.policy_group_id = None
                self.policies = YLeafList()
                self.policies.parent = self
                self.policies.name = 'policies'

            @property
            def _common_path(self):
                if self.policy_group_id is None:
                    raise YPYModelError('Key property policy_group_id is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:policy-groups[ietf-dmm-fpc:policy-group-id = ' + str(self.policy_group_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.policy_group_id is not None:
                    return True

                if self.policies is not None:
                    for child in self.policies:
                        if child is not None:
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Input.PolicyGroups']['meta_info']


        class Policies(object):
            """
            Policies
            
            .. attribute:: policy_id  <key>
            
            	Policy Id
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: rules
            
            	Rules
            	**type**\: list of    :py:class:`Rules <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Policies.Rules>`
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.policy_id = None
                self.rules = YList()
                self.rules.parent = self
                self.rules.name = 'rules'


            class Rules(object):
                """
                Rules
                
                .. attribute:: order  <key>
                
                	Rule Order
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: actions
                
                	Actions
                	**type**\: list of    :py:class:`Actions <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Policies.Rules.Actions>`
                
                .. attribute:: descriptors
                
                	Descriptors
                	**type**\: list of    :py:class:`Descriptors <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Input.Policies.Rules.Descriptors>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.order = None
                    self.actions = YList()
                    self.actions.parent = self
                    self.actions.name = 'actions'
                    self.descriptors = YList()
                    self.descriptors.parent = self
                    self.descriptors.name = 'descriptors'


                class Descriptors(object):
                    """
                    Descriptors
                    
                    .. attribute:: descriptor_id  <key>
                    
                    	Descriptor Id
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: direction
                    
                    	Direction
                    	**type**\:   :py:class:`FpcDirectionEnum <ydk.models.ietf.ietf_dmm_fpc.FpcDirectionEnum>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.descriptor_id = None
                        self.direction = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.descriptor_id is None:
                            raise YPYModelError('Key property descriptor_id is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:descriptors[ietf-dmm-fpc:descriptor-id = ' + str(self.descriptor_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.descriptor_id is not None:
                            return True

                        if self.direction is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Policies.Rules.Descriptors']['meta_info']


                class Actions(object):
                    """
                    Actions
                    
                    .. attribute:: action_id  <key>
                    
                    	Action Identifier
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: action_order
                    
                    	Action Execution Order
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.action_id = None
                        self.action_order = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.action_id is None:
                            raise YPYModelError('Key property action_id is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:actions[ietf-dmm-fpc:action-id = ' + str(self.action_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.action_id is not None:
                            return True

                        if self.action_order is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Input.Policies.Rules.Actions']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.order is None:
                        raise YPYModelError('Key property order is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:rules[ietf-dmm-fpc:order = ' + str(self.order) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.order is not None:
                        return True

                    if self.actions is not None:
                        for child_ref in self.actions:
                            if child_ref._has_data():
                                return True

                    if self.descriptors is not None:
                        for child_ref in self.descriptors:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureRpc.Input.Policies.Rules']['meta_info']

            @property
            def _common_path(self):
                if self.policy_id is None:
                    raise YPYModelError('Key property policy_id is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:policies[ietf-dmm-fpc:policy-id = ' + str(self.policy_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.policy_id is not None:
                    return True

                if self.rules is not None:
                    for child_ref in self.rules:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Input.Policies']['meta_info']


        class Descriptors(object):
            """
            Descriptors
            
            .. attribute:: descriptor_id  <key>
            
            	Descriptor Id
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: all_traffic
            
            	Empty Value
            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: descriptor_type
            
            	Descriptor Type
            	**type**\:   :py:class:`FpcDescriptorTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcDescriptorTypeIdentity>`
            
            	**mandatory**\: True
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.descriptor_id = None
                self.all_traffic = None
                self.descriptor_type = None

            @property
            def _common_path(self):
                if self.descriptor_id is None:
                    raise YPYModelError('Key property descriptor_id is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:descriptors[ietf-dmm-fpc:descriptor-id = ' + str(self.descriptor_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.descriptor_id is not None:
                    return True

                if self.all_traffic is not None:
                    return True

                if self.descriptor_type is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Input.Descriptors']['meta_info']


        class Actions(object):
            """
            Actions
            
            .. attribute:: action_id  <key>
            
            	Action Identifier
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: action_type
            
            	Action Type
            	**type**\:   :py:class:`FpcActionTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcActionTypeIdentity>`
            
            	**mandatory**\: True
            
            .. attribute:: drop
            
            	Empty Value
            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.action_id = None
                self.action_type = None
                self.drop = None

            @property
            def _common_path(self):
                if self.action_id is None:
                    raise YPYModelError('Key property action_id is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:actions[ietf-dmm-fpc:action-id = ' + str(self.action_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.action_id is not None:
                    return True

                if self.action_type is not None:
                    return True

                if self.drop is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Input.Actions']['meta_info']


        class Targets(object):
            """
            List of Targets
            
            .. attribute:: target  <key>
            
            	Target Id
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: dpn_id
            
            	DPN Id
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.target = None
                self.dpn_id = None

            @property
            def _common_path(self):
                if self.target is None:
                    raise YPYModelError('Key property target is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input/ietf-dmm-fpc:targets[ietf-dmm-fpc:target = ' + str(self.target) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.target is not None:
                    return True

                if self.dpn_id is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Input.Targets']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.actions is not None:
                for child_ref in self.actions:
                    if child_ref._has_data():
                        return True

            if self.admin_state is not None:
                return True

            if self.client_id is not None:
                return True

            if self.clones is not None:
                for child_ref in self.clones:
                    if child_ref._has_data():
                        return True

            if self.contexts is not None:
                for child_ref in self.contexts:
                    if child_ref._has_data():
                        return True

            if self.delay is not None:
                return True

            if self.descriptors is not None:
                for child_ref in self.descriptors:
                    if child_ref._has_data():
                        return True

            if self.instructions is not None and self.instructions._has_data():
                return True

            if self.op_id is not None:
                return True

            if self.op_ref_scope is not None:
                return True

            if self.op_type is not None:
                return True

            if self.policies is not None:
                for child_ref in self.policies:
                    if child_ref._has_data():
                        return True

            if self.policy_groups is not None:
                for child_ref in self.policy_groups:
                    if child_ref._has_data():
                        return True

            if self.ports is not None:
                for child_ref in self.ports:
                    if child_ref._has_data():
                        return True

            if self.session_state is not None:
                return True

            if self.targets is not None:
                for child_ref in self.targets:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['ConfigureRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: actions
        
        	Actions
        	**type**\: list of    :py:class:`Actions <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Actions>`
        
        .. attribute:: contexts
        
        	Contexts
        	**type**\: list of    :py:class:`Contexts <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts>`
        
        .. attribute:: descriptors
        
        	Descriptors
        	**type**\: list of    :py:class:`Descriptors <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Descriptors>`
        
        .. attribute:: error_info
        
        	Error Detail
        	**type**\:  str
        
        	**length:** 1..1024
        
        .. attribute:: error_type_id
        
        	Error ID
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: op_id
        
        	Operation Identifier
        	**type**\:  int
        
        	**range:** 0..18446744073709551615
        
        .. attribute:: policies
        
        	Policies
        	**type**\: list of    :py:class:`Policies <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Policies>`
        
        .. attribute:: policy_groups
        
        	Policy Groups
        	**type**\: list of    :py:class:`PolicyGroups <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.PolicyGroups>`
        
        .. attribute:: ports
        
        	Ports
        	**type**\: list of    :py:class:`Ports <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Ports>`
        
        .. attribute:: result
        
        	Result
        	**type**\:   :py:class:`ResultEnum <ydk.models.ietf.ietf_dmm_fpc.ResultEnum>`
        
        .. attribute:: targets
        
        	List of Targets
        	**type**\: list of    :py:class:`Targets <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Targets>`
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.actions = YList()
            self.actions.parent = self
            self.actions.name = 'actions'
            self.contexts = YList()
            self.contexts.parent = self
            self.contexts.name = 'contexts'
            self.descriptors = YList()
            self.descriptors.parent = self
            self.descriptors.name = 'descriptors'
            self.error_info = None
            self.error_type_id = None
            self.op_id = None
            self.policies = YList()
            self.policies.parent = self
            self.policies.name = 'policies'
            self.policy_groups = YList()
            self.policy_groups.parent = self
            self.policy_groups.name = 'policy_groups'
            self.ports = YList()
            self.ports.parent = self
            self.ports.name = 'ports'
            self.result = None
            self.targets = YList()
            self.targets.parent = self
            self.targets.name = 'targets'


        class Ports(object):
            """
            Ports
            
            .. attribute:: policy_groups
            
            	Policy Groups
            	**type**\: one of the below types:
            
            	**type**\:  list of int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            .. attribute:: vport_id
            
            	Port ID
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.policy_groups = YLeafList()
                self.policy_groups.parent = self
                self.policy_groups.name = 'policy_groups'
                self.vport_id = None

            @property
            def _common_path(self):

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:ports'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.policy_groups is not None:
                    for child in self.policy_groups:
                        if child is not None:
                            return True

                if self.vport_id is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Output.Ports']['meta_info']


        class Contexts(object):
            """
            Contexts
            
            .. attribute:: context_id
            
            	Context ID
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: delegated_ip_prefixes
            
            	Delegated Prefix(es)
            	**type**\: one of the below types:
            
            	**type**\:  list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
            
            
            ----
            	**type**\:  list of str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
            
            
            ----
            .. attribute:: dl
            
            	Downlink
            	**type**\:   :py:class:`Dl <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl>`
            
            .. attribute:: dpn_group
            
            	DPN Group
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: dpns
            
            	DPNs
            	**type**\: list of    :py:class:`Dpns <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dpns>`
            
            .. attribute:: ebi
            
            	EUTRAN Bearere Identifier (EBI)
            	**type**\:  int
            
            	**range:** 0..15
            
            .. attribute:: imsi
            
            	IMSI
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: instructions
            
            	Instructions
            	**type**\:   :py:class:`Instructions <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Instructions>`
            
            .. attribute:: lbi
            
            	Linked Bearer Identifier (LBI)
            	**type**\:  int
            
            	**range:** 0..15
            
            .. attribute:: parent_context
            
            	Parent Context
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: ul
            
            	lylebe551144
            	**type**\:   :py:class:`Ul <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul>`
            
            .. attribute:: vports
            
            	Vports
            	**type**\: one of the below types:
            
            	**type**\:  list of int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.context_id = None
                self.delegated_ip_prefixes = YLeafList()
                self.delegated_ip_prefixes.parent = self
                self.delegated_ip_prefixes.name = 'delegated_ip_prefixes'
                self.dl = ConfigureRpc.Output.Contexts.Dl()
                self.dl.parent = self
                self.dpn_group = None
                self.dpns = YList()
                self.dpns.parent = self
                self.dpns.name = 'dpns'
                self.ebi = None
                self.imsi = None
                self.instructions = ConfigureRpc.Output.Contexts.Instructions()
                self.instructions.parent = self
                self.lbi = None
                self.parent_context = None
                self.ul = ConfigureRpc.Output.Contexts.Ul()
                self.ul.parent = self
                self.vports = YLeafList()
                self.vports.parent = self
                self.vports.name = 'vports'


            class Ul(object):
                """
                lylebe551144
                
                .. attribute:: dpn_parameters
                
                	DPN Parameters
                	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul.DpnParameters>`
                
                .. attribute:: mobility_tunnel_parameters
                
                	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul.MobilityTunnelParameters>`
                
                .. attribute:: mtu_size
                
                	MTU size
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nexthop
                
                	Next Hop
                	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul.Nexthop>`
                
                .. attribute:: qos_profile_parameters
                
                	QoS Parameters
                	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul.QosProfileParameters>`
                
                .. attribute:: tunnel_local_address
                
                	endpoint address of the DPN which a gent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: tunnel_remote_address
                
                	endpoint address of the DPN which agent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: vendor_parameters
                
                	Vendor Parameters
                	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul.VendorParameters>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.dpn_parameters = ConfigureRpc.Output.Contexts.Ul.DpnParameters()
                    self.dpn_parameters.parent = self
                    self.mobility_tunnel_parameters = ConfigureRpc.Output.Contexts.Ul.MobilityTunnelParameters()
                    self.mobility_tunnel_parameters.parent = self
                    self.mtu_size = None
                    self.nexthop = ConfigureRpc.Output.Contexts.Ul.Nexthop()
                    self.nexthop.parent = self
                    self.qos_profile_parameters = ConfigureRpc.Output.Contexts.Ul.QosProfileParameters()
                    self.qos_profile_parameters.parent = self
                    self.tunnel_local_address = None
                    self.tunnel_remote_address = None
                    self.vendor_parameters = YList()
                    self.vendor_parameters.parent = self
                    self.vendor_parameters.name = 'vendor_parameters'


                class MobilityTunnelParameters(object):
                    """
                    Specifies profile specific lylebe551144 tunnel
                    parameters to the DPN which the agent exists. The
                    profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                    ietf\-pmip profile, or new profile if anyone will define
                    it.
                    
                    .. attribute:: none
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: packet_filters
                    
                    	List of Packet Filters
                    	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul.MobilityTunnelParameters.PacketFilters>`
                    
                    .. attribute:: tft_reference
                    
                    	Pre\-configured TFT
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: tunnel_identifier
                    
                    	Tunnel Endpoint IDentifier (TEID)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: tunnel_type
                    
                    	3GPP Tunnel Subtype
                    	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.none = None
                        self.packet_filters = YList()
                        self.packet_filters.parent = self
                        self.packet_filters.name = 'packet_filters'
                        self.tft_reference = None
                        self.tunnel_identifier = None
                        self.tunnel_type = None


                    class PacketFilters(object):
                        """
                        List of Packet Filters
                        
                        .. attribute:: identifier  <key>
                        
                        	Filter Identifier
                        	**type**\:  int
                        
                        	**range:** 1..15
                        
                        .. attribute:: contents
                        
                        	Filter Contents
                        	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul.MobilityTunnelParameters.PacketFilters.Contents>`
                        
                        .. attribute:: direction
                        
                        	Filter Direction
                        	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                        
                        .. attribute:: evaluation_precedence
                        
                        	Evaluation Precedence
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.identifier = None
                            self.contents = YList()
                            self.contents.parent = self
                            self.contents.name = 'contents'
                            self.direction = None
                            self.evaluation_precedence = None


                        class Contents(object):
                            """
                            Filter Contents
                            
                            .. attribute:: component_type_identifier  <key>
                            
                            	Component Type
                            	**type**\:  int
                            
                            	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                            
                            .. attribute:: flow_label
                            
                            	Flow Label
                            	**type**\:  list of int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: ipsec_index
                            
                            	IPSec Index
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv4_ipv6_remote
                            
                            	Ipv4 Ipv6 remote address
                            	**type**\: one of the below types:
                            
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            .. attribute:: ipv4_local
                            
                            	IPv4 Local Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: ipv6_prefix_local
                            
                            	IPv6 Local Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: ipv6_prefix_remote
                            
                            	IPv6 Remote Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: local_port
                            
                            	Local Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_hi
                            
                            	Local Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_lo
                            
                            	Local Port Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: next_header
                            
                            	Next Header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: remote_port
                            
                            	Remote Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_hi
                            
                            	Remote Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_lo
                            
                            	Remote Por Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_class
                            
                            	Traffic Class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_hi
                            
                            	Traffic Class Max Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_lo
                            
                            	Traffic Class Min Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.component_type_identifier = None
                                self.flow_label = YLeafList()
                                self.flow_label.parent = self
                                self.flow_label.name = 'flow_label'
                                self.ipsec_index = None
                                self.ipv4_ipv6_remote = None
                                self.ipv4_local = None
                                self.ipv6_prefix_local = None
                                self.ipv6_prefix_remote = None
                                self.local_port = None
                                self.local_port_hi = None
                                self.local_port_lo = None
                                self.next_header = None
                                self.remote_port = None
                                self.remote_port_hi = None
                                self.remote_port_lo = None
                                self.traffic_class = None
                                self.traffic_class_hi = None
                                self.traffic_class_lo = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.component_type_identifier is None:
                                    raise YPYModelError('Key property component_type_identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.component_type_identifier is not None:
                                    return True

                                if self.flow_label is not None:
                                    for child in self.flow_label:
                                        if child is not None:
                                            return True

                                if self.ipsec_index is not None:
                                    return True

                                if self.ipv4_ipv6_remote is not None:
                                    return True

                                if self.ipv4_local is not None:
                                    return True

                                if self.ipv6_prefix_local is not None:
                                    return True

                                if self.ipv6_prefix_remote is not None:
                                    return True

                                if self.local_port is not None:
                                    return True

                                if self.local_port_hi is not None:
                                    return True

                                if self.local_port_lo is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.remote_port is not None:
                                    return True

                                if self.remote_port_hi is not None:
                                    return True

                                if self.remote_port_lo is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.traffic_class_hi is not None:
                                    return True

                                if self.traffic_class_lo is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Output.Contexts.Ul.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                        @property
                        def _common_path(self):
                            if self.identifier is None:
                                raise YPYModelError('Key property identifier is None')

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.identifier is not None:
                                return True

                            if self.contents is not None:
                                for child_ref in self.contents:
                                    if child_ref._has_data():
                                        return True

                            if self.direction is not None:
                                return True

                            if self.evaluation_precedence is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Output.Contexts.Ul.MobilityTunnelParameters.PacketFilters']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:mobility-tunnel-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.none is not None:
                            return True

                        if self.packet_filters is not None:
                            for child_ref in self.packet_filters:
                                if child_ref._has_data():
                                    return True

                        if self.tft_reference is not None:
                            return True

                        if self.tunnel_identifier is not None:
                            return True

                        if self.tunnel_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Ul.MobilityTunnelParameters']['meta_info']


                class Nexthop(object):
                    """
                    Next Hop
                    
                    .. attribute:: if_index
                    
                    	If (interface) Value
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: ip
                    
                    	IP Value
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: lsp
                    
                    	MPLS Value
                    	**type**\:  int
                    
                    	**range:** 0..1048575
                    
                    .. attribute:: macaddress
                    
                    	MAC Address Value
                    	**type**\:  str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    .. attribute:: nexthop_type
                    
                    	Nexthop Type
                    	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                    
                    .. attribute:: servicepath
                    
                    	Service Path Value
                    	**type**\:  int
                    
                    	**range:** 0..33554431
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.if_index = None
                        self.ip = None
                        self.lsp = None
                        self.macaddress = None
                        self.nexthop_type = None
                        self.servicepath = None

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:nexthop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.if_index is not None:
                            return True

                        if self.ip is not None:
                            return True

                        if self.lsp is not None:
                            return True

                        if self.macaddress is not None:
                            return True

                        if self.nexthop_type is not None:
                            return True

                        if self.servicepath is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Ul.Nexthop']['meta_info']


                class QosProfileParameters(object):
                    """
                    QoS Parameters
                    
                    .. attribute:: apn_ambr
                    
                    	Access Point Name Aggregate Max Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: arp
                    
                    	Allocation Retention Priority
                    	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul.QosProfileParameters.Arp>`
                    
                    .. attribute:: gbr
                    
                    	Guaranteed Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: mbr
                    
                    	Maximum Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: qci
                    
                    	QCI
                    	**type**\:  int
                    
                    	**range:** 1..9
                    
                    .. attribute:: qos_type
                    
                    	the profile type
                    	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                    
                    .. attribute:: ue_ambr
                    
                    	User Equipment Aggregate Max Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.apn_ambr = None
                        self.arp = ConfigureRpc.Output.Contexts.Ul.QosProfileParameters.Arp()
                        self.arp.parent = self
                        self.gbr = None
                        self.mbr = None
                        self.qci = None
                        self.qos_type = None
                        self.ue_ambr = None


                    class Arp(object):
                        """
                        Allocation Retention Priority
                        
                        .. attribute:: premption_capability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul.QosProfileParameters.Arp.PremptionCapabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: premption_vulnerability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Ul.QosProfileParameters.Arp.PremptionVulnerabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: prioirty_level
                        
                        	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                        	**type**\:  int
                        
                        	**range:** 0..15
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.premption_capability = None
                            self.premption_vulnerability = None
                            self.prioirty_level = None

                        class PremptionCapabilityEnum(Enum):
                            """
                            PremptionCapabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                            service data flow can get resources that were already

                            assigned to another service data flow with a lower priority

                            level.  The following values are defined\:

                             Enabled (0)\: This value indicates that the service data flow

                             is allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.

                             Disabled (1)\: This value indicates that the service data flow

                             is not allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.  The values

                             (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Output.Contexts.Ul.QosProfileParameters.Arp.PremptionCapabilityEnum']


                        class PremptionVulnerabilityEnum(Enum):
                            """
                            PremptionVulnerabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                             service data flow can lose the resources assigned to it in

                             order to admit a service data flow with a higher priority

                             level.  The following values are defined\:

                               Enabled (0)\: This value indicates that the resources

                               assigned to the IP data flow can be preempted and

                               allocated to a service data flow with a higher

                               priority level.

                               Disabled (1)\: This value indicates that the resources

                               assigned to the IP data flow shall not be preempted and

                               allocated to a service data flow with a higher priority

                               level.  The values (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Output.Contexts.Ul.QosProfileParameters.Arp.PremptionVulnerabilityEnum']


                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-threegpp:arp'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.premption_capability is not None:
                                return True

                            if self.premption_vulnerability is not None:
                                return True

                            if self.prioirty_level is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Output.Contexts.Ul.QosProfileParameters.Arp']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:qos-profile-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.apn_ambr is not None:
                            return True

                        if self.arp is not None and self.arp._has_data():
                            return True

                        if self.gbr is not None:
                            return True

                        if self.mbr is not None:
                            return True

                        if self.qci is not None:
                            return True

                        if self.qos_type is not None:
                            return True

                        if self.ue_ambr is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Ul.QosProfileParameters']['meta_info']


                class DpnParameters(object):
                    """
                    DPN Parameters
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:dpn-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Ul.DpnParameters']['meta_info']


                class VendorParameters(object):
                    """
                    Vendor Parameters
                    
                    .. attribute:: vendor_id  <key>
                    
                    	Vendor ID
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: vendor_type  <key>
                    
                    	Attribute Type
                    	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                    
                    .. attribute:: empty_type
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.vendor_id = None
                        self.vendor_type = None
                        self.empty_type = None

                    @property
                    def _common_path(self):
                        if self.vendor_id is None:
                            raise YPYModelError('Key property vendor_id is None')
                        if self.vendor_type is None:
                            raise YPYModelError('Key property vendor_type is None')

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.vendor_id is not None:
                            return True

                        if self.vendor_type is not None:
                            return True

                        if self.empty_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Ul.VendorParameters']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:ul'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                        return True

                    if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                        return True

                    if self.mtu_size is not None:
                        return True

                    if self.nexthop is not None and self.nexthop._has_data():
                        return True

                    if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                        return True

                    if self.tunnel_local_address is not None:
                        return True

                    if self.tunnel_remote_address is not None:
                        return True

                    if self.vendor_parameters is not None:
                        for child_ref in self.vendor_parameters:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureRpc.Output.Contexts.Ul']['meta_info']


            class Dl(object):
                """
                Downlink
                
                .. attribute:: dpn_parameters
                
                	DPN Parameters
                	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl.DpnParameters>`
                
                .. attribute:: mobility_tunnel_parameters
                
                	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl.MobilityTunnelParameters>`
                
                .. attribute:: mtu_size
                
                	MTU size
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nexthop
                
                	Next Hop
                	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl.Nexthop>`
                
                .. attribute:: qos_profile_parameters
                
                	QoS Parameters
                	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl.QosProfileParameters>`
                
                .. attribute:: tunnel_local_address
                
                	endpoint address of the DPN which a gent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: tunnel_remote_address
                
                	endpoint address of the DPN which agent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: vendor_parameters
                
                	Vendor Parameters
                	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl.VendorParameters>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.dpn_parameters = ConfigureRpc.Output.Contexts.Dl.DpnParameters()
                    self.dpn_parameters.parent = self
                    self.mobility_tunnel_parameters = ConfigureRpc.Output.Contexts.Dl.MobilityTunnelParameters()
                    self.mobility_tunnel_parameters.parent = self
                    self.mtu_size = None
                    self.nexthop = ConfigureRpc.Output.Contexts.Dl.Nexthop()
                    self.nexthop.parent = self
                    self.qos_profile_parameters = ConfigureRpc.Output.Contexts.Dl.QosProfileParameters()
                    self.qos_profile_parameters.parent = self
                    self.tunnel_local_address = None
                    self.tunnel_remote_address = None
                    self.vendor_parameters = YList()
                    self.vendor_parameters.parent = self
                    self.vendor_parameters.name = 'vendor_parameters'


                class MobilityTunnelParameters(object):
                    """
                    Specifies profile specific lylebe551144 tunnel
                    parameters to the DPN which the agent exists. The
                    profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                    ietf\-pmip profile, or new profile if anyone will define
                    it.
                    
                    .. attribute:: none
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: packet_filters
                    
                    	List of Packet Filters
                    	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl.MobilityTunnelParameters.PacketFilters>`
                    
                    .. attribute:: tft_reference
                    
                    	Pre\-configured TFT
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: tunnel_identifier
                    
                    	Tunnel Endpoint IDentifier (TEID)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: tunnel_type
                    
                    	3GPP Tunnel Subtype
                    	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.none = None
                        self.packet_filters = YList()
                        self.packet_filters.parent = self
                        self.packet_filters.name = 'packet_filters'
                        self.tft_reference = None
                        self.tunnel_identifier = None
                        self.tunnel_type = None


                    class PacketFilters(object):
                        """
                        List of Packet Filters
                        
                        .. attribute:: identifier  <key>
                        
                        	Filter Identifier
                        	**type**\:  int
                        
                        	**range:** 1..15
                        
                        .. attribute:: contents
                        
                        	Filter Contents
                        	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl.MobilityTunnelParameters.PacketFilters.Contents>`
                        
                        .. attribute:: direction
                        
                        	Filter Direction
                        	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                        
                        .. attribute:: evaluation_precedence
                        
                        	Evaluation Precedence
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.identifier = None
                            self.contents = YList()
                            self.contents.parent = self
                            self.contents.name = 'contents'
                            self.direction = None
                            self.evaluation_precedence = None


                        class Contents(object):
                            """
                            Filter Contents
                            
                            .. attribute:: component_type_identifier  <key>
                            
                            	Component Type
                            	**type**\:  int
                            
                            	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                            
                            .. attribute:: flow_label
                            
                            	Flow Label
                            	**type**\:  list of int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: ipsec_index
                            
                            	IPSec Index
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv4_ipv6_remote
                            
                            	Ipv4 Ipv6 remote address
                            	**type**\: one of the below types:
                            
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            .. attribute:: ipv4_local
                            
                            	IPv4 Local Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: ipv6_prefix_local
                            
                            	IPv6 Local Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: ipv6_prefix_remote
                            
                            	IPv6 Remote Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: local_port
                            
                            	Local Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_hi
                            
                            	Local Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_lo
                            
                            	Local Port Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: next_header
                            
                            	Next Header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: remote_port
                            
                            	Remote Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_hi
                            
                            	Remote Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_lo
                            
                            	Remote Por Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_class
                            
                            	Traffic Class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_hi
                            
                            	Traffic Class Max Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_lo
                            
                            	Traffic Class Min Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.component_type_identifier = None
                                self.flow_label = YLeafList()
                                self.flow_label.parent = self
                                self.flow_label.name = 'flow_label'
                                self.ipsec_index = None
                                self.ipv4_ipv6_remote = None
                                self.ipv4_local = None
                                self.ipv6_prefix_local = None
                                self.ipv6_prefix_remote = None
                                self.local_port = None
                                self.local_port_hi = None
                                self.local_port_lo = None
                                self.next_header = None
                                self.remote_port = None
                                self.remote_port_hi = None
                                self.remote_port_lo = None
                                self.traffic_class = None
                                self.traffic_class_hi = None
                                self.traffic_class_lo = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.component_type_identifier is None:
                                    raise YPYModelError('Key property component_type_identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.component_type_identifier is not None:
                                    return True

                                if self.flow_label is not None:
                                    for child in self.flow_label:
                                        if child is not None:
                                            return True

                                if self.ipsec_index is not None:
                                    return True

                                if self.ipv4_ipv6_remote is not None:
                                    return True

                                if self.ipv4_local is not None:
                                    return True

                                if self.ipv6_prefix_local is not None:
                                    return True

                                if self.ipv6_prefix_remote is not None:
                                    return True

                                if self.local_port is not None:
                                    return True

                                if self.local_port_hi is not None:
                                    return True

                                if self.local_port_lo is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.remote_port is not None:
                                    return True

                                if self.remote_port_hi is not None:
                                    return True

                                if self.remote_port_lo is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.traffic_class_hi is not None:
                                    return True

                                if self.traffic_class_lo is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Output.Contexts.Dl.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                        @property
                        def _common_path(self):
                            if self.identifier is None:
                                raise YPYModelError('Key property identifier is None')

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.identifier is not None:
                                return True

                            if self.contents is not None:
                                for child_ref in self.contents:
                                    if child_ref._has_data():
                                        return True

                            if self.direction is not None:
                                return True

                            if self.evaluation_precedence is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Output.Contexts.Dl.MobilityTunnelParameters.PacketFilters']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:mobility-tunnel-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.none is not None:
                            return True

                        if self.packet_filters is not None:
                            for child_ref in self.packet_filters:
                                if child_ref._has_data():
                                    return True

                        if self.tft_reference is not None:
                            return True

                        if self.tunnel_identifier is not None:
                            return True

                        if self.tunnel_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Dl.MobilityTunnelParameters']['meta_info']


                class Nexthop(object):
                    """
                    Next Hop
                    
                    .. attribute:: if_index
                    
                    	If (interface) Value
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: ip
                    
                    	IP Value
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: lsp
                    
                    	MPLS Value
                    	**type**\:  int
                    
                    	**range:** 0..1048575
                    
                    .. attribute:: macaddress
                    
                    	MAC Address Value
                    	**type**\:  str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    .. attribute:: nexthop_type
                    
                    	Nexthop Type
                    	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                    
                    .. attribute:: servicepath
                    
                    	Service Path Value
                    	**type**\:  int
                    
                    	**range:** 0..33554431
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.if_index = None
                        self.ip = None
                        self.lsp = None
                        self.macaddress = None
                        self.nexthop_type = None
                        self.servicepath = None

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:nexthop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.if_index is not None:
                            return True

                        if self.ip is not None:
                            return True

                        if self.lsp is not None:
                            return True

                        if self.macaddress is not None:
                            return True

                        if self.nexthop_type is not None:
                            return True

                        if self.servicepath is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Dl.Nexthop']['meta_info']


                class QosProfileParameters(object):
                    """
                    QoS Parameters
                    
                    .. attribute:: apn_ambr
                    
                    	Access Point Name Aggregate Max Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: arp
                    
                    	Allocation Retention Priority
                    	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl.QosProfileParameters.Arp>`
                    
                    .. attribute:: gbr
                    
                    	Guaranteed Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: mbr
                    
                    	Maximum Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: qci
                    
                    	QCI
                    	**type**\:  int
                    
                    	**range:** 1..9
                    
                    .. attribute:: qos_type
                    
                    	the profile type
                    	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                    
                    .. attribute:: ue_ambr
                    
                    	User Equipment Aggregate Max Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.apn_ambr = None
                        self.arp = ConfigureRpc.Output.Contexts.Dl.QosProfileParameters.Arp()
                        self.arp.parent = self
                        self.gbr = None
                        self.mbr = None
                        self.qci = None
                        self.qos_type = None
                        self.ue_ambr = None


                    class Arp(object):
                        """
                        Allocation Retention Priority
                        
                        .. attribute:: premption_capability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl.QosProfileParameters.Arp.PremptionCapabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: premption_vulnerability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dl.QosProfileParameters.Arp.PremptionVulnerabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: prioirty_level
                        
                        	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                        	**type**\:  int
                        
                        	**range:** 0..15
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.premption_capability = None
                            self.premption_vulnerability = None
                            self.prioirty_level = None

                        class PremptionCapabilityEnum(Enum):
                            """
                            PremptionCapabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                            service data flow can get resources that were already

                            assigned to another service data flow with a lower priority

                            level.  The following values are defined\:

                             Enabled (0)\: This value indicates that the service data flow

                             is allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.

                             Disabled (1)\: This value indicates that the service data flow

                             is not allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.  The values

                             (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Output.Contexts.Dl.QosProfileParameters.Arp.PremptionCapabilityEnum']


                        class PremptionVulnerabilityEnum(Enum):
                            """
                            PremptionVulnerabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                             service data flow can lose the resources assigned to it in

                             order to admit a service data flow with a higher priority

                             level.  The following values are defined\:

                               Enabled (0)\: This value indicates that the resources

                               assigned to the IP data flow can be preempted and

                               allocated to a service data flow with a higher

                               priority level.

                               Disabled (1)\: This value indicates that the resources

                               assigned to the IP data flow shall not be preempted and

                               allocated to a service data flow with a higher priority

                               level.  The values (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Output.Contexts.Dl.QosProfileParameters.Arp.PremptionVulnerabilityEnum']


                        @property
                        def _common_path(self):

                            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters/ietf-dmm-threegpp:arp'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.premption_capability is not None:
                                return True

                            if self.premption_vulnerability is not None:
                                return True

                            if self.prioirty_level is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Output.Contexts.Dl.QosProfileParameters.Arp']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:qos-profile-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.apn_ambr is not None:
                            return True

                        if self.arp is not None and self.arp._has_data():
                            return True

                        if self.gbr is not None:
                            return True

                        if self.mbr is not None:
                            return True

                        if self.qci is not None:
                            return True

                        if self.qos_type is not None:
                            return True

                        if self.ue_ambr is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Dl.QosProfileParameters']['meta_info']


                class DpnParameters(object):
                    """
                    DPN Parameters
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:dpn-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Dl.DpnParameters']['meta_info']


                class VendorParameters(object):
                    """
                    Vendor Parameters
                    
                    .. attribute:: vendor_id  <key>
                    
                    	Vendor ID
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: vendor_type  <key>
                    
                    	Attribute Type
                    	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                    
                    .. attribute:: empty_type
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.vendor_id = None
                        self.vendor_type = None
                        self.empty_type = None

                    @property
                    def _common_path(self):
                        if self.vendor_id is None:
                            raise YPYModelError('Key property vendor_id is None')
                        if self.vendor_type is None:
                            raise YPYModelError('Key property vendor_type is None')

                        return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.vendor_id is not None:
                            return True

                        if self.vendor_type is not None:
                            return True

                        if self.empty_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Dl.VendorParameters']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dl'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                        return True

                    if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                        return True

                    if self.mtu_size is not None:
                        return True

                    if self.nexthop is not None and self.nexthop._has_data():
                        return True

                    if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                        return True

                    if self.tunnel_local_address is not None:
                        return True

                    if self.tunnel_remote_address is not None:
                        return True

                    if self.vendor_parameters is not None:
                        for child_ref in self.vendor_parameters:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureRpc.Output.Contexts.Dl']['meta_info']


            class Dpns(object):
                """
                DPNs
                
                .. attribute:: direction  <key>
                
                	Direction
                	**type**\:   :py:class:`FpcDirectionEnum <ydk.models.ietf.ietf_dmm_fpc.FpcDirectionEnum>`
                
                	**mandatory**\: True
                
                .. attribute:: dpn_id  <key>
                
                	DPN
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: dpn_parameters
                
                	DPN Parameters
                	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dpns.DpnParameters>`
                
                .. attribute:: mobility_tunnel_parameters
                
                	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dpns.MobilityTunnelParameters>`
                
                .. attribute:: mtu_size
                
                	MTU size
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nexthop
                
                	Next Hop
                	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dpns.Nexthop>`
                
                .. attribute:: qos_profile_parameters
                
                	QoS Parameters
                	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dpns.QosProfileParameters>`
                
                .. attribute:: tunnel_local_address
                
                	endpoint address of the DPN which a gent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: tunnel_remote_address
                
                	endpoint address of the DPN which agent exists
                	**type**\: one of the below types:
                
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                
                ----
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                
                ----
                .. attribute:: vendor_parameters
                
                	Vendor Parameters
                	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dpns.VendorParameters>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.direction = None
                    self.dpn_id = None
                    self.dpn_parameters = ConfigureRpc.Output.Contexts.Dpns.DpnParameters()
                    self.dpn_parameters.parent = self
                    self.mobility_tunnel_parameters = ConfigureRpc.Output.Contexts.Dpns.MobilityTunnelParameters()
                    self.mobility_tunnel_parameters.parent = self
                    self.mtu_size = None
                    self.nexthop = ConfigureRpc.Output.Contexts.Dpns.Nexthop()
                    self.nexthop.parent = self
                    self.qos_profile_parameters = ConfigureRpc.Output.Contexts.Dpns.QosProfileParameters()
                    self.qos_profile_parameters.parent = self
                    self.tunnel_local_address = None
                    self.tunnel_remote_address = None
                    self.vendor_parameters = YList()
                    self.vendor_parameters.parent = self
                    self.vendor_parameters.name = 'vendor_parameters'


                class MobilityTunnelParameters(object):
                    """
                    Specifies profile specific lylebe551144 tunnel
                    parameters to the DPN which the agent exists. The
                    profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                    ietf\-pmip profile, or new profile if anyone will define
                    it.
                    
                    .. attribute:: none
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: packet_filters
                    
                    	List of Packet Filters
                    	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dpns.MobilityTunnelParameters.PacketFilters>`
                    
                    .. attribute:: tft_reference
                    
                    	Pre\-configured TFT
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: tunnel_identifier
                    
                    	Tunnel Endpoint IDentifier (TEID)
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: tunnel_type
                    
                    	3GPP Tunnel Subtype
                    	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.none = None
                        self.packet_filters = YList()
                        self.packet_filters.parent = self
                        self.packet_filters.name = 'packet_filters'
                        self.tft_reference = None
                        self.tunnel_identifier = None
                        self.tunnel_type = None


                    class PacketFilters(object):
                        """
                        List of Packet Filters
                        
                        .. attribute:: identifier  <key>
                        
                        	Filter Identifier
                        	**type**\:  int
                        
                        	**range:** 1..15
                        
                        .. attribute:: contents
                        
                        	Filter Contents
                        	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Contexts.Dpns.MobilityTunnelParameters.PacketFilters.Contents>`
                        
                        .. attribute:: direction
                        
                        	Filter Direction
                        	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                        
                        .. attribute:: evaluation_precedence
                        
                        	Evaluation Precedence
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'threegpp'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.identifier = None
                            self.contents = YList()
                            self.contents.parent = self
                            self.contents.name = 'contents'
                            self.direction = None
                            self.evaluation_precedence = None


                        class Contents(object):
                            """
                            Filter Contents
                            
                            .. attribute:: component_type_identifier  <key>
                            
                            	Component Type
                            	**type**\:  int
                            
                            	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                            
                            .. attribute:: flow_label
                            
                            	Flow Label
                            	**type**\:  list of int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: ipsec_index
                            
                            	IPSec Index
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv4_ipv6_remote
                            
                            	Ipv4 Ipv6 remote address
                            	**type**\: one of the below types:
                            
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            
                            ----
                            .. attribute:: ipv4_local
                            
                            	IPv4 Local Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: ipv6_prefix_local
                            
                            	IPv6 Local Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: ipv6_prefix_remote
                            
                            	IPv6 Remote Prefix
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            .. attribute:: local_port
                            
                            	Local Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_hi
                            
                            	Local Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: local_port_lo
                            
                            	Local Port Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: next_header
                            
                            	Next Header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: remote_port
                            
                            	Remote Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_hi
                            
                            	Remote Port Max Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: remote_port_lo
                            
                            	Remote Por Min Value
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_class
                            
                            	Traffic Class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_hi
                            
                            	Traffic Class Max Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: traffic_class_lo
                            
                            	Traffic Class Min Value
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.component_type_identifier = None
                                self.flow_label = YLeafList()
                                self.flow_label.parent = self
                                self.flow_label.name = 'flow_label'
                                self.ipsec_index = None
                                self.ipv4_ipv6_remote = None
                                self.ipv4_local = None
                                self.ipv6_prefix_local = None
                                self.ipv6_prefix_remote = None
                                self.local_port = None
                                self.local_port_hi = None
                                self.local_port_lo = None
                                self.next_header = None
                                self.remote_port = None
                                self.remote_port_hi = None
                                self.remote_port_lo = None
                                self.traffic_class = None
                                self.traffic_class_hi = None
                                self.traffic_class_lo = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.component_type_identifier is None:
                                    raise YPYModelError('Key property component_type_identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.component_type_identifier is not None:
                                    return True

                                if self.flow_label is not None:
                                    for child in self.flow_label:
                                        if child is not None:
                                            return True

                                if self.ipsec_index is not None:
                                    return True

                                if self.ipv4_ipv6_remote is not None:
                                    return True

                                if self.ipv4_local is not None:
                                    return True

                                if self.ipv6_prefix_local is not None:
                                    return True

                                if self.ipv6_prefix_remote is not None:
                                    return True

                                if self.local_port is not None:
                                    return True

                                if self.local_port_hi is not None:
                                    return True

                                if self.local_port_lo is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.remote_port is not None:
                                    return True

                                if self.remote_port_hi is not None:
                                    return True

                                if self.remote_port_lo is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.traffic_class_hi is not None:
                                    return True

                                if self.traffic_class_lo is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureRpc.Output.Contexts.Dpns.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.identifier is None:
                                raise YPYModelError('Key property identifier is None')

                            return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.identifier is not None:
                                return True

                            if self.contents is not None:
                                for child_ref in self.contents:
                                    if child_ref._has_data():
                                        return True

                            if self.direction is not None:
                                return True

                            if self.evaluation_precedence is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureRpc.Output.Contexts.Dpns.MobilityTunnelParameters.PacketFilters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.none is not None:
                            return True

                        if self.packet_filters is not None:
                            for child_ref in self.packet_filters:
                                if child_ref._has_data():
                                    return True

                        if self.tft_reference is not None:
                            return True

                        if self.tunnel_identifier is not None:
                            return True

                        if self.tunnel_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Dpns.MobilityTunnelParameters']['meta_info']


                class Nexthop(object):
                    """
                    Next Hop
                    
                    .. attribute:: if_index
                    
                    	If (interface) Value
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: ip
                    
                    	IP Value
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: lsp
                    
                    	MPLS Value
                    	**type**\:  int
                    
                    	**range:** 0..1048575
                    
                    .. attribute:: macaddress
                    
                    	MAC Address Value
                    	**type**\:  str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    .. attribute:: nexthop_type
                    
                    	Nexthop Type
                    	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                    
                    .. attribute:: servicepath
                    
                    	Service Path Value
                    	**type**\:  int
                    
                    	**range:** 0..33554431
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.if_index = None
                        self.ip = None
                        self.lsp = None
                        self.macaddress = None
                        self.nexthop_type = None
                        self.servicepath = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.if_index is not None:
                            return True

                        if self.ip is not None:
                            return True

                        if self.lsp is not None:
                            return True

                        if self.macaddress is not None:
                            return True

                        if self.nexthop_type is not None:
                            return True

                        if self.servicepath is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Dpns.Nexthop']['meta_info']


                class QosProfileParameters(object):
                    """
                    QoS Parameters
                    
                    .. attribute:: qos_type
                    
                    	the profile type
                    	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.qos_type = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.qos_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Dpns.QosProfileParameters']['meta_info']


                class DpnParameters(object):
                    """
                    DPN Parameters
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Dpns.DpnParameters']['meta_info']


                class VendorParameters(object):
                    """
                    Vendor Parameters
                    
                    .. attribute:: vendor_id  <key>
                    
                    	Vendor ID
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: vendor_type  <key>
                    
                    	Attribute Type
                    	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                    
                    .. attribute:: empty_type
                    
                    	Empty Value
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.vendor_id = None
                        self.vendor_type = None
                        self.empty_type = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.vendor_id is None:
                            raise YPYModelError('Key property vendor_id is None')
                        if self.vendor_type is None:
                            raise YPYModelError('Key property vendor_type is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.vendor_id is not None:
                            return True

                        if self.vendor_type is not None:
                            return True

                        if self.empty_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Contexts.Dpns.VendorParameters']['meta_info']

                @property
                def _common_path(self):
                    if self.direction is None:
                        raise YPYModelError('Key property direction is None')
                    if self.dpn_id is None:
                        raise YPYModelError('Key property dpn_id is None')

                    return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:dpns[ietf-dmm-fpc:direction = ' + str(self.direction) + '][ietf-dmm-fpc:dpn-id = ' + str(self.dpn_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.direction is not None:
                        return True

                    if self.dpn_id is not None:
                        return True

                    if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                        return True

                    if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                        return True

                    if self.mtu_size is not None:
                        return True

                    if self.nexthop is not None and self.nexthop._has_data():
                        return True

                    if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                        return True

                    if self.tunnel_local_address is not None:
                        return True

                    if self.tunnel_remote_address is not None:
                        return True

                    if self.vendor_parameters is not None:
                        for child_ref in self.vendor_parameters:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureRpc.Output.Contexts.Dpns']['meta_info']


            class Instructions(object):
                """
                Instructions
                
                .. attribute:: instr_3gpp_mob
                
                	3GPP Specific Command Set
                	**type**\:   :py:class:`ThreegppInstr <ydk.models.ietf.ietf_dmm_threegpp.ThreegppInstr>`
                
                .. attribute:: instr_pmip
                
                	PMIP Instructions
                	**type**\:   :py:class:`PmipInstr <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipInstr>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.instr_3gpp_mob = ThreegppInstr()
                    self.instr_pmip = PmipInstr()

                @property
                def _common_path(self):

                    return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts/ietf-dmm-fpc:instructions'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.instr_3gpp_mob is not None:
                        if self.instr_3gpp_mob._has_data():
                            return True

                    if self.instr_pmip is not None:
                        if self.instr_pmip._has_data():
                            return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureRpc.Output.Contexts.Instructions']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:contexts'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.context_id is not None:
                    return True

                if self.delegated_ip_prefixes is not None:
                    for child in self.delegated_ip_prefixes:
                        if child is not None:
                            return True

                if self.dl is not None and self.dl._has_data():
                    return True

                if self.dpn_group is not None:
                    return True

                if self.dpns is not None:
                    for child_ref in self.dpns:
                        if child_ref._has_data():
                            return True

                if self.ebi is not None:
                    return True

                if self.imsi is not None:
                    return True

                if self.instructions is not None and self.instructions._has_data():
                    return True

                if self.lbi is not None:
                    return True

                if self.parent_context is not None:
                    return True

                if self.ul is not None and self.ul._has_data():
                    return True

                if self.vports is not None:
                    for child in self.vports:
                        if child is not None:
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Output.Contexts']['meta_info']


        class PolicyGroups(object):
            """
            Policy Groups
            
            .. attribute:: policy_group_id  <key>
            
            	Policy Group ID
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: policies
            
            	Policies
            	**type**\: one of the below types:
            
            	**type**\:  list of int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            	**type**\:  list of str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.policy_group_id = None
                self.policies = YLeafList()
                self.policies.parent = self
                self.policies.name = 'policies'

            @property
            def _common_path(self):
                if self.policy_group_id is None:
                    raise YPYModelError('Key property policy_group_id is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:policy-groups[ietf-dmm-fpc:policy-group-id = ' + str(self.policy_group_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.policy_group_id is not None:
                    return True

                if self.policies is not None:
                    for child in self.policies:
                        if child is not None:
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Output.PolicyGroups']['meta_info']


        class Policies(object):
            """
            Policies
            
            .. attribute:: policy_id  <key>
            
            	Policy Id
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: rules
            
            	Rules
            	**type**\: list of    :py:class:`Rules <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Policies.Rules>`
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.policy_id = None
                self.rules = YList()
                self.rules.parent = self
                self.rules.name = 'rules'


            class Rules(object):
                """
                Rules
                
                .. attribute:: order  <key>
                
                	Rule Order
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: actions
                
                	Actions
                	**type**\: list of    :py:class:`Actions <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Policies.Rules.Actions>`
                
                .. attribute:: descriptors
                
                	Descriptors
                	**type**\: list of    :py:class:`Descriptors <ydk.models.ietf.ietf_dmm_fpc.ConfigureRpc.Output.Policies.Rules.Descriptors>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.order = None
                    self.actions = YList()
                    self.actions.parent = self
                    self.actions.name = 'actions'
                    self.descriptors = YList()
                    self.descriptors.parent = self
                    self.descriptors.name = 'descriptors'


                class Descriptors(object):
                    """
                    Descriptors
                    
                    .. attribute:: descriptor_id  <key>
                    
                    	Descriptor Id
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: direction
                    
                    	Direction
                    	**type**\:   :py:class:`FpcDirectionEnum <ydk.models.ietf.ietf_dmm_fpc.FpcDirectionEnum>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.descriptor_id = None
                        self.direction = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.descriptor_id is None:
                            raise YPYModelError('Key property descriptor_id is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:descriptors[ietf-dmm-fpc:descriptor-id = ' + str(self.descriptor_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.descriptor_id is not None:
                            return True

                        if self.direction is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Policies.Rules.Descriptors']['meta_info']


                class Actions(object):
                    """
                    Actions
                    
                    .. attribute:: action_id  <key>
                    
                    	Action Identifier
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: action_order
                    
                    	Action Execution Order
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.action_id = None
                        self.action_order = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.action_id is None:
                            raise YPYModelError('Key property action_id is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:actions[ietf-dmm-fpc:action-id = ' + str(self.action_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.action_id is not None:
                            return True

                        if self.action_order is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureRpc.Output.Policies.Rules.Actions']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.order is None:
                        raise YPYModelError('Key property order is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:rules[ietf-dmm-fpc:order = ' + str(self.order) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.order is not None:
                        return True

                    if self.actions is not None:
                        for child_ref in self.actions:
                            if child_ref._has_data():
                                return True

                    if self.descriptors is not None:
                        for child_ref in self.descriptors:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureRpc.Output.Policies.Rules']['meta_info']

            @property
            def _common_path(self):
                if self.policy_id is None:
                    raise YPYModelError('Key property policy_id is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:policies[ietf-dmm-fpc:policy-id = ' + str(self.policy_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.policy_id is not None:
                    return True

                if self.rules is not None:
                    for child_ref in self.rules:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Output.Policies']['meta_info']


        class Descriptors(object):
            """
            Descriptors
            
            .. attribute:: descriptor_id  <key>
            
            	Descriptor Id
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: all_traffic
            
            	Empty Value
            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: descriptor_type
            
            	Descriptor Type
            	**type**\:   :py:class:`FpcDescriptorTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcDescriptorTypeIdentity>`
            
            	**mandatory**\: True
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.descriptor_id = None
                self.all_traffic = None
                self.descriptor_type = None

            @property
            def _common_path(self):
                if self.descriptor_id is None:
                    raise YPYModelError('Key property descriptor_id is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:descriptors[ietf-dmm-fpc:descriptor-id = ' + str(self.descriptor_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.descriptor_id is not None:
                    return True

                if self.all_traffic is not None:
                    return True

                if self.descriptor_type is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Output.Descriptors']['meta_info']


        class Actions(object):
            """
            Actions
            
            .. attribute:: action_id  <key>
            
            	Action Identifier
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: action_type
            
            	Action Type
            	**type**\:   :py:class:`FpcActionTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcActionTypeIdentity>`
            
            	**mandatory**\: True
            
            .. attribute:: drop
            
            	Empty Value
            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.action_id = None
                self.action_type = None
                self.drop = None

            @property
            def _common_path(self):
                if self.action_id is None:
                    raise YPYModelError('Key property action_id is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:actions[ietf-dmm-fpc:action-id = ' + str(self.action_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.action_id is not None:
                    return True

                if self.action_type is not None:
                    return True

                if self.drop is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Output.Actions']['meta_info']


        class Targets(object):
            """
            List of Targets
            
            .. attribute:: target  <key>
            
            	Target Id
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: dpn_id
            
            	DPN Id
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.target = None
                self.dpn_id = None

            @property
            def _common_path(self):
                if self.target is None:
                    raise YPYModelError('Key property target is None')

                return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output/ietf-dmm-fpc:targets[ietf-dmm-fpc:target = ' + str(self.target) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.target is not None:
                    return True

                if self.dpn_id is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureRpc.Output.Targets']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-dmm-fpc:configure/ietf-dmm-fpc:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.actions is not None:
                for child_ref in self.actions:
                    if child_ref._has_data():
                        return True

            if self.contexts is not None:
                for child_ref in self.contexts:
                    if child_ref._has_data():
                        return True

            if self.descriptors is not None:
                for child_ref in self.descriptors:
                    if child_ref._has_data():
                        return True

            if self.error_info is not None:
                return True

            if self.error_type_id is not None:
                return True

            if self.op_id is not None:
                return True

            if self.policies is not None:
                for child_ref in self.policies:
                    if child_ref._has_data():
                        return True

            if self.policy_groups is not None:
                for child_ref in self.policy_groups:
                    if child_ref._has_data():
                        return True

            if self.ports is not None:
                for child_ref in self.ports:
                    if child_ref._has_data():
                        return True

            if self.result is not None:
                return True

            if self.targets is not None:
                for child_ref in self.targets:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['ConfigureRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-dmm-fpc:configure'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['ConfigureRpc']['meta_info']


class ConfigureBundlesRpc(object):
    """
    CONF\_BUNDLES message
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output>`
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        self.input = ConfigureBundlesRpc.Input()
        self.input.parent = self
        self.output = ConfigureBundlesRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: bundles
        
        	List of operations
        	**type**\: list of    :py:class:`Bundles <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles>`
        
        .. attribute:: highest_op_ref_scope
        
        	Highest Op\-Ref used in the input
        	**type**\:   :py:class:`RefScopeEnum <ydk.models.ietf.ietf_dmm_fpc.RefScopeEnum>`
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.bundles = YList()
            self.bundles.parent = self
            self.bundles.name = 'bundles'
            self.highest_op_ref_scope = None


        class Bundles(object):
            """
            List of operations
            
            .. attribute:: op_id  <key>
            
            	Operation ID
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: actions
            
            	Actions
            	**type**\: list of    :py:class:`Actions <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Actions>`
            
            .. attribute:: admin_state
            
            	Admin State
            	**type**\:   :py:class:`AdminStatusEnum <ydk.models.ietf.ietf_dmm_fpc.AdminStatusEnum>`
            
            .. attribute:: client_id
            
            	Client ID
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: clones
            
            	Clones
            	**type**\: list of    :py:class:`Clones <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Clones>`
            
            .. attribute:: contexts
            
            	Contexts
            	**type**\: list of    :py:class:`Contexts <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts>`
            
            .. attribute:: delay
            
            	Delay
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: descriptors
            
            	Descriptors
            	**type**\: list of    :py:class:`Descriptors <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Descriptors>`
            
            .. attribute:: instructions
            
            	Instructions
            	**type**\:   :py:class:`Instructions <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Instructions>`
            
            .. attribute:: op_ref_scope
            
            	Reference Scope
            	**type**\:   :py:class:`RefScopeEnum <ydk.models.ietf.ietf_dmm_fpc.RefScopeEnum>`
            
            .. attribute:: op_type
            
            	Type
            	**type**\:   :py:class:`OpTypeEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.OpTypeEnum>`
            
            .. attribute:: policies
            
            	Policies
            	**type**\: list of    :py:class:`Policies <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Policies>`
            
            .. attribute:: policy_groups
            
            	Policy Groups
            	**type**\: list of    :py:class:`PolicyGroups <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.PolicyGroups>`
            
            .. attribute:: ports
            
            	Ports
            	**type**\: list of    :py:class:`Ports <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Ports>`
            
            .. attribute:: session_state
            
            	Session State
            	**type**\:   :py:class:`SessionStatusEnum <ydk.models.ietf.ietf_dmm_fpc.SessionStatusEnum>`
            
            .. attribute:: targets
            
            	List of Targets
            	**type**\: list of    :py:class:`Targets <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Targets>`
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.op_id = None
                self.actions = YList()
                self.actions.parent = self
                self.actions.name = 'actions'
                self.admin_state = None
                self.client_id = None
                self.clones = YList()
                self.clones.parent = self
                self.clones.name = 'clones'
                self.contexts = YList()
                self.contexts.parent = self
                self.contexts.name = 'contexts'
                self.delay = None
                self.descriptors = YList()
                self.descriptors.parent = self
                self.descriptors.name = 'descriptors'
                self.instructions = ConfigureBundlesRpc.Input.Bundles.Instructions()
                self.instructions.parent = self
                self.op_ref_scope = None
                self.op_type = None
                self.policies = YList()
                self.policies.parent = self
                self.policies.name = 'policies'
                self.policy_groups = YList()
                self.policy_groups.parent = self
                self.policy_groups.name = 'policy_groups'
                self.ports = YList()
                self.ports.parent = self
                self.ports.name = 'ports'
                self.session_state = None
                self.targets = YList()
                self.targets.parent = self
                self.targets.name = 'targets'

            class OpTypeEnum(Enum):
                """
                OpTypeEnum

                Type

                .. data:: create = 0

                	create

                .. data:: update = 1

                	update

                .. data:: query = 2

                	query

                .. data:: delete = 3

                	delete

                """

                create = 0

                update = 1

                query = 2

                delete = 3


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.OpTypeEnum']



            class Instructions(object):
                """
                Instructions
                
                .. attribute:: instr_3gpp_mob
                
                	3GPP Specific Command Set
                	**type**\:   :py:class:`ThreegppInstr <ydk.models.ietf.ietf_dmm_threegpp.ThreegppInstr>`
                
                .. attribute:: instr_pmip
                
                	PMIP Instructions
                	**type**\:   :py:class:`PmipInstr <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipInstr>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.instr_3gpp_mob = ThreegppInstr()
                    self.instr_pmip = PmipInstr()

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-dmm-fpc:instructions'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.instr_3gpp_mob is not None:
                        if self.instr_3gpp_mob._has_data():
                            return True

                    if self.instr_pmip is not None:
                        if self.instr_pmip._has_data():
                            return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Instructions']['meta_info']


            class Clones(object):
                """
                Clones
                
                .. attribute:: entity  <key>
                
                	Clone ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: source
                
                	Source
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.entity = None
                    self.source = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.entity is None:
                        raise YPYModelError('Key property entity is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:clones[ietf-dmm-fpc:entity = ' + str(self.entity) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.entity is not None:
                        return True

                    if self.source is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Clones']['meta_info']


            class Ports(object):
                """
                Ports
                
                .. attribute:: policy_groups
                
                	Policy Groups
                	**type**\: one of the below types:
                
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                .. attribute:: vport_id
                
                	Port ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.policy_groups = YLeafList()
                    self.policy_groups.parent = self
                    self.policy_groups.name = 'policy_groups'
                    self.vport_id = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-dmm-fpc:ports'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.policy_groups is not None:
                        for child in self.policy_groups:
                            if child is not None:
                                return True

                    if self.vport_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Ports']['meta_info']


            class Contexts(object):
                """
                Contexts
                
                .. attribute:: context_id
                
                	Context ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: delegated_ip_prefixes
                
                	Delegated Prefix(es)
                	**type**\: one of the below types:
                
                	**type**\:  list of str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                
                
                ----
                	**type**\:  list of str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                
                
                ----
                .. attribute:: dl
                
                	Downlink
                	**type**\:   :py:class:`Dl <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl>`
                
                .. attribute:: dpn_group
                
                	DPN Group
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: dpns
                
                	DPNs
                	**type**\: list of    :py:class:`Dpns <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns>`
                
                .. attribute:: ebi
                
                	EUTRAN Bearere Identifier (EBI)
                	**type**\:  int
                
                	**range:** 0..15
                
                .. attribute:: imsi
                
                	IMSI
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: instructions
                
                	Instructions
                	**type**\:   :py:class:`Instructions <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Instructions>`
                
                .. attribute:: lbi
                
                	Linked Bearer Identifier (LBI)
                	**type**\:  int
                
                	**range:** 0..15
                
                .. attribute:: parent_context
                
                	Parent Context
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: ul
                
                	lylebe551144
                	**type**\:   :py:class:`Ul <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul>`
                
                .. attribute:: vports
                
                	Vports
                	**type**\: one of the below types:
                
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.context_id = None
                    self.delegated_ip_prefixes = YLeafList()
                    self.delegated_ip_prefixes.parent = self
                    self.delegated_ip_prefixes.name = 'delegated_ip_prefixes'
                    self.dl = ConfigureBundlesRpc.Input.Bundles.Contexts.Dl()
                    self.dl.parent = self
                    self.dpn_group = None
                    self.dpns = YList()
                    self.dpns.parent = self
                    self.dpns.name = 'dpns'
                    self.ebi = None
                    self.imsi = None
                    self.instructions = ConfigureBundlesRpc.Input.Bundles.Contexts.Instructions()
                    self.instructions.parent = self
                    self.lbi = None
                    self.parent_context = None
                    self.ul = ConfigureBundlesRpc.Input.Bundles.Contexts.Ul()
                    self.ul.parent = self
                    self.vports = YLeafList()
                    self.vports.parent = self
                    self.vports.name = 'vports'


                class Ul(object):
                    """
                    lylebe551144
                    
                    .. attribute:: dpn_parameters
                    
                    	DPN Parameters
                    	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.DpnParameters>`
                    
                    .. attribute:: mobility_tunnel_parameters
                    
                    	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                    	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters>`
                    
                    .. attribute:: mtu_size
                    
                    	MTU size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop
                    
                    	Next Hop
                    	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.Nexthop>`
                    
                    .. attribute:: qos_profile_parameters
                    
                    	QoS Parameters
                    	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters>`
                    
                    .. attribute:: tunnel_local_address
                    
                    	endpoint address of the DPN which a gent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: tunnel_remote_address
                    
                    	endpoint address of the DPN which agent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: vendor_parameters
                    
                    	Vendor Parameters
                    	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.VendorParameters>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.dpn_parameters = ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.DpnParameters()
                        self.dpn_parameters.parent = self
                        self.mobility_tunnel_parameters = ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters()
                        self.mobility_tunnel_parameters.parent = self
                        self.mtu_size = None
                        self.nexthop = ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.Nexthop()
                        self.nexthop.parent = self
                        self.qos_profile_parameters = ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters()
                        self.qos_profile_parameters.parent = self
                        self.tunnel_local_address = None
                        self.tunnel_remote_address = None
                        self.vendor_parameters = YList()
                        self.vendor_parameters.parent = self
                        self.vendor_parameters.name = 'vendor_parameters'


                    class MobilityTunnelParameters(object):
                        """
                        Specifies profile specific lylebe551144 tunnel
                        parameters to the DPN which the agent exists. The
                        profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                        ietf\-pmip profile, or new profile if anyone will define
                        it.
                        
                        .. attribute:: destination_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_port_range
                        
                        	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                        	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.DestinationPortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ds_range
                        
                        	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                        	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.DsRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: flow_label_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                        	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.FlowLabelRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ipsec_spi_range
                        
                        	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                        	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.IpsecSpiRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: key
                        
                        	GRE\_KEY
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: next_header_range
                        
                        	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                        	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.NextHeaderRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: none
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: packet_filters
                        
                        	List of Packet Filters
                        	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.PacketFilters>`
                        
                        .. attribute:: protocol_range
                        
                        	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                        	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.ProtocolRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: selector_reference
                        
                        	Pre\-configured selector
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: source_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_port_range
                        
                        	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                        	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.SourcePortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: tft_reference
                        
                        	Pre\-configured TFT
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: traffic_class_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                        	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.TrafficClassRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ts_format
                        
                        	Traffic Selector Format
                        	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                        
                        .. attribute:: tunnel_identifier
                        
                        	Tunnel Endpoint IDentifier (TEID)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_type
                        
                        	3GPP Tunnel Subtype
                        	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                        
                        .. attribute:: type
                        
                        	PMIP Mobility
                        	**type**\:   :py:class:`PmipTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipTunnelTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.destination_address_range_v4 = None
                            self.destination_address_range_v6 = None
                            self.destination_port_range = None
                            self.ds_range = None
                            self.flow_label_range = None
                            self.ipsec_spi_range = None
                            self.key = None
                            self.next_header_range = None
                            self.none = None
                            self.packet_filters = YList()
                            self.packet_filters.parent = self
                            self.packet_filters.name = 'packet_filters'
                            self.protocol_range = None
                            self.selector_reference = None
                            self.source_address_range_v4 = None
                            self.source_address_range_v6 = None
                            self.source_port_range = None
                            self.tft_reference = None
                            self.traffic_class_range = None
                            self.ts_format = None
                            self.tunnel_identifier = None
                            self.tunnel_type = None
                            self.type = None


                        class IpsecSpiRange(object):
                            """
                            Inclusive range representing IPSec Security Parameter
                            Indices to be used. When only start\-spi is present, it
                            represents a single spi.
                            
                            .. attribute:: end_spi
                            
                            	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: start_spi
                            
                            	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_spi = None
                                self.start_spi = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_spi is not None:
                                    return True

                                if self.start_spi is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.IpsecSpiRange']['meta_info']


                        class SourcePortRange(object):
                            """
                            Inclusive range representing source ports to be used.
                            When only start\-port is present, it represents a single
                                  port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.SourcePortRange']['meta_info']


                        class DestinationPortRange(object):
                            """
                            Inclusive range representing destination ports to be used.
                            When only start\-port is present, it represents a single
                            port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.DestinationPortRange']['meta_info']


                        class SourceAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-address is present, it represents a single
                            address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV4']['meta_info']


                        class DestinationAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV4']['meta_info']


                        class DsRange(object):
                            """
                            Inclusive range representing DiffServ Codepoints to be used.
                            When only start\-ds is present, it represents a single
                            Codepoint.
                            
                            .. attribute:: end_ds
                            
                            	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_ds
                            
                            	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_ds = None
                                self.start_ds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_ds is not None:
                                    return True

                                if self.start_ds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.DsRange']['meta_info']


                        class ProtocolRange(object):
                            """
                            Inclusive range representing IP protocol(s) to be used. When
                            only start\-protocol is present, it represents a single
                            protocol.
                            
                            .. attribute:: end_protocol
                            
                            	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_protocol
                            
                            	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_protocol = None
                                self.start_protocol = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_protocol is not None:
                                    return True

                                if self.start_protocol is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.ProtocolRange']['meta_info']


                        class SourceAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.SourceAddressRangeV6']['meta_info']


                        class DestinationAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.DestinationAddressRangeV6']['meta_info']


                        class FlowLabelRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-flow\-label is present, it represents a single
                            flow label.
                            
                            .. attribute:: end_flow_label
                            
                            	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: start_flow_label
                            
                            	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_flow_label = None
                                self.start_flow_label = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_flow_label is not None:
                                    return True

                                if self.start_flow_label is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.FlowLabelRange']['meta_info']


                        class TrafficClassRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-traffic\-class is present, it represents a single
                            traffic class.
                            
                            .. attribute:: end_traffic_class
                            
                            	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_traffic_class
                            
                            	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_traffic_class = None
                                self.start_traffic_class = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_traffic_class is not None:
                                    return True

                                if self.start_traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.TrafficClassRange']['meta_info']


                        class NextHeaderRange(object):
                            """
                            Inclusive range representing Next Headers to be used. When
                            only start\-next\-header is present, it represents a
                            single Next Header.
                            
                            .. attribute:: end_next_header
                            
                            	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_next_header
                            
                            	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_next_header = None
                                self.start_next_header = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_next_header is not None:
                                    return True

                                if self.start_next_header is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.NextHeaderRange']['meta_info']


                        class PacketFilters(object):
                            """
                            List of Packet Filters
                            
                            .. attribute:: identifier  <key>
                            
                            	Filter Identifier
                            	**type**\:  int
                            
                            	**range:** 1..15
                            
                            .. attribute:: contents
                            
                            	Filter Contents
                            	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.PacketFilters.Contents>`
                            
                            .. attribute:: direction
                            
                            	Filter Direction
                            	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                            
                            .. attribute:: evaluation_precedence
                            
                            	Evaluation Precedence
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.identifier = None
                                self.contents = YList()
                                self.contents.parent = self
                                self.contents.name = 'contents'
                                self.direction = None
                                self.evaluation_precedence = None


                            class Contents(object):
                                """
                                Filter Contents
                                
                                .. attribute:: component_type_identifier  <key>
                                
                                	Component Type
                                	**type**\:  int
                                
                                	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                                
                                .. attribute:: flow_label
                                
                                	Flow Label
                                	**type**\:  list of int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: ipsec_index
                                
                                	IPSec Index
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_ipv6_remote
                                
                                	Ipv4 Ipv6 remote address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: ipv4_local
                                
                                	IPv4 Local Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6_prefix_local
                                
                                	IPv6 Local Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: ipv6_prefix_remote
                                
                                	IPv6 Remote Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: local_port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_hi
                                
                                	Local Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_lo
                                
                                	Local Port Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_header
                                
                                	Next Header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: remote_port
                                
                                	Remote Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_hi
                                
                                	Remote Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_lo
                                
                                	Remote Por Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_class
                                
                                	Traffic Class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_hi
                                
                                	Traffic Class Max Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_lo
                                
                                	Traffic Class Min Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                

                                """

                                _prefix = 'threegpp'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self.component_type_identifier = None
                                    self.flow_label = YLeafList()
                                    self.flow_label.parent = self
                                    self.flow_label.name = 'flow_label'
                                    self.ipsec_index = None
                                    self.ipv4_ipv6_remote = None
                                    self.ipv4_local = None
                                    self.ipv6_prefix_local = None
                                    self.ipv6_prefix_remote = None
                                    self.local_port = None
                                    self.local_port_hi = None
                                    self.local_port_lo = None
                                    self.next_header = None
                                    self.remote_port = None
                                    self.remote_port_hi = None
                                    self.remote_port_lo = None
                                    self.traffic_class = None
                                    self.traffic_class_hi = None
                                    self.traffic_class_lo = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.component_type_identifier is None:
                                        raise YPYModelError('Key property component_type_identifier is None')

                                    return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.component_type_identifier is not None:
                                        return True

                                    if self.flow_label is not None:
                                        for child in self.flow_label:
                                            if child is not None:
                                                return True

                                    if self.ipsec_index is not None:
                                        return True

                                    if self.ipv4_ipv6_remote is not None:
                                        return True

                                    if self.ipv4_local is not None:
                                        return True

                                    if self.ipv6_prefix_local is not None:
                                        return True

                                    if self.ipv6_prefix_remote is not None:
                                        return True

                                    if self.local_port is not None:
                                        return True

                                    if self.local_port_hi is not None:
                                        return True

                                    if self.local_port_lo is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.remote_port is not None:
                                        return True

                                    if self.remote_port_hi is not None:
                                        return True

                                    if self.remote_port_lo is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.traffic_class_hi is not None:
                                        return True

                                    if self.traffic_class_lo is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.identifier is None:
                                    raise YPYModelError('Key property identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.identifier is not None:
                                    return True

                                if self.contents is not None:
                                    for child_ref in self.contents:
                                        if child_ref._has_data():
                                            return True

                                if self.direction is not None:
                                    return True

                                if self.evaluation_precedence is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters.PacketFilters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                return True

                            if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                return True

                            if self.destination_port_range is not None and self.destination_port_range._has_data():
                                return True

                            if self.ds_range is not None and self.ds_range._has_data():
                                return True

                            if self.flow_label_range is not None and self.flow_label_range._has_data():
                                return True

                            if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                return True

                            if self.key is not None:
                                return True

                            if self.next_header_range is not None and self.next_header_range._has_data():
                                return True

                            if self.none is not None:
                                return True

                            if self.packet_filters is not None:
                                for child_ref in self.packet_filters:
                                    if child_ref._has_data():
                                        return True

                            if self.protocol_range is not None and self.protocol_range._has_data():
                                return True

                            if self.selector_reference is not None:
                                return True

                            if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                return True

                            if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                return True

                            if self.source_port_range is not None and self.source_port_range._has_data():
                                return True

                            if self.tft_reference is not None:
                                return True

                            if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                return True

                            if self.ts_format is not None:
                                return True

                            if self.tunnel_identifier is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            if self.type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.MobilityTunnelParameters']['meta_info']


                    class Nexthop(object):
                        """
                        Next Hop
                        
                        .. attribute:: if_index
                        
                        	If (interface) Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: ip
                        
                        	IP Value
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: lsp
                        
                        	MPLS Value
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: macaddress
                        
                        	MAC Address Value
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: nexthop_type
                        
                        	Nexthop Type
                        	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                        
                        .. attribute:: servicepath
                        
                        	Service Path Value
                        	**type**\:  int
                        
                        	**range:** 0..33554431
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.if_index = None
                            self.ip = None
                            self.lsp = None
                            self.macaddress = None
                            self.nexthop_type = None
                            self.servicepath = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.if_index is not None:
                                return True

                            if self.ip is not None:
                                return True

                            if self.lsp is not None:
                                return True

                            if self.macaddress is not None:
                                return True

                            if self.nexthop_type is not None:
                                return True

                            if self.servicepath is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.Nexthop']['meta_info']


                    class QosProfileParameters(object):
                        """
                        QoS Parameters
                        
                        .. attribute:: agg_max_dl
                        
                        	Aggregate\-Max\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: agg_max_ul
                        
                        	Aggregate\-Max\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: apn_ambr
                        
                        	Access Point Name Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: arp
                        
                        	Allocation Retention Priority
                        	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.Arp>`
                        
                        .. attribute:: attributetype
                        
                        	the attribute type
                        	**type**\:   :py:class:`QosAttributeTypeIdentity <ydk.models.ietf.ietf_pmip_qos.QosAttributeTypeIdentity>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: gbr
                        
                        	Guaranteed Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: gbr_dl
                        
                        	Guaranteed\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: gbr_ul
                        
                        	Guaranteed\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mbr
                        
                        	Maximum Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_mn_agg_max_dl
                        
                        	Per\-MN\-Agg\-Max\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_mn_agg_max_ul
                        
                        	Per\-MN\-Agg\-Max\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_session_agg_max_dl
                        
                        	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        	**type**\:   :py:class:`PerSessionAggMaxDl <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.PerSessionAggMaxDl>`
                        
                        .. attribute:: per_session_agg_max_ul
                        
                        	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        	**type**\:   :py:class:`PerSessionAggMaxUl <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.PerSessionAggMaxUl>`
                        
                        .. attribute:: premption_capability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.PremptionCapabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: premption_vulnerability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.PremptionVulnerabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: prioirty_level
                        
                        	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                        	**type**\:  int
                        
                        	**range:** 0..15
                        
                        	**mandatory**\: True
                        
                        .. attribute:: qci
                        
                        	QCI
                        	**type**\:  int
                        
                        	**range:** 1..9
                        
                        .. attribute:: qos_type
                        
                        	the profile type
                        	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                        
                        .. attribute:: traffic_selector
                        
                        	traffic selector
                        	**type**\:   :py:class:`TrafficSelector <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector>`
                        
                        .. attribute:: ue_ambr
                        
                        	User Equipment Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.agg_max_dl = None
                            self.agg_max_ul = None
                            self.apn_ambr = None
                            self.arp = ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.Arp()
                            self.arp.parent = self
                            self.attributetype = None
                            self.gbr = None
                            self.gbr_dl = None
                            self.gbr_ul = None
                            self.mbr = None
                            self.per_mn_agg_max_dl = None
                            self.per_mn_agg_max_ul = None
                            self.per_session_agg_max_dl = ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.PerSessionAggMaxDl()
                            self.per_session_agg_max_dl.parent = self
                            self.per_session_agg_max_ul = ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.PerSessionAggMaxUl()
                            self.per_session_agg_max_ul.parent = self
                            self.premption_capability = None
                            self.premption_vulnerability = None
                            self.prioirty_level = None
                            self.qci = None
                            self.qos_type = None
                            self.traffic_selector = ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector()
                            self.traffic_selector.parent = self
                            self.ue_ambr = None

                        class PremptionCapabilityEnum(Enum):
                            """
                            PremptionCapabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                            service data flow can get resources that were already

                            assigned to another service data flow with a lower priority

                            level.  The following values are defined\:

                             Enabled (0)\: This value indicates that the service data flow

                             is allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.

                             Disabled (1)\: This value indicates that the service data flow

                             is not allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.  The values

                             (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.PremptionCapabilityEnum']


                        class PremptionVulnerabilityEnum(Enum):
                            """
                            PremptionVulnerabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                             service data flow can lose the resources assigned to it in

                             order to admit a service data flow with a higher priority

                             level.  The following values are defined\:

                               Enabled (0)\: This value indicates that the resources

                               assigned to the IP data flow can be preempted and

                               allocated to a service data flow with a higher

                               priority level.

                               Disabled (1)\: This value indicates that the resources

                               assigned to the IP data flow shall not be preempted and

                               allocated to a service data flow with a higher priority

                               level.  The values (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.PremptionVulnerabilityEnum']



                        class PerSessionAggMaxDl(object):
                            """
                            Per\-Session\-Agg\-Max\-Bit\-Rate Value
                            
                            .. attribute:: exclude_flag
                            
                            	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            .. attribute:: max_rate
                            
                            	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: service_flag
                            
                            	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.exclude_flag = None
                                self.max_rate = None
                                self.service_flag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:per-session-agg-max-dl'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exclude_flag is not None:
                                    return True

                                if self.max_rate is not None:
                                    return True

                                if self.service_flag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.PerSessionAggMaxDl']['meta_info']


                        class PerSessionAggMaxUl(object):
                            """
                            Per\-Session\-Agg\-Max\-Bit\-Rate Value
                            
                            .. attribute:: exclude_flag
                            
                            	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            .. attribute:: max_rate
                            
                            	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: service_flag
                            
                            	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.exclude_flag = None
                                self.max_rate = None
                                self.service_flag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:per-session-agg-max-ul'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exclude_flag is not None:
                                    return True

                                if self.max_rate is not None:
                                    return True

                                if self.service_flag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.PerSessionAggMaxUl']['meta_info']


                        class TrafficSelector(object):
                            """
                            traffic selector
                            
                            .. attribute:: destination_address_range_v4
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: destination_address_range_v6
                            
                            	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: destination_port_range
                            
                            	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                            	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationPortRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ds_range
                            
                            	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                            	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.DsRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: flow_label_range
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                            	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.FlowLabelRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ipsec_spi_range
                            
                            	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                            	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.IpsecSpiRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: next_header_range
                            
                            	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                            	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.NextHeaderRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: protocol_range
                            
                            	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                            	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.ProtocolRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_address_range_v4
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV4>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_address_range_v6
                            
                            	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV6>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_port_range
                            
                            	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                            	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.SourcePortRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: traffic_class_range
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                            	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.TrafficClassRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ts_format
                            
                            	Traffic Selector Format
                            	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.destination_address_range_v4 = None
                                self.destination_address_range_v6 = None
                                self.destination_port_range = None
                                self.ds_range = None
                                self.flow_label_range = None
                                self.ipsec_spi_range = None
                                self.next_header_range = None
                                self.protocol_range = None
                                self.source_address_range_v4 = None
                                self.source_address_range_v6 = None
                                self.source_port_range = None
                                self.traffic_class_range = None
                                self.ts_format = None


                            class IpsecSpiRange(object):
                                """
                                Inclusive range representing IPSec Security Parameter
                                Indices to be used. When only start\-spi is present, it
                                represents a single spi.
                                
                                .. attribute:: end_spi
                                
                                	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: start_spi
                                
                                	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_spi = None
                                    self.start_spi = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_spi is not None:
                                        return True

                                    if self.start_spi is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.IpsecSpiRange']['meta_info']


                            class SourcePortRange(object):
                                """
                                Inclusive range representing source ports to be used.
                                When only start\-port is present, it represents a single
                                      port.
                                
                                .. attribute:: end_port
                                
                                	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: start_port
                                
                                	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_port = None
                                    self.start_port = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_port is not None:
                                        return True

                                    if self.start_port is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.SourcePortRange']['meta_info']


                            class DestinationPortRange(object):
                                """
                                Inclusive range representing destination ports to be used.
                                When only start\-port is present, it represents a single
                                port.
                                
                                .. attribute:: end_port
                                
                                	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: start_port
                                
                                	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_port = None
                                    self.start_port = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_port is not None:
                                        return True

                                    if self.start_port is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationPortRange']['meta_info']


                            class SourceAddressRangeV4(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-address is present, it represents a single
                                address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV4']['meta_info']


                            class DestinationAddressRangeV4(object):
                                """
                                Inclusive range representing IPv4 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4']['meta_info']


                            class DsRange(object):
                                """
                                Inclusive range representing DiffServ Codepoints to be used.
                                When only start\-ds is present, it represents a single
                                Codepoint.
                                
                                .. attribute:: end_ds
                                
                                	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: start_ds
                                
                                	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_ds = None
                                    self.start_ds = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_ds is not None:
                                        return True

                                    if self.start_ds is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.DsRange']['meta_info']


                            class ProtocolRange(object):
                                """
                                Inclusive range representing IP protocol(s) to be used. When
                                only start\-protocol is present, it represents a single
                                protocol.
                                
                                .. attribute:: end_protocol
                                
                                	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: start_protocol
                                
                                	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_protocol = None
                                    self.start_protocol = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_protocol is not None:
                                        return True

                                    if self.start_protocol is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.ProtocolRange']['meta_info']


                            class SourceAddressRangeV6(object):
                                """
                                Inclusive range representing IPv6 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.SourceAddressRangeV6']['meta_info']


                            class DestinationAddressRangeV6(object):
                                """
                                Inclusive range representing IPv6 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6']['meta_info']


                            class FlowLabelRange(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-flow\-label is present, it represents a single
                                flow label.
                                
                                .. attribute:: end_flow_label
                                
                                	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                                	**type**\:  int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: start_flow_label
                                
                                	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                                	**type**\:  int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_flow_label = None
                                    self.start_flow_label = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_flow_label is not None:
                                        return True

                                    if self.start_flow_label is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.FlowLabelRange']['meta_info']


                            class TrafficClassRange(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-traffic\-class is present, it represents a single
                                traffic class.
                                
                                .. attribute:: end_traffic_class
                                
                                	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: start_traffic_class
                                
                                	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_traffic_class = None
                                    self.start_traffic_class = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_traffic_class is not None:
                                        return True

                                    if self.start_traffic_class is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.TrafficClassRange']['meta_info']


                            class NextHeaderRange(object):
                                """
                                Inclusive range representing Next Headers to be used. When
                                only start\-next\-header is present, it represents a
                                single Next Header.
                                
                                .. attribute:: end_next_header
                                
                                	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: start_next_header
                                
                                	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_next_header = None
                                    self.start_next_header = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_next_header is not None:
                                        return True

                                    if self.start_next_header is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector.NextHeaderRange']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-selector'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                    return True

                                if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                    return True

                                if self.destination_port_range is not None and self.destination_port_range._has_data():
                                    return True

                                if self.ds_range is not None and self.ds_range._has_data():
                                    return True

                                if self.flow_label_range is not None and self.flow_label_range._has_data():
                                    return True

                                if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                    return True

                                if self.next_header_range is not None and self.next_header_range._has_data():
                                    return True

                                if self.protocol_range is not None and self.protocol_range._has_data():
                                    return True

                                if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                    return True

                                if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                    return True

                                if self.source_port_range is not None and self.source_port_range._has_data():
                                    return True

                                if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                    return True

                                if self.ts_format is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.TrafficSelector']['meta_info']


                        class Arp(object):
                            """
                            Allocation Retention Priority
                            
                            .. attribute:: premption_capability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.Arp.PremptionCapabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: premption_vulnerability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.Arp.PremptionVulnerabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: prioirty_level
                            
                            	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                            	**type**\:  int
                            
                            	**range:** 0..15
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.premption_capability = None
                                self.premption_vulnerability = None
                                self.prioirty_level = None

                            class PremptionCapabilityEnum(Enum):
                                """
                                PremptionCapabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                service data flow can get resources that were already

                                assigned to another service data flow with a lower priority

                                level.  The following values are defined\:

                                 Enabled (0)\: This value indicates that the service data flow

                                 is allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.

                                 Disabled (1)\: This value indicates that the service data flow

                                 is not allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.  The values

                                 (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.Arp.PremptionCapabilityEnum']


                            class PremptionVulnerabilityEnum(Enum):
                                """
                                PremptionVulnerabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                 service data flow can lose the resources assigned to it in

                                 order to admit a service data flow with a higher priority

                                 level.  The following values are defined\:

                                   Enabled (0)\: This value indicates that the resources

                                   assigned to the IP data flow can be preempted and

                                   allocated to a service data flow with a higher

                                   priority level.

                                   Disabled (1)\: This value indicates that the resources

                                   assigned to the IP data flow shall not be preempted and

                                   allocated to a service data flow with a higher priority

                                   level.  The values (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.Arp.PremptionVulnerabilityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-threegpp:arp'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.premption_capability is not None:
                                    return True

                                if self.premption_vulnerability is not None:
                                    return True

                                if self.prioirty_level is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters.Arp']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.agg_max_dl is not None:
                                return True

                            if self.agg_max_ul is not None:
                                return True

                            if self.apn_ambr is not None:
                                return True

                            if self.arp is not None and self.arp._has_data():
                                return True

                            if self.attributetype is not None:
                                return True

                            if self.gbr is not None:
                                return True

                            if self.gbr_dl is not None:
                                return True

                            if self.gbr_ul is not None:
                                return True

                            if self.mbr is not None:
                                return True

                            if self.per_mn_agg_max_dl is not None:
                                return True

                            if self.per_mn_agg_max_ul is not None:
                                return True

                            if self.per_session_agg_max_dl is not None and self.per_session_agg_max_dl._has_data():
                                return True

                            if self.per_session_agg_max_ul is not None and self.per_session_agg_max_ul._has_data():
                                return True

                            if self.premption_capability is not None:
                                return True

                            if self.premption_vulnerability is not None:
                                return True

                            if self.prioirty_level is not None:
                                return True

                            if self.qci is not None:
                                return True

                            if self.qos_type is not None:
                                return True

                            if self.traffic_selector is not None and self.traffic_selector._has_data():
                                return True

                            if self.ue_ambr is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.QosProfileParameters']['meta_info']


                    class DpnParameters(object):
                        """
                        DPN Parameters
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.DpnParameters']['meta_info']


                    class VendorParameters(object):
                        """
                        Vendor Parameters
                        
                        .. attribute:: vendor_id  <key>
                        
                        	Vendor ID
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: vendor_type  <key>
                        
                        	Attribute Type
                        	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                        
                        .. attribute:: empty_type
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.vendor_id = None
                            self.vendor_type = None
                            self.empty_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.vendor_id is None:
                                raise YPYModelError('Key property vendor_id is None')
                            if self.vendor_type is None:
                                raise YPYModelError('Key property vendor_type is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.vendor_id is not None:
                                return True

                            if self.vendor_type is not None:
                                return True

                            if self.empty_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul.VendorParameters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:ul'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                            return True

                        if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                            return True

                        if self.mtu_size is not None:
                            return True

                        if self.nexthop is not None and self.nexthop._has_data():
                            return True

                        if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                            return True

                        if self.tunnel_local_address is not None:
                            return True

                        if self.tunnel_remote_address is not None:
                            return True

                        if self.vendor_parameters is not None:
                            for child_ref in self.vendor_parameters:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Ul']['meta_info']


                class Dl(object):
                    """
                    Downlink
                    
                    .. attribute:: dpn_parameters
                    
                    	DPN Parameters
                    	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.DpnParameters>`
                    
                    .. attribute:: mobility_tunnel_parameters
                    
                    	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                    	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters>`
                    
                    .. attribute:: mtu_size
                    
                    	MTU size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop
                    
                    	Next Hop
                    	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.Nexthop>`
                    
                    .. attribute:: qos_profile_parameters
                    
                    	QoS Parameters
                    	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters>`
                    
                    .. attribute:: tunnel_local_address
                    
                    	endpoint address of the DPN which a gent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: tunnel_remote_address
                    
                    	endpoint address of the DPN which agent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: vendor_parameters
                    
                    	Vendor Parameters
                    	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.VendorParameters>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.dpn_parameters = ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.DpnParameters()
                        self.dpn_parameters.parent = self
                        self.mobility_tunnel_parameters = ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters()
                        self.mobility_tunnel_parameters.parent = self
                        self.mtu_size = None
                        self.nexthop = ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.Nexthop()
                        self.nexthop.parent = self
                        self.qos_profile_parameters = ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters()
                        self.qos_profile_parameters.parent = self
                        self.tunnel_local_address = None
                        self.tunnel_remote_address = None
                        self.vendor_parameters = YList()
                        self.vendor_parameters.parent = self
                        self.vendor_parameters.name = 'vendor_parameters'


                    class MobilityTunnelParameters(object):
                        """
                        Specifies profile specific lylebe551144 tunnel
                        parameters to the DPN which the agent exists. The
                        profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                        ietf\-pmip profile, or new profile if anyone will define
                        it.
                        
                        .. attribute:: destination_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_port_range
                        
                        	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                        	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.DestinationPortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ds_range
                        
                        	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                        	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.DsRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: flow_label_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                        	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.FlowLabelRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ipsec_spi_range
                        
                        	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                        	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.IpsecSpiRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: key
                        
                        	GRE\_KEY
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: next_header_range
                        
                        	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                        	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.NextHeaderRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: none
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: packet_filters
                        
                        	List of Packet Filters
                        	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.PacketFilters>`
                        
                        .. attribute:: protocol_range
                        
                        	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                        	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.ProtocolRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: selector_reference
                        
                        	Pre\-configured selector
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: source_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_port_range
                        
                        	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                        	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.SourcePortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: tft_reference
                        
                        	Pre\-configured TFT
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: traffic_class_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                        	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.TrafficClassRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ts_format
                        
                        	Traffic Selector Format
                        	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                        
                        .. attribute:: tunnel_identifier
                        
                        	Tunnel Endpoint IDentifier (TEID)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_type
                        
                        	3GPP Tunnel Subtype
                        	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                        
                        .. attribute:: type
                        
                        	PMIP Mobility
                        	**type**\:   :py:class:`PmipTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipTunnelTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.destination_address_range_v4 = None
                            self.destination_address_range_v6 = None
                            self.destination_port_range = None
                            self.ds_range = None
                            self.flow_label_range = None
                            self.ipsec_spi_range = None
                            self.key = None
                            self.next_header_range = None
                            self.none = None
                            self.packet_filters = YList()
                            self.packet_filters.parent = self
                            self.packet_filters.name = 'packet_filters'
                            self.protocol_range = None
                            self.selector_reference = None
                            self.source_address_range_v4 = None
                            self.source_address_range_v6 = None
                            self.source_port_range = None
                            self.tft_reference = None
                            self.traffic_class_range = None
                            self.ts_format = None
                            self.tunnel_identifier = None
                            self.tunnel_type = None
                            self.type = None


                        class IpsecSpiRange(object):
                            """
                            Inclusive range representing IPSec Security Parameter
                            Indices to be used. When only start\-spi is present, it
                            represents a single spi.
                            
                            .. attribute:: end_spi
                            
                            	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: start_spi
                            
                            	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_spi = None
                                self.start_spi = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_spi is not None:
                                    return True

                                if self.start_spi is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.IpsecSpiRange']['meta_info']


                        class SourcePortRange(object):
                            """
                            Inclusive range representing source ports to be used.
                            When only start\-port is present, it represents a single
                                  port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.SourcePortRange']['meta_info']


                        class DestinationPortRange(object):
                            """
                            Inclusive range representing destination ports to be used.
                            When only start\-port is present, it represents a single
                            port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.DestinationPortRange']['meta_info']


                        class SourceAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-address is present, it represents a single
                            address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV4']['meta_info']


                        class DestinationAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV4']['meta_info']


                        class DsRange(object):
                            """
                            Inclusive range representing DiffServ Codepoints to be used.
                            When only start\-ds is present, it represents a single
                            Codepoint.
                            
                            .. attribute:: end_ds
                            
                            	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_ds
                            
                            	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_ds = None
                                self.start_ds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_ds is not None:
                                    return True

                                if self.start_ds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.DsRange']['meta_info']


                        class ProtocolRange(object):
                            """
                            Inclusive range representing IP protocol(s) to be used. When
                            only start\-protocol is present, it represents a single
                            protocol.
                            
                            .. attribute:: end_protocol
                            
                            	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_protocol
                            
                            	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_protocol = None
                                self.start_protocol = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_protocol is not None:
                                    return True

                                if self.start_protocol is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.ProtocolRange']['meta_info']


                        class SourceAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.SourceAddressRangeV6']['meta_info']


                        class DestinationAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.DestinationAddressRangeV6']['meta_info']


                        class FlowLabelRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-flow\-label is present, it represents a single
                            flow label.
                            
                            .. attribute:: end_flow_label
                            
                            	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: start_flow_label
                            
                            	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_flow_label = None
                                self.start_flow_label = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_flow_label is not None:
                                    return True

                                if self.start_flow_label is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.FlowLabelRange']['meta_info']


                        class TrafficClassRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-traffic\-class is present, it represents a single
                            traffic class.
                            
                            .. attribute:: end_traffic_class
                            
                            	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_traffic_class
                            
                            	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_traffic_class = None
                                self.start_traffic_class = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_traffic_class is not None:
                                    return True

                                if self.start_traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.TrafficClassRange']['meta_info']


                        class NextHeaderRange(object):
                            """
                            Inclusive range representing Next Headers to be used. When
                            only start\-next\-header is present, it represents a
                            single Next Header.
                            
                            .. attribute:: end_next_header
                            
                            	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_next_header
                            
                            	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_next_header = None
                                self.start_next_header = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_next_header is not None:
                                    return True

                                if self.start_next_header is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.NextHeaderRange']['meta_info']


                        class PacketFilters(object):
                            """
                            List of Packet Filters
                            
                            .. attribute:: identifier  <key>
                            
                            	Filter Identifier
                            	**type**\:  int
                            
                            	**range:** 1..15
                            
                            .. attribute:: contents
                            
                            	Filter Contents
                            	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.PacketFilters.Contents>`
                            
                            .. attribute:: direction
                            
                            	Filter Direction
                            	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                            
                            .. attribute:: evaluation_precedence
                            
                            	Evaluation Precedence
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.identifier = None
                                self.contents = YList()
                                self.contents.parent = self
                                self.contents.name = 'contents'
                                self.direction = None
                                self.evaluation_precedence = None


                            class Contents(object):
                                """
                                Filter Contents
                                
                                .. attribute:: component_type_identifier  <key>
                                
                                	Component Type
                                	**type**\:  int
                                
                                	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                                
                                .. attribute:: flow_label
                                
                                	Flow Label
                                	**type**\:  list of int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: ipsec_index
                                
                                	IPSec Index
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_ipv6_remote
                                
                                	Ipv4 Ipv6 remote address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: ipv4_local
                                
                                	IPv4 Local Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6_prefix_local
                                
                                	IPv6 Local Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: ipv6_prefix_remote
                                
                                	IPv6 Remote Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: local_port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_hi
                                
                                	Local Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_lo
                                
                                	Local Port Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_header
                                
                                	Next Header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: remote_port
                                
                                	Remote Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_hi
                                
                                	Remote Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_lo
                                
                                	Remote Por Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_class
                                
                                	Traffic Class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_hi
                                
                                	Traffic Class Max Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_lo
                                
                                	Traffic Class Min Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                

                                """

                                _prefix = 'threegpp'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self.component_type_identifier = None
                                    self.flow_label = YLeafList()
                                    self.flow_label.parent = self
                                    self.flow_label.name = 'flow_label'
                                    self.ipsec_index = None
                                    self.ipv4_ipv6_remote = None
                                    self.ipv4_local = None
                                    self.ipv6_prefix_local = None
                                    self.ipv6_prefix_remote = None
                                    self.local_port = None
                                    self.local_port_hi = None
                                    self.local_port_lo = None
                                    self.next_header = None
                                    self.remote_port = None
                                    self.remote_port_hi = None
                                    self.remote_port_lo = None
                                    self.traffic_class = None
                                    self.traffic_class_hi = None
                                    self.traffic_class_lo = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.component_type_identifier is None:
                                        raise YPYModelError('Key property component_type_identifier is None')

                                    return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.component_type_identifier is not None:
                                        return True

                                    if self.flow_label is not None:
                                        for child in self.flow_label:
                                            if child is not None:
                                                return True

                                    if self.ipsec_index is not None:
                                        return True

                                    if self.ipv4_ipv6_remote is not None:
                                        return True

                                    if self.ipv4_local is not None:
                                        return True

                                    if self.ipv6_prefix_local is not None:
                                        return True

                                    if self.ipv6_prefix_remote is not None:
                                        return True

                                    if self.local_port is not None:
                                        return True

                                    if self.local_port_hi is not None:
                                        return True

                                    if self.local_port_lo is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.remote_port is not None:
                                        return True

                                    if self.remote_port_hi is not None:
                                        return True

                                    if self.remote_port_lo is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.traffic_class_hi is not None:
                                        return True

                                    if self.traffic_class_lo is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.identifier is None:
                                    raise YPYModelError('Key property identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.identifier is not None:
                                    return True

                                if self.contents is not None:
                                    for child_ref in self.contents:
                                        if child_ref._has_data():
                                            return True

                                if self.direction is not None:
                                    return True

                                if self.evaluation_precedence is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters.PacketFilters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                return True

                            if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                return True

                            if self.destination_port_range is not None and self.destination_port_range._has_data():
                                return True

                            if self.ds_range is not None and self.ds_range._has_data():
                                return True

                            if self.flow_label_range is not None and self.flow_label_range._has_data():
                                return True

                            if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                return True

                            if self.key is not None:
                                return True

                            if self.next_header_range is not None and self.next_header_range._has_data():
                                return True

                            if self.none is not None:
                                return True

                            if self.packet_filters is not None:
                                for child_ref in self.packet_filters:
                                    if child_ref._has_data():
                                        return True

                            if self.protocol_range is not None and self.protocol_range._has_data():
                                return True

                            if self.selector_reference is not None:
                                return True

                            if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                return True

                            if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                return True

                            if self.source_port_range is not None and self.source_port_range._has_data():
                                return True

                            if self.tft_reference is not None:
                                return True

                            if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                return True

                            if self.ts_format is not None:
                                return True

                            if self.tunnel_identifier is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            if self.type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.MobilityTunnelParameters']['meta_info']


                    class Nexthop(object):
                        """
                        Next Hop
                        
                        .. attribute:: if_index
                        
                        	If (interface) Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: ip
                        
                        	IP Value
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: lsp
                        
                        	MPLS Value
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: macaddress
                        
                        	MAC Address Value
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: nexthop_type
                        
                        	Nexthop Type
                        	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                        
                        .. attribute:: servicepath
                        
                        	Service Path Value
                        	**type**\:  int
                        
                        	**range:** 0..33554431
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.if_index = None
                            self.ip = None
                            self.lsp = None
                            self.macaddress = None
                            self.nexthop_type = None
                            self.servicepath = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.if_index is not None:
                                return True

                            if self.ip is not None:
                                return True

                            if self.lsp is not None:
                                return True

                            if self.macaddress is not None:
                                return True

                            if self.nexthop_type is not None:
                                return True

                            if self.servicepath is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.Nexthop']['meta_info']


                    class QosProfileParameters(object):
                        """
                        QoS Parameters
                        
                        .. attribute:: agg_max_dl
                        
                        	Aggregate\-Max\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: agg_max_ul
                        
                        	Aggregate\-Max\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: apn_ambr
                        
                        	Access Point Name Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: arp
                        
                        	Allocation Retention Priority
                        	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.Arp>`
                        
                        .. attribute:: attributetype
                        
                        	the attribute type
                        	**type**\:   :py:class:`QosAttributeTypeIdentity <ydk.models.ietf.ietf_pmip_qos.QosAttributeTypeIdentity>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: gbr
                        
                        	Guaranteed Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: gbr_dl
                        
                        	Guaranteed\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: gbr_ul
                        
                        	Guaranteed\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mbr
                        
                        	Maximum Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_mn_agg_max_dl
                        
                        	Per\-MN\-Agg\-Max\-DL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_mn_agg_max_ul
                        
                        	Per\-MN\-Agg\-Max\-UL\-Bit\-Rate Value
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: per_session_agg_max_dl
                        
                        	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        	**type**\:   :py:class:`PerSessionAggMaxDl <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.PerSessionAggMaxDl>`
                        
                        .. attribute:: per_session_agg_max_ul
                        
                        	Per\-Session\-Agg\-Max\-Bit\-Rate Value
                        	**type**\:   :py:class:`PerSessionAggMaxUl <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.PerSessionAggMaxUl>`
                        
                        .. attribute:: premption_capability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.PremptionCapabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: premption_vulnerability
                        
                        	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                        	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.PremptionVulnerabilityEnum>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: prioirty_level
                        
                        	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                        	**type**\:  int
                        
                        	**range:** 0..15
                        
                        	**mandatory**\: True
                        
                        .. attribute:: qci
                        
                        	QCI
                        	**type**\:  int
                        
                        	**range:** 1..9
                        
                        .. attribute:: qos_type
                        
                        	the profile type
                        	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                        
                        .. attribute:: traffic_selector
                        
                        	traffic selector
                        	**type**\:   :py:class:`TrafficSelector <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector>`
                        
                        .. attribute:: ue_ambr
                        
                        	User Equipment Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.agg_max_dl = None
                            self.agg_max_ul = None
                            self.apn_ambr = None
                            self.arp = ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.Arp()
                            self.arp.parent = self
                            self.attributetype = None
                            self.gbr = None
                            self.gbr_dl = None
                            self.gbr_ul = None
                            self.mbr = None
                            self.per_mn_agg_max_dl = None
                            self.per_mn_agg_max_ul = None
                            self.per_session_agg_max_dl = ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.PerSessionAggMaxDl()
                            self.per_session_agg_max_dl.parent = self
                            self.per_session_agg_max_ul = ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.PerSessionAggMaxUl()
                            self.per_session_agg_max_ul.parent = self
                            self.premption_capability = None
                            self.premption_vulnerability = None
                            self.prioirty_level = None
                            self.qci = None
                            self.qos_type = None
                            self.traffic_selector = ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector()
                            self.traffic_selector.parent = self
                            self.ue_ambr = None

                        class PremptionCapabilityEnum(Enum):
                            """
                            PremptionCapabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                            service data flow can get resources that were already

                            assigned to another service data flow with a lower priority

                            level.  The following values are defined\:

                             Enabled (0)\: This value indicates that the service data flow

                             is allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.

                             Disabled (1)\: This value indicates that the service data flow

                             is not allowed to get resources that were already assigned to

                             another IP data flow with a lower priority level.  The values

                             (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.PremptionCapabilityEnum']


                        class PremptionVulnerabilityEnum(Enum):
                            """
                            PremptionVulnerabilityEnum

                            This is a 2\-bit unsigned integer value.  It defines whether a

                             service data flow can lose the resources assigned to it in

                             order to admit a service data flow with a higher priority

                             level.  The following values are defined\:

                               Enabled (0)\: This value indicates that the resources

                               assigned to the IP data flow can be preempted and

                               allocated to a service data flow with a higher

                               priority level.

                               Disabled (1)\: This value indicates that the resources

                               assigned to the IP data flow shall not be preempted and

                               allocated to a service data flow with a higher priority

                               level.  The values (2) and (3) are reserved.

                            .. data:: enabled = 0

                            	enabled

                            .. data:: disabled = 1

                            	disabled

                            .. data:: reserved1 = 2

                            	reserved1

                            .. data:: reserved2 = 3

                            	reserved2

                            """

                            enabled = 0

                            disabled = 1

                            reserved1 = 2

                            reserved2 = 3


                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.PremptionVulnerabilityEnum']



                        class PerSessionAggMaxDl(object):
                            """
                            Per\-Session\-Agg\-Max\-Bit\-Rate Value
                            
                            .. attribute:: exclude_flag
                            
                            	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            .. attribute:: max_rate
                            
                            	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: service_flag
                            
                            	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.exclude_flag = None
                                self.max_rate = None
                                self.service_flag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:per-session-agg-max-dl'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exclude_flag is not None:
                                    return True

                                if self.max_rate is not None:
                                    return True

                                if self.service_flag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.PerSessionAggMaxDl']['meta_info']


                        class PerSessionAggMaxUl(object):
                            """
                            Per\-Session\-Agg\-Max\-Bit\-Rate Value
                            
                            .. attribute:: exclude_flag
                            
                            	This flag is used to request that the uplink/downlink          flows for which the network is providing    Guaranteed\-Bit\-Rate service be excluded from the    target IP flows for which    Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured.     \-  When the (E) flag is set to a value of (1), then the       request is to exclude the IP flows for which       Guaranteed\-UL/DL\-Bit\-Rate is negotiated from the flows       for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate           is measured.     \-  When the (E) flag is set to a value of (0), then the       request is not to exclude any IP flows from the target       IP flows for which Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate       is measured.     \-  When the (S) flag and (E) flag are both set to a value       of (1), then the request is to exclude all the IP flows       sharing the Service Identifier associated with this       mobility session from the target flows for which       Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate is measured
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            .. attribute:: max_rate
                            
                            	This is a 32\-bit unsigned integer that indicates the aggregate maximum bit rate that is requested/allocated for all the IP flows associated with that mobility session.  The measurement units for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate are bits per second
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: service_flag
                            
                            	This flag is used for extending the scope of the     target flows for Per\-Session\-Agg\-Max\-UL/DL\-Bit\-Rate     from(UL)/to(DL) the mobile node's other mobility sessions     sharing the same Service Identifier. 3GPP Access Point Name     (APN) is an example of a Service Identifier, and that     identifier is carried using the Service Selection mobility     option [RFC5149].      \-  When the (S) flag is set to a value of (1), then the        Per\-Session\-Agg\-Max\-Bit\-Rate is measured as an        aggregate across all the mobile node's other mobility        sessions sharing the same Service Identifier associated        with this mobility session.      \-  When the (S) flag is set to a value of (0), then the        target flows are limited to the current mobility        session.      \-  The (S) flag MUST NOT be set to a value of (1) when there        is no Service Identifier associated with the mobility        session
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.exclude_flag = None
                                self.max_rate = None
                                self.service_flag = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:per-session-agg-max-ul'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.exclude_flag is not None:
                                    return True

                                if self.max_rate is not None:
                                    return True

                                if self.service_flag is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.PerSessionAggMaxUl']['meta_info']


                        class TrafficSelector(object):
                            """
                            traffic selector
                            
                            .. attribute:: destination_address_range_v4
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: destination_address_range_v6
                            
                            	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: destination_port_range
                            
                            	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                            	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationPortRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ds_range
                            
                            	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                            	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.DsRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: flow_label_range
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                            	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.FlowLabelRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ipsec_spi_range
                            
                            	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                            	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.IpsecSpiRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: next_header_range
                            
                            	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                            	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.NextHeaderRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: protocol_range
                            
                            	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                            	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.ProtocolRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_address_range_v4
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV4>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_address_range_v6
                            
                            	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                            	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV6>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: source_port_range
                            
                            	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                            	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.SourcePortRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: traffic_class_range
                            
                            	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                            	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.TrafficClassRange>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: ts_format
                            
                            	Traffic Selector Format
                            	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                            
                            

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.destination_address_range_v4 = None
                                self.destination_address_range_v6 = None
                                self.destination_port_range = None
                                self.ds_range = None
                                self.flow_label_range = None
                                self.ipsec_spi_range = None
                                self.next_header_range = None
                                self.protocol_range = None
                                self.source_address_range_v4 = None
                                self.source_address_range_v6 = None
                                self.source_port_range = None
                                self.traffic_class_range = None
                                self.ts_format = None


                            class IpsecSpiRange(object):
                                """
                                Inclusive range representing IPSec Security Parameter
                                Indices to be used. When only start\-spi is present, it
                                represents a single spi.
                                
                                .. attribute:: end_spi
                                
                                	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: start_spi
                                
                                	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_spi = None
                                    self.start_spi = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_spi is not None:
                                        return True

                                    if self.start_spi is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.IpsecSpiRange']['meta_info']


                            class SourcePortRange(object):
                                """
                                Inclusive range representing source ports to be used.
                                When only start\-port is present, it represents a single
                                      port.
                                
                                .. attribute:: end_port
                                
                                	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: start_port
                                
                                	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_port = None
                                    self.start_port = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_port is not None:
                                        return True

                                    if self.start_port is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.SourcePortRange']['meta_info']


                            class DestinationPortRange(object):
                                """
                                Inclusive range representing destination ports to be used.
                                When only start\-port is present, it represents a single
                                port.
                                
                                .. attribute:: end_port
                                
                                	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: start_port
                                
                                	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_port = None
                                    self.start_port = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_port is not None:
                                        return True

                                    if self.start_port is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationPortRange']['meta_info']


                            class SourceAddressRangeV4(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-address is present, it represents a single
                                address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV4']['meta_info']


                            class DestinationAddressRangeV4(object):
                                """
                                Inclusive range representing IPv4 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV4']['meta_info']


                            class DsRange(object):
                                """
                                Inclusive range representing DiffServ Codepoints to be used.
                                When only start\-ds is present, it represents a single
                                Codepoint.
                                
                                .. attribute:: end_ds
                                
                                	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: start_ds
                                
                                	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_ds = None
                                    self.start_ds = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_ds is not None:
                                        return True

                                    if self.start_ds is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.DsRange']['meta_info']


                            class ProtocolRange(object):
                                """
                                Inclusive range representing IP protocol(s) to be used. When
                                only start\-protocol is present, it represents a single
                                protocol.
                                
                                .. attribute:: end_protocol
                                
                                	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: start_protocol
                                
                                	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_protocol = None
                                    self.start_protocol = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_protocol is not None:
                                        return True

                                    if self.start_protocol is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.ProtocolRange']['meta_info']


                            class SourceAddressRangeV6(object):
                                """
                                Inclusive range representing IPv6 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.SourceAddressRangeV6']['meta_info']


                            class DestinationAddressRangeV6(object):
                                """
                                Inclusive range representing IPv6 addresses to be used.
                                When only start\-address is present, it represents a
                                single address.
                                
                                .. attribute:: end_address
                                
                                	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: start_address
                                
                                	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_address = None
                                    self.start_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_address is not None:
                                        return True

                                    if self.start_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.DestinationAddressRangeV6']['meta_info']


                            class FlowLabelRange(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-flow\-label is present, it represents a single
                                flow label.
                                
                                .. attribute:: end_flow_label
                                
                                	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                                	**type**\:  int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: start_flow_label
                                
                                	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                                	**type**\:  int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_flow_label = None
                                    self.start_flow_label = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_flow_label is not None:
                                        return True

                                    if self.start_flow_label is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.FlowLabelRange']['meta_info']


                            class TrafficClassRange(object):
                                """
                                Inclusive range representing IPv4 addresses to be used. When
                                only start\-traffic\-class is present, it represents a single
                                traffic class.
                                
                                .. attribute:: end_traffic_class
                                
                                	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: start_traffic_class
                                
                                	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_traffic_class = None
                                    self.start_traffic_class = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_traffic_class is not None:
                                        return True

                                    if self.start_traffic_class is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.TrafficClassRange']['meta_info']


                            class NextHeaderRange(object):
                                """
                                Inclusive range representing Next Headers to be used. When
                                only start\-next\-header is present, it represents a
                                single Next Header.
                                
                                .. attribute:: end_next_header
                                
                                	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: start_next_header
                                
                                	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'fpc-pmip'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self._is_presence = True
                                    self.end_next_header = None
                                    self.start_next_header = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self._is_presence:
                                        return True
                                    if self.end_next_header is not None:
                                        return True

                                    if self.start_next_header is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector.NextHeaderRange']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-selector'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                    return True

                                if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                    return True

                                if self.destination_port_range is not None and self.destination_port_range._has_data():
                                    return True

                                if self.ds_range is not None and self.ds_range._has_data():
                                    return True

                                if self.flow_label_range is not None and self.flow_label_range._has_data():
                                    return True

                                if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                    return True

                                if self.next_header_range is not None and self.next_header_range._has_data():
                                    return True

                                if self.protocol_range is not None and self.protocol_range._has_data():
                                    return True

                                if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                    return True

                                if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                    return True

                                if self.source_port_range is not None and self.source_port_range._has_data():
                                    return True

                                if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                    return True

                                if self.ts_format is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.TrafficSelector']['meta_info']


                        class Arp(object):
                            """
                            Allocation Retention Priority
                            
                            .. attribute:: premption_capability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.Arp.PremptionCapabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: premption_vulnerability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.Arp.PremptionVulnerabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: prioirty_level
                            
                            	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                            	**type**\:  int
                            
                            	**range:** 0..15
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.premption_capability = None
                                self.premption_vulnerability = None
                                self.prioirty_level = None

                            class PremptionCapabilityEnum(Enum):
                                """
                                PremptionCapabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                service data flow can get resources that were already

                                assigned to another service data flow with a lower priority

                                level.  The following values are defined\:

                                 Enabled (0)\: This value indicates that the service data flow

                                 is allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.

                                 Disabled (1)\: This value indicates that the service data flow

                                 is not allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.  The values

                                 (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.Arp.PremptionCapabilityEnum']


                            class PremptionVulnerabilityEnum(Enum):
                                """
                                PremptionVulnerabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                 service data flow can lose the resources assigned to it in

                                 order to admit a service data flow with a higher priority

                                 level.  The following values are defined\:

                                   Enabled (0)\: This value indicates that the resources

                                   assigned to the IP data flow can be preempted and

                                   allocated to a service data flow with a higher

                                   priority level.

                                   Disabled (1)\: This value indicates that the resources

                                   assigned to the IP data flow shall not be preempted and

                                   allocated to a service data flow with a higher priority

                                   level.  The values (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.Arp.PremptionVulnerabilityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-threegpp:arp'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.premption_capability is not None:
                                    return True

                                if self.premption_vulnerability is not None:
                                    return True

                                if self.prioirty_level is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters.Arp']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.agg_max_dl is not None:
                                return True

                            if self.agg_max_ul is not None:
                                return True

                            if self.apn_ambr is not None:
                                return True

                            if self.arp is not None and self.arp._has_data():
                                return True

                            if self.attributetype is not None:
                                return True

                            if self.gbr is not None:
                                return True

                            if self.gbr_dl is not None:
                                return True

                            if self.gbr_ul is not None:
                                return True

                            if self.mbr is not None:
                                return True

                            if self.per_mn_agg_max_dl is not None:
                                return True

                            if self.per_mn_agg_max_ul is not None:
                                return True

                            if self.per_session_agg_max_dl is not None and self.per_session_agg_max_dl._has_data():
                                return True

                            if self.per_session_agg_max_ul is not None and self.per_session_agg_max_ul._has_data():
                                return True

                            if self.premption_capability is not None:
                                return True

                            if self.premption_vulnerability is not None:
                                return True

                            if self.prioirty_level is not None:
                                return True

                            if self.qci is not None:
                                return True

                            if self.qos_type is not None:
                                return True

                            if self.traffic_selector is not None and self.traffic_selector._has_data():
                                return True

                            if self.ue_ambr is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.QosProfileParameters']['meta_info']


                    class DpnParameters(object):
                        """
                        DPN Parameters
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.DpnParameters']['meta_info']


                    class VendorParameters(object):
                        """
                        Vendor Parameters
                        
                        .. attribute:: vendor_id  <key>
                        
                        	Vendor ID
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: vendor_type  <key>
                        
                        	Attribute Type
                        	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                        
                        .. attribute:: empty_type
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.vendor_id = None
                            self.vendor_type = None
                            self.empty_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.vendor_id is None:
                                raise YPYModelError('Key property vendor_id is None')
                            if self.vendor_type is None:
                                raise YPYModelError('Key property vendor_type is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.vendor_id is not None:
                                return True

                            if self.vendor_type is not None:
                                return True

                            if self.empty_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl.VendorParameters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:dl'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                            return True

                        if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                            return True

                        if self.mtu_size is not None:
                            return True

                        if self.nexthop is not None and self.nexthop._has_data():
                            return True

                        if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                            return True

                        if self.tunnel_local_address is not None:
                            return True

                        if self.tunnel_remote_address is not None:
                            return True

                        if self.vendor_parameters is not None:
                            for child_ref in self.vendor_parameters:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dl']['meta_info']


                class Dpns(object):
                    """
                    DPNs
                    
                    .. attribute:: direction  <key>
                    
                    	Direction
                    	**type**\:   :py:class:`FpcDirectionEnum <ydk.models.ietf.ietf_dmm_fpc.FpcDirectionEnum>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dpn_id  <key>
                    
                    	DPN
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: dpn_parameters
                    
                    	DPN Parameters
                    	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.DpnParameters>`
                    
                    .. attribute:: mobility_tunnel_parameters
                    
                    	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                    	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters>`
                    
                    .. attribute:: mtu_size
                    
                    	MTU size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop
                    
                    	Next Hop
                    	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.Nexthop>`
                    
                    .. attribute:: qos_profile_parameters
                    
                    	QoS Parameters
                    	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.QosProfileParameters>`
                    
                    .. attribute:: tunnel_local_address
                    
                    	endpoint address of the DPN which a gent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: tunnel_remote_address
                    
                    	endpoint address of the DPN which agent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: vendor_parameters
                    
                    	Vendor Parameters
                    	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.VendorParameters>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.direction = None
                        self.dpn_id = None
                        self.dpn_parameters = ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.DpnParameters()
                        self.dpn_parameters.parent = self
                        self.mobility_tunnel_parameters = ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters()
                        self.mobility_tunnel_parameters.parent = self
                        self.mtu_size = None
                        self.nexthop = ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.Nexthop()
                        self.nexthop.parent = self
                        self.qos_profile_parameters = ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.QosProfileParameters()
                        self.qos_profile_parameters.parent = self
                        self.tunnel_local_address = None
                        self.tunnel_remote_address = None
                        self.vendor_parameters = YList()
                        self.vendor_parameters.parent = self
                        self.vendor_parameters.name = 'vendor_parameters'


                    class MobilityTunnelParameters(object):
                        """
                        Specifies profile specific lylebe551144 tunnel
                        parameters to the DPN which the agent exists. The
                        profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                        ietf\-pmip profile, or new profile if anyone will define
                        it.
                        
                        .. attribute:: destination_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`DestinationAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: destination_port_range
                        
                        	Inclusive range representing destination ports to be used. When only start\-port is present, it represents a single port
                        	**type**\:   :py:class:`DestinationPortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.DestinationPortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ds_range
                        
                        	Inclusive range representing DiffServ Codepoints to be used. When only start\-ds is present, it represents a single Codepoint
                        	**type**\:   :py:class:`DsRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.DsRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: flow_label_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-flow\-label is present, it represents a single flow label
                        	**type**\:   :py:class:`FlowLabelRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.FlowLabelRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ipsec_spi_range
                        
                        	Inclusive range representing IPSec Security Parameter Indices to be used. When only start\-spi is present, it represents a single spi
                        	**type**\:   :py:class:`IpsecSpiRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.IpsecSpiRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: key
                        
                        	GRE\_KEY
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: next_header_range
                        
                        	Inclusive range representing Next Headers to be used. When only start\-next\-header is present, it represents a single Next Header
                        	**type**\:   :py:class:`NextHeaderRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.NextHeaderRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: none
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: packet_filters
                        
                        	List of Packet Filters
                        	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.PacketFilters>`
                        
                        .. attribute:: protocol_range
                        
                        	Inclusive range representing IP protocol(s) to be used. When only start\-protocol is present, it represents a single protocol
                        	**type**\:   :py:class:`ProtocolRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.ProtocolRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: selector_reference
                        
                        	Pre\-configured selector
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: source_address_range_v4
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV4 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV4>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_address_range_v6
                        
                        	Inclusive range representing IPv6 addresses to be used. When only start\-address is present, it represents a single address
                        	**type**\:   :py:class:`SourceAddressRangeV6 <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV6>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: source_port_range
                        
                        	Inclusive range representing source ports to be used. When only start\-port is present, it represents a single       port
                        	**type**\:   :py:class:`SourcePortRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.SourcePortRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: tft_reference
                        
                        	Pre\-configured TFT
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: traffic_class_range
                        
                        	Inclusive range representing IPv4 addresses to be used. When only start\-traffic\-class is present, it represents a single traffic class
                        	**type**\:   :py:class:`TrafficClassRange <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.TrafficClassRange>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: ts_format
                        
                        	Traffic Selector Format
                        	**type**\:   :py:class:`TrafficSelectorFormatIdentity <ydk.models.ietf.ietf_traffic_selector_types.TrafficSelectorFormatIdentity>`
                        
                        .. attribute:: tunnel_identifier
                        
                        	Tunnel Endpoint IDentifier (TEID)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_type
                        
                        	3GPP Tunnel Subtype
                        	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                        
                        .. attribute:: type
                        
                        	PMIP Mobility
                        	**type**\:   :py:class:`PmipTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipTunnelTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.destination_address_range_v4 = None
                            self.destination_address_range_v6 = None
                            self.destination_port_range = None
                            self.ds_range = None
                            self.flow_label_range = None
                            self.ipsec_spi_range = None
                            self.key = None
                            self.next_header_range = None
                            self.none = None
                            self.packet_filters = YList()
                            self.packet_filters.parent = self
                            self.packet_filters.name = 'packet_filters'
                            self.protocol_range = None
                            self.selector_reference = None
                            self.source_address_range_v4 = None
                            self.source_address_range_v6 = None
                            self.source_port_range = None
                            self.tft_reference = None
                            self.traffic_class_range = None
                            self.ts_format = None
                            self.tunnel_identifier = None
                            self.tunnel_type = None
                            self.type = None


                        class IpsecSpiRange(object):
                            """
                            Inclusive range representing IPSec Security Parameter
                            Indices to be used. When only start\-spi is present, it
                            represents a single spi.
                            
                            .. attribute:: end_spi
                            
                            	If more than one contiguous SPI value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start SPI field. This field MUST NOT be included unless the Start SPI field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the SPI values between fields start\-spi and end\-spi, inclusive of start\-spi and end\-spi
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: start_spi
                            
                            	This field identifies the first 32\-bit IPsec SPI value, from the range of SPI values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is defined in [RFC4303]
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_spi = None
                                self.start_spi = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ipsec-spi-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_spi is not None:
                                    return True

                                if self.start_spi is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.IpsecSpiRange']['meta_info']


                        class SourcePortRange(object):
                            """
                            Inclusive range representing source ports to be used.
                            When only start\-port is present, it represents a single
                                  port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous source port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit source port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This is from the range of port numbers defined by IANA      (http\://www.iana.org)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.SourcePortRange']['meta_info']


                        class DestinationPortRange(object):
                            """
                            Inclusive range representing destination ports to be used.
                            When only start\-port is present, it represents a single
                            port.
                            
                            .. attribute:: end_port
                            
                            	If more than one contiguous destination port number needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Port field. This field MUST NOT be included unless the Start Port field is included and has a value less than or equal to this field.  When this field is included, the receiver will match all of the port numbers between fields start\-port and end\-port, inclusive of start\-port and end\-port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: start_port
                            
                            	This field identifies the first 16\-bit destination port number, from the range of port numbers to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_port = None
                                self.start_port = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-port-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_port is not None:
                                    return True

                                if self.start_port is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.DestinationPortRange']['meta_info']


                        class SourceAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-address is present, it represents a single
                            address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV4']['meta_info']


                        class DestinationAddressRangeV4(object):
                            """
                            Inclusive range representing IPv4 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Destination Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 32\-bit IPv4 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV4']['meta_info']


                        class DsRange(object):
                            """
                            Inclusive range representing DiffServ Codepoints to be used.
                            When only start\-ds is present, it represents a single
                            Codepoint.
                            
                            .. attribute:: end_ds
                            
                            	If more than one contiguous DS value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start DS field. This field MUST NOT be included unless the Start DS field is included. When this field is included, it MUST be coded the same way as defined for start\-ds. When this field is included, the receiver will match all of the values between fields start\-ds and end\-ds, inclusive of start\-ds and end\-ds
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_ds
                            
                            	This field identifies the first differential service value, from the range of differential services values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. Note that this field is called a 'Type of Service field' in [RFC0791]. [RFC3260] then clarified that the field has been redefined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) [RFC3168]. For the purpose of this specification, the Start DS field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_ds = None
                                self.start_ds = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:ds-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_ds is not None:
                                    return True

                                if self.start_ds is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.DsRange']['meta_info']


                        class ProtocolRange(object):
                            """
                            Inclusive range representing IP protocol(s) to be used. When
                            only start\-protocol is present, it represents a single
                            protocol.
                            
                            .. attribute:: end_protocol
                            
                            	If more than one contiguous protocol value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Protocol field. This field MUST NOT be included unless the Start Protocol field is included. When this field is included, the receiver will match all of the values between fields start\-protocol and end\-protocol, inclusive of start\-protocol and end\-protocol
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_protocol
                            
                            	This field identifies the first 8\-bit protocol value, from the range of protocol values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_protocol = None
                                self.start_protocol = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:protocol-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_protocol is not None:
                                    return True

                                if self.start_protocol is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.ProtocolRange']['meta_info']


                        class SourceAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous source address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address 
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first source address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the addresses of the correspondent node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:source-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.SourceAddressRangeV6']['meta_info']


                        class DestinationAddressRangeV6(object):
                            """
                            Inclusive range representing IPv6 addresses to be used.
                            When only start\-address is present, it represents a
                            single address.
                            
                            .. attribute:: end_address
                            
                            	If more than one contiguous destination address needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Address field. This field MUST NOT be included unless the Start Address field is included. When this field is included, the receiver will match all of the addresses between fields start\-address and end\-address, inclusive of start\-address and end\-address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: start_address
                            
                            	This field identifies the first destination address, from the range of 128\-bit IPv6 addresses to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. In other words, this is one of the registered home addresses of the mobile node
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_address = None
                                self.start_address = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:destination-address-range-v6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_address is not None:
                                    return True

                                if self.start_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.DestinationAddressRangeV6']['meta_info']


                        class FlowLabelRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-flow\-label is present, it represents a single
                            flow label.
                            
                            .. attribute:: end_flow_label
                            
                            	If more than one contiguous flow label value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start Flow Label field. This field MUST NOT be included unless the Start Flow Label field is included. When this field is included, the receiver will match all of the flow label values between fields start\-flow\-label and end\-flow\-label, inclusive of start\-flow\-label and end\-flow\-label. When this field is included, it MUST be coded the same way as defined for end\-flow\-label
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: start_flow_label
                            
                            	This field identifies the first flow label value, from the range of flow label values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. According to [RFC2460], the flow label is 24 bits long. For the purpose of this specification, the sender of this option MUST prefix the flow label value with 8 bits of '0' before inserting it in the start\-flow\-label field. The receiver SHOULD ignore the first 8 bits of this field before using it in comparisons with flow labels in packets
                            	**type**\:  int
                            
                            	**range:** 0..1048575
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_flow_label = None
                                self.start_flow_label = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:flow-label-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_flow_label is not None:
                                    return True

                                if self.start_flow_label is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.FlowLabelRange']['meta_info']


                        class TrafficClassRange(object):
                            """
                            Inclusive range representing IPv4 addresses to be used. When
                            only start\-traffic\-class is present, it represents a single
                            traffic class.
                            
                            .. attribute:: end_traffic_class
                            
                            	If more than one contiguous TC value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start TC field. This field MUST NOT be included unless the Start TC field is included. When this field is included, it MUST be coded the same way as defined for start\-traffic\-class. When this field is included, the receiver will match all of the values between fields start\-traffic\-class and end\-traffic\-class, inclusive of start\-traffic\-class and end\-traffic\-class
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: start_traffic_class
                            
                            	This field identifies the first traffic class value, from the range of traffic class values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent. This field is equivalent to the Start DS field in the IPv4 traffic selector in Figure 1. As per RFC 3260, the field is defined as a 6\-bit DS field with 2 bits reserved, later claimed by Explicit Congestion Notification (ECN) RFC 3168. For the purpose of this specification, the start\-traffic\-class field is 8 bits long, where the 6 most significant bits indicate the DS field to be matched and the 2 least significant bits' values MUST be ignored in any comparison
                            	**type**\:  int
                            
                            	**range:** 0..63
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_traffic_class = None
                                self.start_traffic_class = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:traffic-class-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_traffic_class is not None:
                                    return True

                                if self.start_traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.TrafficClassRange']['meta_info']


                        class NextHeaderRange(object):
                            """
                            Inclusive range representing Next Headers to be used. When
                            only start\-next\-header is present, it represents a
                            single Next Header.
                            
                            .. attribute:: end_next_header
                            
                            	If more than one contiguous next header value needs to be matched, then this field can be used to indicate the end value of a range starting from the value of the Start NH field. This field MUST NOT be included unless the Start next header field is included. When this field is included, the receiver will match all of the values between fields start\-next\-header and end\-next\-header, inclusive of start\-next\-header and end\-next\-header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: start_next_header
                            
                            	This field identifies the first 8\-bit next header value, from the range of next header values to be matched, on data packets sent from a corresponding node to the mobile node as seen by the home agent
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'fpc-pmip'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self._is_presence = True
                                self.end_next_header = None
                                self.start_next_header = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-fpc-pmip:next-header-range'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self._is_presence:
                                    return True
                                if self.end_next_header is not None:
                                    return True

                                if self.start_next_header is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.NextHeaderRange']['meta_info']


                        class PacketFilters(object):
                            """
                            List of Packet Filters
                            
                            .. attribute:: identifier  <key>
                            
                            	Filter Identifier
                            	**type**\:  int
                            
                            	**range:** 1..15
                            
                            .. attribute:: contents
                            
                            	Filter Contents
                            	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.PacketFilters.Contents>`
                            
                            .. attribute:: direction
                            
                            	Filter Direction
                            	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                            
                            .. attribute:: evaluation_precedence
                            
                            	Evaluation Precedence
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.identifier = None
                                self.contents = YList()
                                self.contents.parent = self
                                self.contents.name = 'contents'
                                self.direction = None
                                self.evaluation_precedence = None


                            class Contents(object):
                                """
                                Filter Contents
                                
                                .. attribute:: component_type_identifier  <key>
                                
                                	Component Type
                                	**type**\:  int
                                
                                	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                                
                                .. attribute:: flow_label
                                
                                	Flow Label
                                	**type**\:  list of int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: ipsec_index
                                
                                	IPSec Index
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_ipv6_remote
                                
                                	Ipv4 Ipv6 remote address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: ipv4_local
                                
                                	IPv4 Local Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6_prefix_local
                                
                                	IPv6 Local Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: ipv6_prefix_remote
                                
                                	IPv6 Remote Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: local_port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_hi
                                
                                	Local Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_lo
                                
                                	Local Port Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_header
                                
                                	Next Header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: remote_port
                                
                                	Remote Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_hi
                                
                                	Remote Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_lo
                                
                                	Remote Por Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_class
                                
                                	Traffic Class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_hi
                                
                                	Traffic Class Max Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_lo
                                
                                	Traffic Class Min Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                

                                """

                                _prefix = 'threegpp'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self.component_type_identifier = None
                                    self.flow_label = YLeafList()
                                    self.flow_label.parent = self
                                    self.flow_label.name = 'flow_label'
                                    self.ipsec_index = None
                                    self.ipv4_ipv6_remote = None
                                    self.ipv4_local = None
                                    self.ipv6_prefix_local = None
                                    self.ipv6_prefix_remote = None
                                    self.local_port = None
                                    self.local_port_hi = None
                                    self.local_port_lo = None
                                    self.next_header = None
                                    self.remote_port = None
                                    self.remote_port_hi = None
                                    self.remote_port_lo = None
                                    self.traffic_class = None
                                    self.traffic_class_hi = None
                                    self.traffic_class_lo = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.component_type_identifier is None:
                                        raise YPYModelError('Key property component_type_identifier is None')

                                    return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.component_type_identifier is not None:
                                        return True

                                    if self.flow_label is not None:
                                        for child in self.flow_label:
                                            if child is not None:
                                                return True

                                    if self.ipsec_index is not None:
                                        return True

                                    if self.ipv4_ipv6_remote is not None:
                                        return True

                                    if self.ipv4_local is not None:
                                        return True

                                    if self.ipv6_prefix_local is not None:
                                        return True

                                    if self.ipv6_prefix_remote is not None:
                                        return True

                                    if self.local_port is not None:
                                        return True

                                    if self.local_port_hi is not None:
                                        return True

                                    if self.local_port_lo is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.remote_port is not None:
                                        return True

                                    if self.remote_port_hi is not None:
                                        return True

                                    if self.remote_port_lo is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.traffic_class_hi is not None:
                                        return True

                                    if self.traffic_class_lo is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.identifier is None:
                                    raise YPYModelError('Key property identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.identifier is not None:
                                    return True

                                if self.contents is not None:
                                    for child_ref in self.contents:
                                        if child_ref._has_data():
                                            return True

                                if self.direction is not None:
                                    return True

                                if self.evaluation_precedence is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters.PacketFilters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address_range_v4 is not None and self.destination_address_range_v4._has_data():
                                return True

                            if self.destination_address_range_v6 is not None and self.destination_address_range_v6._has_data():
                                return True

                            if self.destination_port_range is not None and self.destination_port_range._has_data():
                                return True

                            if self.ds_range is not None and self.ds_range._has_data():
                                return True

                            if self.flow_label_range is not None and self.flow_label_range._has_data():
                                return True

                            if self.ipsec_spi_range is not None and self.ipsec_spi_range._has_data():
                                return True

                            if self.key is not None:
                                return True

                            if self.next_header_range is not None and self.next_header_range._has_data():
                                return True

                            if self.none is not None:
                                return True

                            if self.packet_filters is not None:
                                for child_ref in self.packet_filters:
                                    if child_ref._has_data():
                                        return True

                            if self.protocol_range is not None and self.protocol_range._has_data():
                                return True

                            if self.selector_reference is not None:
                                return True

                            if self.source_address_range_v4 is not None and self.source_address_range_v4._has_data():
                                return True

                            if self.source_address_range_v6 is not None and self.source_address_range_v6._has_data():
                                return True

                            if self.source_port_range is not None and self.source_port_range._has_data():
                                return True

                            if self.tft_reference is not None:
                                return True

                            if self.traffic_class_range is not None and self.traffic_class_range._has_data():
                                return True

                            if self.ts_format is not None:
                                return True

                            if self.tunnel_identifier is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            if self.type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.MobilityTunnelParameters']['meta_info']


                    class Nexthop(object):
                        """
                        Next Hop
                        
                        .. attribute:: if_index
                        
                        	If (interface) Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: ip
                        
                        	IP Value
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: lsp
                        
                        	MPLS Value
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: macaddress
                        
                        	MAC Address Value
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: nexthop_type
                        
                        	Nexthop Type
                        	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                        
                        .. attribute:: servicepath
                        
                        	Service Path Value
                        	**type**\:  int
                        
                        	**range:** 0..33554431
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.if_index = None
                            self.ip = None
                            self.lsp = None
                            self.macaddress = None
                            self.nexthop_type = None
                            self.servicepath = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.if_index is not None:
                                return True

                            if self.ip is not None:
                                return True

                            if self.lsp is not None:
                                return True

                            if self.macaddress is not None:
                                return True

                            if self.nexthop_type is not None:
                                return True

                            if self.servicepath is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.Nexthop']['meta_info']


                    class QosProfileParameters(object):
                        """
                        QoS Parameters
                        
                        .. attribute:: qos_type
                        
                        	the profile type
                        	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.qos_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.qos_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.QosProfileParameters']['meta_info']


                    class DpnParameters(object):
                        """
                        DPN Parameters
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.DpnParameters']['meta_info']


                    class VendorParameters(object):
                        """
                        Vendor Parameters
                        
                        .. attribute:: vendor_id  <key>
                        
                        	Vendor ID
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: vendor_type  <key>
                        
                        	Attribute Type
                        	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                        
                        .. attribute:: empty_type
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.vendor_id = None
                            self.vendor_type = None
                            self.empty_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.vendor_id is None:
                                raise YPYModelError('Key property vendor_id is None')
                            if self.vendor_type is None:
                                raise YPYModelError('Key property vendor_type is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.vendor_id is not None:
                                return True

                            if self.vendor_type is not None:
                                return True

                            if self.empty_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns.VendorParameters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.direction is None:
                            raise YPYModelError('Key property direction is None')
                        if self.dpn_id is None:
                            raise YPYModelError('Key property dpn_id is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:dpns[ietf-dmm-fpc:direction = ' + str(self.direction) + '][ietf-dmm-fpc:dpn-id = ' + str(self.dpn_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.direction is not None:
                            return True

                        if self.dpn_id is not None:
                            return True

                        if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                            return True

                        if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                            return True

                        if self.mtu_size is not None:
                            return True

                        if self.nexthop is not None and self.nexthop._has_data():
                            return True

                        if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                            return True

                        if self.tunnel_local_address is not None:
                            return True

                        if self.tunnel_remote_address is not None:
                            return True

                        if self.vendor_parameters is not None:
                            for child_ref in self.vendor_parameters:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Dpns']['meta_info']


                class Instructions(object):
                    """
                    Instructions
                    
                    .. attribute:: instr_3gpp_mob
                    
                    	3GPP Specific Command Set
                    	**type**\:   :py:class:`ThreegppInstr <ydk.models.ietf.ietf_dmm_threegpp.ThreegppInstr>`
                    
                    .. attribute:: instr_pmip
                    
                    	PMIP Instructions
                    	**type**\:   :py:class:`PmipInstr <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipInstr>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.instr_3gpp_mob = ThreegppInstr()
                        self.instr_pmip = PmipInstr()

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:instructions'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.instr_3gpp_mob is not None:
                            if self.instr_3gpp_mob._has_data():
                                return True

                        if self.instr_pmip is not None:
                            if self.instr_pmip._has_data():
                                return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts.Instructions']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-dmm-fpc:contexts'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.context_id is not None:
                        return True

                    if self.delegated_ip_prefixes is not None:
                        for child in self.delegated_ip_prefixes:
                            if child is not None:
                                return True

                    if self.dl is not None and self.dl._has_data():
                        return True

                    if self.dpn_group is not None:
                        return True

                    if self.dpns is not None:
                        for child_ref in self.dpns:
                            if child_ref._has_data():
                                return True

                    if self.ebi is not None:
                        return True

                    if self.imsi is not None:
                        return True

                    if self.instructions is not None and self.instructions._has_data():
                        return True

                    if self.lbi is not None:
                        return True

                    if self.parent_context is not None:
                        return True

                    if self.ul is not None and self.ul._has_data():
                        return True

                    if self.vports is not None:
                        for child in self.vports:
                            if child is not None:
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Contexts']['meta_info']


            class PolicyGroups(object):
                """
                Policy Groups
                
                .. attribute:: policy_group_id  <key>
                
                	Policy Group ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: policies
                
                	Policies
                	**type**\: one of the below types:
                
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.policy_group_id = None
                    self.policies = YLeafList()
                    self.policies.parent = self
                    self.policies.name = 'policies'

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.policy_group_id is None:
                        raise YPYModelError('Key property policy_group_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:policy-groups[ietf-dmm-fpc:policy-group-id = ' + str(self.policy_group_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.policy_group_id is not None:
                        return True

                    if self.policies is not None:
                        for child in self.policies:
                            if child is not None:
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.PolicyGroups']['meta_info']


            class Policies(object):
                """
                Policies
                
                .. attribute:: policy_id  <key>
                
                	Policy Id
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: rules
                
                	Rules
                	**type**\: list of    :py:class:`Rules <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Policies.Rules>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.policy_id = None
                    self.rules = YList()
                    self.rules.parent = self
                    self.rules.name = 'rules'


                class Rules(object):
                    """
                    Rules
                    
                    .. attribute:: order  <key>
                    
                    	Rule Order
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: actions
                    
                    	Actions
                    	**type**\: list of    :py:class:`Actions <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Policies.Rules.Actions>`
                    
                    .. attribute:: descriptors
                    
                    	Descriptors
                    	**type**\: list of    :py:class:`Descriptors <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Input.Bundles.Policies.Rules.Descriptors>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.order = None
                        self.actions = YList()
                        self.actions.parent = self
                        self.actions.name = 'actions'
                        self.descriptors = YList()
                        self.descriptors.parent = self
                        self.descriptors.name = 'descriptors'


                    class Descriptors(object):
                        """
                        Descriptors
                        
                        .. attribute:: descriptor_id  <key>
                        
                        	Descriptor Id
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: direction
                        
                        	Direction
                        	**type**\:   :py:class:`FpcDirectionEnum <ydk.models.ietf.ietf_dmm_fpc.FpcDirectionEnum>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.descriptor_id = None
                            self.direction = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.descriptor_id is None:
                                raise YPYModelError('Key property descriptor_id is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:descriptors[ietf-dmm-fpc:descriptor-id = ' + str(self.descriptor_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.descriptor_id is not None:
                                return True

                            if self.direction is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Policies.Rules.Descriptors']['meta_info']


                    class Actions(object):
                        """
                        Actions
                        
                        .. attribute:: action_id  <key>
                        
                        	Action Identifier
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: action_order
                        
                        	Action Execution Order
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.action_id = None
                            self.action_order = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.action_id is None:
                                raise YPYModelError('Key property action_id is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:actions[ietf-dmm-fpc:action-id = ' + str(self.action_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.action_id is not None:
                                return True

                            if self.action_order is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Policies.Rules.Actions']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.order is None:
                            raise YPYModelError('Key property order is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:rules[ietf-dmm-fpc:order = ' + str(self.order) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.order is not None:
                            return True

                        if self.actions is not None:
                            for child_ref in self.actions:
                                if child_ref._has_data():
                                    return True

                        if self.descriptors is not None:
                            for child_ref in self.descriptors:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Policies.Rules']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.policy_id is None:
                        raise YPYModelError('Key property policy_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:policies[ietf-dmm-fpc:policy-id = ' + str(self.policy_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.policy_id is not None:
                        return True

                    if self.rules is not None:
                        for child_ref in self.rules:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Policies']['meta_info']


            class Descriptors(object):
                """
                Descriptors
                
                .. attribute:: descriptor_id  <key>
                
                	Descriptor Id
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: all_traffic
                
                	Empty Value
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: descriptor_type
                
                	Descriptor Type
                	**type**\:   :py:class:`FpcDescriptorTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcDescriptorTypeIdentity>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.descriptor_id = None
                    self.all_traffic = None
                    self.descriptor_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.descriptor_id is None:
                        raise YPYModelError('Key property descriptor_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:descriptors[ietf-dmm-fpc:descriptor-id = ' + str(self.descriptor_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.descriptor_id is not None:
                        return True

                    if self.all_traffic is not None:
                        return True

                    if self.descriptor_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Descriptors']['meta_info']


            class Actions(object):
                """
                Actions
                
                .. attribute:: action_id  <key>
                
                	Action Identifier
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: action_type
                
                	Action Type
                	**type**\:   :py:class:`FpcActionTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcActionTypeIdentity>`
                
                	**mandatory**\: True
                
                .. attribute:: drop
                
                	Empty Value
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.action_id = None
                    self.action_type = None
                    self.drop = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.action_id is None:
                        raise YPYModelError('Key property action_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:actions[ietf-dmm-fpc:action-id = ' + str(self.action_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.action_id is not None:
                        return True

                    if self.action_type is not None:
                        return True

                    if self.drop is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Actions']['meta_info']


            class Targets(object):
                """
                List of Targets
                
                .. attribute:: target  <key>
                
                	Target Id
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: dpn_id
                
                	DPN Id
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.target = None
                    self.dpn_id = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.target is None:
                        raise YPYModelError('Key property target is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:targets[ietf-dmm-fpc:target = ' + str(self.target) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.target is not None:
                        return True

                    if self.dpn_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Input.Bundles.Targets']['meta_info']

            @property
            def _common_path(self):
                if self.op_id is None:
                    raise YPYModelError('Key property op_id is None')

                return '/ietf-dmm-fpc:configure-bundles/ietf-dmm-fpc:input/ietf-dmm-fpc:bundles[ietf-dmm-fpc:op-id = ' + str(self.op_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.op_id is not None:
                    return True

                if self.actions is not None:
                    for child_ref in self.actions:
                        if child_ref._has_data():
                            return True

                if self.admin_state is not None:
                    return True

                if self.client_id is not None:
                    return True

                if self.clones is not None:
                    for child_ref in self.clones:
                        if child_ref._has_data():
                            return True

                if self.contexts is not None:
                    for child_ref in self.contexts:
                        if child_ref._has_data():
                            return True

                if self.delay is not None:
                    return True

                if self.descriptors is not None:
                    for child_ref in self.descriptors:
                        if child_ref._has_data():
                            return True

                if self.instructions is not None and self.instructions._has_data():
                    return True

                if self.op_ref_scope is not None:
                    return True

                if self.op_type is not None:
                    return True

                if self.policies is not None:
                    for child_ref in self.policies:
                        if child_ref._has_data():
                            return True

                if self.policy_groups is not None:
                    for child_ref in self.policy_groups:
                        if child_ref._has_data():
                            return True

                if self.ports is not None:
                    for child_ref in self.ports:
                        if child_ref._has_data():
                            return True

                if self.session_state is not None:
                    return True

                if self.targets is not None:
                    for child_ref in self.targets:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureBundlesRpc.Input.Bundles']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-dmm-fpc:configure-bundles/ietf-dmm-fpc:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.bundles is not None:
                for child_ref in self.bundles:
                    if child_ref._has_data():
                        return True

            if self.highest_op_ref_scope is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['ConfigureBundlesRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: bundles
        
        	Operation Identifier
        	**type**\: list of    :py:class:`Bundles <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles>`
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.bundles = YList()
            self.bundles.parent = self
            self.bundles.name = 'bundles'


        class Bundles(object):
            """
            Operation Identifier
            
            .. attribute:: op_id  <key>
            
            	Operation Identifier
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: actions
            
            	Actions
            	**type**\: list of    :py:class:`Actions <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Actions>`
            
            .. attribute:: contexts
            
            	Contexts
            	**type**\: list of    :py:class:`Contexts <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts>`
            
            .. attribute:: descriptors
            
            	Descriptors
            	**type**\: list of    :py:class:`Descriptors <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Descriptors>`
            
            .. attribute:: error_info
            
            	Error Detail
            	**type**\:  str
            
            	**length:** 1..1024
            
            .. attribute:: error_type_id
            
            	Error ID
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: policies
            
            	Policies
            	**type**\: list of    :py:class:`Policies <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Policies>`
            
            .. attribute:: policy_groups
            
            	Policy Groups
            	**type**\: list of    :py:class:`PolicyGroups <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.PolicyGroups>`
            
            .. attribute:: ports
            
            	Ports
            	**type**\: list of    :py:class:`Ports <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Ports>`
            
            .. attribute:: targets
            
            	List of Targets
            	**type**\: list of    :py:class:`Targets <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Targets>`
            
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.op_id = None
                self.actions = YList()
                self.actions.parent = self
                self.actions.name = 'actions'
                self.contexts = YList()
                self.contexts.parent = self
                self.contexts.name = 'contexts'
                self.descriptors = YList()
                self.descriptors.parent = self
                self.descriptors.name = 'descriptors'
                self.error_info = None
                self.error_type_id = None
                self.policies = YList()
                self.policies.parent = self
                self.policies.name = 'policies'
                self.policy_groups = YList()
                self.policy_groups.parent = self
                self.policy_groups.name = 'policy_groups'
                self.ports = YList()
                self.ports.parent = self
                self.ports.name = 'ports'
                self.targets = YList()
                self.targets.parent = self
                self.targets.name = 'targets'


            class Ports(object):
                """
                Ports
                
                .. attribute:: policy_groups
                
                	Policy Groups
                	**type**\: one of the below types:
                
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                .. attribute:: vport_id
                
                	Port ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.policy_groups = YLeafList()
                    self.policy_groups.parent = self
                    self.policy_groups.name = 'policy_groups'
                    self.vport_id = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-dmm-fpc:ports'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.policy_groups is not None:
                        for child in self.policy_groups:
                            if child is not None:
                                return True

                    if self.vport_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Ports']['meta_info']


            class Contexts(object):
                """
                Contexts
                
                .. attribute:: context_id
                
                	Context ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: delegated_ip_prefixes
                
                	Delegated Prefix(es)
                	**type**\: one of the below types:
                
                	**type**\:  list of str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                
                
                ----
                	**type**\:  list of str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                
                
                ----
                .. attribute:: dl
                
                	Downlink
                	**type**\:   :py:class:`Dl <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl>`
                
                .. attribute:: dpn_group
                
                	DPN Group
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: dpns
                
                	DPNs
                	**type**\: list of    :py:class:`Dpns <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns>`
                
                .. attribute:: ebi
                
                	EUTRAN Bearere Identifier (EBI)
                	**type**\:  int
                
                	**range:** 0..15
                
                .. attribute:: imsi
                
                	IMSI
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: instructions
                
                	Instructions
                	**type**\:   :py:class:`Instructions <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Instructions>`
                
                .. attribute:: lbi
                
                	Linked Bearer Identifier (LBI)
                	**type**\:  int
                
                	**range:** 0..15
                
                .. attribute:: parent_context
                
                	Parent Context
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: ul
                
                	lylebe551144
                	**type**\:   :py:class:`Ul <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul>`
                
                .. attribute:: vports
                
                	Vports
                	**type**\: one of the below types:
                
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.context_id = None
                    self.delegated_ip_prefixes = YLeafList()
                    self.delegated_ip_prefixes.parent = self
                    self.delegated_ip_prefixes.name = 'delegated_ip_prefixes'
                    self.dl = ConfigureBundlesRpc.Output.Bundles.Contexts.Dl()
                    self.dl.parent = self
                    self.dpn_group = None
                    self.dpns = YList()
                    self.dpns.parent = self
                    self.dpns.name = 'dpns'
                    self.ebi = None
                    self.imsi = None
                    self.instructions = ConfigureBundlesRpc.Output.Bundles.Contexts.Instructions()
                    self.instructions.parent = self
                    self.lbi = None
                    self.parent_context = None
                    self.ul = ConfigureBundlesRpc.Output.Bundles.Contexts.Ul()
                    self.ul.parent = self
                    self.vports = YLeafList()
                    self.vports.parent = self
                    self.vports.name = 'vports'


                class Ul(object):
                    """
                    lylebe551144
                    
                    .. attribute:: dpn_parameters
                    
                    	DPN Parameters
                    	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.DpnParameters>`
                    
                    .. attribute:: mobility_tunnel_parameters
                    
                    	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                    	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.MobilityTunnelParameters>`
                    
                    .. attribute:: mtu_size
                    
                    	MTU size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop
                    
                    	Next Hop
                    	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.Nexthop>`
                    
                    .. attribute:: qos_profile_parameters
                    
                    	QoS Parameters
                    	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.QosProfileParameters>`
                    
                    .. attribute:: tunnel_local_address
                    
                    	endpoint address of the DPN which a gent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: tunnel_remote_address
                    
                    	endpoint address of the DPN which agent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: vendor_parameters
                    
                    	Vendor Parameters
                    	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.VendorParameters>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.dpn_parameters = ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.DpnParameters()
                        self.dpn_parameters.parent = self
                        self.mobility_tunnel_parameters = ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.MobilityTunnelParameters()
                        self.mobility_tunnel_parameters.parent = self
                        self.mtu_size = None
                        self.nexthop = ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.Nexthop()
                        self.nexthop.parent = self
                        self.qos_profile_parameters = ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.QosProfileParameters()
                        self.qos_profile_parameters.parent = self
                        self.tunnel_local_address = None
                        self.tunnel_remote_address = None
                        self.vendor_parameters = YList()
                        self.vendor_parameters.parent = self
                        self.vendor_parameters.name = 'vendor_parameters'


                    class MobilityTunnelParameters(object):
                        """
                        Specifies profile specific lylebe551144 tunnel
                        parameters to the DPN which the agent exists. The
                        profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                        ietf\-pmip profile, or new profile if anyone will define
                        it.
                        
                        .. attribute:: none
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: packet_filters
                        
                        	List of Packet Filters
                        	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.MobilityTunnelParameters.PacketFilters>`
                        
                        .. attribute:: tft_reference
                        
                        	Pre\-configured TFT
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: tunnel_identifier
                        
                        	Tunnel Endpoint IDentifier (TEID)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_type
                        
                        	3GPP Tunnel Subtype
                        	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.none = None
                            self.packet_filters = YList()
                            self.packet_filters.parent = self
                            self.packet_filters.name = 'packet_filters'
                            self.tft_reference = None
                            self.tunnel_identifier = None
                            self.tunnel_type = None


                        class PacketFilters(object):
                            """
                            List of Packet Filters
                            
                            .. attribute:: identifier  <key>
                            
                            	Filter Identifier
                            	**type**\:  int
                            
                            	**range:** 1..15
                            
                            .. attribute:: contents
                            
                            	Filter Contents
                            	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.MobilityTunnelParameters.PacketFilters.Contents>`
                            
                            .. attribute:: direction
                            
                            	Filter Direction
                            	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                            
                            .. attribute:: evaluation_precedence
                            
                            	Evaluation Precedence
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.identifier = None
                                self.contents = YList()
                                self.contents.parent = self
                                self.contents.name = 'contents'
                                self.direction = None
                                self.evaluation_precedence = None


                            class Contents(object):
                                """
                                Filter Contents
                                
                                .. attribute:: component_type_identifier  <key>
                                
                                	Component Type
                                	**type**\:  int
                                
                                	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                                
                                .. attribute:: flow_label
                                
                                	Flow Label
                                	**type**\:  list of int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: ipsec_index
                                
                                	IPSec Index
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_ipv6_remote
                                
                                	Ipv4 Ipv6 remote address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: ipv4_local
                                
                                	IPv4 Local Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6_prefix_local
                                
                                	IPv6 Local Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: ipv6_prefix_remote
                                
                                	IPv6 Remote Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: local_port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_hi
                                
                                	Local Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_lo
                                
                                	Local Port Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_header
                                
                                	Next Header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: remote_port
                                
                                	Remote Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_hi
                                
                                	Remote Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_lo
                                
                                	Remote Por Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_class
                                
                                	Traffic Class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_hi
                                
                                	Traffic Class Max Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_lo
                                
                                	Traffic Class Min Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                

                                """

                                _prefix = 'threegpp'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self.component_type_identifier = None
                                    self.flow_label = YLeafList()
                                    self.flow_label.parent = self
                                    self.flow_label.name = 'flow_label'
                                    self.ipsec_index = None
                                    self.ipv4_ipv6_remote = None
                                    self.ipv4_local = None
                                    self.ipv6_prefix_local = None
                                    self.ipv6_prefix_remote = None
                                    self.local_port = None
                                    self.local_port_hi = None
                                    self.local_port_lo = None
                                    self.next_header = None
                                    self.remote_port = None
                                    self.remote_port_hi = None
                                    self.remote_port_lo = None
                                    self.traffic_class = None
                                    self.traffic_class_hi = None
                                    self.traffic_class_lo = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.component_type_identifier is None:
                                        raise YPYModelError('Key property component_type_identifier is None')

                                    return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.component_type_identifier is not None:
                                        return True

                                    if self.flow_label is not None:
                                        for child in self.flow_label:
                                            if child is not None:
                                                return True

                                    if self.ipsec_index is not None:
                                        return True

                                    if self.ipv4_ipv6_remote is not None:
                                        return True

                                    if self.ipv4_local is not None:
                                        return True

                                    if self.ipv6_prefix_local is not None:
                                        return True

                                    if self.ipv6_prefix_remote is not None:
                                        return True

                                    if self.local_port is not None:
                                        return True

                                    if self.local_port_hi is not None:
                                        return True

                                    if self.local_port_lo is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.remote_port is not None:
                                        return True

                                    if self.remote_port_hi is not None:
                                        return True

                                    if self.remote_port_lo is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.traffic_class_hi is not None:
                                        return True

                                    if self.traffic_class_lo is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.identifier is None:
                                    raise YPYModelError('Key property identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.identifier is not None:
                                    return True

                                if self.contents is not None:
                                    for child_ref in self.contents:
                                        if child_ref._has_data():
                                            return True

                                if self.direction is not None:
                                    return True

                                if self.evaluation_precedence is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.MobilityTunnelParameters.PacketFilters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.none is not None:
                                return True

                            if self.packet_filters is not None:
                                for child_ref in self.packet_filters:
                                    if child_ref._has_data():
                                        return True

                            if self.tft_reference is not None:
                                return True

                            if self.tunnel_identifier is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.MobilityTunnelParameters']['meta_info']


                    class Nexthop(object):
                        """
                        Next Hop
                        
                        .. attribute:: if_index
                        
                        	If (interface) Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: ip
                        
                        	IP Value
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: lsp
                        
                        	MPLS Value
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: macaddress
                        
                        	MAC Address Value
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: nexthop_type
                        
                        	Nexthop Type
                        	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                        
                        .. attribute:: servicepath
                        
                        	Service Path Value
                        	**type**\:  int
                        
                        	**range:** 0..33554431
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.if_index = None
                            self.ip = None
                            self.lsp = None
                            self.macaddress = None
                            self.nexthop_type = None
                            self.servicepath = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.if_index is not None:
                                return True

                            if self.ip is not None:
                                return True

                            if self.lsp is not None:
                                return True

                            if self.macaddress is not None:
                                return True

                            if self.nexthop_type is not None:
                                return True

                            if self.servicepath is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.Nexthop']['meta_info']


                    class QosProfileParameters(object):
                        """
                        QoS Parameters
                        
                        .. attribute:: apn_ambr
                        
                        	Access Point Name Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: arp
                        
                        	Allocation Retention Priority
                        	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.QosProfileParameters.Arp>`
                        
                        .. attribute:: gbr
                        
                        	Guaranteed Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mbr
                        
                        	Maximum Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: qci
                        
                        	QCI
                        	**type**\:  int
                        
                        	**range:** 1..9
                        
                        .. attribute:: qos_type
                        
                        	the profile type
                        	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                        
                        .. attribute:: ue_ambr
                        
                        	User Equipment Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.apn_ambr = None
                            self.arp = ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.QosProfileParameters.Arp()
                            self.arp.parent = self
                            self.gbr = None
                            self.mbr = None
                            self.qci = None
                            self.qos_type = None
                            self.ue_ambr = None


                        class Arp(object):
                            """
                            Allocation Retention Priority
                            
                            .. attribute:: premption_capability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.QosProfileParameters.Arp.PremptionCapabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: premption_vulnerability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.QosProfileParameters.Arp.PremptionVulnerabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: prioirty_level
                            
                            	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                            	**type**\:  int
                            
                            	**range:** 0..15
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.premption_capability = None
                                self.premption_vulnerability = None
                                self.prioirty_level = None

                            class PremptionCapabilityEnum(Enum):
                                """
                                PremptionCapabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                service data flow can get resources that were already

                                assigned to another service data flow with a lower priority

                                level.  The following values are defined\:

                                 Enabled (0)\: This value indicates that the service data flow

                                 is allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.

                                 Disabled (1)\: This value indicates that the service data flow

                                 is not allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.  The values

                                 (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.QosProfileParameters.Arp.PremptionCapabilityEnum']


                            class PremptionVulnerabilityEnum(Enum):
                                """
                                PremptionVulnerabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                 service data flow can lose the resources assigned to it in

                                 order to admit a service data flow with a higher priority

                                 level.  The following values are defined\:

                                   Enabled (0)\: This value indicates that the resources

                                   assigned to the IP data flow can be preempted and

                                   allocated to a service data flow with a higher

                                   priority level.

                                   Disabled (1)\: This value indicates that the resources

                                   assigned to the IP data flow shall not be preempted and

                                   allocated to a service data flow with a higher priority

                                   level.  The values (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.QosProfileParameters.Arp.PremptionVulnerabilityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-threegpp:arp'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.premption_capability is not None:
                                    return True

                                if self.premption_vulnerability is not None:
                                    return True

                                if self.prioirty_level is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.QosProfileParameters.Arp']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.apn_ambr is not None:
                                return True

                            if self.arp is not None and self.arp._has_data():
                                return True

                            if self.gbr is not None:
                                return True

                            if self.mbr is not None:
                                return True

                            if self.qci is not None:
                                return True

                            if self.qos_type is not None:
                                return True

                            if self.ue_ambr is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.QosProfileParameters']['meta_info']


                    class DpnParameters(object):
                        """
                        DPN Parameters
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.DpnParameters']['meta_info']


                    class VendorParameters(object):
                        """
                        Vendor Parameters
                        
                        .. attribute:: vendor_id  <key>
                        
                        	Vendor ID
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: vendor_type  <key>
                        
                        	Attribute Type
                        	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                        
                        .. attribute:: empty_type
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.vendor_id = None
                            self.vendor_type = None
                            self.empty_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.vendor_id is None:
                                raise YPYModelError('Key property vendor_id is None')
                            if self.vendor_type is None:
                                raise YPYModelError('Key property vendor_type is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.vendor_id is not None:
                                return True

                            if self.vendor_type is not None:
                                return True

                            if self.empty_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul.VendorParameters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:ul'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                            return True

                        if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                            return True

                        if self.mtu_size is not None:
                            return True

                        if self.nexthop is not None and self.nexthop._has_data():
                            return True

                        if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                            return True

                        if self.tunnel_local_address is not None:
                            return True

                        if self.tunnel_remote_address is not None:
                            return True

                        if self.vendor_parameters is not None:
                            for child_ref in self.vendor_parameters:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Ul']['meta_info']


                class Dl(object):
                    """
                    Downlink
                    
                    .. attribute:: dpn_parameters
                    
                    	DPN Parameters
                    	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.DpnParameters>`
                    
                    .. attribute:: mobility_tunnel_parameters
                    
                    	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                    	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.MobilityTunnelParameters>`
                    
                    .. attribute:: mtu_size
                    
                    	MTU size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop
                    
                    	Next Hop
                    	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.Nexthop>`
                    
                    .. attribute:: qos_profile_parameters
                    
                    	QoS Parameters
                    	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.QosProfileParameters>`
                    
                    .. attribute:: tunnel_local_address
                    
                    	endpoint address of the DPN which a gent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: tunnel_remote_address
                    
                    	endpoint address of the DPN which agent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: vendor_parameters
                    
                    	Vendor Parameters
                    	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.VendorParameters>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.dpn_parameters = ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.DpnParameters()
                        self.dpn_parameters.parent = self
                        self.mobility_tunnel_parameters = ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.MobilityTunnelParameters()
                        self.mobility_tunnel_parameters.parent = self
                        self.mtu_size = None
                        self.nexthop = ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.Nexthop()
                        self.nexthop.parent = self
                        self.qos_profile_parameters = ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.QosProfileParameters()
                        self.qos_profile_parameters.parent = self
                        self.tunnel_local_address = None
                        self.tunnel_remote_address = None
                        self.vendor_parameters = YList()
                        self.vendor_parameters.parent = self
                        self.vendor_parameters.name = 'vendor_parameters'


                    class MobilityTunnelParameters(object):
                        """
                        Specifies profile specific lylebe551144 tunnel
                        parameters to the DPN which the agent exists. The
                        profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                        ietf\-pmip profile, or new profile if anyone will define
                        it.
                        
                        .. attribute:: none
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: packet_filters
                        
                        	List of Packet Filters
                        	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.MobilityTunnelParameters.PacketFilters>`
                        
                        .. attribute:: tft_reference
                        
                        	Pre\-configured TFT
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: tunnel_identifier
                        
                        	Tunnel Endpoint IDentifier (TEID)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_type
                        
                        	3GPP Tunnel Subtype
                        	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.none = None
                            self.packet_filters = YList()
                            self.packet_filters.parent = self
                            self.packet_filters.name = 'packet_filters'
                            self.tft_reference = None
                            self.tunnel_identifier = None
                            self.tunnel_type = None


                        class PacketFilters(object):
                            """
                            List of Packet Filters
                            
                            .. attribute:: identifier  <key>
                            
                            	Filter Identifier
                            	**type**\:  int
                            
                            	**range:** 1..15
                            
                            .. attribute:: contents
                            
                            	Filter Contents
                            	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.MobilityTunnelParameters.PacketFilters.Contents>`
                            
                            .. attribute:: direction
                            
                            	Filter Direction
                            	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                            
                            .. attribute:: evaluation_precedence
                            
                            	Evaluation Precedence
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.identifier = None
                                self.contents = YList()
                                self.contents.parent = self
                                self.contents.name = 'contents'
                                self.direction = None
                                self.evaluation_precedence = None


                            class Contents(object):
                                """
                                Filter Contents
                                
                                .. attribute:: component_type_identifier  <key>
                                
                                	Component Type
                                	**type**\:  int
                                
                                	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                                
                                .. attribute:: flow_label
                                
                                	Flow Label
                                	**type**\:  list of int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: ipsec_index
                                
                                	IPSec Index
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_ipv6_remote
                                
                                	Ipv4 Ipv6 remote address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: ipv4_local
                                
                                	IPv4 Local Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6_prefix_local
                                
                                	IPv6 Local Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: ipv6_prefix_remote
                                
                                	IPv6 Remote Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: local_port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_hi
                                
                                	Local Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_lo
                                
                                	Local Port Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_header
                                
                                	Next Header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: remote_port
                                
                                	Remote Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_hi
                                
                                	Remote Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_lo
                                
                                	Remote Por Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_class
                                
                                	Traffic Class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_hi
                                
                                	Traffic Class Max Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_lo
                                
                                	Traffic Class Min Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                

                                """

                                _prefix = 'threegpp'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self.component_type_identifier = None
                                    self.flow_label = YLeafList()
                                    self.flow_label.parent = self
                                    self.flow_label.name = 'flow_label'
                                    self.ipsec_index = None
                                    self.ipv4_ipv6_remote = None
                                    self.ipv4_local = None
                                    self.ipv6_prefix_local = None
                                    self.ipv6_prefix_remote = None
                                    self.local_port = None
                                    self.local_port_hi = None
                                    self.local_port_lo = None
                                    self.next_header = None
                                    self.remote_port = None
                                    self.remote_port_hi = None
                                    self.remote_port_lo = None
                                    self.traffic_class = None
                                    self.traffic_class_hi = None
                                    self.traffic_class_lo = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.component_type_identifier is None:
                                        raise YPYModelError('Key property component_type_identifier is None')

                                    return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.component_type_identifier is not None:
                                        return True

                                    if self.flow_label is not None:
                                        for child in self.flow_label:
                                            if child is not None:
                                                return True

                                    if self.ipsec_index is not None:
                                        return True

                                    if self.ipv4_ipv6_remote is not None:
                                        return True

                                    if self.ipv4_local is not None:
                                        return True

                                    if self.ipv6_prefix_local is not None:
                                        return True

                                    if self.ipv6_prefix_remote is not None:
                                        return True

                                    if self.local_port is not None:
                                        return True

                                    if self.local_port_hi is not None:
                                        return True

                                    if self.local_port_lo is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.remote_port is not None:
                                        return True

                                    if self.remote_port_hi is not None:
                                        return True

                                    if self.remote_port_lo is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.traffic_class_hi is not None:
                                        return True

                                    if self.traffic_class_lo is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.identifier is None:
                                    raise YPYModelError('Key property identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.identifier is not None:
                                    return True

                                if self.contents is not None:
                                    for child_ref in self.contents:
                                        if child_ref._has_data():
                                            return True

                                if self.direction is not None:
                                    return True

                                if self.evaluation_precedence is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.MobilityTunnelParameters.PacketFilters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.none is not None:
                                return True

                            if self.packet_filters is not None:
                                for child_ref in self.packet_filters:
                                    if child_ref._has_data():
                                        return True

                            if self.tft_reference is not None:
                                return True

                            if self.tunnel_identifier is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.MobilityTunnelParameters']['meta_info']


                    class Nexthop(object):
                        """
                        Next Hop
                        
                        .. attribute:: if_index
                        
                        	If (interface) Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: ip
                        
                        	IP Value
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: lsp
                        
                        	MPLS Value
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: macaddress
                        
                        	MAC Address Value
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: nexthop_type
                        
                        	Nexthop Type
                        	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                        
                        .. attribute:: servicepath
                        
                        	Service Path Value
                        	**type**\:  int
                        
                        	**range:** 0..33554431
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.if_index = None
                            self.ip = None
                            self.lsp = None
                            self.macaddress = None
                            self.nexthop_type = None
                            self.servicepath = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.if_index is not None:
                                return True

                            if self.ip is not None:
                                return True

                            if self.lsp is not None:
                                return True

                            if self.macaddress is not None:
                                return True

                            if self.nexthop_type is not None:
                                return True

                            if self.servicepath is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.Nexthop']['meta_info']


                    class QosProfileParameters(object):
                        """
                        QoS Parameters
                        
                        .. attribute:: apn_ambr
                        
                        	Access Point Name Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: arp
                        
                        	Allocation Retention Priority
                        	**type**\:   :py:class:`Arp <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.QosProfileParameters.Arp>`
                        
                        .. attribute:: gbr
                        
                        	Guaranteed Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mbr
                        
                        	Maximum Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: qci
                        
                        	QCI
                        	**type**\:  int
                        
                        	**range:** 1..9
                        
                        .. attribute:: qos_type
                        
                        	the profile type
                        	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                        
                        .. attribute:: ue_ambr
                        
                        	User Equipment Aggregate Max Bit Rate
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.apn_ambr = None
                            self.arp = ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.QosProfileParameters.Arp()
                            self.arp.parent = self
                            self.gbr = None
                            self.mbr = None
                            self.qci = None
                            self.qos_type = None
                            self.ue_ambr = None


                        class Arp(object):
                            """
                            Allocation Retention Priority
                            
                            .. attribute:: premption_capability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a service data flow can get resources that were already assigned to another service data flow with a lower priority level.  The following values are defined\:   Enabled (0)\: This value indicates that the service data flow  is allowed to get resources that were already assigned to  another IP data flow with a lower priority level.   Disabled (1)\: This value indicates that the service data flow  is not allowed to get resources that were already assigned to  another IP data flow with a lower priority level.  The values  (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionCapabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.QosProfileParameters.Arp.PremptionCapabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: premption_vulnerability
                            
                            	This is a 2\-bit unsigned integer value.  It defines whether a  service data flow can lose the resources assigned to it in  order to admit a service data flow with a higher priority  level.  The following values are defined\:     Enabled (0)\: This value indicates that the resources    assigned to the IP data flow can be preempted and    allocated to a service data flow with a higher    priority level.     Disabled (1)\: This value indicates that the resources    assigned to the IP data flow shall not be preempted and    allocated to a service data flow with a higher priority    level.  The values (2) and (3) are reserved
                            	**type**\:   :py:class:`PremptionVulnerabilityEnum <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.QosProfileParameters.Arp.PremptionVulnerabilityEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: prioirty_level
                            
                            	This is a 4\-bit unsigned integer value.  It is used to decide whether a mobility session establishment or modification request can be accepted; this is typically used for admission control of Guaranteed Bit Rate traffic in case of resource limitations.  The priority level can also be used to decide which existing mobility session to preempt during resource limitations.  The priority level defines the relative timeliness of a resource request.  Values 1 to 15 are defined, with value 1 as the highest level of priority.  Values 1 to 8 should only be assigned for services that are authorized to receive prioritized treatment within an operator domain.  Values 9 to 15 may be assigned to resources that are authorized by the home network and thus applicable when a mobile node is roaming
                            	**type**\:  int
                            
                            	**range:** 0..15
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.premption_capability = None
                                self.premption_vulnerability = None
                                self.prioirty_level = None

                            class PremptionCapabilityEnum(Enum):
                                """
                                PremptionCapabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                service data flow can get resources that were already

                                assigned to another service data flow with a lower priority

                                level.  The following values are defined\:

                                 Enabled (0)\: This value indicates that the service data flow

                                 is allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.

                                 Disabled (1)\: This value indicates that the service data flow

                                 is not allowed to get resources that were already assigned to

                                 another IP data flow with a lower priority level.  The values

                                 (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.QosProfileParameters.Arp.PremptionCapabilityEnum']


                            class PremptionVulnerabilityEnum(Enum):
                                """
                                PremptionVulnerabilityEnum

                                This is a 2\-bit unsigned integer value.  It defines whether a

                                 service data flow can lose the resources assigned to it in

                                 order to admit a service data flow with a higher priority

                                 level.  The following values are defined\:

                                   Enabled (0)\: This value indicates that the resources

                                   assigned to the IP data flow can be preempted and

                                   allocated to a service data flow with a higher

                                   priority level.

                                   Disabled (1)\: This value indicates that the resources

                                   assigned to the IP data flow shall not be preempted and

                                   allocated to a service data flow with a higher priority

                                   level.  The values (2) and (3) are reserved.

                                .. data:: enabled = 0

                                	enabled

                                .. data:: disabled = 1

                                	disabled

                                .. data:: reserved1 = 2

                                	reserved1

                                .. data:: reserved2 = 3

                                	reserved2

                                """

                                enabled = 0

                                disabled = 1

                                reserved1 = 2

                                reserved2 = 3


                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.QosProfileParameters.Arp.PremptionVulnerabilityEnum']


                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-dmm-threegpp:arp'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.premption_capability is not None:
                                    return True

                                if self.premption_vulnerability is not None:
                                    return True

                                if self.prioirty_level is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.QosProfileParameters.Arp']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.apn_ambr is not None:
                                return True

                            if self.arp is not None and self.arp._has_data():
                                return True

                            if self.gbr is not None:
                                return True

                            if self.mbr is not None:
                                return True

                            if self.qci is not None:
                                return True

                            if self.qos_type is not None:
                                return True

                            if self.ue_ambr is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.QosProfileParameters']['meta_info']


                    class DpnParameters(object):
                        """
                        DPN Parameters
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.DpnParameters']['meta_info']


                    class VendorParameters(object):
                        """
                        Vendor Parameters
                        
                        .. attribute:: vendor_id  <key>
                        
                        	Vendor ID
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: vendor_type  <key>
                        
                        	Attribute Type
                        	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                        
                        .. attribute:: empty_type
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.vendor_id = None
                            self.vendor_type = None
                            self.empty_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.vendor_id is None:
                                raise YPYModelError('Key property vendor_id is None')
                            if self.vendor_type is None:
                                raise YPYModelError('Key property vendor_type is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.vendor_id is not None:
                                return True

                            if self.vendor_type is not None:
                                return True

                            if self.empty_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl.VendorParameters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:dl'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                            return True

                        if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                            return True

                        if self.mtu_size is not None:
                            return True

                        if self.nexthop is not None and self.nexthop._has_data():
                            return True

                        if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                            return True

                        if self.tunnel_local_address is not None:
                            return True

                        if self.tunnel_remote_address is not None:
                            return True

                        if self.vendor_parameters is not None:
                            for child_ref in self.vendor_parameters:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dl']['meta_info']


                class Dpns(object):
                    """
                    DPNs
                    
                    .. attribute:: direction  <key>
                    
                    	Direction
                    	**type**\:   :py:class:`FpcDirectionEnum <ydk.models.ietf.ietf_dmm_fpc.FpcDirectionEnum>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dpn_id  <key>
                    
                    	DPN
                    	**type**\: one of the below types:
                    
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    	**type**\:  str
                    
                    
                    ----
                    .. attribute:: dpn_parameters
                    
                    	DPN Parameters
                    	**type**\:   :py:class:`DpnParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.DpnParameters>`
                    
                    .. attribute:: mobility_tunnel_parameters
                    
                    	Specifies profile specific lylebe551144 tunnel parameters to the DPN which the agent exists. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf\-pmip profile, or new profile if anyone will define it
                    	**type**\:   :py:class:`MobilityTunnelParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.MobilityTunnelParameters>`
                    
                    .. attribute:: mtu_size
                    
                    	MTU size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop
                    
                    	Next Hop
                    	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.Nexthop>`
                    
                    .. attribute:: qos_profile_parameters
                    
                    	QoS Parameters
                    	**type**\:   :py:class:`QosProfileParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.QosProfileParameters>`
                    
                    .. attribute:: tunnel_local_address
                    
                    	endpoint address of the DPN which a gent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: tunnel_remote_address
                    
                    	endpoint address of the DPN which agent exists
                    	**type**\: one of the below types:
                    
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: vendor_parameters
                    
                    	Vendor Parameters
                    	**type**\: list of    :py:class:`VendorParameters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.VendorParameters>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.direction = None
                        self.dpn_id = None
                        self.dpn_parameters = ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.DpnParameters()
                        self.dpn_parameters.parent = self
                        self.mobility_tunnel_parameters = ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.MobilityTunnelParameters()
                        self.mobility_tunnel_parameters.parent = self
                        self.mtu_size = None
                        self.nexthop = ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.Nexthop()
                        self.nexthop.parent = self
                        self.qos_profile_parameters = ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.QosProfileParameters()
                        self.qos_profile_parameters.parent = self
                        self.tunnel_local_address = None
                        self.tunnel_remote_address = None
                        self.vendor_parameters = YList()
                        self.vendor_parameters.parent = self
                        self.vendor_parameters.name = 'vendor_parameters'


                    class MobilityTunnelParameters(object):
                        """
                        Specifies profile specific lylebe551144 tunnel
                        parameters to the DPN which the agent exists. The
                        profiles includes GTP/TEID for 3gpp profile, GRE/Key for
                        ietf\-pmip profile, or new profile if anyone will define
                        it.
                        
                        .. attribute:: none
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: packet_filters
                        
                        	List of Packet Filters
                        	**type**\: list of    :py:class:`PacketFilters <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.MobilityTunnelParameters.PacketFilters>`
                        
                        .. attribute:: tft_reference
                        
                        	Pre\-configured TFT
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: tunnel_identifier
                        
                        	Tunnel Endpoint IDentifier (TEID)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_type
                        
                        	3GPP Tunnel Subtype
                        	**type**\:   :py:class:`ThreegppTunnelTypeIdentity <ydk.models.ietf.ietf_dmm_threegpp.ThreegppTunnelTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.none = None
                            self.packet_filters = YList()
                            self.packet_filters.parent = self
                            self.packet_filters.name = 'packet_filters'
                            self.tft_reference = None
                            self.tunnel_identifier = None
                            self.tunnel_type = None


                        class PacketFilters(object):
                            """
                            List of Packet Filters
                            
                            .. attribute:: identifier  <key>
                            
                            	Filter Identifier
                            	**type**\:  int
                            
                            	**range:** 1..15
                            
                            .. attribute:: contents
                            
                            	Filter Contents
                            	**type**\: list of    :py:class:`Contents <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.MobilityTunnelParameters.PacketFilters.Contents>`
                            
                            .. attribute:: direction
                            
                            	Filter Direction
                            	**type**\:   :py:class:`PacketFilterDirectionEnum <ydk.models.ietf.ietf_dmm_threegpp.PacketFilterDirectionEnum>`
                            
                            .. attribute:: evaluation_precedence
                            
                            	Evaluation Precedence
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'threegpp'
                            _revision = '2017-03-08'

                            def __init__(self):
                                self.parent = None
                                self.identifier = None
                                self.contents = YList()
                                self.contents.parent = self
                                self.contents.name = 'contents'
                                self.direction = None
                                self.evaluation_precedence = None


                            class Contents(object):
                                """
                                Filter Contents
                                
                                .. attribute:: component_type_identifier  <key>
                                
                                	Component Type
                                	**type**\:  int
                                
                                	**range:** 16..None \| 17..None \| 32..None \| 33..None \| 35..None \| 48..None \| 64..None \| 65..None \| 80..None \| 81..None \| 96..None \| 112..None \| 128..None
                                
                                .. attribute:: flow_label
                                
                                	Flow Label
                                	**type**\:  list of int
                                
                                	**range:** 0..1048575
                                
                                .. attribute:: ipsec_index
                                
                                	IPSec Index
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_ipv6_remote
                                
                                	Ipv4 Ipv6 remote address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: ipv4_local
                                
                                	IPv4 Local Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6_prefix_local
                                
                                	IPv6 Local Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: ipv6_prefix_remote
                                
                                	IPv6 Remote Prefix
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                
                                .. attribute:: local_port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_hi
                                
                                	Local Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: local_port_lo
                                
                                	Local Port Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_header
                                
                                	Next Header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: remote_port
                                
                                	Remote Port
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_hi
                                
                                	Remote Port Max Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: remote_port_lo
                                
                                	Remote Por Min Value
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_class
                                
                                	Traffic Class
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_hi
                                
                                	Traffic Class Max Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                .. attribute:: traffic_class_lo
                                
                                	Traffic Class Min Value
                                	**type**\:  int
                                
                                	**range:** 0..63
                                
                                

                                """

                                _prefix = 'threegpp'
                                _revision = '2017-03-08'

                                def __init__(self):
                                    self.parent = None
                                    self.component_type_identifier = None
                                    self.flow_label = YLeafList()
                                    self.flow_label.parent = self
                                    self.flow_label.name = 'flow_label'
                                    self.ipsec_index = None
                                    self.ipv4_ipv6_remote = None
                                    self.ipv4_local = None
                                    self.ipv6_prefix_local = None
                                    self.ipv6_prefix_remote = None
                                    self.local_port = None
                                    self.local_port_hi = None
                                    self.local_port_lo = None
                                    self.next_header = None
                                    self.remote_port = None
                                    self.remote_port_hi = None
                                    self.remote_port_lo = None
                                    self.traffic_class = None
                                    self.traffic_class_hi = None
                                    self.traffic_class_lo = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.component_type_identifier is None:
                                        raise YPYModelError('Key property component_type_identifier is None')

                                    return self.parent._common_path +'/ietf-dmm-threegpp:contents[ietf-dmm-threegpp:component-type-identifier = ' + str(self.component_type_identifier) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.component_type_identifier is not None:
                                        return True

                                    if self.flow_label is not None:
                                        for child in self.flow_label:
                                            if child is not None:
                                                return True

                                    if self.ipsec_index is not None:
                                        return True

                                    if self.ipv4_ipv6_remote is not None:
                                        return True

                                    if self.ipv4_local is not None:
                                        return True

                                    if self.ipv6_prefix_local is not None:
                                        return True

                                    if self.ipv6_prefix_remote is not None:
                                        return True

                                    if self.local_port is not None:
                                        return True

                                    if self.local_port_hi is not None:
                                        return True

                                    if self.local_port_lo is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.remote_port is not None:
                                        return True

                                    if self.remote_port_hi is not None:
                                        return True

                                    if self.remote_port_lo is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.traffic_class_hi is not None:
                                        return True

                                    if self.traffic_class_lo is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.MobilityTunnelParameters.PacketFilters.Contents']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.identifier is None:
                                    raise YPYModelError('Key property identifier is None')

                                return self.parent._common_path +'/ietf-dmm-threegpp:packet-filters[ietf-dmm-threegpp:identifier = ' + str(self.identifier) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.identifier is not None:
                                    return True

                                if self.contents is not None:
                                    for child_ref in self.contents:
                                        if child_ref._has_data():
                                            return True

                                if self.direction is not None:
                                    return True

                                if self.evaluation_precedence is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                                return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.MobilityTunnelParameters.PacketFilters']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:mobility-tunnel-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.none is not None:
                                return True

                            if self.packet_filters is not None:
                                for child_ref in self.packet_filters:
                                    if child_ref._has_data():
                                        return True

                            if self.tft_reference is not None:
                                return True

                            if self.tunnel_identifier is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.MobilityTunnelParameters']['meta_info']


                    class Nexthop(object):
                        """
                        Next Hop
                        
                        .. attribute:: if_index
                        
                        	If (interface) Value
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: ip
                        
                        	IP Value
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: lsp
                        
                        	MPLS Value
                        	**type**\:  int
                        
                        	**range:** 0..1048575
                        
                        .. attribute:: macaddress
                        
                        	MAC Address Value
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: nexthop_type
                        
                        	Nexthop Type
                        	**type**\:   :py:class:`FpcNexthopTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcNexthopTypeIdentity>`
                        
                        .. attribute:: servicepath
                        
                        	Service Path Value
                        	**type**\:  int
                        
                        	**range:** 0..33554431
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.if_index = None
                            self.ip = None
                            self.lsp = None
                            self.macaddress = None
                            self.nexthop_type = None
                            self.servicepath = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:nexthop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.if_index is not None:
                                return True

                            if self.ip is not None:
                                return True

                            if self.lsp is not None:
                                return True

                            if self.macaddress is not None:
                                return True

                            if self.nexthop_type is not None:
                                return True

                            if self.servicepath is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.Nexthop']['meta_info']


                    class QosProfileParameters(object):
                        """
                        QoS Parameters
                        
                        .. attribute:: qos_type
                        
                        	the profile type
                        	**type**\:   :py:class:`FpcQosTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcQosTypeIdentity>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.qos_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:qos-profile-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.qos_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.QosProfileParameters']['meta_info']


                    class DpnParameters(object):
                        """
                        DPN Parameters
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-dmm-fpc:dpn-parameters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.DpnParameters']['meta_info']


                    class VendorParameters(object):
                        """
                        Vendor Parameters
                        
                        .. attribute:: vendor_id  <key>
                        
                        	Vendor ID
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: vendor_type  <key>
                        
                        	Attribute Type
                        	**type**\:   :py:class:`VendorSpecificTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.VendorSpecificTypeIdentity>`
                        
                        .. attribute:: empty_type
                        
                        	Empty Value
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.vendor_id = None
                            self.vendor_type = None
                            self.empty_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.vendor_id is None:
                                raise YPYModelError('Key property vendor_id is None')
                            if self.vendor_type is None:
                                raise YPYModelError('Key property vendor_type is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:vendor-parameters[ietf-dmm-fpc:vendor-id = ' + str(self.vendor_id) + '][ietf-dmm-fpc:vendor-type = ' + str(self.vendor_type) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.vendor_id is not None:
                                return True

                            if self.vendor_type is not None:
                                return True

                            if self.empty_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns.VendorParameters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.direction is None:
                            raise YPYModelError('Key property direction is None')
                        if self.dpn_id is None:
                            raise YPYModelError('Key property dpn_id is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:dpns[ietf-dmm-fpc:direction = ' + str(self.direction) + '][ietf-dmm-fpc:dpn-id = ' + str(self.dpn_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.direction is not None:
                            return True

                        if self.dpn_id is not None:
                            return True

                        if self.dpn_parameters is not None and self.dpn_parameters._has_data():
                            return True

                        if self.mobility_tunnel_parameters is not None and self.mobility_tunnel_parameters._has_data():
                            return True

                        if self.mtu_size is not None:
                            return True

                        if self.nexthop is not None and self.nexthop._has_data():
                            return True

                        if self.qos_profile_parameters is not None and self.qos_profile_parameters._has_data():
                            return True

                        if self.tunnel_local_address is not None:
                            return True

                        if self.tunnel_remote_address is not None:
                            return True

                        if self.vendor_parameters is not None:
                            for child_ref in self.vendor_parameters:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Dpns']['meta_info']


                class Instructions(object):
                    """
                    Instructions
                    
                    .. attribute:: instr_3gpp_mob
                    
                    	3GPP Specific Command Set
                    	**type**\:   :py:class:`ThreegppInstr <ydk.models.ietf.ietf_dmm_threegpp.ThreegppInstr>`
                    
                    .. attribute:: instr_pmip
                    
                    	PMIP Instructions
                    	**type**\:   :py:class:`PmipInstr <ydk.models.ietf.ietf_dmm_fpc_pmip.PmipInstr>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.instr_3gpp_mob = ThreegppInstr()
                        self.instr_pmip = PmipInstr()

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-dmm-fpc:instructions'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.instr_3gpp_mob is not None:
                            if self.instr_3gpp_mob._has_data():
                                return True

                        if self.instr_pmip is not None:
                            if self.instr_pmip._has_data():
                                return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts.Instructions']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-dmm-fpc:contexts'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.context_id is not None:
                        return True

                    if self.delegated_ip_prefixes is not None:
                        for child in self.delegated_ip_prefixes:
                            if child is not None:
                                return True

                    if self.dl is not None and self.dl._has_data():
                        return True

                    if self.dpn_group is not None:
                        return True

                    if self.dpns is not None:
                        for child_ref in self.dpns:
                            if child_ref._has_data():
                                return True

                    if self.ebi is not None:
                        return True

                    if self.imsi is not None:
                        return True

                    if self.instructions is not None and self.instructions._has_data():
                        return True

                    if self.lbi is not None:
                        return True

                    if self.parent_context is not None:
                        return True

                    if self.ul is not None and self.ul._has_data():
                        return True

                    if self.vports is not None:
                        for child in self.vports:
                            if child is not None:
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Contexts']['meta_info']


            class PolicyGroups(object):
                """
                Policy Groups
                
                .. attribute:: policy_group_id  <key>
                
                	Policy Group ID
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: policies
                
                	Policies
                	**type**\: one of the below types:
                
                	**type**\:  list of int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                	**type**\:  list of str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.policy_group_id = None
                    self.policies = YLeafList()
                    self.policies.parent = self
                    self.policies.name = 'policies'

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.policy_group_id is None:
                        raise YPYModelError('Key property policy_group_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:policy-groups[ietf-dmm-fpc:policy-group-id = ' + str(self.policy_group_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.policy_group_id is not None:
                        return True

                    if self.policies is not None:
                        for child in self.policies:
                            if child is not None:
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.PolicyGroups']['meta_info']


            class Policies(object):
                """
                Policies
                
                .. attribute:: policy_id  <key>
                
                	Policy Id
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: rules
                
                	Rules
                	**type**\: list of    :py:class:`Rules <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Policies.Rules>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.policy_id = None
                    self.rules = YList()
                    self.rules.parent = self
                    self.rules.name = 'rules'


                class Rules(object):
                    """
                    Rules
                    
                    .. attribute:: order  <key>
                    
                    	Rule Order
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: actions
                    
                    	Actions
                    	**type**\: list of    :py:class:`Actions <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Policies.Rules.Actions>`
                    
                    .. attribute:: descriptors
                    
                    	Descriptors
                    	**type**\: list of    :py:class:`Descriptors <ydk.models.ietf.ietf_dmm_fpc.ConfigureBundlesRpc.Output.Bundles.Policies.Rules.Descriptors>`
                    
                    

                    """

                    _prefix = 'fpc'
                    _revision = '2017-03-08'

                    def __init__(self):
                        self.parent = None
                        self.order = None
                        self.actions = YList()
                        self.actions.parent = self
                        self.actions.name = 'actions'
                        self.descriptors = YList()
                        self.descriptors.parent = self
                        self.descriptors.name = 'descriptors'


                    class Descriptors(object):
                        """
                        Descriptors
                        
                        .. attribute:: descriptor_id  <key>
                        
                        	Descriptor Id
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: direction
                        
                        	Direction
                        	**type**\:   :py:class:`FpcDirectionEnum <ydk.models.ietf.ietf_dmm_fpc.FpcDirectionEnum>`
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.descriptor_id = None
                            self.direction = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.descriptor_id is None:
                                raise YPYModelError('Key property descriptor_id is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:descriptors[ietf-dmm-fpc:descriptor-id = ' + str(self.descriptor_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.descriptor_id is not None:
                                return True

                            if self.direction is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Policies.Rules.Descriptors']['meta_info']


                    class Actions(object):
                        """
                        Actions
                        
                        .. attribute:: action_id  <key>
                        
                        	Action Identifier
                        	**type**\: one of the below types:
                        
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        	**type**\:  str
                        
                        
                        ----
                        .. attribute:: action_order
                        
                        	Action Execution Order
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'fpc'
                        _revision = '2017-03-08'

                        def __init__(self):
                            self.parent = None
                            self.action_id = None
                            self.action_order = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.action_id is None:
                                raise YPYModelError('Key property action_id is None')

                            return self.parent._common_path +'/ietf-dmm-fpc:actions[ietf-dmm-fpc:action-id = ' + str(self.action_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.action_id is not None:
                                return True

                            if self.action_order is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                            return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Policies.Rules.Actions']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.order is None:
                            raise YPYModelError('Key property order is None')

                        return self.parent._common_path +'/ietf-dmm-fpc:rules[ietf-dmm-fpc:order = ' + str(self.order) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.order is not None:
                            return True

                        if self.actions is not None:
                            for child_ref in self.actions:
                                if child_ref._has_data():
                                    return True

                        if self.descriptors is not None:
                            for child_ref in self.descriptors:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                        return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Policies.Rules']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.policy_id is None:
                        raise YPYModelError('Key property policy_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:policies[ietf-dmm-fpc:policy-id = ' + str(self.policy_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.policy_id is not None:
                        return True

                    if self.rules is not None:
                        for child_ref in self.rules:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Policies']['meta_info']


            class Descriptors(object):
                """
                Descriptors
                
                .. attribute:: descriptor_id  <key>
                
                	Descriptor Id
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: all_traffic
                
                	Empty Value
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: descriptor_type
                
                	Descriptor Type
                	**type**\:   :py:class:`FpcDescriptorTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcDescriptorTypeIdentity>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.descriptor_id = None
                    self.all_traffic = None
                    self.descriptor_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.descriptor_id is None:
                        raise YPYModelError('Key property descriptor_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:descriptors[ietf-dmm-fpc:descriptor-id = ' + str(self.descriptor_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.descriptor_id is not None:
                        return True

                    if self.all_traffic is not None:
                        return True

                    if self.descriptor_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Descriptors']['meta_info']


            class Actions(object):
                """
                Actions
                
                .. attribute:: action_id  <key>
                
                	Action Identifier
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: action_type
                
                	Action Type
                	**type**\:   :py:class:`FpcActionTypeIdentity <ydk.models.ietf.ietf_dmm_fpc.FpcActionTypeIdentity>`
                
                	**mandatory**\: True
                
                .. attribute:: drop
                
                	Empty Value
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.action_id = None
                    self.action_type = None
                    self.drop = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.action_id is None:
                        raise YPYModelError('Key property action_id is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:actions[ietf-dmm-fpc:action-id = ' + str(self.action_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.action_id is not None:
                        return True

                    if self.action_type is not None:
                        return True

                    if self.drop is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Actions']['meta_info']


            class Targets(object):
                """
                List of Targets
                
                .. attribute:: target  <key>
                
                	Target Id
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                .. attribute:: dpn_id
                
                	DPN Id
                	**type**\: one of the below types:
                
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                
                ----
                	**type**\:  str
                
                
                ----
                	**type**\:  str
                
                
                ----
                

                """

                _prefix = 'fpc'
                _revision = '2017-03-08'

                def __init__(self):
                    self.parent = None
                    self.target = None
                    self.dpn_id = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.target is None:
                        raise YPYModelError('Key property target is None')

                    return self.parent._common_path +'/ietf-dmm-fpc:targets[ietf-dmm-fpc:target = ' + str(self.target) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.target is not None:
                        return True

                    if self.dpn_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                    return meta._meta_table['ConfigureBundlesRpc.Output.Bundles.Targets']['meta_info']

            @property
            def _common_path(self):
                if self.op_id is None:
                    raise YPYModelError('Key property op_id is None')

                return '/ietf-dmm-fpc:configure-bundles/ietf-dmm-fpc:output/ietf-dmm-fpc:bundles[ietf-dmm-fpc:op-id = ' + str(self.op_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.op_id is not None:
                    return True

                if self.actions is not None:
                    for child_ref in self.actions:
                        if child_ref._has_data():
                            return True

                if self.contexts is not None:
                    for child_ref in self.contexts:
                        if child_ref._has_data():
                            return True

                if self.descriptors is not None:
                    for child_ref in self.descriptors:
                        if child_ref._has_data():
                            return True

                if self.error_info is not None:
                    return True

                if self.error_type_id is not None:
                    return True

                if self.policies is not None:
                    for child_ref in self.policies:
                        if child_ref._has_data():
                            return True

                if self.policy_groups is not None:
                    for child_ref in self.policy_groups:
                        if child_ref._has_data():
                            return True

                if self.ports is not None:
                    for child_ref in self.ports:
                        if child_ref._has_data():
                            return True

                if self.targets is not None:
                    for child_ref in self.targets:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ConfigureBundlesRpc.Output.Bundles']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-dmm-fpc:configure-bundles/ietf-dmm-fpc:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.bundles is not None:
                for child_ref in self.bundles:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['ConfigureBundlesRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-dmm-fpc:configure-bundles'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['ConfigureBundlesRpc']['meta_info']


class Event_RegisterRpc(object):
    """
    Used to register monitoring of parameters/events
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_dmm_fpc.Event_RegisterRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_dmm_fpc.Event_RegisterRpc.Output>`
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        self.input = Event_RegisterRpc.Input()
        self.input.parent = self
        self.output = Event_RegisterRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: event_identities
        
        	Event Identities
        	**type**\:  
        		list of  
        
        .. attribute:: event_ids
        
        	Event IDs
        	**type**\:  list of int
        
        	**range:** 0..4294967295
        
        .. attribute:: hi_thresh
        
        	hi threshold
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: lo_thresh
        
        	lo threshold
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: monitor_id
        
        	Monitor Identifier
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        
        ----
        	**type**\:  str
        
        
        ----
        	**type**\:  str
        
        
        ----
        .. attribute:: period
        
        	Period
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: report_time
        
        	Reporting Time
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: target
        
        	Target Identity
        	**type**\: one of the below types:
        
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        
        ----
        	**type**\:  str
        
        
        ----
        	**type**\:  str
        
        
        ----
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.event_identities = YLeafList()
            self.event_identities.parent = self
            self.event_identities.name = 'event_identities'
            self.event_ids = YLeafList()
            self.event_ids.parent = self
            self.event_ids.name = 'event_ids'
            self.hi_thresh = None
            self.lo_thresh = None
            self.monitor_id = None
            self.period = None
            self.report_time = None
            self.target = None

        @property
        def _common_path(self):

            return '/ietf-dmm-fpc:event_register/ietf-dmm-fpc:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.event_identities is not None:
                for child_ref in self.event_identities:
                    if child_ref._has_data():
                        return True

            if self.event_ids is not None:
                for child in self.event_ids:
                    if child is not None:
                        return True

            if self.hi_thresh is not None:
                return True

            if self.lo_thresh is not None:
                return True

            if self.monitor_id is not None:
                return True

            if self.period is not None:
                return True

            if self.report_time is not None:
                return True

            if self.target is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['Event_RegisterRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: error_info
        
        	Error Detail
        	**type**\:  str
        
        	**length:** 1..1024
        
        .. attribute:: error_type_id
        
        	Error ID
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: monitor_result
        
        	Result
        	**type**\:   :py:class:`ResultEnum <ydk.models.ietf.ietf_dmm_fpc.ResultEnum>`
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.error_info = None
            self.error_type_id = None
            self.monitor_result = None

        @property
        def _common_path(self):

            return '/ietf-dmm-fpc:event_register/ietf-dmm-fpc:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.error_info is not None:
                return True

            if self.error_type_id is not None:
                return True

            if self.monitor_result is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['Event_RegisterRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-dmm-fpc:event_register'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['Event_RegisterRpc']['meta_info']


class Event_DeregisterRpc(object):
    """
    Used to de\-register monitoring of
    parameters/events
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_dmm_fpc.Event_DeregisterRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_dmm_fpc.Event_DeregisterRpc.Output>`
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        self.input = Event_DeregisterRpc.Input()
        self.input.parent = self
        self.output = Event_DeregisterRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: monitors
        
        	Monitor ID
        	**type**\: list of    :py:class:`Monitors <ydk.models.ietf.ietf_dmm_fpc.Event_DeregisterRpc.Input.Monitors>`
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.monitors = YList()
            self.monitors.parent = self
            self.monitors.name = 'monitors'


        class Monitors(object):
            """
            Monitor ID
            
            .. attribute:: monitor_id
            
            	Monitor Identifier
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.monitor_id = None

            @property
            def _common_path(self):

                return '/ietf-dmm-fpc:event_deregister/ietf-dmm-fpc:input/ietf-dmm-fpc:monitors'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.monitor_id is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['Event_DeregisterRpc.Input.Monitors']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-dmm-fpc:event_deregister/ietf-dmm-fpc:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.monitors is not None:
                for child_ref in self.monitors:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['Event_DeregisterRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: error_info
        
        	Error Detail
        	**type**\:  str
        
        	**length:** 1..1024
        
        .. attribute:: error_type_id
        
        	Error ID
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: monitor_result
        
        	Result
        	**type**\:   :py:class:`ResultEnum <ydk.models.ietf.ietf_dmm_fpc.ResultEnum>`
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.error_info = None
            self.error_type_id = None
            self.monitor_result = None

        @property
        def _common_path(self):

            return '/ietf-dmm-fpc:event_deregister/ietf-dmm-fpc:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.error_info is not None:
                return True

            if self.error_type_id is not None:
                return True

            if self.monitor_result is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['Event_DeregisterRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-dmm-fpc:event_deregister'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['Event_DeregisterRpc']['meta_info']


class ProbeRpc(object):
    """
    Probe the status of a registered monitor
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_dmm_fpc.ProbeRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_dmm_fpc.ProbeRpc.Output>`
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        self.input = ProbeRpc.Input()
        self.input.parent = self
        self.output = ProbeRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: targets
        
        	List of Targets
        	**type**\: list of    :py:class:`Targets <ydk.models.ietf.ietf_dmm_fpc.ProbeRpc.Input.Targets>`
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.targets = YList()
            self.targets.parent = self
            self.targets.name = 'targets'


        class Targets(object):
            """
            List of Targets
            
            .. attribute:: target  <key>
            
            	Target Id
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            .. attribute:: dpn_id
            
            	DPN Id
            	**type**\: one of the below types:
            
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            
            ----
            	**type**\:  str
            
            
            ----
            	**type**\:  str
            
            
            ----
            

            """

            _prefix = 'fpc'
            _revision = '2017-03-08'

            def __init__(self):
                self.parent = None
                self.target = None
                self.dpn_id = None

            @property
            def _common_path(self):
                if self.target is None:
                    raise YPYModelError('Key property target is None')

                return '/ietf-dmm-fpc:probe/ietf-dmm-fpc:input/ietf-dmm-fpc:targets[ietf-dmm-fpc:target = ' + str(self.target) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.target is not None:
                    return True

                if self.dpn_id is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
                return meta._meta_table['ProbeRpc.Input.Targets']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-dmm-fpc:probe/ietf-dmm-fpc:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.targets is not None:
                for child_ref in self.targets:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['ProbeRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: error_info
        
        	Error Detail
        	**type**\:  str
        
        	**length:** 1..1024
        
        .. attribute:: error_type_id
        
        	Error ID
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: monitor_result
        
        	Result
        	**type**\:   :py:class:`ResultEnum <ydk.models.ietf.ietf_dmm_fpc.ResultEnum>`
        
        

        """

        _prefix = 'fpc'
        _revision = '2017-03-08'

        def __init__(self):
            self.parent = None
            self.error_info = None
            self.error_type_id = None
            self.monitor_result = None

        @property
        def _common_path(self):

            return '/ietf-dmm-fpc:probe/ietf-dmm-fpc:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.error_info is not None:
                return True

            if self.error_type_id is not None:
                return True

            if self.monitor_result is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
            return meta._meta_table['ProbeRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-dmm-fpc:probe'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['ProbeRpc']['meta_info']


class FpcNexthopMacIdentity(FpcNexthopTypeIdentity):
    """
    Nexthop MAC\-Address
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        FpcNexthopTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcNexthopMacIdentity']['meta_info']


class FpcNexthopIpIdentity(FpcNexthopTypeIdentity):
    """
    Nexthop IP
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        FpcNexthopTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcNexthopIpIdentity']['meta_info']


class ThresholdReportIdentity(ReportTypeIdentity):
    """
    Threshold Report
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        ReportTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['ThresholdReportIdentity']['meta_info']


class PeriodicReportIdentity(ReportTypeIdentity):
    """
    Periodic Report
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        ReportTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['PeriodicReportIdentity']['meta_info']


class ScheduledReportIdentity(ReportTypeIdentity):
    """
    Scheduled Report
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        ReportTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['ScheduledReportIdentity']['meta_info']


class FpcNexthopIfIdentity(FpcNexthopTypeIdentity):
    """
    Nexthop If index
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        FpcNexthopTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcNexthopIfIdentity']['meta_info']


class FpcNexthopServicepathIdentity(FpcNexthopTypeIdentity):
    """
    Nexthop Service Path
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        FpcNexthopTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcNexthopServicepathIdentity']['meta_info']


class EventsReportIdentity(ReportTypeIdentity):
    """
    Events Report
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        ReportTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['EventsReportIdentity']['meta_info']


class FpcAnchorDpnRoleIdentity(FpcDataPlaneRoleIdentity):
    """
    Anchor DPN Role
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        FpcDataPlaneRoleIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcAnchorDpnRoleIdentity']['meta_info']


class FpcNexthopMplsIdentity(FpcNexthopTypeIdentity):
    """
    Nexthop MPLS
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        FpcNexthopTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcNexthopMplsIdentity']['meta_info']


class FpcAccessDpnRoleIdentity(FpcDataPlaneRoleIdentity):
    """
    Access DPN Role
    
    

    """

    _prefix = 'fpc'
    _revision = '2017-03-08'

    def __init__(self):
        FpcDataPlaneRoleIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_dmm_fpc as meta
        return meta._meta_table['FpcAccessDpnRoleIdentity']['meta_info']


