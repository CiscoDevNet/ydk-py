""" Cisco_IOS_XR_asr9k_sc_invmgr_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR asr9k\-sc\-invmgr package operational data.

This module contains definitions
for the following management objects\:
  inventory\: Logical Router Inventory operational data

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class CardResetReason(Enum):
    """
    CardResetReason

    Card reset reason

    .. data:: reset_unknown = 1

    	reset unknown

    .. data:: power_up = 2

    	power up

    .. data:: parity_error = 3

    	parity error

    .. data:: clear_config_reset = 4

    	clear config reset

    .. data:: manual_reset = 5

    	manual reset

    .. data:: watch_dog_timeout_reset = 6

    	watch dog timeout reset

    .. data:: resource_overflow_reset = 7

    	resource overflow reset

    .. data:: missing_task_reset = 8

    	missing task reset

    .. data:: low_voltage_reset = 9

    	low voltage reset

    .. data:: controller_reset = 10

    	controller reset

    .. data:: system_reset = 11

    	system reset

    .. data:: switchover_reset = 12

    	switchover reset

    .. data:: upgrade_reset = 13

    	upgrade reset

    .. data:: downgrade_reset = 14

    	downgrade reset

    .. data:: cache_error_reset = 15

    	cache error reset

    .. data:: device_driver_reset = 16

    	device driver reset

    .. data:: software_exception_reset = 17

    	software exception reset

    .. data:: restore_config_reset = 18

    	restore config reset

    .. data:: abort_rev_reset = 19

    	abort rev reset

    .. data:: burn_boot_reset = 20

    	burn boot reset

    .. data:: standby_cd_healthier_reset = 21

    	standby cd healthier reset

    .. data:: non_native_config_clear_reset = 22

    	non native config clear reset

    .. data:: memory_protection_error_reset = 23

    	memory protection error reset

    .. data:: card_reset_reason_max = 24

    	card reset reason max

    """

    reset_unknown = Enum.YLeaf(1, "reset-unknown")

    power_up = Enum.YLeaf(2, "power-up")

    parity_error = Enum.YLeaf(3, "parity-error")

    clear_config_reset = Enum.YLeaf(4, "clear-config-reset")

    manual_reset = Enum.YLeaf(5, "manual-reset")

    watch_dog_timeout_reset = Enum.YLeaf(6, "watch-dog-timeout-reset")

    resource_overflow_reset = Enum.YLeaf(7, "resource-overflow-reset")

    missing_task_reset = Enum.YLeaf(8, "missing-task-reset")

    low_voltage_reset = Enum.YLeaf(9, "low-voltage-reset")

    controller_reset = Enum.YLeaf(10, "controller-reset")

    system_reset = Enum.YLeaf(11, "system-reset")

    switchover_reset = Enum.YLeaf(12, "switchover-reset")

    upgrade_reset = Enum.YLeaf(13, "upgrade-reset")

    downgrade_reset = Enum.YLeaf(14, "downgrade-reset")

    cache_error_reset = Enum.YLeaf(15, "cache-error-reset")

    device_driver_reset = Enum.YLeaf(16, "device-driver-reset")

    software_exception_reset = Enum.YLeaf(17, "software-exception-reset")

    restore_config_reset = Enum.YLeaf(18, "restore-config-reset")

    abort_rev_reset = Enum.YLeaf(19, "abort-rev-reset")

    burn_boot_reset = Enum.YLeaf(20, "burn-boot-reset")

    standby_cd_healthier_reset = Enum.YLeaf(21, "standby-cd-healthier-reset")

    non_native_config_clear_reset = Enum.YLeaf(22, "non-native-config-clear-reset")

    memory_protection_error_reset = Enum.YLeaf(23, "memory-protection-error-reset")

    card_reset_reason_max = Enum.YLeaf(24, "card-reset-reason-max")



class Inventory(Entity):
    """
    Logical Router Inventory operational data
    
    .. attribute:: racks
    
    	Table of racks
    	**type**\:   :py:class:`Racks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks>`
    
    

    """

    _prefix = 'asr9k-sc-invmgr-oper'
    _revision = '2017-01-04'

    def __init__(self):
        super(Inventory, self).__init__()
        self._top_entity = None

        self.yang_name = "inventory"
        self.yang_parent_name = "Cisco-IOS-XR-asr9k-sc-invmgr-oper"

        self.racks = Inventory.Racks()
        self.racks.parent = self
        self._children_name_map["racks"] = "racks"
        self._children_yang_names.add("racks")


    class Racks(Entity):
        """
        Table of racks
        
        .. attribute:: rack
        
        	Rack number
        	**type**\: list of    :py:class:`Rack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack>`
        
        

        """

        _prefix = 'asr9k-sc-invmgr-oper'
        _revision = '2017-01-04'

        def __init__(self):
            super(Inventory.Racks, self).__init__()

            self.yang_name = "racks"
            self.yang_parent_name = "inventory"

            self.rack = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(Inventory.Racks, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(Inventory.Racks, self).__setattr__(name, value)


        class Rack(Entity):
            """
            Rack number
            
            .. attribute:: number  <key>
            
            	Rack number
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: slots
            
            	Slot table contains all slots in the rack
            	**type**\:   :py:class:`Slots <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots>`
            
            

            """

            _prefix = 'asr9k-sc-invmgr-oper'
            _revision = '2017-01-04'

            def __init__(self):
                super(Inventory.Racks.Rack, self).__init__()

                self.yang_name = "rack"
                self.yang_parent_name = "racks"

                self.number = YLeaf(YType.int32, "number")

                self.slots = Inventory.Racks.Rack.Slots()
                self.slots.parent = self
                self._children_name_map["slots"] = "slots"
                self._children_yang_names.add("slots")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("number") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Inventory.Racks.Rack, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Inventory.Racks.Rack, self).__setattr__(name, value)


            class Slots(Entity):
                """
                Slot table contains all slots in the rack
                
                .. attribute:: slot
                
                	Slot number
                	**type**\: list of    :py:class:`Slot <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot>`
                
                

                """

                _prefix = 'asr9k-sc-invmgr-oper'
                _revision = '2017-01-04'

                def __init__(self):
                    super(Inventory.Racks.Rack.Slots, self).__init__()

                    self.yang_name = "slots"
                    self.yang_parent_name = "rack"

                    self.slot = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Inventory.Racks.Rack.Slots, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Inventory.Racks.Rack.Slots, self).__setattr__(name, value)


                class Slot(Entity):
                    """
                    Slot number
                    
                    .. attribute:: number  <key>
                    
                    	Slot number
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: basic_attributes
                    
                    	Attributes
                    	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.BasicAttributes>`
                    
                    .. attribute:: cards
                    
                    	Card table contains all cards in the slot
                    	**type**\:   :py:class:`Cards <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards>`
                    
                    

                    """

                    _prefix = 'asr9k-sc-invmgr-oper'
                    _revision = '2017-01-04'

                    def __init__(self):
                        super(Inventory.Racks.Rack.Slots.Slot, self).__init__()

                        self.yang_name = "slot"
                        self.yang_parent_name = "slots"

                        self.number = YLeaf(YType.int32, "number")

                        self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.BasicAttributes()
                        self.basic_attributes.parent = self
                        self._children_name_map["basic_attributes"] = "basic-attributes"
                        self._children_yang_names.add("basic-attributes")

                        self.cards = Inventory.Racks.Rack.Slots.Slot.Cards()
                        self.cards.parent = self
                        self._children_name_map["cards"] = "cards"
                        self._children_yang_names.add("cards")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("number") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Inventory.Racks.Rack.Slots.Slot, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Inventory.Racks.Rack.Slots.Slot, self).__setattr__(name, value)


                    class Cards(Entity):
                        """
                        Card table contains all cards in the slot
                        
                        .. attribute:: card
                        
                        	Card number
                        	**type**\: list of    :py:class:`Card <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card>`
                        
                        

                        """

                        _prefix = 'asr9k-sc-invmgr-oper'
                        _revision = '2017-01-04'

                        def __init__(self):
                            super(Inventory.Racks.Rack.Slots.Slot.Cards, self).__init__()

                            self.yang_name = "cards"
                            self.yang_parent_name = "slot"

                            self.card = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Inventory.Racks.Rack.Slots.Slot.Cards, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Inventory.Racks.Rack.Slots.Slot.Cards, self).__setattr__(name, value)


                        class Card(Entity):
                            """
                            Card number
                            
                            .. attribute:: number  <key>
                            
                            	card number
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: basic_attributes
                            
                            	Attributes
                            	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes>`
                            
                            .. attribute:: hw_components
                            
                            	HWComponent table contains all HW modules within the card 
                            	**type**\:   :py:class:`HwComponents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents>`
                            
                            .. attribute:: port_slots
                            
                            	PortSlotTable contains all optics ports in a SPA/PLIM
                            	**type**\:   :py:class:`PortSlots <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots>`
                            
                            .. attribute:: sensors
                            
                            	ModuleSensorTable contains all sensors in a Module
                            	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors>`
                            
                            .. attribute:: sub_slots
                            
                            	SubSlotTable contains all subslots in a Slot
                            	**type**\:   :py:class:`SubSlots <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots>`
                            
                            

                            """

                            _prefix = 'asr9k-sc-invmgr-oper'
                            _revision = '2017-01-04'

                            def __init__(self):
                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card, self).__init__()

                                self.yang_name = "card"
                                self.yang_parent_name = "cards"

                                self.number = YLeaf(YType.int32, "number")

                                self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes()
                                self.basic_attributes.parent = self
                                self._children_name_map["basic_attributes"] = "basic-attributes"
                                self._children_yang_names.add("basic-attributes")

                                self.hw_components = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents()
                                self.hw_components.parent = self
                                self._children_name_map["hw_components"] = "hw-components"
                                self._children_yang_names.add("hw-components")

                                self.port_slots = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots()
                                self.port_slots.parent = self
                                self._children_name_map["port_slots"] = "port-slots"
                                self._children_yang_names.add("port-slots")

                                self.sensors = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors()
                                self.sensors.parent = self
                                self._children_name_map["sensors"] = "sensors"
                                self._children_yang_names.add("sensors")

                                self.sub_slots = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots()
                                self.sub_slots.parent = self
                                self._children_name_map["sub_slots"] = "sub-slots"
                                self._children_yang_names.add("sub-slots")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("number") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card, self).__setattr__(name, value)


                            class SubSlots(Entity):
                                """
                                SubSlotTable contains all subslots in a
                                Slot
                                
                                .. attribute:: sub_slot
                                
                                	SubSlot number
                                	**type**\: list of    :py:class:`SubSlot <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot>`
                                
                                

                                """

                                _prefix = 'asr9k-sc-invmgr-oper'
                                _revision = '2017-01-04'

                                def __init__(self):
                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots, self).__init__()

                                    self.yang_name = "sub-slots"
                                    self.yang_parent_name = "card"

                                    self.sub_slot = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots, self).__setattr__(name, value)


                                class SubSlot(Entity):
                                    """
                                    SubSlot number
                                    
                                    .. attribute:: number  <key>
                                    
                                    	subslot number
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: basic_attributes
                                    
                                    	Attributes
                                    	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes>`
                                    
                                    .. attribute:: module
                                    
                                    	Module string
                                    	**type**\:   :py:class:`Module <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module>`
                                    
                                    

                                    """

                                    _prefix = 'asr9k-sc-invmgr-oper'
                                    _revision = '2017-01-04'

                                    def __init__(self):
                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot, self).__init__()

                                        self.yang_name = "sub-slot"
                                        self.yang_parent_name = "sub-slots"

                                        self.number = YLeaf(YType.int32, "number")

                                        self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes()
                                        self.basic_attributes.parent = self
                                        self._children_name_map["basic_attributes"] = "basic-attributes"
                                        self._children_yang_names.add("basic-attributes")

                                        self.module = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module()
                                        self.module.parent = self
                                        self._children_name_map["module"] = "module"
                                        self._children_yang_names.add("module")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("number") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot, self).__setattr__(name, value)


                                    class Module(Entity):
                                        """
                                        Module string
                                        
                                        .. attribute:: basic_attributes
                                        
                                        	Attributes
                                        	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes>`
                                        
                                        .. attribute:: port_slots
                                        
                                        	PortSlotTable contains all optics ports in a SPA/PLIM
                                        	**type**\:   :py:class:`PortSlots <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots>`
                                        
                                        .. attribute:: sensors
                                        
                                        	ModuleSensorTable contains all sensors in a Module
                                        	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors>`
                                        
                                        

                                        """

                                        _prefix = 'asr9k-sc-invmgr-oper'
                                        _revision = '2017-01-04'

                                        def __init__(self):
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module, self).__init__()

                                            self.yang_name = "module"
                                            self.yang_parent_name = "sub-slot"

                                            self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes()
                                            self.basic_attributes.parent = self
                                            self._children_name_map["basic_attributes"] = "basic-attributes"
                                            self._children_yang_names.add("basic-attributes")

                                            self.port_slots = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots()
                                            self.port_slots.parent = self
                                            self._children_name_map["port_slots"] = "port-slots"
                                            self._children_yang_names.add("port-slots")

                                            self.sensors = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors()
                                            self.sensors.parent = self
                                            self._children_name_map["sensors"] = "sensors"
                                            self._children_yang_names.add("sensors")


                                        class Sensors(Entity):
                                            """
                                            ModuleSensorTable contains all sensors in a
                                            Module.
                                            
                                            .. attribute:: sensor
                                            
                                            	Sensor number in the Module
                                            	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor>`
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors, self).__init__()

                                                self.yang_name = "sensors"
                                                self.yang_parent_name = "module"

                                                self.sensor = YList(self)

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in () and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors, self).__setattr__(name, value)


                                            class Sensor(Entity):
                                                """
                                                Sensor number in the Module
                                                
                                                .. attribute:: number  <key>
                                                
                                                	sensor number
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: basic_attributes
                                                
                                                	Attributes
                                                	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes>`
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor, self).__init__()

                                                    self.yang_name = "sensor"
                                                    self.yang_parent_name = "sensors"

                                                    self.number = YLeaf(YType.int32, "number")

                                                    self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes()
                                                    self.basic_attributes.parent = self
                                                    self._children_name_map["basic_attributes"] = "basic-attributes"
                                                    self._children_yang_names.add("basic-attributes")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("number") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor, self).__setattr__(name, value)


                                                class BasicAttributes(Entity):
                                                    """
                                                    Attributes
                                                    
                                                    .. attribute:: basic_info
                                                    
                                                    	Inventory information
                                                    	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.BasicInfo>`
                                                    
                                                    .. attribute:: fru_info
                                                    
                                                    	Field Replaceable Unit (FRU) inventory information
                                                    	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'asr9k-sc-invmgr-oper'
                                                    _revision = '2017-01-04'

                                                    def __init__(self):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes, self).__init__()

                                                        self.yang_name = "basic-attributes"
                                                        self.yang_parent_name = "sensor"

                                                        self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.BasicInfo()
                                                        self.basic_info.parent = self
                                                        self._children_name_map["basic_info"] = "basic-info"
                                                        self._children_yang_names.add("basic-info")

                                                        self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo()
                                                        self.fru_info.parent = self
                                                        self._children_name_map["fru_info"] = "fru-info"
                                                        self._children_yang_names.add("fru-info")


                                                    class BasicInfo(Entity):
                                                        """
                                                        Inventory information
                                                        
                                                        .. attribute:: alias
                                                        
                                                        	useful for storing an entity alias 
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: asset_id_str
                                                        
                                                        	asset Identification string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: asset_identification
                                                        
                                                        	asset Identification
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: ceport
                                                        
                                                        	1 if ce port found, 0 if not
                                                        	**type**\:  bool
                                                        
                                                        .. attribute:: chip_hardware_revision
                                                        
                                                        	chip module hw revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: composite_class_code
                                                        
                                                        	Major&minor class of the entity
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: description
                                                        
                                                        	describes in user\-readable terms       what the entity in question does
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: environmental_monitor_path
                                                        
                                                        	sysdb name of sensor in the envmon EDM
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: firmware_revision
                                                        
                                                        	firmware revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: group_flag
                                                        
                                                        	indicates if this entity is group       or not
                                                        	**type**\:  bool
                                                        
                                                        .. attribute:: hardware_revision
                                                        
                                                        	hw revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: is_field_replaceable_unit
                                                        
                                                        	1 if Field Replaceable Unit 0, if not
                                                        	**type**\:  bool
                                                        
                                                        .. attribute:: manufacturer_asset_tags
                                                        
                                                        	Manufacture Asset Tags
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: manufacturer_name
                                                        
                                                        	manufacturer's name
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: memory_size
                                                        
                                                        	Size of memory associated with       the entity where applicable
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: model_name
                                                        
                                                        	model name
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: name
                                                        
                                                        	name string for the entity
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: new_deviation_number
                                                        
                                                        	integer value for New Deviation Number 0x88
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: physical_layer_interface_module_type
                                                        
                                                        	integer value for plim type if     applicable to this entity
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: redundancystate
                                                        
                                                        	integer value for Redundancy State if     applicable to this entity
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: serial_number
                                                        
                                                        	serial number
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: software_revision
                                                        
                                                        	software revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: unique_id
                                                        
                                                        	Unique id for an entity
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: unrecognized_fru
                                                        
                                                        	1 if UnrecognizedFRU and 0 for recognizedFRU
                                                        	**type**\:  bool
                                                        
                                                        .. attribute:: vendor_type
                                                        
                                                        	maps to the vendor OID string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: xr_scoped
                                                        
                                                        	1 if xr scoped, 0 if not
                                                        	**type**\:  bool
                                                        
                                                        

                                                        """

                                                        _prefix = 'asr9k-sc-invmgr-oper'
                                                        _revision = '2017-01-04'

                                                        def __init__(self):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.BasicInfo, self).__init__()

                                                            self.yang_name = "basic-info"
                                                            self.yang_parent_name = "basic-attributes"

                                                            self.alias = YLeaf(YType.str, "alias")

                                                            self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                                            self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                                            self.ceport = YLeaf(YType.boolean, "ceport")

                                                            self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                                            self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                                            self.description = YLeaf(YType.str, "description")

                                                            self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                                            self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                            self.group_flag = YLeaf(YType.boolean, "group-flag")

                                                            self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                            self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                            self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                                            self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                                            self.memory_size = YLeaf(YType.int32, "memory-size")

                                                            self.model_name = YLeaf(YType.str, "model-name")

                                                            self.name = YLeaf(YType.str, "name")

                                                            self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                                            self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                                            self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                                            self.serial_number = YLeaf(YType.str, "serial-number")

                                                            self.software_revision = YLeaf(YType.str, "software-revision")

                                                            self.unique_id = YLeaf(YType.int32, "unique-id")

                                                            self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                                            self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                            self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("alias",
                                                                            "asset_id_str",
                                                                            "asset_identification",
                                                                            "ceport",
                                                                            "chip_hardware_revision",
                                                                            "composite_class_code",
                                                                            "description",
                                                                            "environmental_monitor_path",
                                                                            "firmware_revision",
                                                                            "group_flag",
                                                                            "hardware_revision",
                                                                            "is_field_replaceable_unit",
                                                                            "manufacturer_asset_tags",
                                                                            "manufacturer_name",
                                                                            "memory_size",
                                                                            "model_name",
                                                                            "name",
                                                                            "new_deviation_number",
                                                                            "physical_layer_interface_module_type",
                                                                            "redundancystate",
                                                                            "serial_number",
                                                                            "software_revision",
                                                                            "unique_id",
                                                                            "unrecognized_fru",
                                                                            "vendor_type",
                                                                            "xr_scoped") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.alias.is_set or
                                                                self.asset_id_str.is_set or
                                                                self.asset_identification.is_set or
                                                                self.ceport.is_set or
                                                                self.chip_hardware_revision.is_set or
                                                                self.composite_class_code.is_set or
                                                                self.description.is_set or
                                                                self.environmental_monitor_path.is_set or
                                                                self.firmware_revision.is_set or
                                                                self.group_flag.is_set or
                                                                self.hardware_revision.is_set or
                                                                self.is_field_replaceable_unit.is_set or
                                                                self.manufacturer_asset_tags.is_set or
                                                                self.manufacturer_name.is_set or
                                                                self.memory_size.is_set or
                                                                self.model_name.is_set or
                                                                self.name.is_set or
                                                                self.new_deviation_number.is_set or
                                                                self.physical_layer_interface_module_type.is_set or
                                                                self.redundancystate.is_set or
                                                                self.serial_number.is_set or
                                                                self.software_revision.is_set or
                                                                self.unique_id.is_set or
                                                                self.unrecognized_fru.is_set or
                                                                self.vendor_type.is_set or
                                                                self.xr_scoped.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.alias.yfilter != YFilter.not_set or
                                                                self.asset_id_str.yfilter != YFilter.not_set or
                                                                self.asset_identification.yfilter != YFilter.not_set or
                                                                self.ceport.yfilter != YFilter.not_set or
                                                                self.chip_hardware_revision.yfilter != YFilter.not_set or
                                                                self.composite_class_code.yfilter != YFilter.not_set or
                                                                self.description.yfilter != YFilter.not_set or
                                                                self.environmental_monitor_path.yfilter != YFilter.not_set or
                                                                self.firmware_revision.yfilter != YFilter.not_set or
                                                                self.group_flag.yfilter != YFilter.not_set or
                                                                self.hardware_revision.yfilter != YFilter.not_set or
                                                                self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                                                self.manufacturer_name.yfilter != YFilter.not_set or
                                                                self.memory_size.yfilter != YFilter.not_set or
                                                                self.model_name.yfilter != YFilter.not_set or
                                                                self.name.yfilter != YFilter.not_set or
                                                                self.new_deviation_number.yfilter != YFilter.not_set or
                                                                self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                                                self.redundancystate.yfilter != YFilter.not_set or
                                                                self.serial_number.yfilter != YFilter.not_set or
                                                                self.software_revision.yfilter != YFilter.not_set or
                                                                self.unique_id.yfilter != YFilter.not_set or
                                                                self.unrecognized_fru.yfilter != YFilter.not_set or
                                                                self.vendor_type.yfilter != YFilter.not_set or
                                                                self.xr_scoped.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "basic-info" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.alias.get_name_leafdata())
                                                            if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                                            if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                                            if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.ceport.get_name_leafdata())
                                                            if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                                            if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                                            if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.description.get_name_leafdata())
                                                            if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                                            if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                            if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.group_flag.get_name_leafdata())
                                                            if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                            if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                            if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                                            if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                                            if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.memory_size.get_name_leafdata())
                                                            if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.model_name.get_name_leafdata())
                                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.name.get_name_leafdata())
                                                            if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                                            if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                                            if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                                            if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                            if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                            if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unique_id.get_name_leafdata())
                                                            if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                                            if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                                            if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "alias"):
                                                                self.alias = value
                                                                self.alias.value_namespace = name_space
                                                                self.alias.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "asset-id-str"):
                                                                self.asset_id_str = value
                                                                self.asset_id_str.value_namespace = name_space
                                                                self.asset_id_str.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "asset-identification"):
                                                                self.asset_identification = value
                                                                self.asset_identification.value_namespace = name_space
                                                                self.asset_identification.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "ceport"):
                                                                self.ceport = value
                                                                self.ceport.value_namespace = name_space
                                                                self.ceport.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "chip-hardware-revision"):
                                                                self.chip_hardware_revision = value
                                                                self.chip_hardware_revision.value_namespace = name_space
                                                                self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "composite-class-code"):
                                                                self.composite_class_code = value
                                                                self.composite_class_code.value_namespace = name_space
                                                                self.composite_class_code.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "description"):
                                                                self.description = value
                                                                self.description.value_namespace = name_space
                                                                self.description.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "environmental-monitor-path"):
                                                                self.environmental_monitor_path = value
                                                                self.environmental_monitor_path.value_namespace = name_space
                                                                self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "firmware-revision"):
                                                                self.firmware_revision = value
                                                                self.firmware_revision.value_namespace = name_space
                                                                self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "group-flag"):
                                                                self.group_flag = value
                                                                self.group_flag.value_namespace = name_space
                                                                self.group_flag.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "hardware-revision"):
                                                                self.hardware_revision = value
                                                                self.hardware_revision.value_namespace = name_space
                                                                self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "is-field-replaceable-unit"):
                                                                self.is_field_replaceable_unit = value
                                                                self.is_field_replaceable_unit.value_namespace = name_space
                                                                self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "manufacturer-asset-tags"):
                                                                self.manufacturer_asset_tags = value
                                                                self.manufacturer_asset_tags.value_namespace = name_space
                                                                self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "manufacturer-name"):
                                                                self.manufacturer_name = value
                                                                self.manufacturer_name.value_namespace = name_space
                                                                self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "memory-size"):
                                                                self.memory_size = value
                                                                self.memory_size.value_namespace = name_space
                                                                self.memory_size.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "model-name"):
                                                                self.model_name = value
                                                                self.model_name.value_namespace = name_space
                                                                self.model_name.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "name"):
                                                                self.name = value
                                                                self.name.value_namespace = name_space
                                                                self.name.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "new-deviation-number"):
                                                                self.new_deviation_number = value
                                                                self.new_deviation_number.value_namespace = name_space
                                                                self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "physical-layer-interface-module-type"):
                                                                self.physical_layer_interface_module_type = value
                                                                self.physical_layer_interface_module_type.value_namespace = name_space
                                                                self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "redundancystate"):
                                                                self.redundancystate = value
                                                                self.redundancystate.value_namespace = name_space
                                                                self.redundancystate.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "serial-number"):
                                                                self.serial_number = value
                                                                self.serial_number.value_namespace = name_space
                                                                self.serial_number.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "software-revision"):
                                                                self.software_revision = value
                                                                self.software_revision.value_namespace = name_space
                                                                self.software_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "unique-id"):
                                                                self.unique_id = value
                                                                self.unique_id.value_namespace = name_space
                                                                self.unique_id.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "unrecognized-fru"):
                                                                self.unrecognized_fru = value
                                                                self.unrecognized_fru.value_namespace = name_space
                                                                self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "vendor-type"):
                                                                self.vendor_type = value
                                                                self.vendor_type.value_namespace = name_space
                                                                self.vendor_type.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "xr-scoped"):
                                                                self.xr_scoped = value
                                                                self.xr_scoped.value_namespace = name_space
                                                                self.xr_scoped.value_namespace_prefix = name_space_prefix


                                                    class FruInfo(Entity):
                                                        """
                                                        Field Replaceable Unit (FRU) inventory
                                                        information
                                                        
                                                        .. attribute:: card_administrative_state
                                                        
                                                        	card admin state\: shutdown or not
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: card_monitor_state
                                                        
                                                        	card is monitored by a manager or left unmonitored
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: card_operational_state
                                                        
                                                        	card operation state
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: card_reset_reason
                                                        
                                                        	card reset reason enum
                                                        	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                                        
                                                        .. attribute:: card_up_time
                                                        
                                                        	card up time
                                                        	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime>`
                                                        
                                                        .. attribute:: last_operational_state_change
                                                        
                                                        	last card oper change state
                                                        	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                                        
                                                        .. attribute:: power_administrative_state
                                                        
                                                        	power admin state\: up or down
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: power_current_measurement
                                                        
                                                        	power current\: not implemented
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: power_operational_state
                                                        
                                                        	Power operation state
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        

                                                        """

                                                        _prefix = 'asr9k-sc-invmgr-oper'
                                                        _revision = '2017-01-04'

                                                        def __init__(self):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo, self).__init__()

                                                            self.yang_name = "fru-info"
                                                            self.yang_parent_name = "basic-attributes"

                                                            self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                                            self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                                            self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                                            self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                                            self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                                            self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                                            self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                                            self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime()
                                                            self.card_up_time.parent = self
                                                            self._children_name_map["card_up_time"] = "card-up-time"
                                                            self._children_yang_names.add("card-up-time")

                                                            self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                            self.last_operational_state_change.parent = self
                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                            self._children_yang_names.add("last-operational-state-change")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("card_administrative_state",
                                                                            "card_monitor_state",
                                                                            "card_operational_state",
                                                                            "card_reset_reason",
                                                                            "power_administrative_state",
                                                                            "power_current_measurement",
                                                                            "power_operational_state") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                                        class LastOperationalStateChange(Entity):
                                                            """
                                                            last card oper change state
                                                            
                                                            .. attribute:: time_in_nano_seconds
                                                            
                                                            	Time Value in Nano\-seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: nanosecond
                                                            
                                                            .. attribute:: time_in_seconds
                                                            
                                                            	Time Value in Seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: second
                                                            
                                                            

                                                            """

                                                            _prefix = 'asr9k-sc-invmgr-oper'
                                                            _revision = '2017-01-04'

                                                            def __init__(self):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                self.yang_name = "last-operational-state-change"
                                                                self.yang_parent_name = "fru-info"

                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("time_in_nano_seconds",
                                                                                "time_in_seconds") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.time_in_nano_seconds.is_set or
                                                                    self.time_in_seconds.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "last-operational-state-change" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "time-in-nano-seconds"):
                                                                    self.time_in_nano_seconds = value
                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "time-in-seconds"):
                                                                    self.time_in_seconds = value
                                                                    self.time_in_seconds.value_namespace = name_space
                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                        class CardUpTime(Entity):
                                                            """
                                                            card up time
                                                            
                                                            .. attribute:: time_in_nano_seconds
                                                            
                                                            	Time Value in Nano\-seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: nanosecond
                                                            
                                                            .. attribute:: time_in_seconds
                                                            
                                                            	Time Value in Seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: second
                                                            
                                                            

                                                            """

                                                            _prefix = 'asr9k-sc-invmgr-oper'
                                                            _revision = '2017-01-04'

                                                            def __init__(self):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                                                self.yang_name = "card-up-time"
                                                                self.yang_parent_name = "fru-info"

                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("time_in_nano_seconds",
                                                                                "time_in_seconds") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.time_in_nano_seconds.is_set or
                                                                    self.time_in_seconds.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "card-up-time" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "time-in-nano-seconds"):
                                                                    self.time_in_nano_seconds = value
                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "time-in-seconds"):
                                                                    self.time_in_seconds = value
                                                                    self.time_in_seconds.value_namespace = name_space
                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                        def has_data(self):
                                                            return (
                                                                self.card_administrative_state.is_set or
                                                                self.card_monitor_state.is_set or
                                                                self.card_operational_state.is_set or
                                                                self.card_reset_reason.is_set or
                                                                self.power_administrative_state.is_set or
                                                                self.power_current_measurement.is_set or
                                                                self.power_operational_state.is_set or
                                                                (self.card_up_time is not None and self.card_up_time.has_data()) or
                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.card_administrative_state.yfilter != YFilter.not_set or
                                                                self.card_monitor_state.yfilter != YFilter.not_set or
                                                                self.card_operational_state.yfilter != YFilter.not_set or
                                                                self.card_reset_reason.yfilter != YFilter.not_set or
                                                                self.power_administrative_state.yfilter != YFilter.not_set or
                                                                self.power_current_measurement.yfilter != YFilter.not_set or
                                                                self.power_operational_state.yfilter != YFilter.not_set or
                                                                (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "fru-info" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                                            if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                                            if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                                            if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                                            if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                                            if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                                            if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            if (child_yang_name == "card-up-time"):
                                                                if (self.card_up_time is None):
                                                                    self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime()
                                                                    self.card_up_time.parent = self
                                                                    self._children_name_map["card_up_time"] = "card-up-time"
                                                                return self.card_up_time

                                                            if (child_yang_name == "last-operational-state-change"):
                                                                if (self.last_operational_state_change is None):
                                                                    self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                                    self.last_operational_state_change.parent = self
                                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                return self.last_operational_state_change

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "card-administrative-state"):
                                                                self.card_administrative_state = value
                                                                self.card_administrative_state.value_namespace = name_space
                                                                self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "card-monitor-state"):
                                                                self.card_monitor_state = value
                                                                self.card_monitor_state.value_namespace = name_space
                                                                self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "card-operational-state"):
                                                                self.card_operational_state = value
                                                                self.card_operational_state.value_namespace = name_space
                                                                self.card_operational_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "card-reset-reason"):
                                                                self.card_reset_reason = value
                                                                self.card_reset_reason.value_namespace = name_space
                                                                self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "power-administrative-state"):
                                                                self.power_administrative_state = value
                                                                self.power_administrative_state.value_namespace = name_space
                                                                self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "power-current-measurement"):
                                                                self.power_current_measurement = value
                                                                self.power_current_measurement.value_namespace = name_space
                                                                self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "power-operational-state"):
                                                                self.power_operational_state = value
                                                                self.power_operational_state.value_namespace = name_space
                                                                self.power_operational_state.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            (self.basic_info is not None and self.basic_info.has_data()) or
                                                            (self.fru_info is not None and self.fru_info.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            (self.basic_info is not None and self.basic_info.has_operation()) or
                                                            (self.fru_info is not None and self.fru_info.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "basic-attributes" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "basic-info"):
                                                            if (self.basic_info is None):
                                                                self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.BasicInfo()
                                                                self.basic_info.parent = self
                                                                self._children_name_map["basic_info"] = "basic-info"
                                                            return self.basic_info

                                                        if (child_yang_name == "fru-info"):
                                                            if (self.fru_info is None):
                                                                self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes.FruInfo()
                                                                self.fru_info.parent = self
                                                                self._children_name_map["fru_info"] = "fru-info"
                                                            return self.fru_info

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "basic-info" or name == "fru-info"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        pass

                                                def has_data(self):
                                                    return (
                                                        self.number.is_set or
                                                        (self.basic_attributes is not None and self.basic_attributes.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.number.yfilter != YFilter.not_set or
                                                        (self.basic_attributes is not None and self.basic_attributes.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "sensor" + "[number='" + self.number.get() + "']" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.number.is_set or self.number.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.number.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "basic-attributes"):
                                                        if (self.basic_attributes is None):
                                                            self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor.BasicAttributes()
                                                            self.basic_attributes.parent = self
                                                            self._children_name_map["basic_attributes"] = "basic-attributes"
                                                        return self.basic_attributes

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "basic-attributes" or name == "number"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "number"):
                                                        self.number = value
                                                        self.number.value_namespace = name_space
                                                        self.number.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                for c in self.sensor:
                                                    if (c.has_data()):
                                                        return True
                                                return False

                                            def has_operation(self):
                                                for c in self.sensor:
                                                    if (c.has_operation()):
                                                        return True
                                                return self.yfilter != YFilter.not_set

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "sensors" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "sensor"):
                                                    for c in self.sensor:
                                                        segment = c.get_segment_path()
                                                        if (segment_path == segment):
                                                            return c
                                                    c = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors.Sensor()
                                                    c.parent = self
                                                    local_reference_key = "ydk::seg::%s" % segment_path
                                                    self._local_refs[local_reference_key] = c
                                                    self.sensor.append(c)
                                                    return c

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "sensor"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass


                                        class PortSlots(Entity):
                                            """
                                            PortSlotTable contains all optics ports in a
                                            SPA/PLIM.
                                            
                                            .. attribute:: port_slot
                                            
                                            	PortSlot number in the SPA/PLIM
                                            	**type**\: list of    :py:class:`PortSlot <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot>`
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots, self).__init__()

                                                self.yang_name = "port-slots"
                                                self.yang_parent_name = "module"

                                                self.port_slot = YList(self)

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in () and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots, self).__setattr__(name, value)


                                            class PortSlot(Entity):
                                                """
                                                PortSlot number in the SPA/PLIM
                                                
                                                .. attribute:: number  <key>
                                                
                                                	portslot number
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: basic_attributes
                                                
                                                	Attributes
                                                	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes>`
                                                
                                                .. attribute:: port
                                                
                                                	Port string
                                                	**type**\:   :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port>`
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot, self).__init__()

                                                    self.yang_name = "port-slot"
                                                    self.yang_parent_name = "port-slots"

                                                    self.number = YLeaf(YType.int32, "number")

                                                    self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes()
                                                    self.basic_attributes.parent = self
                                                    self._children_name_map["basic_attributes"] = "basic-attributes"
                                                    self._children_yang_names.add("basic-attributes")

                                                    self.port = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port()
                                                    self.port.parent = self
                                                    self._children_name_map["port"] = "port"
                                                    self._children_yang_names.add("port")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("number") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot, self).__setattr__(name, value)


                                                class Port(Entity):
                                                    """
                                                    Port string
                                                    
                                                    .. attribute:: basic_attributes
                                                    
                                                    	Attributes
                                                    	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'asr9k-sc-invmgr-oper'
                                                    _revision = '2017-01-04'

                                                    def __init__(self):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port, self).__init__()

                                                        self.yang_name = "port"
                                                        self.yang_parent_name = "port-slot"

                                                        self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes()
                                                        self.basic_attributes.parent = self
                                                        self._children_name_map["basic_attributes"] = "basic-attributes"
                                                        self._children_yang_names.add("basic-attributes")


                                                    class BasicAttributes(Entity):
                                                        """
                                                        Attributes
                                                        
                                                        .. attribute:: basic_info
                                                        
                                                        	Inventory information
                                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo>`
                                                        
                                                        .. attribute:: fru_info
                                                        
                                                        	Field Replaceable Unit (FRU) inventory information
                                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo>`
                                                        
                                                        

                                                        """

                                                        _prefix = 'asr9k-sc-invmgr-oper'
                                                        _revision = '2017-01-04'

                                                        def __init__(self):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes, self).__init__()

                                                            self.yang_name = "basic-attributes"
                                                            self.yang_parent_name = "port"

                                                            self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo()
                                                            self.basic_info.parent = self
                                                            self._children_name_map["basic_info"] = "basic-info"
                                                            self._children_yang_names.add("basic-info")

                                                            self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo()
                                                            self.fru_info.parent = self
                                                            self._children_name_map["fru_info"] = "fru-info"
                                                            self._children_yang_names.add("fru-info")


                                                        class BasicInfo(Entity):
                                                            """
                                                            Inventory information
                                                            
                                                            .. attribute:: alias
                                                            
                                                            	useful for storing an entity alias 
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: asset_id_str
                                                            
                                                            	asset Identification string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: asset_identification
                                                            
                                                            	asset Identification
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: ceport
                                                            
                                                            	1 if ce port found, 0 if not
                                                            	**type**\:  bool
                                                            
                                                            .. attribute:: chip_hardware_revision
                                                            
                                                            	chip module hw revision string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: composite_class_code
                                                            
                                                            	Major&minor class of the entity
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: description
                                                            
                                                            	describes in user\-readable terms       what the entity in question does
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: environmental_monitor_path
                                                            
                                                            	sysdb name of sensor in the envmon EDM
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: firmware_revision
                                                            
                                                            	firmware revision string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: group_flag
                                                            
                                                            	indicates if this entity is group       or not
                                                            	**type**\:  bool
                                                            
                                                            .. attribute:: hardware_revision
                                                            
                                                            	hw revision string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: is_field_replaceable_unit
                                                            
                                                            	1 if Field Replaceable Unit 0, if not
                                                            	**type**\:  bool
                                                            
                                                            .. attribute:: manufacturer_asset_tags
                                                            
                                                            	Manufacture Asset Tags
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: manufacturer_name
                                                            
                                                            	manufacturer's name
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: memory_size
                                                            
                                                            	Size of memory associated with       the entity where applicable
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: model_name
                                                            
                                                            	model name
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: name
                                                            
                                                            	name string for the entity
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: new_deviation_number
                                                            
                                                            	integer value for New Deviation Number 0x88
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: physical_layer_interface_module_type
                                                            
                                                            	integer value for plim type if     applicable to this entity
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: redundancystate
                                                            
                                                            	integer value for Redundancy State if     applicable to this entity
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: serial_number
                                                            
                                                            	serial number
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: software_revision
                                                            
                                                            	software revision string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: unique_id
                                                            
                                                            	Unique id for an entity
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: unrecognized_fru
                                                            
                                                            	1 if UnrecognizedFRU and 0 for recognizedFRU
                                                            	**type**\:  bool
                                                            
                                                            .. attribute:: vendor_type
                                                            
                                                            	maps to the vendor OID string
                                                            	**type**\:  str
                                                            
                                                            	**length:** 0..255
                                                            
                                                            .. attribute:: xr_scoped
                                                            
                                                            	1 if xr scoped, 0 if not
                                                            	**type**\:  bool
                                                            
                                                            

                                                            """

                                                            _prefix = 'asr9k-sc-invmgr-oper'
                                                            _revision = '2017-01-04'

                                                            def __init__(self):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo, self).__init__()

                                                                self.yang_name = "basic-info"
                                                                self.yang_parent_name = "basic-attributes"

                                                                self.alias = YLeaf(YType.str, "alias")

                                                                self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                                                self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                                                self.ceport = YLeaf(YType.boolean, "ceport")

                                                                self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                                                self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                                                self.description = YLeaf(YType.str, "description")

                                                                self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                                self.group_flag = YLeaf(YType.boolean, "group-flag")

                                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                                self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                                                self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                                                self.memory_size = YLeaf(YType.int32, "memory-size")

                                                                self.model_name = YLeaf(YType.str, "model-name")

                                                                self.name = YLeaf(YType.str, "name")

                                                                self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                                                self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                                                self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                                self.unique_id = YLeaf(YType.int32, "unique-id")

                                                                self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                                self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("alias",
                                                                                "asset_id_str",
                                                                                "asset_identification",
                                                                                "ceport",
                                                                                "chip_hardware_revision",
                                                                                "composite_class_code",
                                                                                "description",
                                                                                "environmental_monitor_path",
                                                                                "firmware_revision",
                                                                                "group_flag",
                                                                                "hardware_revision",
                                                                                "is_field_replaceable_unit",
                                                                                "manufacturer_asset_tags",
                                                                                "manufacturer_name",
                                                                                "memory_size",
                                                                                "model_name",
                                                                                "name",
                                                                                "new_deviation_number",
                                                                                "physical_layer_interface_module_type",
                                                                                "redundancystate",
                                                                                "serial_number",
                                                                                "software_revision",
                                                                                "unique_id",
                                                                                "unrecognized_fru",
                                                                                "vendor_type",
                                                                                "xr_scoped") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.alias.is_set or
                                                                    self.asset_id_str.is_set or
                                                                    self.asset_identification.is_set or
                                                                    self.ceport.is_set or
                                                                    self.chip_hardware_revision.is_set or
                                                                    self.composite_class_code.is_set or
                                                                    self.description.is_set or
                                                                    self.environmental_monitor_path.is_set or
                                                                    self.firmware_revision.is_set or
                                                                    self.group_flag.is_set or
                                                                    self.hardware_revision.is_set or
                                                                    self.is_field_replaceable_unit.is_set or
                                                                    self.manufacturer_asset_tags.is_set or
                                                                    self.manufacturer_name.is_set or
                                                                    self.memory_size.is_set or
                                                                    self.model_name.is_set or
                                                                    self.name.is_set or
                                                                    self.new_deviation_number.is_set or
                                                                    self.physical_layer_interface_module_type.is_set or
                                                                    self.redundancystate.is_set or
                                                                    self.serial_number.is_set or
                                                                    self.software_revision.is_set or
                                                                    self.unique_id.is_set or
                                                                    self.unrecognized_fru.is_set or
                                                                    self.vendor_type.is_set or
                                                                    self.xr_scoped.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.alias.yfilter != YFilter.not_set or
                                                                    self.asset_id_str.yfilter != YFilter.not_set or
                                                                    self.asset_identification.yfilter != YFilter.not_set or
                                                                    self.ceport.yfilter != YFilter.not_set or
                                                                    self.chip_hardware_revision.yfilter != YFilter.not_set or
                                                                    self.composite_class_code.yfilter != YFilter.not_set or
                                                                    self.description.yfilter != YFilter.not_set or
                                                                    self.environmental_monitor_path.yfilter != YFilter.not_set or
                                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                                    self.group_flag.yfilter != YFilter.not_set or
                                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                    self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                                                    self.manufacturer_name.yfilter != YFilter.not_set or
                                                                    self.memory_size.yfilter != YFilter.not_set or
                                                                    self.model_name.yfilter != YFilter.not_set or
                                                                    self.name.yfilter != YFilter.not_set or
                                                                    self.new_deviation_number.yfilter != YFilter.not_set or
                                                                    self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                                                    self.redundancystate.yfilter != YFilter.not_set or
                                                                    self.serial_number.yfilter != YFilter.not_set or
                                                                    self.software_revision.yfilter != YFilter.not_set or
                                                                    self.unique_id.yfilter != YFilter.not_set or
                                                                    self.unrecognized_fru.yfilter != YFilter.not_set or
                                                                    self.vendor_type.yfilter != YFilter.not_set or
                                                                    self.xr_scoped.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "basic-info" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.alias.get_name_leafdata())
                                                                if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                                                if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                                                if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.ceport.get_name_leafdata())
                                                                if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                                                if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                                if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                                if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.group_flag.get_name_leafdata())
                                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                                if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                                                if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                                                if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.memory_size.get_name_leafdata())
                                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                                if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                                                if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                                                if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                                if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.unique_id.get_name_leafdata())
                                                                if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                                                if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "alias"):
                                                                    self.alias = value
                                                                    self.alias.value_namespace = name_space
                                                                    self.alias.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "asset-id-str"):
                                                                    self.asset_id_str = value
                                                                    self.asset_id_str.value_namespace = name_space
                                                                    self.asset_id_str.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "asset-identification"):
                                                                    self.asset_identification = value
                                                                    self.asset_identification.value_namespace = name_space
                                                                    self.asset_identification.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "ceport"):
                                                                    self.ceport = value
                                                                    self.ceport.value_namespace = name_space
                                                                    self.ceport.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "chip-hardware-revision"):
                                                                    self.chip_hardware_revision = value
                                                                    self.chip_hardware_revision.value_namespace = name_space
                                                                    self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "composite-class-code"):
                                                                    self.composite_class_code = value
                                                                    self.composite_class_code.value_namespace = name_space
                                                                    self.composite_class_code.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "description"):
                                                                    self.description = value
                                                                    self.description.value_namespace = name_space
                                                                    self.description.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "environmental-monitor-path"):
                                                                    self.environmental_monitor_path = value
                                                                    self.environmental_monitor_path.value_namespace = name_space
                                                                    self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "firmware-revision"):
                                                                    self.firmware_revision = value
                                                                    self.firmware_revision.value_namespace = name_space
                                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "group-flag"):
                                                                    self.group_flag = value
                                                                    self.group_flag.value_namespace = name_space
                                                                    self.group_flag.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "hardware-revision"):
                                                                    self.hardware_revision = value
                                                                    self.hardware_revision.value_namespace = name_space
                                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "is-field-replaceable-unit"):
                                                                    self.is_field_replaceable_unit = value
                                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "manufacturer-asset-tags"):
                                                                    self.manufacturer_asset_tags = value
                                                                    self.manufacturer_asset_tags.value_namespace = name_space
                                                                    self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "manufacturer-name"):
                                                                    self.manufacturer_name = value
                                                                    self.manufacturer_name.value_namespace = name_space
                                                                    self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "memory-size"):
                                                                    self.memory_size = value
                                                                    self.memory_size.value_namespace = name_space
                                                                    self.memory_size.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "model-name"):
                                                                    self.model_name = value
                                                                    self.model_name.value_namespace = name_space
                                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "name"):
                                                                    self.name = value
                                                                    self.name.value_namespace = name_space
                                                                    self.name.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "new-deviation-number"):
                                                                    self.new_deviation_number = value
                                                                    self.new_deviation_number.value_namespace = name_space
                                                                    self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "physical-layer-interface-module-type"):
                                                                    self.physical_layer_interface_module_type = value
                                                                    self.physical_layer_interface_module_type.value_namespace = name_space
                                                                    self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "redundancystate"):
                                                                    self.redundancystate = value
                                                                    self.redundancystate.value_namespace = name_space
                                                                    self.redundancystate.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "serial-number"):
                                                                    self.serial_number = value
                                                                    self.serial_number.value_namespace = name_space
                                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "software-revision"):
                                                                    self.software_revision = value
                                                                    self.software_revision.value_namespace = name_space
                                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "unique-id"):
                                                                    self.unique_id = value
                                                                    self.unique_id.value_namespace = name_space
                                                                    self.unique_id.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "unrecognized-fru"):
                                                                    self.unrecognized_fru = value
                                                                    self.unrecognized_fru.value_namespace = name_space
                                                                    self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "vendor-type"):
                                                                    self.vendor_type = value
                                                                    self.vendor_type.value_namespace = name_space
                                                                    self.vendor_type.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "xr-scoped"):
                                                                    self.xr_scoped = value
                                                                    self.xr_scoped.value_namespace = name_space
                                                                    self.xr_scoped.value_namespace_prefix = name_space_prefix


                                                        class FruInfo(Entity):
                                                            """
                                                            Field Replaceable Unit (FRU) inventory
                                                            information
                                                            
                                                            .. attribute:: card_administrative_state
                                                            
                                                            	card admin state\: shutdown or not
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: card_monitor_state
                                                            
                                                            	card is monitored by a manager or left unmonitored
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: card_operational_state
                                                            
                                                            	card operation state
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: card_reset_reason
                                                            
                                                            	card reset reason enum
                                                            	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                                            
                                                            .. attribute:: card_up_time
                                                            
                                                            	card up time
                                                            	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime>`
                                                            
                                                            .. attribute:: last_operational_state_change
                                                            
                                                            	last card oper change state
                                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                                            
                                                            .. attribute:: power_administrative_state
                                                            
                                                            	power admin state\: up or down
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: power_current_measurement
                                                            
                                                            	power current\: not implemented
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            .. attribute:: power_operational_state
                                                            
                                                            	Power operation state
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            

                                                            """

                                                            _prefix = 'asr9k-sc-invmgr-oper'
                                                            _revision = '2017-01-04'

                                                            def __init__(self):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo, self).__init__()

                                                                self.yang_name = "fru-info"
                                                                self.yang_parent_name = "basic-attributes"

                                                                self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                                                self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                                                self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                                                self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                                                self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                                                self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                                                self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                                                self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime()
                                                                self.card_up_time.parent = self
                                                                self._children_name_map["card_up_time"] = "card-up-time"
                                                                self._children_yang_names.add("card-up-time")

                                                                self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                                self.last_operational_state_change.parent = self
                                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                self._children_yang_names.add("last-operational-state-change")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("card_administrative_state",
                                                                                "card_monitor_state",
                                                                                "card_operational_state",
                                                                                "card_reset_reason",
                                                                                "power_administrative_state",
                                                                                "power_current_measurement",
                                                                                "power_operational_state") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                                            class LastOperationalStateChange(Entity):
                                                                """
                                                                last card oper change state
                                                                
                                                                .. attribute:: time_in_nano_seconds
                                                                
                                                                	Time Value in Nano\-seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: nanosecond
                                                                
                                                                .. attribute:: time_in_seconds
                                                                
                                                                	Time Value in Seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: second
                                                                
                                                                

                                                                """

                                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                                _revision = '2017-01-04'

                                                                def __init__(self):
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                    self.yang_name = "last-operational-state-change"
                                                                    self.yang_parent_name = "fru-info"

                                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("time_in_nano_seconds",
                                                                                    "time_in_seconds") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                                def has_data(self):
                                                                    return (
                                                                        self.time_in_nano_seconds.is_set or
                                                                        self.time_in_seconds.is_set)

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "time-in-nano-seconds"):
                                                                        self.time_in_nano_seconds = value
                                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "time-in-seconds"):
                                                                        self.time_in_seconds = value
                                                                        self.time_in_seconds.value_namespace = name_space
                                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                            class CardUpTime(Entity):
                                                                """
                                                                card up time
                                                                
                                                                .. attribute:: time_in_nano_seconds
                                                                
                                                                	Time Value in Nano\-seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: nanosecond
                                                                
                                                                .. attribute:: time_in_seconds
                                                                
                                                                	Time Value in Seconds
                                                                	**type**\:  int
                                                                
                                                                	**range:** \-2147483648..2147483647
                                                                
                                                                	**units**\: second
                                                                
                                                                

                                                                """

                                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                                _revision = '2017-01-04'

                                                                def __init__(self):
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                                                    self.yang_name = "card-up-time"
                                                                    self.yang_parent_name = "fru-info"

                                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                                def __setattr__(self, name, value):
                                                                    self._check_monkey_patching_error(name, value)
                                                                    with _handle_type_error():
                                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                                "Please use list append or extend method."
                                                                                                .format(value))
                                                                        if isinstance(value, Enum.YLeaf):
                                                                            value = value.name
                                                                        if name in ("time_in_nano_seconds",
                                                                                    "time_in_seconds") and name in self.__dict__:
                                                                            if isinstance(value, YLeaf):
                                                                                self.__dict__[name].set(value.get())
                                                                            elif isinstance(value, YLeafList):
                                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                                            else:
                                                                                self.__dict__[name].set(value)
                                                                        else:
                                                                            if hasattr(value, "parent") and name != "parent":
                                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                    value.parent = self
                                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                    value.parent = self
                                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                                                def has_data(self):
                                                                    return (
                                                                        self.time_in_nano_seconds.is_set or
                                                                        self.time_in_seconds.is_set)

                                                                def has_operation(self):
                                                                    return (
                                                                        self.yfilter != YFilter.not_set or
                                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                                def get_segment_path(self):
                                                                    path_buffer = ""
                                                                    path_buffer = "card-up-time" + path_buffer

                                                                    return path_buffer

                                                                def get_entity_path(self, ancestor):
                                                                    path_buffer = ""
                                                                    if (ancestor is None):
                                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                    else:
                                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                    leaf_name_data = LeafDataList()
                                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                    return entity_path

                                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                    if child is not None:
                                                                        return child

                                                                    return None

                                                                def has_leaf_or_child_of_name(self, name):
                                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                        return True
                                                                    return False

                                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                    if(value_path == "time-in-nano-seconds"):
                                                                        self.time_in_nano_seconds = value
                                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                    if(value_path == "time-in-seconds"):
                                                                        self.time_in_seconds = value
                                                                        self.time_in_seconds.value_namespace = name_space
                                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                            def has_data(self):
                                                                return (
                                                                    self.card_administrative_state.is_set or
                                                                    self.card_monitor_state.is_set or
                                                                    self.card_operational_state.is_set or
                                                                    self.card_reset_reason.is_set or
                                                                    self.power_administrative_state.is_set or
                                                                    self.power_current_measurement.is_set or
                                                                    self.power_operational_state.is_set or
                                                                    (self.card_up_time is not None and self.card_up_time.has_data()) or
                                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.card_administrative_state.yfilter != YFilter.not_set or
                                                                    self.card_monitor_state.yfilter != YFilter.not_set or
                                                                    self.card_operational_state.yfilter != YFilter.not_set or
                                                                    self.card_reset_reason.yfilter != YFilter.not_set or
                                                                    self.power_administrative_state.yfilter != YFilter.not_set or
                                                                    self.power_current_measurement.yfilter != YFilter.not_set or
                                                                    self.power_operational_state.yfilter != YFilter.not_set or
                                                                    (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "fru-info" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                                                if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                                                if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                                                if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                                                if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                                                if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                                                if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                if (child_yang_name == "card-up-time"):
                                                                    if (self.card_up_time is None):
                                                                        self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime()
                                                                        self.card_up_time.parent = self
                                                                        self._children_name_map["card_up_time"] = "card-up-time"
                                                                    return self.card_up_time

                                                                if (child_yang_name == "last-operational-state-change"):
                                                                    if (self.last_operational_state_change is None):
                                                                        self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                                        self.last_operational_state_change.parent = self
                                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                    return self.last_operational_state_change

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "card-administrative-state"):
                                                                    self.card_administrative_state = value
                                                                    self.card_administrative_state.value_namespace = name_space
                                                                    self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "card-monitor-state"):
                                                                    self.card_monitor_state = value
                                                                    self.card_monitor_state.value_namespace = name_space
                                                                    self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "card-operational-state"):
                                                                    self.card_operational_state = value
                                                                    self.card_operational_state.value_namespace = name_space
                                                                    self.card_operational_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "card-reset-reason"):
                                                                    self.card_reset_reason = value
                                                                    self.card_reset_reason.value_namespace = name_space
                                                                    self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "power-administrative-state"):
                                                                    self.power_administrative_state = value
                                                                    self.power_administrative_state.value_namespace = name_space
                                                                    self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "power-current-measurement"):
                                                                    self.power_current_measurement = value
                                                                    self.power_current_measurement.value_namespace = name_space
                                                                    self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "power-operational-state"):
                                                                    self.power_operational_state = value
                                                                    self.power_operational_state.value_namespace = name_space
                                                                    self.power_operational_state.value_namespace_prefix = name_space_prefix

                                                        def has_data(self):
                                                            return (
                                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                                (self.fru_info is not None and self.fru_info.has_data()))

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "basic-attributes" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            if (child_yang_name == "basic-info"):
                                                                if (self.basic_info is None):
                                                                    self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo()
                                                                    self.basic_info.parent = self
                                                                    self._children_name_map["basic_info"] = "basic-info"
                                                                return self.basic_info

                                                            if (child_yang_name == "fru-info"):
                                                                if (self.fru_info is None):
                                                                    self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes.FruInfo()
                                                                    self.fru_info.parent = self
                                                                    self._children_name_map["fru_info"] = "fru-info"
                                                                return self.fru_info

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "basic-info" or name == "fru-info"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            pass

                                                    def has_data(self):
                                                        return (self.basic_attributes is not None and self.basic_attributes.has_data())

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            (self.basic_attributes is not None and self.basic_attributes.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "port" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "basic-attributes"):
                                                            if (self.basic_attributes is None):
                                                                self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port.BasicAttributes()
                                                                self.basic_attributes.parent = self
                                                                self._children_name_map["basic_attributes"] = "basic-attributes"
                                                            return self.basic_attributes

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "basic-attributes"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        pass


                                                class BasicAttributes(Entity):
                                                    """
                                                    Attributes
                                                    
                                                    .. attribute:: basic_info
                                                    
                                                    	Inventory information
                                                    	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.BasicInfo>`
                                                    
                                                    .. attribute:: fru_info
                                                    
                                                    	Field Replaceable Unit (FRU) inventory information
                                                    	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'asr9k-sc-invmgr-oper'
                                                    _revision = '2017-01-04'

                                                    def __init__(self):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes, self).__init__()

                                                        self.yang_name = "basic-attributes"
                                                        self.yang_parent_name = "port-slot"

                                                        self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.BasicInfo()
                                                        self.basic_info.parent = self
                                                        self._children_name_map["basic_info"] = "basic-info"
                                                        self._children_yang_names.add("basic-info")

                                                        self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo()
                                                        self.fru_info.parent = self
                                                        self._children_name_map["fru_info"] = "fru-info"
                                                        self._children_yang_names.add("fru-info")


                                                    class BasicInfo(Entity):
                                                        """
                                                        Inventory information
                                                        
                                                        .. attribute:: alias
                                                        
                                                        	useful for storing an entity alias 
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: asset_id_str
                                                        
                                                        	asset Identification string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: asset_identification
                                                        
                                                        	asset Identification
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: ceport
                                                        
                                                        	1 if ce port found, 0 if not
                                                        	**type**\:  bool
                                                        
                                                        .. attribute:: chip_hardware_revision
                                                        
                                                        	chip module hw revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: composite_class_code
                                                        
                                                        	Major&minor class of the entity
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: description
                                                        
                                                        	describes in user\-readable terms       what the entity in question does
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: environmental_monitor_path
                                                        
                                                        	sysdb name of sensor in the envmon EDM
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: firmware_revision
                                                        
                                                        	firmware revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: group_flag
                                                        
                                                        	indicates if this entity is group       or not
                                                        	**type**\:  bool
                                                        
                                                        .. attribute:: hardware_revision
                                                        
                                                        	hw revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: is_field_replaceable_unit
                                                        
                                                        	1 if Field Replaceable Unit 0, if not
                                                        	**type**\:  bool
                                                        
                                                        .. attribute:: manufacturer_asset_tags
                                                        
                                                        	Manufacture Asset Tags
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: manufacturer_name
                                                        
                                                        	manufacturer's name
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: memory_size
                                                        
                                                        	Size of memory associated with       the entity where applicable
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: model_name
                                                        
                                                        	model name
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: name
                                                        
                                                        	name string for the entity
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: new_deviation_number
                                                        
                                                        	integer value for New Deviation Number 0x88
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: physical_layer_interface_module_type
                                                        
                                                        	integer value for plim type if     applicable to this entity
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: redundancystate
                                                        
                                                        	integer value for Redundancy State if     applicable to this entity
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: serial_number
                                                        
                                                        	serial number
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: software_revision
                                                        
                                                        	software revision string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: unique_id
                                                        
                                                        	Unique id for an entity
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: unrecognized_fru
                                                        
                                                        	1 if UnrecognizedFRU and 0 for recognizedFRU
                                                        	**type**\:  bool
                                                        
                                                        .. attribute:: vendor_type
                                                        
                                                        	maps to the vendor OID string
                                                        	**type**\:  str
                                                        
                                                        	**length:** 0..255
                                                        
                                                        .. attribute:: xr_scoped
                                                        
                                                        	1 if xr scoped, 0 if not
                                                        	**type**\:  bool
                                                        
                                                        

                                                        """

                                                        _prefix = 'asr9k-sc-invmgr-oper'
                                                        _revision = '2017-01-04'

                                                        def __init__(self):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.BasicInfo, self).__init__()

                                                            self.yang_name = "basic-info"
                                                            self.yang_parent_name = "basic-attributes"

                                                            self.alias = YLeaf(YType.str, "alias")

                                                            self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                                            self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                                            self.ceport = YLeaf(YType.boolean, "ceport")

                                                            self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                                            self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                                            self.description = YLeaf(YType.str, "description")

                                                            self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                                            self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                            self.group_flag = YLeaf(YType.boolean, "group-flag")

                                                            self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                            self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                            self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                                            self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                                            self.memory_size = YLeaf(YType.int32, "memory-size")

                                                            self.model_name = YLeaf(YType.str, "model-name")

                                                            self.name = YLeaf(YType.str, "name")

                                                            self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                                            self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                                            self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                                            self.serial_number = YLeaf(YType.str, "serial-number")

                                                            self.software_revision = YLeaf(YType.str, "software-revision")

                                                            self.unique_id = YLeaf(YType.int32, "unique-id")

                                                            self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                                            self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                            self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("alias",
                                                                            "asset_id_str",
                                                                            "asset_identification",
                                                                            "ceport",
                                                                            "chip_hardware_revision",
                                                                            "composite_class_code",
                                                                            "description",
                                                                            "environmental_monitor_path",
                                                                            "firmware_revision",
                                                                            "group_flag",
                                                                            "hardware_revision",
                                                                            "is_field_replaceable_unit",
                                                                            "manufacturer_asset_tags",
                                                                            "manufacturer_name",
                                                                            "memory_size",
                                                                            "model_name",
                                                                            "name",
                                                                            "new_deviation_number",
                                                                            "physical_layer_interface_module_type",
                                                                            "redundancystate",
                                                                            "serial_number",
                                                                            "software_revision",
                                                                            "unique_id",
                                                                            "unrecognized_fru",
                                                                            "vendor_type",
                                                                            "xr_scoped") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.alias.is_set or
                                                                self.asset_id_str.is_set or
                                                                self.asset_identification.is_set or
                                                                self.ceport.is_set or
                                                                self.chip_hardware_revision.is_set or
                                                                self.composite_class_code.is_set or
                                                                self.description.is_set or
                                                                self.environmental_monitor_path.is_set or
                                                                self.firmware_revision.is_set or
                                                                self.group_flag.is_set or
                                                                self.hardware_revision.is_set or
                                                                self.is_field_replaceable_unit.is_set or
                                                                self.manufacturer_asset_tags.is_set or
                                                                self.manufacturer_name.is_set or
                                                                self.memory_size.is_set or
                                                                self.model_name.is_set or
                                                                self.name.is_set or
                                                                self.new_deviation_number.is_set or
                                                                self.physical_layer_interface_module_type.is_set or
                                                                self.redundancystate.is_set or
                                                                self.serial_number.is_set or
                                                                self.software_revision.is_set or
                                                                self.unique_id.is_set or
                                                                self.unrecognized_fru.is_set or
                                                                self.vendor_type.is_set or
                                                                self.xr_scoped.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.alias.yfilter != YFilter.not_set or
                                                                self.asset_id_str.yfilter != YFilter.not_set or
                                                                self.asset_identification.yfilter != YFilter.not_set or
                                                                self.ceport.yfilter != YFilter.not_set or
                                                                self.chip_hardware_revision.yfilter != YFilter.not_set or
                                                                self.composite_class_code.yfilter != YFilter.not_set or
                                                                self.description.yfilter != YFilter.not_set or
                                                                self.environmental_monitor_path.yfilter != YFilter.not_set or
                                                                self.firmware_revision.yfilter != YFilter.not_set or
                                                                self.group_flag.yfilter != YFilter.not_set or
                                                                self.hardware_revision.yfilter != YFilter.not_set or
                                                                self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                                self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                                                self.manufacturer_name.yfilter != YFilter.not_set or
                                                                self.memory_size.yfilter != YFilter.not_set or
                                                                self.model_name.yfilter != YFilter.not_set or
                                                                self.name.yfilter != YFilter.not_set or
                                                                self.new_deviation_number.yfilter != YFilter.not_set or
                                                                self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                                                self.redundancystate.yfilter != YFilter.not_set or
                                                                self.serial_number.yfilter != YFilter.not_set or
                                                                self.software_revision.yfilter != YFilter.not_set or
                                                                self.unique_id.yfilter != YFilter.not_set or
                                                                self.unrecognized_fru.yfilter != YFilter.not_set or
                                                                self.vendor_type.yfilter != YFilter.not_set or
                                                                self.xr_scoped.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "basic-info" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.alias.get_name_leafdata())
                                                            if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                                            if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                                            if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.ceport.get_name_leafdata())
                                                            if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                                            if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                                            if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.description.get_name_leafdata())
                                                            if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                                            if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                            if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.group_flag.get_name_leafdata())
                                                            if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                            if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                            if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                                            if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                                            if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.memory_size.get_name_leafdata())
                                                            if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.model_name.get_name_leafdata())
                                                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.name.get_name_leafdata())
                                                            if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                                            if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                                            if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                                            if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                            if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                            if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unique_id.get_name_leafdata())
                                                            if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                                            if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                                            if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "alias"):
                                                                self.alias = value
                                                                self.alias.value_namespace = name_space
                                                                self.alias.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "asset-id-str"):
                                                                self.asset_id_str = value
                                                                self.asset_id_str.value_namespace = name_space
                                                                self.asset_id_str.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "asset-identification"):
                                                                self.asset_identification = value
                                                                self.asset_identification.value_namespace = name_space
                                                                self.asset_identification.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "ceport"):
                                                                self.ceport = value
                                                                self.ceport.value_namespace = name_space
                                                                self.ceport.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "chip-hardware-revision"):
                                                                self.chip_hardware_revision = value
                                                                self.chip_hardware_revision.value_namespace = name_space
                                                                self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "composite-class-code"):
                                                                self.composite_class_code = value
                                                                self.composite_class_code.value_namespace = name_space
                                                                self.composite_class_code.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "description"):
                                                                self.description = value
                                                                self.description.value_namespace = name_space
                                                                self.description.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "environmental-monitor-path"):
                                                                self.environmental_monitor_path = value
                                                                self.environmental_monitor_path.value_namespace = name_space
                                                                self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "firmware-revision"):
                                                                self.firmware_revision = value
                                                                self.firmware_revision.value_namespace = name_space
                                                                self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "group-flag"):
                                                                self.group_flag = value
                                                                self.group_flag.value_namespace = name_space
                                                                self.group_flag.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "hardware-revision"):
                                                                self.hardware_revision = value
                                                                self.hardware_revision.value_namespace = name_space
                                                                self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "is-field-replaceable-unit"):
                                                                self.is_field_replaceable_unit = value
                                                                self.is_field_replaceable_unit.value_namespace = name_space
                                                                self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "manufacturer-asset-tags"):
                                                                self.manufacturer_asset_tags = value
                                                                self.manufacturer_asset_tags.value_namespace = name_space
                                                                self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "manufacturer-name"):
                                                                self.manufacturer_name = value
                                                                self.manufacturer_name.value_namespace = name_space
                                                                self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "memory-size"):
                                                                self.memory_size = value
                                                                self.memory_size.value_namespace = name_space
                                                                self.memory_size.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "model-name"):
                                                                self.model_name = value
                                                                self.model_name.value_namespace = name_space
                                                                self.model_name.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "name"):
                                                                self.name = value
                                                                self.name.value_namespace = name_space
                                                                self.name.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "new-deviation-number"):
                                                                self.new_deviation_number = value
                                                                self.new_deviation_number.value_namespace = name_space
                                                                self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "physical-layer-interface-module-type"):
                                                                self.physical_layer_interface_module_type = value
                                                                self.physical_layer_interface_module_type.value_namespace = name_space
                                                                self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "redundancystate"):
                                                                self.redundancystate = value
                                                                self.redundancystate.value_namespace = name_space
                                                                self.redundancystate.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "serial-number"):
                                                                self.serial_number = value
                                                                self.serial_number.value_namespace = name_space
                                                                self.serial_number.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "software-revision"):
                                                                self.software_revision = value
                                                                self.software_revision.value_namespace = name_space
                                                                self.software_revision.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "unique-id"):
                                                                self.unique_id = value
                                                                self.unique_id.value_namespace = name_space
                                                                self.unique_id.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "unrecognized-fru"):
                                                                self.unrecognized_fru = value
                                                                self.unrecognized_fru.value_namespace = name_space
                                                                self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "vendor-type"):
                                                                self.vendor_type = value
                                                                self.vendor_type.value_namespace = name_space
                                                                self.vendor_type.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "xr-scoped"):
                                                                self.xr_scoped = value
                                                                self.xr_scoped.value_namespace = name_space
                                                                self.xr_scoped.value_namespace_prefix = name_space_prefix


                                                    class FruInfo(Entity):
                                                        """
                                                        Field Replaceable Unit (FRU) inventory
                                                        information
                                                        
                                                        .. attribute:: card_administrative_state
                                                        
                                                        	card admin state\: shutdown or not
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: card_monitor_state
                                                        
                                                        	card is monitored by a manager or left unmonitored
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: card_operational_state
                                                        
                                                        	card operation state
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: card_reset_reason
                                                        
                                                        	card reset reason enum
                                                        	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                                        
                                                        .. attribute:: card_up_time
                                                        
                                                        	card up time
                                                        	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime>`
                                                        
                                                        .. attribute:: last_operational_state_change
                                                        
                                                        	last card oper change state
                                                        	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                                        
                                                        .. attribute:: power_administrative_state
                                                        
                                                        	power admin state\: up or down
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: power_current_measurement
                                                        
                                                        	power current\: not implemented
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        .. attribute:: power_operational_state
                                                        
                                                        	Power operation state
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        

                                                        """

                                                        _prefix = 'asr9k-sc-invmgr-oper'
                                                        _revision = '2017-01-04'

                                                        def __init__(self):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo, self).__init__()

                                                            self.yang_name = "fru-info"
                                                            self.yang_parent_name = "basic-attributes"

                                                            self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                                            self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                                            self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                                            self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                                            self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                                            self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                                            self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                                            self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime()
                                                            self.card_up_time.parent = self
                                                            self._children_name_map["card_up_time"] = "card-up-time"
                                                            self._children_yang_names.add("card-up-time")

                                                            self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                            self.last_operational_state_change.parent = self
                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                            self._children_yang_names.add("last-operational-state-change")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("card_administrative_state",
                                                                            "card_monitor_state",
                                                                            "card_operational_state",
                                                                            "card_reset_reason",
                                                                            "power_administrative_state",
                                                                            "power_current_measurement",
                                                                            "power_operational_state") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                                        class LastOperationalStateChange(Entity):
                                                            """
                                                            last card oper change state
                                                            
                                                            .. attribute:: time_in_nano_seconds
                                                            
                                                            	Time Value in Nano\-seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: nanosecond
                                                            
                                                            .. attribute:: time_in_seconds
                                                            
                                                            	Time Value in Seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: second
                                                            
                                                            

                                                            """

                                                            _prefix = 'asr9k-sc-invmgr-oper'
                                                            _revision = '2017-01-04'

                                                            def __init__(self):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                                self.yang_name = "last-operational-state-change"
                                                                self.yang_parent_name = "fru-info"

                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("time_in_nano_seconds",
                                                                                "time_in_seconds") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.time_in_nano_seconds.is_set or
                                                                    self.time_in_seconds.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "last-operational-state-change" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "time-in-nano-seconds"):
                                                                    self.time_in_nano_seconds = value
                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "time-in-seconds"):
                                                                    self.time_in_seconds = value
                                                                    self.time_in_seconds.value_namespace = name_space
                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                        class CardUpTime(Entity):
                                                            """
                                                            card up time
                                                            
                                                            .. attribute:: time_in_nano_seconds
                                                            
                                                            	Time Value in Nano\-seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: nanosecond
                                                            
                                                            .. attribute:: time_in_seconds
                                                            
                                                            	Time Value in Seconds
                                                            	**type**\:  int
                                                            
                                                            	**range:** \-2147483648..2147483647
                                                            
                                                            	**units**\: second
                                                            
                                                            

                                                            """

                                                            _prefix = 'asr9k-sc-invmgr-oper'
                                                            _revision = '2017-01-04'

                                                            def __init__(self):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                                                self.yang_name = "card-up-time"
                                                                self.yang_parent_name = "fru-info"

                                                                self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                                self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                            def __setattr__(self, name, value):
                                                                self._check_monkey_patching_error(name, value)
                                                                with _handle_type_error():
                                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                            "Please use list append or extend method."
                                                                                            .format(value))
                                                                    if isinstance(value, Enum.YLeaf):
                                                                        value = value.name
                                                                    if name in ("time_in_nano_seconds",
                                                                                "time_in_seconds") and name in self.__dict__:
                                                                        if isinstance(value, YLeaf):
                                                                            self.__dict__[name].set(value.get())
                                                                        elif isinstance(value, YLeafList):
                                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                                        else:
                                                                            self.__dict__[name].set(value)
                                                                    else:
                                                                        if hasattr(value, "parent") and name != "parent":
                                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                                value.parent = self
                                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                                value.parent = self
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                                            def has_data(self):
                                                                return (
                                                                    self.time_in_nano_seconds.is_set or
                                                                    self.time_in_seconds.is_set)

                                                            def has_operation(self):
                                                                return (
                                                                    self.yfilter != YFilter.not_set or
                                                                    self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                    self.time_in_seconds.yfilter != YFilter.not_set)

                                                            def get_segment_path(self):
                                                                path_buffer = ""
                                                                path_buffer = "card-up-time" + path_buffer

                                                                return path_buffer

                                                            def get_entity_path(self, ancestor):
                                                                path_buffer = ""
                                                                if (ancestor is None):
                                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                                else:
                                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                                leaf_name_data = LeafDataList()
                                                                if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                                if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                    leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                                return entity_path

                                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                                if child is not None:
                                                                    return child

                                                                return None

                                                            def has_leaf_or_child_of_name(self, name):
                                                                if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                    return True
                                                                return False

                                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                                if(value_path == "time-in-nano-seconds"):
                                                                    self.time_in_nano_seconds = value
                                                                    self.time_in_nano_seconds.value_namespace = name_space
                                                                    self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                                if(value_path == "time-in-seconds"):
                                                                    self.time_in_seconds = value
                                                                    self.time_in_seconds.value_namespace = name_space
                                                                    self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                        def has_data(self):
                                                            return (
                                                                self.card_administrative_state.is_set or
                                                                self.card_monitor_state.is_set or
                                                                self.card_operational_state.is_set or
                                                                self.card_reset_reason.is_set or
                                                                self.power_administrative_state.is_set or
                                                                self.power_current_measurement.is_set or
                                                                self.power_operational_state.is_set or
                                                                (self.card_up_time is not None and self.card_up_time.has_data()) or
                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.card_administrative_state.yfilter != YFilter.not_set or
                                                                self.card_monitor_state.yfilter != YFilter.not_set or
                                                                self.card_operational_state.yfilter != YFilter.not_set or
                                                                self.card_reset_reason.yfilter != YFilter.not_set or
                                                                self.power_administrative_state.yfilter != YFilter.not_set or
                                                                self.power_current_measurement.yfilter != YFilter.not_set or
                                                                self.power_operational_state.yfilter != YFilter.not_set or
                                                                (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                                                (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "fru-info" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                                            if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                                            if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                                            if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                                            if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                                            if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                                            if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            if (child_yang_name == "card-up-time"):
                                                                if (self.card_up_time is None):
                                                                    self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime()
                                                                    self.card_up_time.parent = self
                                                                    self._children_name_map["card_up_time"] = "card-up-time"
                                                                return self.card_up_time

                                                            if (child_yang_name == "last-operational-state-change"):
                                                                if (self.last_operational_state_change is None):
                                                                    self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                                    self.last_operational_state_change.parent = self
                                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                                return self.last_operational_state_change

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "card-administrative-state"):
                                                                self.card_administrative_state = value
                                                                self.card_administrative_state.value_namespace = name_space
                                                                self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "card-monitor-state"):
                                                                self.card_monitor_state = value
                                                                self.card_monitor_state.value_namespace = name_space
                                                                self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "card-operational-state"):
                                                                self.card_operational_state = value
                                                                self.card_operational_state.value_namespace = name_space
                                                                self.card_operational_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "card-reset-reason"):
                                                                self.card_reset_reason = value
                                                                self.card_reset_reason.value_namespace = name_space
                                                                self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "power-administrative-state"):
                                                                self.power_administrative_state = value
                                                                self.power_administrative_state.value_namespace = name_space
                                                                self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "power-current-measurement"):
                                                                self.power_current_measurement = value
                                                                self.power_current_measurement.value_namespace = name_space
                                                                self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "power-operational-state"):
                                                                self.power_operational_state = value
                                                                self.power_operational_state.value_namespace = name_space
                                                                self.power_operational_state.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            (self.basic_info is not None and self.basic_info.has_data()) or
                                                            (self.fru_info is not None and self.fru_info.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            (self.basic_info is not None and self.basic_info.has_operation()) or
                                                            (self.fru_info is not None and self.fru_info.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "basic-attributes" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "basic-info"):
                                                            if (self.basic_info is None):
                                                                self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.BasicInfo()
                                                                self.basic_info.parent = self
                                                                self._children_name_map["basic_info"] = "basic-info"
                                                            return self.basic_info

                                                        if (child_yang_name == "fru-info"):
                                                            if (self.fru_info is None):
                                                                self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes.FruInfo()
                                                                self.fru_info.parent = self
                                                                self._children_name_map["fru_info"] = "fru-info"
                                                            return self.fru_info

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "basic-info" or name == "fru-info"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        pass

                                                def has_data(self):
                                                    return (
                                                        self.number.is_set or
                                                        (self.basic_attributes is not None and self.basic_attributes.has_data()) or
                                                        (self.port is not None and self.port.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.number.yfilter != YFilter.not_set or
                                                        (self.basic_attributes is not None and self.basic_attributes.has_operation()) or
                                                        (self.port is not None and self.port.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "port-slot" + "[number='" + self.number.get() + "']" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.number.is_set or self.number.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.number.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "basic-attributes"):
                                                        if (self.basic_attributes is None):
                                                            self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.BasicAttributes()
                                                            self.basic_attributes.parent = self
                                                            self._children_name_map["basic_attributes"] = "basic-attributes"
                                                        return self.basic_attributes

                                                    if (child_yang_name == "port"):
                                                        if (self.port is None):
                                                            self.port = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot.Port()
                                                            self.port.parent = self
                                                            self._children_name_map["port"] = "port"
                                                        return self.port

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "basic-attributes" or name == "port" or name == "number"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "number"):
                                                        self.number = value
                                                        self.number.value_namespace = name_space
                                                        self.number.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                for c in self.port_slot:
                                                    if (c.has_data()):
                                                        return True
                                                return False

                                            def has_operation(self):
                                                for c in self.port_slot:
                                                    if (c.has_operation()):
                                                        return True
                                                return self.yfilter != YFilter.not_set

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "port-slots" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "port-slot"):
                                                    for c in self.port_slot:
                                                        segment = c.get_segment_path()
                                                        if (segment_path == segment):
                                                            return c
                                                    c = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots.PortSlot()
                                                    c.parent = self
                                                    local_reference_key = "ydk::seg::%s" % segment_path
                                                    self._local_refs[local_reference_key] = c
                                                    self.port_slot.append(c)
                                                    return c

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "port-slot"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass


                                        class BasicAttributes(Entity):
                                            """
                                            Attributes
                                            
                                            .. attribute:: basic_info
                                            
                                            	Inventory information
                                            	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.BasicInfo>`
                                            
                                            .. attribute:: fru_info
                                            
                                            	Field Replaceable Unit (FRU) inventory information
                                            	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo>`
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes, self).__init__()

                                                self.yang_name = "basic-attributes"
                                                self.yang_parent_name = "module"

                                                self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.BasicInfo()
                                                self.basic_info.parent = self
                                                self._children_name_map["basic_info"] = "basic-info"
                                                self._children_yang_names.add("basic-info")

                                                self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo()
                                                self.fru_info.parent = self
                                                self._children_name_map["fru_info"] = "fru-info"
                                                self._children_yang_names.add("fru-info")


                                            class BasicInfo(Entity):
                                                """
                                                Inventory information
                                                
                                                .. attribute:: alias
                                                
                                                	useful for storing an entity alias 
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: asset_id_str
                                                
                                                	asset Identification string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: asset_identification
                                                
                                                	asset Identification
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: ceport
                                                
                                                	1 if ce port found, 0 if not
                                                	**type**\:  bool
                                                
                                                .. attribute:: chip_hardware_revision
                                                
                                                	chip module hw revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: composite_class_code
                                                
                                                	Major&minor class of the entity
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: description
                                                
                                                	describes in user\-readable terms       what the entity in question does
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: environmental_monitor_path
                                                
                                                	sysdb name of sensor in the envmon EDM
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: firmware_revision
                                                
                                                	firmware revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: group_flag
                                                
                                                	indicates if this entity is group       or not
                                                	**type**\:  bool
                                                
                                                .. attribute:: hardware_revision
                                                
                                                	hw revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: is_field_replaceable_unit
                                                
                                                	1 if Field Replaceable Unit 0, if not
                                                	**type**\:  bool
                                                
                                                .. attribute:: manufacturer_asset_tags
                                                
                                                	Manufacture Asset Tags
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: manufacturer_name
                                                
                                                	manufacturer's name
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: memory_size
                                                
                                                	Size of memory associated with       the entity where applicable
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: model_name
                                                
                                                	model name
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: name
                                                
                                                	name string for the entity
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: new_deviation_number
                                                
                                                	integer value for New Deviation Number 0x88
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: physical_layer_interface_module_type
                                                
                                                	integer value for plim type if     applicable to this entity
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: redundancystate
                                                
                                                	integer value for Redundancy State if     applicable to this entity
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: serial_number
                                                
                                                	serial number
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: software_revision
                                                
                                                	software revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: unique_id
                                                
                                                	Unique id for an entity
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: unrecognized_fru
                                                
                                                	1 if UnrecognizedFRU and 0 for recognizedFRU
                                                	**type**\:  bool
                                                
                                                .. attribute:: vendor_type
                                                
                                                	maps to the vendor OID string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: xr_scoped
                                                
                                                	1 if xr scoped, 0 if not
                                                	**type**\:  bool
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.BasicInfo, self).__init__()

                                                    self.yang_name = "basic-info"
                                                    self.yang_parent_name = "basic-attributes"

                                                    self.alias = YLeaf(YType.str, "alias")

                                                    self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                                    self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                                    self.ceport = YLeaf(YType.boolean, "ceport")

                                                    self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                                    self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                                    self.description = YLeaf(YType.str, "description")

                                                    self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                                    self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                    self.group_flag = YLeaf(YType.boolean, "group-flag")

                                                    self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                    self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                    self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                                    self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                                    self.memory_size = YLeaf(YType.int32, "memory-size")

                                                    self.model_name = YLeaf(YType.str, "model-name")

                                                    self.name = YLeaf(YType.str, "name")

                                                    self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                                    self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                                    self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                                    self.serial_number = YLeaf(YType.str, "serial-number")

                                                    self.software_revision = YLeaf(YType.str, "software-revision")

                                                    self.unique_id = YLeaf(YType.int32, "unique-id")

                                                    self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                                    self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                    self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("alias",
                                                                    "asset_id_str",
                                                                    "asset_identification",
                                                                    "ceport",
                                                                    "chip_hardware_revision",
                                                                    "composite_class_code",
                                                                    "description",
                                                                    "environmental_monitor_path",
                                                                    "firmware_revision",
                                                                    "group_flag",
                                                                    "hardware_revision",
                                                                    "is_field_replaceable_unit",
                                                                    "manufacturer_asset_tags",
                                                                    "manufacturer_name",
                                                                    "memory_size",
                                                                    "model_name",
                                                                    "name",
                                                                    "new_deviation_number",
                                                                    "physical_layer_interface_module_type",
                                                                    "redundancystate",
                                                                    "serial_number",
                                                                    "software_revision",
                                                                    "unique_id",
                                                                    "unrecognized_fru",
                                                                    "vendor_type",
                                                                    "xr_scoped") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.alias.is_set or
                                                        self.asset_id_str.is_set or
                                                        self.asset_identification.is_set or
                                                        self.ceport.is_set or
                                                        self.chip_hardware_revision.is_set or
                                                        self.composite_class_code.is_set or
                                                        self.description.is_set or
                                                        self.environmental_monitor_path.is_set or
                                                        self.firmware_revision.is_set or
                                                        self.group_flag.is_set or
                                                        self.hardware_revision.is_set or
                                                        self.is_field_replaceable_unit.is_set or
                                                        self.manufacturer_asset_tags.is_set or
                                                        self.manufacturer_name.is_set or
                                                        self.memory_size.is_set or
                                                        self.model_name.is_set or
                                                        self.name.is_set or
                                                        self.new_deviation_number.is_set or
                                                        self.physical_layer_interface_module_type.is_set or
                                                        self.redundancystate.is_set or
                                                        self.serial_number.is_set or
                                                        self.software_revision.is_set or
                                                        self.unique_id.is_set or
                                                        self.unrecognized_fru.is_set or
                                                        self.vendor_type.is_set or
                                                        self.xr_scoped.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.alias.yfilter != YFilter.not_set or
                                                        self.asset_id_str.yfilter != YFilter.not_set or
                                                        self.asset_identification.yfilter != YFilter.not_set or
                                                        self.ceport.yfilter != YFilter.not_set or
                                                        self.chip_hardware_revision.yfilter != YFilter.not_set or
                                                        self.composite_class_code.yfilter != YFilter.not_set or
                                                        self.description.yfilter != YFilter.not_set or
                                                        self.environmental_monitor_path.yfilter != YFilter.not_set or
                                                        self.firmware_revision.yfilter != YFilter.not_set or
                                                        self.group_flag.yfilter != YFilter.not_set or
                                                        self.hardware_revision.yfilter != YFilter.not_set or
                                                        self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                        self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                                        self.manufacturer_name.yfilter != YFilter.not_set or
                                                        self.memory_size.yfilter != YFilter.not_set or
                                                        self.model_name.yfilter != YFilter.not_set or
                                                        self.name.yfilter != YFilter.not_set or
                                                        self.new_deviation_number.yfilter != YFilter.not_set or
                                                        self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                                        self.redundancystate.yfilter != YFilter.not_set or
                                                        self.serial_number.yfilter != YFilter.not_set or
                                                        self.software_revision.yfilter != YFilter.not_set or
                                                        self.unique_id.yfilter != YFilter.not_set or
                                                        self.unrecognized_fru.yfilter != YFilter.not_set or
                                                        self.vendor_type.yfilter != YFilter.not_set or
                                                        self.xr_scoped.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "basic-info" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.alias.get_name_leafdata())
                                                    if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                                    if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                                    if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.ceport.get_name_leafdata())
                                                    if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                                    if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                                    if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.description.get_name_leafdata())
                                                    if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                                    if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                    if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.group_flag.get_name_leafdata())
                                                    if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                    if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                    if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                                    if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                                    if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.memory_size.get_name_leafdata())
                                                    if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.model_name.get_name_leafdata())
                                                    if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.name.get_name_leafdata())
                                                    if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                                    if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                                    if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                                    if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                    if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                    if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unique_id.get_name_leafdata())
                                                    if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                                    if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                                    if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "alias"):
                                                        self.alias = value
                                                        self.alias.value_namespace = name_space
                                                        self.alias.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "asset-id-str"):
                                                        self.asset_id_str = value
                                                        self.asset_id_str.value_namespace = name_space
                                                        self.asset_id_str.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "asset-identification"):
                                                        self.asset_identification = value
                                                        self.asset_identification.value_namespace = name_space
                                                        self.asset_identification.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "ceport"):
                                                        self.ceport = value
                                                        self.ceport.value_namespace = name_space
                                                        self.ceport.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "chip-hardware-revision"):
                                                        self.chip_hardware_revision = value
                                                        self.chip_hardware_revision.value_namespace = name_space
                                                        self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "composite-class-code"):
                                                        self.composite_class_code = value
                                                        self.composite_class_code.value_namespace = name_space
                                                        self.composite_class_code.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "description"):
                                                        self.description = value
                                                        self.description.value_namespace = name_space
                                                        self.description.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "environmental-monitor-path"):
                                                        self.environmental_monitor_path = value
                                                        self.environmental_monitor_path.value_namespace = name_space
                                                        self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "firmware-revision"):
                                                        self.firmware_revision = value
                                                        self.firmware_revision.value_namespace = name_space
                                                        self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "group-flag"):
                                                        self.group_flag = value
                                                        self.group_flag.value_namespace = name_space
                                                        self.group_flag.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "hardware-revision"):
                                                        self.hardware_revision = value
                                                        self.hardware_revision.value_namespace = name_space
                                                        self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "is-field-replaceable-unit"):
                                                        self.is_field_replaceable_unit = value
                                                        self.is_field_replaceable_unit.value_namespace = name_space
                                                        self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "manufacturer-asset-tags"):
                                                        self.manufacturer_asset_tags = value
                                                        self.manufacturer_asset_tags.value_namespace = name_space
                                                        self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "manufacturer-name"):
                                                        self.manufacturer_name = value
                                                        self.manufacturer_name.value_namespace = name_space
                                                        self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "memory-size"):
                                                        self.memory_size = value
                                                        self.memory_size.value_namespace = name_space
                                                        self.memory_size.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "model-name"):
                                                        self.model_name = value
                                                        self.model_name.value_namespace = name_space
                                                        self.model_name.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "name"):
                                                        self.name = value
                                                        self.name.value_namespace = name_space
                                                        self.name.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "new-deviation-number"):
                                                        self.new_deviation_number = value
                                                        self.new_deviation_number.value_namespace = name_space
                                                        self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "physical-layer-interface-module-type"):
                                                        self.physical_layer_interface_module_type = value
                                                        self.physical_layer_interface_module_type.value_namespace = name_space
                                                        self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "redundancystate"):
                                                        self.redundancystate = value
                                                        self.redundancystate.value_namespace = name_space
                                                        self.redundancystate.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "serial-number"):
                                                        self.serial_number = value
                                                        self.serial_number.value_namespace = name_space
                                                        self.serial_number.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "software-revision"):
                                                        self.software_revision = value
                                                        self.software_revision.value_namespace = name_space
                                                        self.software_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "unique-id"):
                                                        self.unique_id = value
                                                        self.unique_id.value_namespace = name_space
                                                        self.unique_id.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "unrecognized-fru"):
                                                        self.unrecognized_fru = value
                                                        self.unrecognized_fru.value_namespace = name_space
                                                        self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "vendor-type"):
                                                        self.vendor_type = value
                                                        self.vendor_type.value_namespace = name_space
                                                        self.vendor_type.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "xr-scoped"):
                                                        self.xr_scoped = value
                                                        self.xr_scoped.value_namespace = name_space
                                                        self.xr_scoped.value_namespace_prefix = name_space_prefix


                                            class FruInfo(Entity):
                                                """
                                                Field Replaceable Unit (FRU) inventory
                                                information
                                                
                                                .. attribute:: card_administrative_state
                                                
                                                	card admin state\: shutdown or not
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: card_monitor_state
                                                
                                                	card is monitored by a manager or left unmonitored
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: card_operational_state
                                                
                                                	card operation state
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: card_reset_reason
                                                
                                                	card reset reason enum
                                                	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                                
                                                .. attribute:: card_up_time
                                                
                                                	card up time
                                                	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.CardUpTime>`
                                                
                                                .. attribute:: last_operational_state_change
                                                
                                                	last card oper change state
                                                	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                                
                                                .. attribute:: power_administrative_state
                                                
                                                	power admin state\: up or down
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: power_current_measurement
                                                
                                                	power current\: not implemented
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: power_operational_state
                                                
                                                	Power operation state
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo, self).__init__()

                                                    self.yang_name = "fru-info"
                                                    self.yang_parent_name = "basic-attributes"

                                                    self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                                    self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                                    self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                                    self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                                    self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                                    self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                                    self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                                    self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.CardUpTime()
                                                    self.card_up_time.parent = self
                                                    self._children_name_map["card_up_time"] = "card-up-time"
                                                    self._children_yang_names.add("card-up-time")

                                                    self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                    self.last_operational_state_change.parent = self
                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    self._children_yang_names.add("last-operational-state-change")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("card_administrative_state",
                                                                    "card_monitor_state",
                                                                    "card_operational_state",
                                                                    "card_reset_reason",
                                                                    "power_administrative_state",
                                                                    "power_current_measurement",
                                                                    "power_operational_state") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                                class LastOperationalStateChange(Entity):
                                                    """
                                                    last card oper change state
                                                    
                                                    .. attribute:: time_in_nano_seconds
                                                    
                                                    	Time Value in Nano\-seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: nanosecond
                                                    
                                                    .. attribute:: time_in_seconds
                                                    
                                                    	Time Value in Seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: second
                                                    
                                                    

                                                    """

                                                    _prefix = 'asr9k-sc-invmgr-oper'
                                                    _revision = '2017-01-04'

                                                    def __init__(self):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                        self.yang_name = "last-operational-state-change"
                                                        self.yang_parent_name = "fru-info"

                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("time_in_nano_seconds",
                                                                        "time_in_seconds") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.time_in_nano_seconds.is_set or
                                                            self.time_in_seconds.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "last-operational-state-change" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "time-in-nano-seconds"):
                                                            self.time_in_nano_seconds = value
                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "time-in-seconds"):
                                                            self.time_in_seconds = value
                                                            self.time_in_seconds.value_namespace = name_space
                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                class CardUpTime(Entity):
                                                    """
                                                    card up time
                                                    
                                                    .. attribute:: time_in_nano_seconds
                                                    
                                                    	Time Value in Nano\-seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: nanosecond
                                                    
                                                    .. attribute:: time_in_seconds
                                                    
                                                    	Time Value in Seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: second
                                                    
                                                    

                                                    """

                                                    _prefix = 'asr9k-sc-invmgr-oper'
                                                    _revision = '2017-01-04'

                                                    def __init__(self):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                                        self.yang_name = "card-up-time"
                                                        self.yang_parent_name = "fru-info"

                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("time_in_nano_seconds",
                                                                        "time_in_seconds") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.time_in_nano_seconds.is_set or
                                                            self.time_in_seconds.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "card-up-time" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "time-in-nano-seconds"):
                                                            self.time_in_nano_seconds = value
                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "time-in-seconds"):
                                                            self.time_in_seconds = value
                                                            self.time_in_seconds.value_namespace = name_space
                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        self.card_administrative_state.is_set or
                                                        self.card_monitor_state.is_set or
                                                        self.card_operational_state.is_set or
                                                        self.card_reset_reason.is_set or
                                                        self.power_administrative_state.is_set or
                                                        self.power_current_measurement.is_set or
                                                        self.power_operational_state.is_set or
                                                        (self.card_up_time is not None and self.card_up_time.has_data()) or
                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.card_administrative_state.yfilter != YFilter.not_set or
                                                        self.card_monitor_state.yfilter != YFilter.not_set or
                                                        self.card_operational_state.yfilter != YFilter.not_set or
                                                        self.card_reset_reason.yfilter != YFilter.not_set or
                                                        self.power_administrative_state.yfilter != YFilter.not_set or
                                                        self.power_current_measurement.yfilter != YFilter.not_set or
                                                        self.power_operational_state.yfilter != YFilter.not_set or
                                                        (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "fru-info" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                                    if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                                    if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                                    if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                                    if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                                    if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                                    if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "card-up-time"):
                                                        if (self.card_up_time is None):
                                                            self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.CardUpTime()
                                                            self.card_up_time.parent = self
                                                            self._children_name_map["card_up_time"] = "card-up-time"
                                                        return self.card_up_time

                                                    if (child_yang_name == "last-operational-state-change"):
                                                        if (self.last_operational_state_change is None):
                                                            self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                            self.last_operational_state_change.parent = self
                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                        return self.last_operational_state_change

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "card-administrative-state"):
                                                        self.card_administrative_state = value
                                                        self.card_administrative_state.value_namespace = name_space
                                                        self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "card-monitor-state"):
                                                        self.card_monitor_state = value
                                                        self.card_monitor_state.value_namespace = name_space
                                                        self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "card-operational-state"):
                                                        self.card_operational_state = value
                                                        self.card_operational_state.value_namespace = name_space
                                                        self.card_operational_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "card-reset-reason"):
                                                        self.card_reset_reason = value
                                                        self.card_reset_reason.value_namespace = name_space
                                                        self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "power-administrative-state"):
                                                        self.power_administrative_state = value
                                                        self.power_administrative_state.value_namespace = name_space
                                                        self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "power-current-measurement"):
                                                        self.power_current_measurement = value
                                                        self.power_current_measurement.value_namespace = name_space
                                                        self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "power-operational-state"):
                                                        self.power_operational_state = value
                                                        self.power_operational_state.value_namespace = name_space
                                                        self.power_operational_state.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    (self.basic_info is not None and self.basic_info.has_data()) or
                                                    (self.fru_info is not None and self.fru_info.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    (self.basic_info is not None and self.basic_info.has_operation()) or
                                                    (self.fru_info is not None and self.fru_info.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "basic-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "basic-info"):
                                                    if (self.basic_info is None):
                                                        self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.BasicInfo()
                                                        self.basic_info.parent = self
                                                        self._children_name_map["basic_info"] = "basic-info"
                                                    return self.basic_info

                                                if (child_yang_name == "fru-info"):
                                                    if (self.fru_info is None):
                                                        self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes.FruInfo()
                                                        self.fru_info.parent = self
                                                        self._children_name_map["fru_info"] = "fru-info"
                                                    return self.fru_info

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "basic-info" or name == "fru-info"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass

                                        def has_data(self):
                                            return (
                                                (self.basic_attributes is not None and self.basic_attributes.has_data()) or
                                                (self.port_slots is not None and self.port_slots.has_data()) or
                                                (self.sensors is not None and self.sensors.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.basic_attributes is not None and self.basic_attributes.has_operation()) or
                                                (self.port_slots is not None and self.port_slots.has_operation()) or
                                                (self.sensors is not None and self.sensors.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "module" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "basic-attributes"):
                                                if (self.basic_attributes is None):
                                                    self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.BasicAttributes()
                                                    self.basic_attributes.parent = self
                                                    self._children_name_map["basic_attributes"] = "basic-attributes"
                                                return self.basic_attributes

                                            if (child_yang_name == "port-slots"):
                                                if (self.port_slots is None):
                                                    self.port_slots = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.PortSlots()
                                                    self.port_slots.parent = self
                                                    self._children_name_map["port_slots"] = "port-slots"
                                                return self.port_slots

                                            if (child_yang_name == "sensors"):
                                                if (self.sensors is None):
                                                    self.sensors = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module.Sensors()
                                                    self.sensors.parent = self
                                                    self._children_name_map["sensors"] = "sensors"
                                                return self.sensors

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "basic-attributes" or name == "port-slots" or name == "sensors"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass


                                    class BasicAttributes(Entity):
                                        """
                                        Attributes
                                        
                                        .. attribute:: basic_info
                                        
                                        	Inventory information
                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.BasicInfo>`
                                        
                                        .. attribute:: fru_info
                                        
                                        	Field Replaceable Unit (FRU) inventory information
                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo>`
                                        
                                        

                                        """

                                        _prefix = 'asr9k-sc-invmgr-oper'
                                        _revision = '2017-01-04'

                                        def __init__(self):
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes, self).__init__()

                                            self.yang_name = "basic-attributes"
                                            self.yang_parent_name = "sub-slot"

                                            self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.BasicInfo()
                                            self.basic_info.parent = self
                                            self._children_name_map["basic_info"] = "basic-info"
                                            self._children_yang_names.add("basic-info")

                                            self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo()
                                            self.fru_info.parent = self
                                            self._children_name_map["fru_info"] = "fru-info"
                                            self._children_yang_names.add("fru-info")


                                        class BasicInfo(Entity):
                                            """
                                            Inventory information
                                            
                                            .. attribute:: alias
                                            
                                            	useful for storing an entity alias 
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: asset_id_str
                                            
                                            	asset Identification string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: asset_identification
                                            
                                            	asset Identification
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: ceport
                                            
                                            	1 if ce port found, 0 if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: chip_hardware_revision
                                            
                                            	chip module hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: composite_class_code
                                            
                                            	Major&minor class of the entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: description
                                            
                                            	describes in user\-readable terms       what the entity in question does
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: environmental_monitor_path
                                            
                                            	sysdb name of sensor in the envmon EDM
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: firmware_revision
                                            
                                            	firmware revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: group_flag
                                            
                                            	indicates if this entity is group       or not
                                            	**type**\:  bool
                                            
                                            .. attribute:: hardware_revision
                                            
                                            	hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: is_field_replaceable_unit
                                            
                                            	1 if Field Replaceable Unit 0, if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: manufacturer_asset_tags
                                            
                                            	Manufacture Asset Tags
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: manufacturer_name
                                            
                                            	manufacturer's name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: memory_size
                                            
                                            	Size of memory associated with       the entity where applicable
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: model_name
                                            
                                            	model name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: name
                                            
                                            	name string for the entity
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: new_deviation_number
                                            
                                            	integer value for New Deviation Number 0x88
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: physical_layer_interface_module_type
                                            
                                            	integer value for plim type if     applicable to this entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: redundancystate
                                            
                                            	integer value for Redundancy State if     applicable to this entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: serial_number
                                            
                                            	serial number
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: software_revision
                                            
                                            	software revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: unique_id
                                            
                                            	Unique id for an entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: unrecognized_fru
                                            
                                            	1 if UnrecognizedFRU and 0 for recognizedFRU
                                            	**type**\:  bool
                                            
                                            .. attribute:: vendor_type
                                            
                                            	maps to the vendor OID string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: xr_scoped
                                            
                                            	1 if xr scoped, 0 if not
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.BasicInfo, self).__init__()

                                                self.yang_name = "basic-info"
                                                self.yang_parent_name = "basic-attributes"

                                                self.alias = YLeaf(YType.str, "alias")

                                                self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                                self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                                self.ceport = YLeaf(YType.boolean, "ceport")

                                                self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                                self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                                self.description = YLeaf(YType.str, "description")

                                                self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                self.group_flag = YLeaf(YType.boolean, "group-flag")

                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                                self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                                self.memory_size = YLeaf(YType.int32, "memory-size")

                                                self.model_name = YLeaf(YType.str, "model-name")

                                                self.name = YLeaf(YType.str, "name")

                                                self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                                self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                                self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                self.unique_id = YLeaf(YType.int32, "unique-id")

                                                self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("alias",
                                                                "asset_id_str",
                                                                "asset_identification",
                                                                "ceport",
                                                                "chip_hardware_revision",
                                                                "composite_class_code",
                                                                "description",
                                                                "environmental_monitor_path",
                                                                "firmware_revision",
                                                                "group_flag",
                                                                "hardware_revision",
                                                                "is_field_replaceable_unit",
                                                                "manufacturer_asset_tags",
                                                                "manufacturer_name",
                                                                "memory_size",
                                                                "model_name",
                                                                "name",
                                                                "new_deviation_number",
                                                                "physical_layer_interface_module_type",
                                                                "redundancystate",
                                                                "serial_number",
                                                                "software_revision",
                                                                "unique_id",
                                                                "unrecognized_fru",
                                                                "vendor_type",
                                                                "xr_scoped") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.alias.is_set or
                                                    self.asset_id_str.is_set or
                                                    self.asset_identification.is_set or
                                                    self.ceport.is_set or
                                                    self.chip_hardware_revision.is_set or
                                                    self.composite_class_code.is_set or
                                                    self.description.is_set or
                                                    self.environmental_monitor_path.is_set or
                                                    self.firmware_revision.is_set or
                                                    self.group_flag.is_set or
                                                    self.hardware_revision.is_set or
                                                    self.is_field_replaceable_unit.is_set or
                                                    self.manufacturer_asset_tags.is_set or
                                                    self.manufacturer_name.is_set or
                                                    self.memory_size.is_set or
                                                    self.model_name.is_set or
                                                    self.name.is_set or
                                                    self.new_deviation_number.is_set or
                                                    self.physical_layer_interface_module_type.is_set or
                                                    self.redundancystate.is_set or
                                                    self.serial_number.is_set or
                                                    self.software_revision.is_set or
                                                    self.unique_id.is_set or
                                                    self.unrecognized_fru.is_set or
                                                    self.vendor_type.is_set or
                                                    self.xr_scoped.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.alias.yfilter != YFilter.not_set or
                                                    self.asset_id_str.yfilter != YFilter.not_set or
                                                    self.asset_identification.yfilter != YFilter.not_set or
                                                    self.ceport.yfilter != YFilter.not_set or
                                                    self.chip_hardware_revision.yfilter != YFilter.not_set or
                                                    self.composite_class_code.yfilter != YFilter.not_set or
                                                    self.description.yfilter != YFilter.not_set or
                                                    self.environmental_monitor_path.yfilter != YFilter.not_set or
                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                    self.group_flag.yfilter != YFilter.not_set or
                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                    self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                                    self.manufacturer_name.yfilter != YFilter.not_set or
                                                    self.memory_size.yfilter != YFilter.not_set or
                                                    self.model_name.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    self.new_deviation_number.yfilter != YFilter.not_set or
                                                    self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                                    self.redundancystate.yfilter != YFilter.not_set or
                                                    self.serial_number.yfilter != YFilter.not_set or
                                                    self.software_revision.yfilter != YFilter.not_set or
                                                    self.unique_id.yfilter != YFilter.not_set or
                                                    self.unrecognized_fru.yfilter != YFilter.not_set or
                                                    self.vendor_type.yfilter != YFilter.not_set or
                                                    self.xr_scoped.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "basic-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.alias.get_name_leafdata())
                                                if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                                if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                                if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ceport.get_name_leafdata())
                                                if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                                if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.group_flag.get_name_leafdata())
                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                                if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                                if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.memory_size.get_name_leafdata())
                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                                if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                                if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unique_id.get_name_leafdata())
                                                if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                                if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "alias"):
                                                    self.alias = value
                                                    self.alias.value_namespace = name_space
                                                    self.alias.value_namespace_prefix = name_space_prefix
                                                if(value_path == "asset-id-str"):
                                                    self.asset_id_str = value
                                                    self.asset_id_str.value_namespace = name_space
                                                    self.asset_id_str.value_namespace_prefix = name_space_prefix
                                                if(value_path == "asset-identification"):
                                                    self.asset_identification = value
                                                    self.asset_identification.value_namespace = name_space
                                                    self.asset_identification.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ceport"):
                                                    self.ceport = value
                                                    self.ceport.value_namespace = name_space
                                                    self.ceport.value_namespace_prefix = name_space_prefix
                                                if(value_path == "chip-hardware-revision"):
                                                    self.chip_hardware_revision = value
                                                    self.chip_hardware_revision.value_namespace = name_space
                                                    self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "composite-class-code"):
                                                    self.composite_class_code = value
                                                    self.composite_class_code.value_namespace = name_space
                                                    self.composite_class_code.value_namespace_prefix = name_space_prefix
                                                if(value_path == "description"):
                                                    self.description = value
                                                    self.description.value_namespace = name_space
                                                    self.description.value_namespace_prefix = name_space_prefix
                                                if(value_path == "environmental-monitor-path"):
                                                    self.environmental_monitor_path = value
                                                    self.environmental_monitor_path.value_namespace = name_space
                                                    self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                                if(value_path == "firmware-revision"):
                                                    self.firmware_revision = value
                                                    self.firmware_revision.value_namespace = name_space
                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "group-flag"):
                                                    self.group_flag = value
                                                    self.group_flag.value_namespace = name_space
                                                    self.group_flag.value_namespace_prefix = name_space_prefix
                                                if(value_path == "hardware-revision"):
                                                    self.hardware_revision = value
                                                    self.hardware_revision.value_namespace = name_space
                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-field-replaceable-unit"):
                                                    self.is_field_replaceable_unit = value
                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "manufacturer-asset-tags"):
                                                    self.manufacturer_asset_tags = value
                                                    self.manufacturer_asset_tags.value_namespace = name_space
                                                    self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                                if(value_path == "manufacturer-name"):
                                                    self.manufacturer_name = value
                                                    self.manufacturer_name.value_namespace = name_space
                                                    self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "memory-size"):
                                                    self.memory_size = value
                                                    self.memory_size.value_namespace = name_space
                                                    self.memory_size.value_namespace_prefix = name_space_prefix
                                                if(value_path == "model-name"):
                                                    self.model_name = value
                                                    self.model_name.value_namespace = name_space
                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "new-deviation-number"):
                                                    self.new_deviation_number = value
                                                    self.new_deviation_number.value_namespace = name_space
                                                    self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "physical-layer-interface-module-type"):
                                                    self.physical_layer_interface_module_type = value
                                                    self.physical_layer_interface_module_type.value_namespace = name_space
                                                    self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "redundancystate"):
                                                    self.redundancystate = value
                                                    self.redundancystate.value_namespace = name_space
                                                    self.redundancystate.value_namespace_prefix = name_space_prefix
                                                if(value_path == "serial-number"):
                                                    self.serial_number = value
                                                    self.serial_number.value_namespace = name_space
                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "software-revision"):
                                                    self.software_revision = value
                                                    self.software_revision.value_namespace = name_space
                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "unique-id"):
                                                    self.unique_id = value
                                                    self.unique_id.value_namespace = name_space
                                                    self.unique_id.value_namespace_prefix = name_space_prefix
                                                if(value_path == "unrecognized-fru"):
                                                    self.unrecognized_fru = value
                                                    self.unrecognized_fru.value_namespace = name_space
                                                    self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                                if(value_path == "vendor-type"):
                                                    self.vendor_type = value
                                                    self.vendor_type.value_namespace = name_space
                                                    self.vendor_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "xr-scoped"):
                                                    self.xr_scoped = value
                                                    self.xr_scoped.value_namespace = name_space
                                                    self.xr_scoped.value_namespace_prefix = name_space_prefix


                                        class FruInfo(Entity):
                                            """
                                            Field Replaceable Unit (FRU) inventory
                                            information
                                            
                                            .. attribute:: card_administrative_state
                                            
                                            	card admin state\: shutdown or not
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_monitor_state
                                            
                                            	card is monitored by a manager or left unmonitored
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_operational_state
                                            
                                            	card operation state
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_reset_reason
                                            
                                            	card reset reason enum
                                            	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                            
                                            .. attribute:: card_up_time
                                            
                                            	card up time
                                            	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.CardUpTime>`
                                            
                                            .. attribute:: last_operational_state_change
                                            
                                            	last card oper change state
                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                            
                                            .. attribute:: power_administrative_state
                                            
                                            	power admin state\: up or down
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: power_current_measurement
                                            
                                            	power current\: not implemented
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: power_operational_state
                                            
                                            	Power operation state
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo, self).__init__()

                                                self.yang_name = "fru-info"
                                                self.yang_parent_name = "basic-attributes"

                                                self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                                self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                                self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                                self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                                self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                                self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                                self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                                self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.CardUpTime()
                                                self.card_up_time.parent = self
                                                self._children_name_map["card_up_time"] = "card-up-time"
                                                self._children_yang_names.add("card-up-time")

                                                self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                self.last_operational_state_change.parent = self
                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                self._children_yang_names.add("last-operational-state-change")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("card_administrative_state",
                                                                "card_monitor_state",
                                                                "card_operational_state",
                                                                "card_reset_reason",
                                                                "power_administrative_state",
                                                                "power_current_measurement",
                                                                "power_operational_state") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                            class LastOperationalStateChange(Entity):
                                                """
                                                last card oper change state
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                    self.yang_name = "last-operational-state-change"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                            class CardUpTime(Entity):
                                                """
                                                card up time
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                                    self.yang_name = "card-up-time"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "card-up-time" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.card_administrative_state.is_set or
                                                    self.card_monitor_state.is_set or
                                                    self.card_operational_state.is_set or
                                                    self.card_reset_reason.is_set or
                                                    self.power_administrative_state.is_set or
                                                    self.power_current_measurement.is_set or
                                                    self.power_operational_state.is_set or
                                                    (self.card_up_time is not None and self.card_up_time.has_data()) or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.card_administrative_state.yfilter != YFilter.not_set or
                                                    self.card_monitor_state.yfilter != YFilter.not_set or
                                                    self.card_operational_state.yfilter != YFilter.not_set or
                                                    self.card_reset_reason.yfilter != YFilter.not_set or
                                                    self.power_administrative_state.yfilter != YFilter.not_set or
                                                    self.power_current_measurement.yfilter != YFilter.not_set or
                                                    self.power_operational_state.yfilter != YFilter.not_set or
                                                    (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "fru-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                                if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                                if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                                if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                                if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                                if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                                if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "card-up-time"):
                                                    if (self.card_up_time is None):
                                                        self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.CardUpTime()
                                                        self.card_up_time.parent = self
                                                        self._children_name_map["card_up_time"] = "card-up-time"
                                                    return self.card_up_time

                                                if (child_yang_name == "last-operational-state-change"):
                                                    if (self.last_operational_state_change is None):
                                                        self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    return self.last_operational_state_change

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "card-administrative-state"):
                                                    self.card_administrative_state = value
                                                    self.card_administrative_state.value_namespace = name_space
                                                    self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-monitor-state"):
                                                    self.card_monitor_state = value
                                                    self.card_monitor_state.value_namespace = name_space
                                                    self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-operational-state"):
                                                    self.card_operational_state = value
                                                    self.card_operational_state.value_namespace = name_space
                                                    self.card_operational_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-reset-reason"):
                                                    self.card_reset_reason = value
                                                    self.card_reset_reason.value_namespace = name_space
                                                    self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-administrative-state"):
                                                    self.power_administrative_state = value
                                                    self.power_administrative_state.value_namespace = name_space
                                                    self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-current-measurement"):
                                                    self.power_current_measurement = value
                                                    self.power_current_measurement.value_namespace = name_space
                                                    self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-operational-state"):
                                                    self.power_operational_state = value
                                                    self.power_operational_state.value_namespace = name_space
                                                    self.power_operational_state.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                (self.fru_info is not None and self.fru_info.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "basic-attributes" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "basic-info"):
                                                if (self.basic_info is None):
                                                    self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                return self.basic_info

                                            if (child_yang_name == "fru-info"):
                                                if (self.fru_info is None):
                                                    self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                return self.fru_info

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "basic-info" or name == "fru-info"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            self.number.is_set or
                                            (self.basic_attributes is not None and self.basic_attributes.has_data()) or
                                            (self.module is not None and self.module.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.number.yfilter != YFilter.not_set or
                                            (self.basic_attributes is not None and self.basic_attributes.has_operation()) or
                                            (self.module is not None and self.module.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "sub-slot" + "[number='" + self.number.get() + "']" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.number.is_set or self.number.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.number.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "basic-attributes"):
                                            if (self.basic_attributes is None):
                                                self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.BasicAttributes()
                                                self.basic_attributes.parent = self
                                                self._children_name_map["basic_attributes"] = "basic-attributes"
                                            return self.basic_attributes

                                        if (child_yang_name == "module"):
                                            if (self.module is None):
                                                self.module = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot.Module()
                                                self.module.parent = self
                                                self._children_name_map["module"] = "module"
                                            return self.module

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "basic-attributes" or name == "module" or name == "number"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "number"):
                                            self.number = value
                                            self.number.value_namespace = name_space
                                            self.number.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.sub_slot:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.sub_slot:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "sub-slots" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "sub-slot"):
                                        for c in self.sub_slot:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots.SubSlot()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.sub_slot.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "sub-slot"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class HwComponents(Entity):
                                """
                                HWComponent table contains all HW modules
                                within the card 
                                
                                .. attribute:: hw_component
                                
                                	HWComponent number
                                	**type**\: list of    :py:class:`HwComponent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent>`
                                
                                

                                """

                                _prefix = 'asr9k-sc-invmgr-oper'
                                _revision = '2017-01-04'

                                def __init__(self):
                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents, self).__init__()

                                    self.yang_name = "hw-components"
                                    self.yang_parent_name = "card"

                                    self.hw_component = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents, self).__setattr__(name, value)


                                class HwComponent(Entity):
                                    """
                                    HWComponent number
                                    
                                    .. attribute:: number  <key>
                                    
                                    	node number
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: basic_attributes
                                    
                                    	Attributes
                                    	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes>`
                                    
                                    .. attribute:: sensors
                                    
                                    	ModuleSensorTable contains all sensors in a Module
                                    	**type**\:   :py:class:`Sensors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors>`
                                    
                                    

                                    """

                                    _prefix = 'asr9k-sc-invmgr-oper'
                                    _revision = '2017-01-04'

                                    def __init__(self):
                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent, self).__init__()

                                        self.yang_name = "hw-component"
                                        self.yang_parent_name = "hw-components"

                                        self.number = YLeaf(YType.int32, "number")

                                        self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes()
                                        self.basic_attributes.parent = self
                                        self._children_name_map["basic_attributes"] = "basic-attributes"
                                        self._children_yang_names.add("basic-attributes")

                                        self.sensors = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors()
                                        self.sensors.parent = self
                                        self._children_name_map["sensors"] = "sensors"
                                        self._children_yang_names.add("sensors")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("number") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent, self).__setattr__(name, value)


                                    class Sensors(Entity):
                                        """
                                        ModuleSensorTable contains all sensors in a
                                        Module.
                                        
                                        .. attribute:: sensor
                                        
                                        	Sensor number in the Module
                                        	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor>`
                                        
                                        

                                        """

                                        _prefix = 'asr9k-sc-invmgr-oper'
                                        _revision = '2017-01-04'

                                        def __init__(self):
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors, self).__init__()

                                            self.yang_name = "sensors"
                                            self.yang_parent_name = "hw-component"

                                            self.sensor = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in () and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors, self).__setattr__(name, value)


                                        class Sensor(Entity):
                                            """
                                            Sensor number in the Module
                                            
                                            .. attribute:: number  <key>
                                            
                                            	sensor number
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: basic_attributes
                                            
                                            	Attributes
                                            	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes>`
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor, self).__init__()

                                                self.yang_name = "sensor"
                                                self.yang_parent_name = "sensors"

                                                self.number = YLeaf(YType.int32, "number")

                                                self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes()
                                                self.basic_attributes.parent = self
                                                self._children_name_map["basic_attributes"] = "basic-attributes"
                                                self._children_yang_names.add("basic-attributes")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("number") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor, self).__setattr__(name, value)


                                            class BasicAttributes(Entity):
                                                """
                                                Attributes
                                                
                                                .. attribute:: basic_info
                                                
                                                	Inventory information
                                                	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.BasicInfo>`
                                                
                                                .. attribute:: fru_info
                                                
                                                	Field Replaceable Unit (FRU) inventory information
                                                	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo>`
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes, self).__init__()

                                                    self.yang_name = "basic-attributes"
                                                    self.yang_parent_name = "sensor"

                                                    self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                    self._children_yang_names.add("basic-info")

                                                    self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                    self._children_yang_names.add("fru-info")


                                                class BasicInfo(Entity):
                                                    """
                                                    Inventory information
                                                    
                                                    .. attribute:: alias
                                                    
                                                    	useful for storing an entity alias 
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: asset_id_str
                                                    
                                                    	asset Identification string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: asset_identification
                                                    
                                                    	asset Identification
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: ceport
                                                    
                                                    	1 if ce port found, 0 if not
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: chip_hardware_revision
                                                    
                                                    	chip module hw revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: composite_class_code
                                                    
                                                    	Major&minor class of the entity
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: description
                                                    
                                                    	describes in user\-readable terms       what the entity in question does
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: environmental_monitor_path
                                                    
                                                    	sysdb name of sensor in the envmon EDM
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: firmware_revision
                                                    
                                                    	firmware revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: group_flag
                                                    
                                                    	indicates if this entity is group       or not
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: hardware_revision
                                                    
                                                    	hw revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: is_field_replaceable_unit
                                                    
                                                    	1 if Field Replaceable Unit 0, if not
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: manufacturer_asset_tags
                                                    
                                                    	Manufacture Asset Tags
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: manufacturer_name
                                                    
                                                    	manufacturer's name
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: memory_size
                                                    
                                                    	Size of memory associated with       the entity where applicable
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: model_name
                                                    
                                                    	model name
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: name
                                                    
                                                    	name string for the entity
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: new_deviation_number
                                                    
                                                    	integer value for New Deviation Number 0x88
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: physical_layer_interface_module_type
                                                    
                                                    	integer value for plim type if     applicable to this entity
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: redundancystate
                                                    
                                                    	integer value for Redundancy State if     applicable to this entity
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: serial_number
                                                    
                                                    	serial number
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: software_revision
                                                    
                                                    	software revision string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: unique_id
                                                    
                                                    	Unique id for an entity
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: unrecognized_fru
                                                    
                                                    	1 if UnrecognizedFRU and 0 for recognizedFRU
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: vendor_type
                                                    
                                                    	maps to the vendor OID string
                                                    	**type**\:  str
                                                    
                                                    	**length:** 0..255
                                                    
                                                    .. attribute:: xr_scoped
                                                    
                                                    	1 if xr scoped, 0 if not
                                                    	**type**\:  bool
                                                    
                                                    

                                                    """

                                                    _prefix = 'asr9k-sc-invmgr-oper'
                                                    _revision = '2017-01-04'

                                                    def __init__(self):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.BasicInfo, self).__init__()

                                                        self.yang_name = "basic-info"
                                                        self.yang_parent_name = "basic-attributes"

                                                        self.alias = YLeaf(YType.str, "alias")

                                                        self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                                        self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                                        self.ceport = YLeaf(YType.boolean, "ceport")

                                                        self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                                        self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                                        self.description = YLeaf(YType.str, "description")

                                                        self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                                        self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                        self.group_flag = YLeaf(YType.boolean, "group-flag")

                                                        self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                        self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                        self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                                        self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                                        self.memory_size = YLeaf(YType.int32, "memory-size")

                                                        self.model_name = YLeaf(YType.str, "model-name")

                                                        self.name = YLeaf(YType.str, "name")

                                                        self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                                        self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                                        self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                                        self.serial_number = YLeaf(YType.str, "serial-number")

                                                        self.software_revision = YLeaf(YType.str, "software-revision")

                                                        self.unique_id = YLeaf(YType.int32, "unique-id")

                                                        self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                                        self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                        self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("alias",
                                                                        "asset_id_str",
                                                                        "asset_identification",
                                                                        "ceport",
                                                                        "chip_hardware_revision",
                                                                        "composite_class_code",
                                                                        "description",
                                                                        "environmental_monitor_path",
                                                                        "firmware_revision",
                                                                        "group_flag",
                                                                        "hardware_revision",
                                                                        "is_field_replaceable_unit",
                                                                        "manufacturer_asset_tags",
                                                                        "manufacturer_name",
                                                                        "memory_size",
                                                                        "model_name",
                                                                        "name",
                                                                        "new_deviation_number",
                                                                        "physical_layer_interface_module_type",
                                                                        "redundancystate",
                                                                        "serial_number",
                                                                        "software_revision",
                                                                        "unique_id",
                                                                        "unrecognized_fru",
                                                                        "vendor_type",
                                                                        "xr_scoped") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.alias.is_set or
                                                            self.asset_id_str.is_set or
                                                            self.asset_identification.is_set or
                                                            self.ceport.is_set or
                                                            self.chip_hardware_revision.is_set or
                                                            self.composite_class_code.is_set or
                                                            self.description.is_set or
                                                            self.environmental_monitor_path.is_set or
                                                            self.firmware_revision.is_set or
                                                            self.group_flag.is_set or
                                                            self.hardware_revision.is_set or
                                                            self.is_field_replaceable_unit.is_set or
                                                            self.manufacturer_asset_tags.is_set or
                                                            self.manufacturer_name.is_set or
                                                            self.memory_size.is_set or
                                                            self.model_name.is_set or
                                                            self.name.is_set or
                                                            self.new_deviation_number.is_set or
                                                            self.physical_layer_interface_module_type.is_set or
                                                            self.redundancystate.is_set or
                                                            self.serial_number.is_set or
                                                            self.software_revision.is_set or
                                                            self.unique_id.is_set or
                                                            self.unrecognized_fru.is_set or
                                                            self.vendor_type.is_set or
                                                            self.xr_scoped.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.alias.yfilter != YFilter.not_set or
                                                            self.asset_id_str.yfilter != YFilter.not_set or
                                                            self.asset_identification.yfilter != YFilter.not_set or
                                                            self.ceport.yfilter != YFilter.not_set or
                                                            self.chip_hardware_revision.yfilter != YFilter.not_set or
                                                            self.composite_class_code.yfilter != YFilter.not_set or
                                                            self.description.yfilter != YFilter.not_set or
                                                            self.environmental_monitor_path.yfilter != YFilter.not_set or
                                                            self.firmware_revision.yfilter != YFilter.not_set or
                                                            self.group_flag.yfilter != YFilter.not_set or
                                                            self.hardware_revision.yfilter != YFilter.not_set or
                                                            self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                            self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                                            self.manufacturer_name.yfilter != YFilter.not_set or
                                                            self.memory_size.yfilter != YFilter.not_set or
                                                            self.model_name.yfilter != YFilter.not_set or
                                                            self.name.yfilter != YFilter.not_set or
                                                            self.new_deviation_number.yfilter != YFilter.not_set or
                                                            self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                                            self.redundancystate.yfilter != YFilter.not_set or
                                                            self.serial_number.yfilter != YFilter.not_set or
                                                            self.software_revision.yfilter != YFilter.not_set or
                                                            self.unique_id.yfilter != YFilter.not_set or
                                                            self.unrecognized_fru.yfilter != YFilter.not_set or
                                                            self.vendor_type.yfilter != YFilter.not_set or
                                                            self.xr_scoped.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "basic-info" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.alias.get_name_leafdata())
                                                        if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                                        if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                                        if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.ceport.get_name_leafdata())
                                                        if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                                        if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                                        if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.description.get_name_leafdata())
                                                        if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                                        if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                        if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.group_flag.get_name_leafdata())
                                                        if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                        if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                        if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                                        if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                                        if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.memory_size.get_name_leafdata())
                                                        if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.model_name.get_name_leafdata())
                                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.name.get_name_leafdata())
                                                        if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                                        if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                                        if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                                        if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                        if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                        if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.unique_id.get_name_leafdata())
                                                        if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                                        if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                                        if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "alias"):
                                                            self.alias = value
                                                            self.alias.value_namespace = name_space
                                                            self.alias.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "asset-id-str"):
                                                            self.asset_id_str = value
                                                            self.asset_id_str.value_namespace = name_space
                                                            self.asset_id_str.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "asset-identification"):
                                                            self.asset_identification = value
                                                            self.asset_identification.value_namespace = name_space
                                                            self.asset_identification.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "ceport"):
                                                            self.ceport = value
                                                            self.ceport.value_namespace = name_space
                                                            self.ceport.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "chip-hardware-revision"):
                                                            self.chip_hardware_revision = value
                                                            self.chip_hardware_revision.value_namespace = name_space
                                                            self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "composite-class-code"):
                                                            self.composite_class_code = value
                                                            self.composite_class_code.value_namespace = name_space
                                                            self.composite_class_code.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "description"):
                                                            self.description = value
                                                            self.description.value_namespace = name_space
                                                            self.description.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "environmental-monitor-path"):
                                                            self.environmental_monitor_path = value
                                                            self.environmental_monitor_path.value_namespace = name_space
                                                            self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "firmware-revision"):
                                                            self.firmware_revision = value
                                                            self.firmware_revision.value_namespace = name_space
                                                            self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "group-flag"):
                                                            self.group_flag = value
                                                            self.group_flag.value_namespace = name_space
                                                            self.group_flag.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "hardware-revision"):
                                                            self.hardware_revision = value
                                                            self.hardware_revision.value_namespace = name_space
                                                            self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "is-field-replaceable-unit"):
                                                            self.is_field_replaceable_unit = value
                                                            self.is_field_replaceable_unit.value_namespace = name_space
                                                            self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "manufacturer-asset-tags"):
                                                            self.manufacturer_asset_tags = value
                                                            self.manufacturer_asset_tags.value_namespace = name_space
                                                            self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "manufacturer-name"):
                                                            self.manufacturer_name = value
                                                            self.manufacturer_name.value_namespace = name_space
                                                            self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "memory-size"):
                                                            self.memory_size = value
                                                            self.memory_size.value_namespace = name_space
                                                            self.memory_size.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "model-name"):
                                                            self.model_name = value
                                                            self.model_name.value_namespace = name_space
                                                            self.model_name.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "name"):
                                                            self.name = value
                                                            self.name.value_namespace = name_space
                                                            self.name.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "new-deviation-number"):
                                                            self.new_deviation_number = value
                                                            self.new_deviation_number.value_namespace = name_space
                                                            self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "physical-layer-interface-module-type"):
                                                            self.physical_layer_interface_module_type = value
                                                            self.physical_layer_interface_module_type.value_namespace = name_space
                                                            self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "redundancystate"):
                                                            self.redundancystate = value
                                                            self.redundancystate.value_namespace = name_space
                                                            self.redundancystate.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "serial-number"):
                                                            self.serial_number = value
                                                            self.serial_number.value_namespace = name_space
                                                            self.serial_number.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "software-revision"):
                                                            self.software_revision = value
                                                            self.software_revision.value_namespace = name_space
                                                            self.software_revision.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "unique-id"):
                                                            self.unique_id = value
                                                            self.unique_id.value_namespace = name_space
                                                            self.unique_id.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "unrecognized-fru"):
                                                            self.unrecognized_fru = value
                                                            self.unrecognized_fru.value_namespace = name_space
                                                            self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "vendor-type"):
                                                            self.vendor_type = value
                                                            self.vendor_type.value_namespace = name_space
                                                            self.vendor_type.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "xr-scoped"):
                                                            self.xr_scoped = value
                                                            self.xr_scoped.value_namespace = name_space
                                                            self.xr_scoped.value_namespace_prefix = name_space_prefix


                                                class FruInfo(Entity):
                                                    """
                                                    Field Replaceable Unit (FRU) inventory
                                                    information
                                                    
                                                    .. attribute:: card_administrative_state
                                                    
                                                    	card admin state\: shutdown or not
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: card_monitor_state
                                                    
                                                    	card is monitored by a manager or left unmonitored
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: card_operational_state
                                                    
                                                    	card operation state
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: card_reset_reason
                                                    
                                                    	card reset reason enum
                                                    	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                                    
                                                    .. attribute:: card_up_time
                                                    
                                                    	card up time
                                                    	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime>`
                                                    
                                                    .. attribute:: last_operational_state_change
                                                    
                                                    	last card oper change state
                                                    	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                                    
                                                    .. attribute:: power_administrative_state
                                                    
                                                    	power admin state\: up or down
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: power_current_measurement
                                                    
                                                    	power current\: not implemented
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    .. attribute:: power_operational_state
                                                    
                                                    	Power operation state
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    

                                                    """

                                                    _prefix = 'asr9k-sc-invmgr-oper'
                                                    _revision = '2017-01-04'

                                                    def __init__(self):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo, self).__init__()

                                                        self.yang_name = "fru-info"
                                                        self.yang_parent_name = "basic-attributes"

                                                        self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                                        self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                                        self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                                        self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                                        self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                                        self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                                        self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                                        self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime()
                                                        self.card_up_time.parent = self
                                                        self._children_name_map["card_up_time"] = "card-up-time"
                                                        self._children_yang_names.add("card-up-time")

                                                        self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                        self._children_yang_names.add("last-operational-state-change")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("card_administrative_state",
                                                                        "card_monitor_state",
                                                                        "card_operational_state",
                                                                        "card_reset_reason",
                                                                        "power_administrative_state",
                                                                        "power_current_measurement",
                                                                        "power_operational_state") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                                    class LastOperationalStateChange(Entity):
                                                        """
                                                        last card oper change state
                                                        
                                                        .. attribute:: time_in_nano_seconds
                                                        
                                                        	Time Value in Nano\-seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: nanosecond
                                                        
                                                        .. attribute:: time_in_seconds
                                                        
                                                        	Time Value in Seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: second
                                                        
                                                        

                                                        """

                                                        _prefix = 'asr9k-sc-invmgr-oper'
                                                        _revision = '2017-01-04'

                                                        def __init__(self):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                            self.yang_name = "last-operational-state-change"
                                                            self.yang_parent_name = "fru-info"

                                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("time_in_nano_seconds",
                                                                            "time_in_seconds") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.time_in_nano_seconds.is_set or
                                                                self.time_in_seconds.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "last-operational-state-change" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "time-in-nano-seconds"):
                                                                self.time_in_nano_seconds = value
                                                                self.time_in_nano_seconds.value_namespace = name_space
                                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "time-in-seconds"):
                                                                self.time_in_seconds = value
                                                                self.time_in_seconds.value_namespace = name_space
                                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                    class CardUpTime(Entity):
                                                        """
                                                        card up time
                                                        
                                                        .. attribute:: time_in_nano_seconds
                                                        
                                                        	Time Value in Nano\-seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: nanosecond
                                                        
                                                        .. attribute:: time_in_seconds
                                                        
                                                        	Time Value in Seconds
                                                        	**type**\:  int
                                                        
                                                        	**range:** \-2147483648..2147483647
                                                        
                                                        	**units**\: second
                                                        
                                                        

                                                        """

                                                        _prefix = 'asr9k-sc-invmgr-oper'
                                                        _revision = '2017-01-04'

                                                        def __init__(self):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                                            self.yang_name = "card-up-time"
                                                            self.yang_parent_name = "fru-info"

                                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("time_in_nano_seconds",
                                                                            "time_in_seconds") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.time_in_nano_seconds.is_set or
                                                                self.time_in_seconds.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "card-up-time" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "time-in-nano-seconds"):
                                                                self.time_in_nano_seconds = value
                                                                self.time_in_nano_seconds.value_namespace = name_space
                                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "time-in-seconds"):
                                                                self.time_in_seconds = value
                                                                self.time_in_seconds.value_namespace = name_space
                                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            self.card_administrative_state.is_set or
                                                            self.card_monitor_state.is_set or
                                                            self.card_operational_state.is_set or
                                                            self.card_reset_reason.is_set or
                                                            self.power_administrative_state.is_set or
                                                            self.power_current_measurement.is_set or
                                                            self.power_operational_state.is_set or
                                                            (self.card_up_time is not None and self.card_up_time.has_data()) or
                                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.card_administrative_state.yfilter != YFilter.not_set or
                                                            self.card_monitor_state.yfilter != YFilter.not_set or
                                                            self.card_operational_state.yfilter != YFilter.not_set or
                                                            self.card_reset_reason.yfilter != YFilter.not_set or
                                                            self.power_administrative_state.yfilter != YFilter.not_set or
                                                            self.power_current_measurement.yfilter != YFilter.not_set or
                                                            self.power_operational_state.yfilter != YFilter.not_set or
                                                            (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "fru-info" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                                        if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                                        if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                                        if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                                        if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                                        if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                                        if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "card-up-time"):
                                                            if (self.card_up_time is None):
                                                                self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime()
                                                                self.card_up_time.parent = self
                                                                self._children_name_map["card_up_time"] = "card-up-time"
                                                            return self.card_up_time

                                                        if (child_yang_name == "last-operational-state-change"):
                                                            if (self.last_operational_state_change is None):
                                                                self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                                self.last_operational_state_change.parent = self
                                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                            return self.last_operational_state_change

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "card-administrative-state"):
                                                            self.card_administrative_state = value
                                                            self.card_administrative_state.value_namespace = name_space
                                                            self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "card-monitor-state"):
                                                            self.card_monitor_state = value
                                                            self.card_monitor_state.value_namespace = name_space
                                                            self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "card-operational-state"):
                                                            self.card_operational_state = value
                                                            self.card_operational_state.value_namespace = name_space
                                                            self.card_operational_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "card-reset-reason"):
                                                            self.card_reset_reason = value
                                                            self.card_reset_reason.value_namespace = name_space
                                                            self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "power-administrative-state"):
                                                            self.power_administrative_state = value
                                                            self.power_administrative_state.value_namespace = name_space
                                                            self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "power-current-measurement"):
                                                            self.power_current_measurement = value
                                                            self.power_current_measurement.value_namespace = name_space
                                                            self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "power-operational-state"):
                                                            self.power_operational_state = value
                                                            self.power_operational_state.value_namespace = name_space
                                                            self.power_operational_state.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        (self.basic_info is not None and self.basic_info.has_data()) or
                                                        (self.fru_info is not None and self.fru_info.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        (self.basic_info is not None and self.basic_info.has_operation()) or
                                                        (self.fru_info is not None and self.fru_info.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "basic-attributes" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "basic-info"):
                                                        if (self.basic_info is None):
                                                            self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.BasicInfo()
                                                            self.basic_info.parent = self
                                                            self._children_name_map["basic_info"] = "basic-info"
                                                        return self.basic_info

                                                    if (child_yang_name == "fru-info"):
                                                        if (self.fru_info is None):
                                                            self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes.FruInfo()
                                                            self.fru_info.parent = self
                                                            self._children_name_map["fru_info"] = "fru-info"
                                                        return self.fru_info

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "basic-info" or name == "fru-info"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    pass

                                            def has_data(self):
                                                return (
                                                    self.number.is_set or
                                                    (self.basic_attributes is not None and self.basic_attributes.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.number.yfilter != YFilter.not_set or
                                                    (self.basic_attributes is not None and self.basic_attributes.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "sensor" + "[number='" + self.number.get() + "']" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.number.is_set or self.number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.number.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "basic-attributes"):
                                                    if (self.basic_attributes is None):
                                                        self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor.BasicAttributes()
                                                        self.basic_attributes.parent = self
                                                        self._children_name_map["basic_attributes"] = "basic-attributes"
                                                    return self.basic_attributes

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "basic-attributes" or name == "number"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "number"):
                                                    self.number = value
                                                    self.number.value_namespace = name_space
                                                    self.number.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.sensor:
                                                if (c.has_data()):
                                                    return True
                                            return False

                                        def has_operation(self):
                                            for c in self.sensor:
                                                if (c.has_operation()):
                                                    return True
                                            return self.yfilter != YFilter.not_set

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "sensors" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "sensor"):
                                                for c in self.sensor:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors.Sensor()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.sensor.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "sensor"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass


                                    class BasicAttributes(Entity):
                                        """
                                        Attributes
                                        
                                        .. attribute:: basic_info
                                        
                                        	Inventory information
                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.BasicInfo>`
                                        
                                        .. attribute:: fru_info
                                        
                                        	Field Replaceable Unit (FRU) inventory information
                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo>`
                                        
                                        

                                        """

                                        _prefix = 'asr9k-sc-invmgr-oper'
                                        _revision = '2017-01-04'

                                        def __init__(self):
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes, self).__init__()

                                            self.yang_name = "basic-attributes"
                                            self.yang_parent_name = "hw-component"

                                            self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.BasicInfo()
                                            self.basic_info.parent = self
                                            self._children_name_map["basic_info"] = "basic-info"
                                            self._children_yang_names.add("basic-info")

                                            self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo()
                                            self.fru_info.parent = self
                                            self._children_name_map["fru_info"] = "fru-info"
                                            self._children_yang_names.add("fru-info")


                                        class BasicInfo(Entity):
                                            """
                                            Inventory information
                                            
                                            .. attribute:: alias
                                            
                                            	useful for storing an entity alias 
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: asset_id_str
                                            
                                            	asset Identification string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: asset_identification
                                            
                                            	asset Identification
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: ceport
                                            
                                            	1 if ce port found, 0 if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: chip_hardware_revision
                                            
                                            	chip module hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: composite_class_code
                                            
                                            	Major&minor class of the entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: description
                                            
                                            	describes in user\-readable terms       what the entity in question does
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: environmental_monitor_path
                                            
                                            	sysdb name of sensor in the envmon EDM
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: firmware_revision
                                            
                                            	firmware revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: group_flag
                                            
                                            	indicates if this entity is group       or not
                                            	**type**\:  bool
                                            
                                            .. attribute:: hardware_revision
                                            
                                            	hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: is_field_replaceable_unit
                                            
                                            	1 if Field Replaceable Unit 0, if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: manufacturer_asset_tags
                                            
                                            	Manufacture Asset Tags
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: manufacturer_name
                                            
                                            	manufacturer's name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: memory_size
                                            
                                            	Size of memory associated with       the entity where applicable
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: model_name
                                            
                                            	model name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: name
                                            
                                            	name string for the entity
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: new_deviation_number
                                            
                                            	integer value for New Deviation Number 0x88
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: physical_layer_interface_module_type
                                            
                                            	integer value for plim type if     applicable to this entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: redundancystate
                                            
                                            	integer value for Redundancy State if     applicable to this entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: serial_number
                                            
                                            	serial number
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: software_revision
                                            
                                            	software revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: unique_id
                                            
                                            	Unique id for an entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: unrecognized_fru
                                            
                                            	1 if UnrecognizedFRU and 0 for recognizedFRU
                                            	**type**\:  bool
                                            
                                            .. attribute:: vendor_type
                                            
                                            	maps to the vendor OID string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: xr_scoped
                                            
                                            	1 if xr scoped, 0 if not
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.BasicInfo, self).__init__()

                                                self.yang_name = "basic-info"
                                                self.yang_parent_name = "basic-attributes"

                                                self.alias = YLeaf(YType.str, "alias")

                                                self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                                self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                                self.ceport = YLeaf(YType.boolean, "ceport")

                                                self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                                self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                                self.description = YLeaf(YType.str, "description")

                                                self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                self.group_flag = YLeaf(YType.boolean, "group-flag")

                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                                self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                                self.memory_size = YLeaf(YType.int32, "memory-size")

                                                self.model_name = YLeaf(YType.str, "model-name")

                                                self.name = YLeaf(YType.str, "name")

                                                self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                                self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                                self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                self.unique_id = YLeaf(YType.int32, "unique-id")

                                                self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("alias",
                                                                "asset_id_str",
                                                                "asset_identification",
                                                                "ceport",
                                                                "chip_hardware_revision",
                                                                "composite_class_code",
                                                                "description",
                                                                "environmental_monitor_path",
                                                                "firmware_revision",
                                                                "group_flag",
                                                                "hardware_revision",
                                                                "is_field_replaceable_unit",
                                                                "manufacturer_asset_tags",
                                                                "manufacturer_name",
                                                                "memory_size",
                                                                "model_name",
                                                                "name",
                                                                "new_deviation_number",
                                                                "physical_layer_interface_module_type",
                                                                "redundancystate",
                                                                "serial_number",
                                                                "software_revision",
                                                                "unique_id",
                                                                "unrecognized_fru",
                                                                "vendor_type",
                                                                "xr_scoped") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.alias.is_set or
                                                    self.asset_id_str.is_set or
                                                    self.asset_identification.is_set or
                                                    self.ceport.is_set or
                                                    self.chip_hardware_revision.is_set or
                                                    self.composite_class_code.is_set or
                                                    self.description.is_set or
                                                    self.environmental_monitor_path.is_set or
                                                    self.firmware_revision.is_set or
                                                    self.group_flag.is_set or
                                                    self.hardware_revision.is_set or
                                                    self.is_field_replaceable_unit.is_set or
                                                    self.manufacturer_asset_tags.is_set or
                                                    self.manufacturer_name.is_set or
                                                    self.memory_size.is_set or
                                                    self.model_name.is_set or
                                                    self.name.is_set or
                                                    self.new_deviation_number.is_set or
                                                    self.physical_layer_interface_module_type.is_set or
                                                    self.redundancystate.is_set or
                                                    self.serial_number.is_set or
                                                    self.software_revision.is_set or
                                                    self.unique_id.is_set or
                                                    self.unrecognized_fru.is_set or
                                                    self.vendor_type.is_set or
                                                    self.xr_scoped.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.alias.yfilter != YFilter.not_set or
                                                    self.asset_id_str.yfilter != YFilter.not_set or
                                                    self.asset_identification.yfilter != YFilter.not_set or
                                                    self.ceport.yfilter != YFilter.not_set or
                                                    self.chip_hardware_revision.yfilter != YFilter.not_set or
                                                    self.composite_class_code.yfilter != YFilter.not_set or
                                                    self.description.yfilter != YFilter.not_set or
                                                    self.environmental_monitor_path.yfilter != YFilter.not_set or
                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                    self.group_flag.yfilter != YFilter.not_set or
                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                    self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                                    self.manufacturer_name.yfilter != YFilter.not_set or
                                                    self.memory_size.yfilter != YFilter.not_set or
                                                    self.model_name.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    self.new_deviation_number.yfilter != YFilter.not_set or
                                                    self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                                    self.redundancystate.yfilter != YFilter.not_set or
                                                    self.serial_number.yfilter != YFilter.not_set or
                                                    self.software_revision.yfilter != YFilter.not_set or
                                                    self.unique_id.yfilter != YFilter.not_set or
                                                    self.unrecognized_fru.yfilter != YFilter.not_set or
                                                    self.vendor_type.yfilter != YFilter.not_set or
                                                    self.xr_scoped.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "basic-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.alias.get_name_leafdata())
                                                if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                                if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                                if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ceport.get_name_leafdata())
                                                if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                                if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.group_flag.get_name_leafdata())
                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                                if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                                if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.memory_size.get_name_leafdata())
                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                                if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                                if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unique_id.get_name_leafdata())
                                                if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                                if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "alias"):
                                                    self.alias = value
                                                    self.alias.value_namespace = name_space
                                                    self.alias.value_namespace_prefix = name_space_prefix
                                                if(value_path == "asset-id-str"):
                                                    self.asset_id_str = value
                                                    self.asset_id_str.value_namespace = name_space
                                                    self.asset_id_str.value_namespace_prefix = name_space_prefix
                                                if(value_path == "asset-identification"):
                                                    self.asset_identification = value
                                                    self.asset_identification.value_namespace = name_space
                                                    self.asset_identification.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ceport"):
                                                    self.ceport = value
                                                    self.ceport.value_namespace = name_space
                                                    self.ceport.value_namespace_prefix = name_space_prefix
                                                if(value_path == "chip-hardware-revision"):
                                                    self.chip_hardware_revision = value
                                                    self.chip_hardware_revision.value_namespace = name_space
                                                    self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "composite-class-code"):
                                                    self.composite_class_code = value
                                                    self.composite_class_code.value_namespace = name_space
                                                    self.composite_class_code.value_namespace_prefix = name_space_prefix
                                                if(value_path == "description"):
                                                    self.description = value
                                                    self.description.value_namespace = name_space
                                                    self.description.value_namespace_prefix = name_space_prefix
                                                if(value_path == "environmental-monitor-path"):
                                                    self.environmental_monitor_path = value
                                                    self.environmental_monitor_path.value_namespace = name_space
                                                    self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                                if(value_path == "firmware-revision"):
                                                    self.firmware_revision = value
                                                    self.firmware_revision.value_namespace = name_space
                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "group-flag"):
                                                    self.group_flag = value
                                                    self.group_flag.value_namespace = name_space
                                                    self.group_flag.value_namespace_prefix = name_space_prefix
                                                if(value_path == "hardware-revision"):
                                                    self.hardware_revision = value
                                                    self.hardware_revision.value_namespace = name_space
                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-field-replaceable-unit"):
                                                    self.is_field_replaceable_unit = value
                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "manufacturer-asset-tags"):
                                                    self.manufacturer_asset_tags = value
                                                    self.manufacturer_asset_tags.value_namespace = name_space
                                                    self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                                if(value_path == "manufacturer-name"):
                                                    self.manufacturer_name = value
                                                    self.manufacturer_name.value_namespace = name_space
                                                    self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "memory-size"):
                                                    self.memory_size = value
                                                    self.memory_size.value_namespace = name_space
                                                    self.memory_size.value_namespace_prefix = name_space_prefix
                                                if(value_path == "model-name"):
                                                    self.model_name = value
                                                    self.model_name.value_namespace = name_space
                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "new-deviation-number"):
                                                    self.new_deviation_number = value
                                                    self.new_deviation_number.value_namespace = name_space
                                                    self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "physical-layer-interface-module-type"):
                                                    self.physical_layer_interface_module_type = value
                                                    self.physical_layer_interface_module_type.value_namespace = name_space
                                                    self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "redundancystate"):
                                                    self.redundancystate = value
                                                    self.redundancystate.value_namespace = name_space
                                                    self.redundancystate.value_namespace_prefix = name_space_prefix
                                                if(value_path == "serial-number"):
                                                    self.serial_number = value
                                                    self.serial_number.value_namespace = name_space
                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "software-revision"):
                                                    self.software_revision = value
                                                    self.software_revision.value_namespace = name_space
                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "unique-id"):
                                                    self.unique_id = value
                                                    self.unique_id.value_namespace = name_space
                                                    self.unique_id.value_namespace_prefix = name_space_prefix
                                                if(value_path == "unrecognized-fru"):
                                                    self.unrecognized_fru = value
                                                    self.unrecognized_fru.value_namespace = name_space
                                                    self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                                if(value_path == "vendor-type"):
                                                    self.vendor_type = value
                                                    self.vendor_type.value_namespace = name_space
                                                    self.vendor_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "xr-scoped"):
                                                    self.xr_scoped = value
                                                    self.xr_scoped.value_namespace = name_space
                                                    self.xr_scoped.value_namespace_prefix = name_space_prefix


                                        class FruInfo(Entity):
                                            """
                                            Field Replaceable Unit (FRU) inventory
                                            information
                                            
                                            .. attribute:: card_administrative_state
                                            
                                            	card admin state\: shutdown or not
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_monitor_state
                                            
                                            	card is monitored by a manager or left unmonitored
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_operational_state
                                            
                                            	card operation state
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_reset_reason
                                            
                                            	card reset reason enum
                                            	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                            
                                            .. attribute:: card_up_time
                                            
                                            	card up time
                                            	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.CardUpTime>`
                                            
                                            .. attribute:: last_operational_state_change
                                            
                                            	last card oper change state
                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                            
                                            .. attribute:: power_administrative_state
                                            
                                            	power admin state\: up or down
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: power_current_measurement
                                            
                                            	power current\: not implemented
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: power_operational_state
                                            
                                            	Power operation state
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo, self).__init__()

                                                self.yang_name = "fru-info"
                                                self.yang_parent_name = "basic-attributes"

                                                self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                                self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                                self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                                self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                                self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                                self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                                self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                                self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.CardUpTime()
                                                self.card_up_time.parent = self
                                                self._children_name_map["card_up_time"] = "card-up-time"
                                                self._children_yang_names.add("card-up-time")

                                                self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                self.last_operational_state_change.parent = self
                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                self._children_yang_names.add("last-operational-state-change")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("card_administrative_state",
                                                                "card_monitor_state",
                                                                "card_operational_state",
                                                                "card_reset_reason",
                                                                "power_administrative_state",
                                                                "power_current_measurement",
                                                                "power_operational_state") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                            class LastOperationalStateChange(Entity):
                                                """
                                                last card oper change state
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                    self.yang_name = "last-operational-state-change"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                            class CardUpTime(Entity):
                                                """
                                                card up time
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                                    self.yang_name = "card-up-time"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "card-up-time" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.card_administrative_state.is_set or
                                                    self.card_monitor_state.is_set or
                                                    self.card_operational_state.is_set or
                                                    self.card_reset_reason.is_set or
                                                    self.power_administrative_state.is_set or
                                                    self.power_current_measurement.is_set or
                                                    self.power_operational_state.is_set or
                                                    (self.card_up_time is not None and self.card_up_time.has_data()) or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.card_administrative_state.yfilter != YFilter.not_set or
                                                    self.card_monitor_state.yfilter != YFilter.not_set or
                                                    self.card_operational_state.yfilter != YFilter.not_set or
                                                    self.card_reset_reason.yfilter != YFilter.not_set or
                                                    self.power_administrative_state.yfilter != YFilter.not_set or
                                                    self.power_current_measurement.yfilter != YFilter.not_set or
                                                    self.power_operational_state.yfilter != YFilter.not_set or
                                                    (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "fru-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                                if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                                if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                                if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                                if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                                if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                                if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "card-up-time"):
                                                    if (self.card_up_time is None):
                                                        self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.CardUpTime()
                                                        self.card_up_time.parent = self
                                                        self._children_name_map["card_up_time"] = "card-up-time"
                                                    return self.card_up_time

                                                if (child_yang_name == "last-operational-state-change"):
                                                    if (self.last_operational_state_change is None):
                                                        self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    return self.last_operational_state_change

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "card-administrative-state"):
                                                    self.card_administrative_state = value
                                                    self.card_administrative_state.value_namespace = name_space
                                                    self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-monitor-state"):
                                                    self.card_monitor_state = value
                                                    self.card_monitor_state.value_namespace = name_space
                                                    self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-operational-state"):
                                                    self.card_operational_state = value
                                                    self.card_operational_state.value_namespace = name_space
                                                    self.card_operational_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-reset-reason"):
                                                    self.card_reset_reason = value
                                                    self.card_reset_reason.value_namespace = name_space
                                                    self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-administrative-state"):
                                                    self.power_administrative_state = value
                                                    self.power_administrative_state.value_namespace = name_space
                                                    self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-current-measurement"):
                                                    self.power_current_measurement = value
                                                    self.power_current_measurement.value_namespace = name_space
                                                    self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-operational-state"):
                                                    self.power_operational_state = value
                                                    self.power_operational_state.value_namespace = name_space
                                                    self.power_operational_state.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                (self.fru_info is not None and self.fru_info.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "basic-attributes" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "basic-info"):
                                                if (self.basic_info is None):
                                                    self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                return self.basic_info

                                            if (child_yang_name == "fru-info"):
                                                if (self.fru_info is None):
                                                    self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                return self.fru_info

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "basic-info" or name == "fru-info"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            self.number.is_set or
                                            (self.basic_attributes is not None and self.basic_attributes.has_data()) or
                                            (self.sensors is not None and self.sensors.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.number.yfilter != YFilter.not_set or
                                            (self.basic_attributes is not None and self.basic_attributes.has_operation()) or
                                            (self.sensors is not None and self.sensors.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "hw-component" + "[number='" + self.number.get() + "']" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.number.is_set or self.number.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.number.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "basic-attributes"):
                                            if (self.basic_attributes is None):
                                                self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.BasicAttributes()
                                                self.basic_attributes.parent = self
                                                self._children_name_map["basic_attributes"] = "basic-attributes"
                                            return self.basic_attributes

                                        if (child_yang_name == "sensors"):
                                            if (self.sensors is None):
                                                self.sensors = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent.Sensors()
                                                self.sensors.parent = self
                                                self._children_name_map["sensors"] = "sensors"
                                            return self.sensors

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "basic-attributes" or name == "sensors" or name == "number"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "number"):
                                            self.number = value
                                            self.number.value_namespace = name_space
                                            self.number.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.hw_component:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.hw_component:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "hw-components" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "hw-component"):
                                        for c in self.hw_component:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents.HwComponent()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.hw_component.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "hw-component"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class Sensors(Entity):
                                """
                                ModuleSensorTable contains all sensors in a
                                Module.
                                
                                .. attribute:: sensor
                                
                                	Sensor number in the Module
                                	**type**\: list of    :py:class:`Sensor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor>`
                                
                                

                                """

                                _prefix = 'asr9k-sc-invmgr-oper'
                                _revision = '2017-01-04'

                                def __init__(self):
                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors, self).__init__()

                                    self.yang_name = "sensors"
                                    self.yang_parent_name = "card"

                                    self.sensor = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors, self).__setattr__(name, value)


                                class Sensor(Entity):
                                    """
                                    Sensor number in the Module
                                    
                                    .. attribute:: number  <key>
                                    
                                    	sensor number
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: basic_attributes
                                    
                                    	Attributes
                                    	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes>`
                                    
                                    

                                    """

                                    _prefix = 'asr9k-sc-invmgr-oper'
                                    _revision = '2017-01-04'

                                    def __init__(self):
                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor, self).__init__()

                                        self.yang_name = "sensor"
                                        self.yang_parent_name = "sensors"

                                        self.number = YLeaf(YType.int32, "number")

                                        self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes()
                                        self.basic_attributes.parent = self
                                        self._children_name_map["basic_attributes"] = "basic-attributes"
                                        self._children_yang_names.add("basic-attributes")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("number") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor, self).__setattr__(name, value)


                                    class BasicAttributes(Entity):
                                        """
                                        Attributes
                                        
                                        .. attribute:: basic_info
                                        
                                        	Inventory information
                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.BasicInfo>`
                                        
                                        .. attribute:: fru_info
                                        
                                        	Field Replaceable Unit (FRU) inventory information
                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo>`
                                        
                                        

                                        """

                                        _prefix = 'asr9k-sc-invmgr-oper'
                                        _revision = '2017-01-04'

                                        def __init__(self):
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes, self).__init__()

                                            self.yang_name = "basic-attributes"
                                            self.yang_parent_name = "sensor"

                                            self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.BasicInfo()
                                            self.basic_info.parent = self
                                            self._children_name_map["basic_info"] = "basic-info"
                                            self._children_yang_names.add("basic-info")

                                            self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo()
                                            self.fru_info.parent = self
                                            self._children_name_map["fru_info"] = "fru-info"
                                            self._children_yang_names.add("fru-info")


                                        class BasicInfo(Entity):
                                            """
                                            Inventory information
                                            
                                            .. attribute:: alias
                                            
                                            	useful for storing an entity alias 
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: asset_id_str
                                            
                                            	asset Identification string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: asset_identification
                                            
                                            	asset Identification
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: ceport
                                            
                                            	1 if ce port found, 0 if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: chip_hardware_revision
                                            
                                            	chip module hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: composite_class_code
                                            
                                            	Major&minor class of the entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: description
                                            
                                            	describes in user\-readable terms       what the entity in question does
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: environmental_monitor_path
                                            
                                            	sysdb name of sensor in the envmon EDM
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: firmware_revision
                                            
                                            	firmware revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: group_flag
                                            
                                            	indicates if this entity is group       or not
                                            	**type**\:  bool
                                            
                                            .. attribute:: hardware_revision
                                            
                                            	hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: is_field_replaceable_unit
                                            
                                            	1 if Field Replaceable Unit 0, if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: manufacturer_asset_tags
                                            
                                            	Manufacture Asset Tags
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: manufacturer_name
                                            
                                            	manufacturer's name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: memory_size
                                            
                                            	Size of memory associated with       the entity where applicable
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: model_name
                                            
                                            	model name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: name
                                            
                                            	name string for the entity
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: new_deviation_number
                                            
                                            	integer value for New Deviation Number 0x88
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: physical_layer_interface_module_type
                                            
                                            	integer value for plim type if     applicable to this entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: redundancystate
                                            
                                            	integer value for Redundancy State if     applicable to this entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: serial_number
                                            
                                            	serial number
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: software_revision
                                            
                                            	software revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: unique_id
                                            
                                            	Unique id for an entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: unrecognized_fru
                                            
                                            	1 if UnrecognizedFRU and 0 for recognizedFRU
                                            	**type**\:  bool
                                            
                                            .. attribute:: vendor_type
                                            
                                            	maps to the vendor OID string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: xr_scoped
                                            
                                            	1 if xr scoped, 0 if not
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.BasicInfo, self).__init__()

                                                self.yang_name = "basic-info"
                                                self.yang_parent_name = "basic-attributes"

                                                self.alias = YLeaf(YType.str, "alias")

                                                self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                                self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                                self.ceport = YLeaf(YType.boolean, "ceport")

                                                self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                                self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                                self.description = YLeaf(YType.str, "description")

                                                self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                self.group_flag = YLeaf(YType.boolean, "group-flag")

                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                                self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                                self.memory_size = YLeaf(YType.int32, "memory-size")

                                                self.model_name = YLeaf(YType.str, "model-name")

                                                self.name = YLeaf(YType.str, "name")

                                                self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                                self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                                self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                self.unique_id = YLeaf(YType.int32, "unique-id")

                                                self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("alias",
                                                                "asset_id_str",
                                                                "asset_identification",
                                                                "ceport",
                                                                "chip_hardware_revision",
                                                                "composite_class_code",
                                                                "description",
                                                                "environmental_monitor_path",
                                                                "firmware_revision",
                                                                "group_flag",
                                                                "hardware_revision",
                                                                "is_field_replaceable_unit",
                                                                "manufacturer_asset_tags",
                                                                "manufacturer_name",
                                                                "memory_size",
                                                                "model_name",
                                                                "name",
                                                                "new_deviation_number",
                                                                "physical_layer_interface_module_type",
                                                                "redundancystate",
                                                                "serial_number",
                                                                "software_revision",
                                                                "unique_id",
                                                                "unrecognized_fru",
                                                                "vendor_type",
                                                                "xr_scoped") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.alias.is_set or
                                                    self.asset_id_str.is_set or
                                                    self.asset_identification.is_set or
                                                    self.ceport.is_set or
                                                    self.chip_hardware_revision.is_set or
                                                    self.composite_class_code.is_set or
                                                    self.description.is_set or
                                                    self.environmental_monitor_path.is_set or
                                                    self.firmware_revision.is_set or
                                                    self.group_flag.is_set or
                                                    self.hardware_revision.is_set or
                                                    self.is_field_replaceable_unit.is_set or
                                                    self.manufacturer_asset_tags.is_set or
                                                    self.manufacturer_name.is_set or
                                                    self.memory_size.is_set or
                                                    self.model_name.is_set or
                                                    self.name.is_set or
                                                    self.new_deviation_number.is_set or
                                                    self.physical_layer_interface_module_type.is_set or
                                                    self.redundancystate.is_set or
                                                    self.serial_number.is_set or
                                                    self.software_revision.is_set or
                                                    self.unique_id.is_set or
                                                    self.unrecognized_fru.is_set or
                                                    self.vendor_type.is_set or
                                                    self.xr_scoped.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.alias.yfilter != YFilter.not_set or
                                                    self.asset_id_str.yfilter != YFilter.not_set or
                                                    self.asset_identification.yfilter != YFilter.not_set or
                                                    self.ceport.yfilter != YFilter.not_set or
                                                    self.chip_hardware_revision.yfilter != YFilter.not_set or
                                                    self.composite_class_code.yfilter != YFilter.not_set or
                                                    self.description.yfilter != YFilter.not_set or
                                                    self.environmental_monitor_path.yfilter != YFilter.not_set or
                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                    self.group_flag.yfilter != YFilter.not_set or
                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                    self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                                    self.manufacturer_name.yfilter != YFilter.not_set or
                                                    self.memory_size.yfilter != YFilter.not_set or
                                                    self.model_name.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    self.new_deviation_number.yfilter != YFilter.not_set or
                                                    self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                                    self.redundancystate.yfilter != YFilter.not_set or
                                                    self.serial_number.yfilter != YFilter.not_set or
                                                    self.software_revision.yfilter != YFilter.not_set or
                                                    self.unique_id.yfilter != YFilter.not_set or
                                                    self.unrecognized_fru.yfilter != YFilter.not_set or
                                                    self.vendor_type.yfilter != YFilter.not_set or
                                                    self.xr_scoped.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "basic-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.alias.get_name_leafdata())
                                                if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                                if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                                if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ceport.get_name_leafdata())
                                                if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                                if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.group_flag.get_name_leafdata())
                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                                if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                                if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.memory_size.get_name_leafdata())
                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                                if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                                if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unique_id.get_name_leafdata())
                                                if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                                if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "alias"):
                                                    self.alias = value
                                                    self.alias.value_namespace = name_space
                                                    self.alias.value_namespace_prefix = name_space_prefix
                                                if(value_path == "asset-id-str"):
                                                    self.asset_id_str = value
                                                    self.asset_id_str.value_namespace = name_space
                                                    self.asset_id_str.value_namespace_prefix = name_space_prefix
                                                if(value_path == "asset-identification"):
                                                    self.asset_identification = value
                                                    self.asset_identification.value_namespace = name_space
                                                    self.asset_identification.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ceport"):
                                                    self.ceport = value
                                                    self.ceport.value_namespace = name_space
                                                    self.ceport.value_namespace_prefix = name_space_prefix
                                                if(value_path == "chip-hardware-revision"):
                                                    self.chip_hardware_revision = value
                                                    self.chip_hardware_revision.value_namespace = name_space
                                                    self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "composite-class-code"):
                                                    self.composite_class_code = value
                                                    self.composite_class_code.value_namespace = name_space
                                                    self.composite_class_code.value_namespace_prefix = name_space_prefix
                                                if(value_path == "description"):
                                                    self.description = value
                                                    self.description.value_namespace = name_space
                                                    self.description.value_namespace_prefix = name_space_prefix
                                                if(value_path == "environmental-monitor-path"):
                                                    self.environmental_monitor_path = value
                                                    self.environmental_monitor_path.value_namespace = name_space
                                                    self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                                if(value_path == "firmware-revision"):
                                                    self.firmware_revision = value
                                                    self.firmware_revision.value_namespace = name_space
                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "group-flag"):
                                                    self.group_flag = value
                                                    self.group_flag.value_namespace = name_space
                                                    self.group_flag.value_namespace_prefix = name_space_prefix
                                                if(value_path == "hardware-revision"):
                                                    self.hardware_revision = value
                                                    self.hardware_revision.value_namespace = name_space
                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-field-replaceable-unit"):
                                                    self.is_field_replaceable_unit = value
                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "manufacturer-asset-tags"):
                                                    self.manufacturer_asset_tags = value
                                                    self.manufacturer_asset_tags.value_namespace = name_space
                                                    self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                                if(value_path == "manufacturer-name"):
                                                    self.manufacturer_name = value
                                                    self.manufacturer_name.value_namespace = name_space
                                                    self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "memory-size"):
                                                    self.memory_size = value
                                                    self.memory_size.value_namespace = name_space
                                                    self.memory_size.value_namespace_prefix = name_space_prefix
                                                if(value_path == "model-name"):
                                                    self.model_name = value
                                                    self.model_name.value_namespace = name_space
                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "new-deviation-number"):
                                                    self.new_deviation_number = value
                                                    self.new_deviation_number.value_namespace = name_space
                                                    self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "physical-layer-interface-module-type"):
                                                    self.physical_layer_interface_module_type = value
                                                    self.physical_layer_interface_module_type.value_namespace = name_space
                                                    self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "redundancystate"):
                                                    self.redundancystate = value
                                                    self.redundancystate.value_namespace = name_space
                                                    self.redundancystate.value_namespace_prefix = name_space_prefix
                                                if(value_path == "serial-number"):
                                                    self.serial_number = value
                                                    self.serial_number.value_namespace = name_space
                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "software-revision"):
                                                    self.software_revision = value
                                                    self.software_revision.value_namespace = name_space
                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "unique-id"):
                                                    self.unique_id = value
                                                    self.unique_id.value_namespace = name_space
                                                    self.unique_id.value_namespace_prefix = name_space_prefix
                                                if(value_path == "unrecognized-fru"):
                                                    self.unrecognized_fru = value
                                                    self.unrecognized_fru.value_namespace = name_space
                                                    self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                                if(value_path == "vendor-type"):
                                                    self.vendor_type = value
                                                    self.vendor_type.value_namespace = name_space
                                                    self.vendor_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "xr-scoped"):
                                                    self.xr_scoped = value
                                                    self.xr_scoped.value_namespace = name_space
                                                    self.xr_scoped.value_namespace_prefix = name_space_prefix


                                        class FruInfo(Entity):
                                            """
                                            Field Replaceable Unit (FRU) inventory
                                            information
                                            
                                            .. attribute:: card_administrative_state
                                            
                                            	card admin state\: shutdown or not
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_monitor_state
                                            
                                            	card is monitored by a manager or left unmonitored
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_operational_state
                                            
                                            	card operation state
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_reset_reason
                                            
                                            	card reset reason enum
                                            	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                            
                                            .. attribute:: card_up_time
                                            
                                            	card up time
                                            	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime>`
                                            
                                            .. attribute:: last_operational_state_change
                                            
                                            	last card oper change state
                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                            
                                            .. attribute:: power_administrative_state
                                            
                                            	power admin state\: up or down
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: power_current_measurement
                                            
                                            	power current\: not implemented
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: power_operational_state
                                            
                                            	Power operation state
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo, self).__init__()

                                                self.yang_name = "fru-info"
                                                self.yang_parent_name = "basic-attributes"

                                                self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                                self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                                self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                                self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                                self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                                self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                                self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                                self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime()
                                                self.card_up_time.parent = self
                                                self._children_name_map["card_up_time"] = "card-up-time"
                                                self._children_yang_names.add("card-up-time")

                                                self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                self.last_operational_state_change.parent = self
                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                self._children_yang_names.add("last-operational-state-change")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("card_administrative_state",
                                                                "card_monitor_state",
                                                                "card_operational_state",
                                                                "card_reset_reason",
                                                                "power_administrative_state",
                                                                "power_current_measurement",
                                                                "power_operational_state") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                            class LastOperationalStateChange(Entity):
                                                """
                                                last card oper change state
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                    self.yang_name = "last-operational-state-change"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                            class CardUpTime(Entity):
                                                """
                                                card up time
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                                    self.yang_name = "card-up-time"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "card-up-time" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.card_administrative_state.is_set or
                                                    self.card_monitor_state.is_set or
                                                    self.card_operational_state.is_set or
                                                    self.card_reset_reason.is_set or
                                                    self.power_administrative_state.is_set or
                                                    self.power_current_measurement.is_set or
                                                    self.power_operational_state.is_set or
                                                    (self.card_up_time is not None and self.card_up_time.has_data()) or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.card_administrative_state.yfilter != YFilter.not_set or
                                                    self.card_monitor_state.yfilter != YFilter.not_set or
                                                    self.card_operational_state.yfilter != YFilter.not_set or
                                                    self.card_reset_reason.yfilter != YFilter.not_set or
                                                    self.power_administrative_state.yfilter != YFilter.not_set or
                                                    self.power_current_measurement.yfilter != YFilter.not_set or
                                                    self.power_operational_state.yfilter != YFilter.not_set or
                                                    (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "fru-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                                if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                                if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                                if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                                if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                                if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                                if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "card-up-time"):
                                                    if (self.card_up_time is None):
                                                        self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.CardUpTime()
                                                        self.card_up_time.parent = self
                                                        self._children_name_map["card_up_time"] = "card-up-time"
                                                    return self.card_up_time

                                                if (child_yang_name == "last-operational-state-change"):
                                                    if (self.last_operational_state_change is None):
                                                        self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    return self.last_operational_state_change

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "card-administrative-state"):
                                                    self.card_administrative_state = value
                                                    self.card_administrative_state.value_namespace = name_space
                                                    self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-monitor-state"):
                                                    self.card_monitor_state = value
                                                    self.card_monitor_state.value_namespace = name_space
                                                    self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-operational-state"):
                                                    self.card_operational_state = value
                                                    self.card_operational_state.value_namespace = name_space
                                                    self.card_operational_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-reset-reason"):
                                                    self.card_reset_reason = value
                                                    self.card_reset_reason.value_namespace = name_space
                                                    self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-administrative-state"):
                                                    self.power_administrative_state = value
                                                    self.power_administrative_state.value_namespace = name_space
                                                    self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-current-measurement"):
                                                    self.power_current_measurement = value
                                                    self.power_current_measurement.value_namespace = name_space
                                                    self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-operational-state"):
                                                    self.power_operational_state = value
                                                    self.power_operational_state.value_namespace = name_space
                                                    self.power_operational_state.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                (self.fru_info is not None and self.fru_info.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "basic-attributes" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "basic-info"):
                                                if (self.basic_info is None):
                                                    self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                return self.basic_info

                                            if (child_yang_name == "fru-info"):
                                                if (self.fru_info is None):
                                                    self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                return self.fru_info

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "basic-info" or name == "fru-info"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            self.number.is_set or
                                            (self.basic_attributes is not None and self.basic_attributes.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.number.yfilter != YFilter.not_set or
                                            (self.basic_attributes is not None and self.basic_attributes.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "sensor" + "[number='" + self.number.get() + "']" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.number.is_set or self.number.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.number.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "basic-attributes"):
                                            if (self.basic_attributes is None):
                                                self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor.BasicAttributes()
                                                self.basic_attributes.parent = self
                                                self._children_name_map["basic_attributes"] = "basic-attributes"
                                            return self.basic_attributes

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "basic-attributes" or name == "number"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "number"):
                                            self.number = value
                                            self.number.value_namespace = name_space
                                            self.number.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.sensor:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.sensor:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "sensors" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "sensor"):
                                        for c in self.sensor:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors.Sensor()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.sensor.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "sensor"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class PortSlots(Entity):
                                """
                                PortSlotTable contains all optics ports in a
                                SPA/PLIM.
                                
                                .. attribute:: port_slot
                                
                                	PortSlot number in the SPA/PLIM
                                	**type**\: list of    :py:class:`PortSlot <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot>`
                                
                                

                                """

                                _prefix = 'asr9k-sc-invmgr-oper'
                                _revision = '2017-01-04'

                                def __init__(self):
                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots, self).__init__()

                                    self.yang_name = "port-slots"
                                    self.yang_parent_name = "card"

                                    self.port_slot = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots, self).__setattr__(name, value)


                                class PortSlot(Entity):
                                    """
                                    PortSlot number in the SPA/PLIM
                                    
                                    .. attribute:: number  <key>
                                    
                                    	portslot number
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: basic_attributes
                                    
                                    	Attributes
                                    	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes>`
                                    
                                    .. attribute:: port
                                    
                                    	Port string
                                    	**type**\:   :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port>`
                                    
                                    

                                    """

                                    _prefix = 'asr9k-sc-invmgr-oper'
                                    _revision = '2017-01-04'

                                    def __init__(self):
                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot, self).__init__()

                                        self.yang_name = "port-slot"
                                        self.yang_parent_name = "port-slots"

                                        self.number = YLeaf(YType.int32, "number")

                                        self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes()
                                        self.basic_attributes.parent = self
                                        self._children_name_map["basic_attributes"] = "basic-attributes"
                                        self._children_yang_names.add("basic-attributes")

                                        self.port = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port()
                                        self.port.parent = self
                                        self._children_name_map["port"] = "port"
                                        self._children_yang_names.add("port")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("number") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot, self).__setattr__(name, value)


                                    class Port(Entity):
                                        """
                                        Port string
                                        
                                        .. attribute:: basic_attributes
                                        
                                        	Attributes
                                        	**type**\:   :py:class:`BasicAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes>`
                                        
                                        

                                        """

                                        _prefix = 'asr9k-sc-invmgr-oper'
                                        _revision = '2017-01-04'

                                        def __init__(self):
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port, self).__init__()

                                            self.yang_name = "port"
                                            self.yang_parent_name = "port-slot"

                                            self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes()
                                            self.basic_attributes.parent = self
                                            self._children_name_map["basic_attributes"] = "basic-attributes"
                                            self._children_yang_names.add("basic-attributes")


                                        class BasicAttributes(Entity):
                                            """
                                            Attributes
                                            
                                            .. attribute:: basic_info
                                            
                                            	Inventory information
                                            	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo>`
                                            
                                            .. attribute:: fru_info
                                            
                                            	Field Replaceable Unit (FRU) inventory information
                                            	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo>`
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes, self).__init__()

                                                self.yang_name = "basic-attributes"
                                                self.yang_parent_name = "port"

                                                self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo()
                                                self.basic_info.parent = self
                                                self._children_name_map["basic_info"] = "basic-info"
                                                self._children_yang_names.add("basic-info")

                                                self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo()
                                                self.fru_info.parent = self
                                                self._children_name_map["fru_info"] = "fru-info"
                                                self._children_yang_names.add("fru-info")


                                            class BasicInfo(Entity):
                                                """
                                                Inventory information
                                                
                                                .. attribute:: alias
                                                
                                                	useful for storing an entity alias 
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: asset_id_str
                                                
                                                	asset Identification string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: asset_identification
                                                
                                                	asset Identification
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: ceport
                                                
                                                	1 if ce port found, 0 if not
                                                	**type**\:  bool
                                                
                                                .. attribute:: chip_hardware_revision
                                                
                                                	chip module hw revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: composite_class_code
                                                
                                                	Major&minor class of the entity
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: description
                                                
                                                	describes in user\-readable terms       what the entity in question does
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: environmental_monitor_path
                                                
                                                	sysdb name of sensor in the envmon EDM
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: firmware_revision
                                                
                                                	firmware revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: group_flag
                                                
                                                	indicates if this entity is group       or not
                                                	**type**\:  bool
                                                
                                                .. attribute:: hardware_revision
                                                
                                                	hw revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: is_field_replaceable_unit
                                                
                                                	1 if Field Replaceable Unit 0, if not
                                                	**type**\:  bool
                                                
                                                .. attribute:: manufacturer_asset_tags
                                                
                                                	Manufacture Asset Tags
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: manufacturer_name
                                                
                                                	manufacturer's name
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: memory_size
                                                
                                                	Size of memory associated with       the entity where applicable
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: model_name
                                                
                                                	model name
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: name
                                                
                                                	name string for the entity
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: new_deviation_number
                                                
                                                	integer value for New Deviation Number 0x88
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: physical_layer_interface_module_type
                                                
                                                	integer value for plim type if     applicable to this entity
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: redundancystate
                                                
                                                	integer value for Redundancy State if     applicable to this entity
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: serial_number
                                                
                                                	serial number
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: software_revision
                                                
                                                	software revision string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: unique_id
                                                
                                                	Unique id for an entity
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: unrecognized_fru
                                                
                                                	1 if UnrecognizedFRU and 0 for recognizedFRU
                                                	**type**\:  bool
                                                
                                                .. attribute:: vendor_type
                                                
                                                	maps to the vendor OID string
                                                	**type**\:  str
                                                
                                                	**length:** 0..255
                                                
                                                .. attribute:: xr_scoped
                                                
                                                	1 if xr scoped, 0 if not
                                                	**type**\:  bool
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo, self).__init__()

                                                    self.yang_name = "basic-info"
                                                    self.yang_parent_name = "basic-attributes"

                                                    self.alias = YLeaf(YType.str, "alias")

                                                    self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                                    self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                                    self.ceport = YLeaf(YType.boolean, "ceport")

                                                    self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                                    self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                                    self.description = YLeaf(YType.str, "description")

                                                    self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                                    self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                    self.group_flag = YLeaf(YType.boolean, "group-flag")

                                                    self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                    self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                    self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                                    self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                                    self.memory_size = YLeaf(YType.int32, "memory-size")

                                                    self.model_name = YLeaf(YType.str, "model-name")

                                                    self.name = YLeaf(YType.str, "name")

                                                    self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                                    self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                                    self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                                    self.serial_number = YLeaf(YType.str, "serial-number")

                                                    self.software_revision = YLeaf(YType.str, "software-revision")

                                                    self.unique_id = YLeaf(YType.int32, "unique-id")

                                                    self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                                    self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                    self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("alias",
                                                                    "asset_id_str",
                                                                    "asset_identification",
                                                                    "ceport",
                                                                    "chip_hardware_revision",
                                                                    "composite_class_code",
                                                                    "description",
                                                                    "environmental_monitor_path",
                                                                    "firmware_revision",
                                                                    "group_flag",
                                                                    "hardware_revision",
                                                                    "is_field_replaceable_unit",
                                                                    "manufacturer_asset_tags",
                                                                    "manufacturer_name",
                                                                    "memory_size",
                                                                    "model_name",
                                                                    "name",
                                                                    "new_deviation_number",
                                                                    "physical_layer_interface_module_type",
                                                                    "redundancystate",
                                                                    "serial_number",
                                                                    "software_revision",
                                                                    "unique_id",
                                                                    "unrecognized_fru",
                                                                    "vendor_type",
                                                                    "xr_scoped") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.alias.is_set or
                                                        self.asset_id_str.is_set or
                                                        self.asset_identification.is_set or
                                                        self.ceport.is_set or
                                                        self.chip_hardware_revision.is_set or
                                                        self.composite_class_code.is_set or
                                                        self.description.is_set or
                                                        self.environmental_monitor_path.is_set or
                                                        self.firmware_revision.is_set or
                                                        self.group_flag.is_set or
                                                        self.hardware_revision.is_set or
                                                        self.is_field_replaceable_unit.is_set or
                                                        self.manufacturer_asset_tags.is_set or
                                                        self.manufacturer_name.is_set or
                                                        self.memory_size.is_set or
                                                        self.model_name.is_set or
                                                        self.name.is_set or
                                                        self.new_deviation_number.is_set or
                                                        self.physical_layer_interface_module_type.is_set or
                                                        self.redundancystate.is_set or
                                                        self.serial_number.is_set or
                                                        self.software_revision.is_set or
                                                        self.unique_id.is_set or
                                                        self.unrecognized_fru.is_set or
                                                        self.vendor_type.is_set or
                                                        self.xr_scoped.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.alias.yfilter != YFilter.not_set or
                                                        self.asset_id_str.yfilter != YFilter.not_set or
                                                        self.asset_identification.yfilter != YFilter.not_set or
                                                        self.ceport.yfilter != YFilter.not_set or
                                                        self.chip_hardware_revision.yfilter != YFilter.not_set or
                                                        self.composite_class_code.yfilter != YFilter.not_set or
                                                        self.description.yfilter != YFilter.not_set or
                                                        self.environmental_monitor_path.yfilter != YFilter.not_set or
                                                        self.firmware_revision.yfilter != YFilter.not_set or
                                                        self.group_flag.yfilter != YFilter.not_set or
                                                        self.hardware_revision.yfilter != YFilter.not_set or
                                                        self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                        self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                                        self.manufacturer_name.yfilter != YFilter.not_set or
                                                        self.memory_size.yfilter != YFilter.not_set or
                                                        self.model_name.yfilter != YFilter.not_set or
                                                        self.name.yfilter != YFilter.not_set or
                                                        self.new_deviation_number.yfilter != YFilter.not_set or
                                                        self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                                        self.redundancystate.yfilter != YFilter.not_set or
                                                        self.serial_number.yfilter != YFilter.not_set or
                                                        self.software_revision.yfilter != YFilter.not_set or
                                                        self.unique_id.yfilter != YFilter.not_set or
                                                        self.unrecognized_fru.yfilter != YFilter.not_set or
                                                        self.vendor_type.yfilter != YFilter.not_set or
                                                        self.xr_scoped.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "basic-info" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.alias.get_name_leafdata())
                                                    if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                                    if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                                    if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.ceport.get_name_leafdata())
                                                    if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                                    if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                                    if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.description.get_name_leafdata())
                                                    if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                                    if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                    if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.group_flag.get_name_leafdata())
                                                    if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                    if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                    if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                                    if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                                    if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.memory_size.get_name_leafdata())
                                                    if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.model_name.get_name_leafdata())
                                                    if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.name.get_name_leafdata())
                                                    if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                                    if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                                    if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                                    if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                    if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                    if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unique_id.get_name_leafdata())
                                                    if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                                    if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                                    if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "alias"):
                                                        self.alias = value
                                                        self.alias.value_namespace = name_space
                                                        self.alias.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "asset-id-str"):
                                                        self.asset_id_str = value
                                                        self.asset_id_str.value_namespace = name_space
                                                        self.asset_id_str.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "asset-identification"):
                                                        self.asset_identification = value
                                                        self.asset_identification.value_namespace = name_space
                                                        self.asset_identification.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "ceport"):
                                                        self.ceport = value
                                                        self.ceport.value_namespace = name_space
                                                        self.ceport.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "chip-hardware-revision"):
                                                        self.chip_hardware_revision = value
                                                        self.chip_hardware_revision.value_namespace = name_space
                                                        self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "composite-class-code"):
                                                        self.composite_class_code = value
                                                        self.composite_class_code.value_namespace = name_space
                                                        self.composite_class_code.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "description"):
                                                        self.description = value
                                                        self.description.value_namespace = name_space
                                                        self.description.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "environmental-monitor-path"):
                                                        self.environmental_monitor_path = value
                                                        self.environmental_monitor_path.value_namespace = name_space
                                                        self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "firmware-revision"):
                                                        self.firmware_revision = value
                                                        self.firmware_revision.value_namespace = name_space
                                                        self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "group-flag"):
                                                        self.group_flag = value
                                                        self.group_flag.value_namespace = name_space
                                                        self.group_flag.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "hardware-revision"):
                                                        self.hardware_revision = value
                                                        self.hardware_revision.value_namespace = name_space
                                                        self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "is-field-replaceable-unit"):
                                                        self.is_field_replaceable_unit = value
                                                        self.is_field_replaceable_unit.value_namespace = name_space
                                                        self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "manufacturer-asset-tags"):
                                                        self.manufacturer_asset_tags = value
                                                        self.manufacturer_asset_tags.value_namespace = name_space
                                                        self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "manufacturer-name"):
                                                        self.manufacturer_name = value
                                                        self.manufacturer_name.value_namespace = name_space
                                                        self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "memory-size"):
                                                        self.memory_size = value
                                                        self.memory_size.value_namespace = name_space
                                                        self.memory_size.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "model-name"):
                                                        self.model_name = value
                                                        self.model_name.value_namespace = name_space
                                                        self.model_name.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "name"):
                                                        self.name = value
                                                        self.name.value_namespace = name_space
                                                        self.name.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "new-deviation-number"):
                                                        self.new_deviation_number = value
                                                        self.new_deviation_number.value_namespace = name_space
                                                        self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "physical-layer-interface-module-type"):
                                                        self.physical_layer_interface_module_type = value
                                                        self.physical_layer_interface_module_type.value_namespace = name_space
                                                        self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "redundancystate"):
                                                        self.redundancystate = value
                                                        self.redundancystate.value_namespace = name_space
                                                        self.redundancystate.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "serial-number"):
                                                        self.serial_number = value
                                                        self.serial_number.value_namespace = name_space
                                                        self.serial_number.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "software-revision"):
                                                        self.software_revision = value
                                                        self.software_revision.value_namespace = name_space
                                                        self.software_revision.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "unique-id"):
                                                        self.unique_id = value
                                                        self.unique_id.value_namespace = name_space
                                                        self.unique_id.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "unrecognized-fru"):
                                                        self.unrecognized_fru = value
                                                        self.unrecognized_fru.value_namespace = name_space
                                                        self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "vendor-type"):
                                                        self.vendor_type = value
                                                        self.vendor_type.value_namespace = name_space
                                                        self.vendor_type.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "xr-scoped"):
                                                        self.xr_scoped = value
                                                        self.xr_scoped.value_namespace = name_space
                                                        self.xr_scoped.value_namespace_prefix = name_space_prefix


                                            class FruInfo(Entity):
                                                """
                                                Field Replaceable Unit (FRU) inventory
                                                information
                                                
                                                .. attribute:: card_administrative_state
                                                
                                                	card admin state\: shutdown or not
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: card_monitor_state
                                                
                                                	card is monitored by a manager or left unmonitored
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: card_operational_state
                                                
                                                	card operation state
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: card_reset_reason
                                                
                                                	card reset reason enum
                                                	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                                
                                                .. attribute:: card_up_time
                                                
                                                	card up time
                                                	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime>`
                                                
                                                .. attribute:: last_operational_state_change
                                                
                                                	last card oper change state
                                                	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                                
                                                .. attribute:: power_administrative_state
                                                
                                                	power admin state\: up or down
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: power_current_measurement
                                                
                                                	power current\: not implemented
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                .. attribute:: power_operational_state
                                                
                                                	Power operation state
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo, self).__init__()

                                                    self.yang_name = "fru-info"
                                                    self.yang_parent_name = "basic-attributes"

                                                    self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                                    self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                                    self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                                    self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                                    self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                                    self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                                    self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                                    self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime()
                                                    self.card_up_time.parent = self
                                                    self._children_name_map["card_up_time"] = "card-up-time"
                                                    self._children_yang_names.add("card-up-time")

                                                    self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                    self.last_operational_state_change.parent = self
                                                    self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    self._children_yang_names.add("last-operational-state-change")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("card_administrative_state",
                                                                    "card_monitor_state",
                                                                    "card_operational_state",
                                                                    "card_reset_reason",
                                                                    "power_administrative_state",
                                                                    "power_current_measurement",
                                                                    "power_operational_state") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                                class LastOperationalStateChange(Entity):
                                                    """
                                                    last card oper change state
                                                    
                                                    .. attribute:: time_in_nano_seconds
                                                    
                                                    	Time Value in Nano\-seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: nanosecond
                                                    
                                                    .. attribute:: time_in_seconds
                                                    
                                                    	Time Value in Seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: second
                                                    
                                                    

                                                    """

                                                    _prefix = 'asr9k-sc-invmgr-oper'
                                                    _revision = '2017-01-04'

                                                    def __init__(self):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                        self.yang_name = "last-operational-state-change"
                                                        self.yang_parent_name = "fru-info"

                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("time_in_nano_seconds",
                                                                        "time_in_seconds") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.time_in_nano_seconds.is_set or
                                                            self.time_in_seconds.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "last-operational-state-change" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "time-in-nano-seconds"):
                                                            self.time_in_nano_seconds = value
                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "time-in-seconds"):
                                                            self.time_in_seconds = value
                                                            self.time_in_seconds.value_namespace = name_space
                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                                class CardUpTime(Entity):
                                                    """
                                                    card up time
                                                    
                                                    .. attribute:: time_in_nano_seconds
                                                    
                                                    	Time Value in Nano\-seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: nanosecond
                                                    
                                                    .. attribute:: time_in_seconds
                                                    
                                                    	Time Value in Seconds
                                                    	**type**\:  int
                                                    
                                                    	**range:** \-2147483648..2147483647
                                                    
                                                    	**units**\: second
                                                    
                                                    

                                                    """

                                                    _prefix = 'asr9k-sc-invmgr-oper'
                                                    _revision = '2017-01-04'

                                                    def __init__(self):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                                        self.yang_name = "card-up-time"
                                                        self.yang_parent_name = "fru-info"

                                                        self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                        self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("time_in_nano_seconds",
                                                                        "time_in_seconds") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.time_in_nano_seconds.is_set or
                                                            self.time_in_seconds.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                            self.time_in_seconds.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "card-up-time" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                        if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "time-in-nano-seconds"):
                                                            self.time_in_nano_seconds = value
                                                            self.time_in_nano_seconds.value_namespace = name_space
                                                            self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "time-in-seconds"):
                                                            self.time_in_seconds = value
                                                            self.time_in_seconds.value_namespace = name_space
                                                            self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        self.card_administrative_state.is_set or
                                                        self.card_monitor_state.is_set or
                                                        self.card_operational_state.is_set or
                                                        self.card_reset_reason.is_set or
                                                        self.power_administrative_state.is_set or
                                                        self.power_current_measurement.is_set or
                                                        self.power_operational_state.is_set or
                                                        (self.card_up_time is not None and self.card_up_time.has_data()) or
                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.card_administrative_state.yfilter != YFilter.not_set or
                                                        self.card_monitor_state.yfilter != YFilter.not_set or
                                                        self.card_operational_state.yfilter != YFilter.not_set or
                                                        self.card_reset_reason.yfilter != YFilter.not_set or
                                                        self.power_administrative_state.yfilter != YFilter.not_set or
                                                        self.power_current_measurement.yfilter != YFilter.not_set or
                                                        self.power_operational_state.yfilter != YFilter.not_set or
                                                        (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                                        (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "fru-info" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                                    if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                                    if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                                    if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                                    if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                                    if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                                    if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "card-up-time"):
                                                        if (self.card_up_time is None):
                                                            self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.CardUpTime()
                                                            self.card_up_time.parent = self
                                                            self._children_name_map["card_up_time"] = "card-up-time"
                                                        return self.card_up_time

                                                    if (child_yang_name == "last-operational-state-change"):
                                                        if (self.last_operational_state_change is None):
                                                            self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                            self.last_operational_state_change.parent = self
                                                            self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                        return self.last_operational_state_change

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "card-administrative-state"):
                                                        self.card_administrative_state = value
                                                        self.card_administrative_state.value_namespace = name_space
                                                        self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "card-monitor-state"):
                                                        self.card_monitor_state = value
                                                        self.card_monitor_state.value_namespace = name_space
                                                        self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "card-operational-state"):
                                                        self.card_operational_state = value
                                                        self.card_operational_state.value_namespace = name_space
                                                        self.card_operational_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "card-reset-reason"):
                                                        self.card_reset_reason = value
                                                        self.card_reset_reason.value_namespace = name_space
                                                        self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "power-administrative-state"):
                                                        self.power_administrative_state = value
                                                        self.power_administrative_state.value_namespace = name_space
                                                        self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "power-current-measurement"):
                                                        self.power_current_measurement = value
                                                        self.power_current_measurement.value_namespace = name_space
                                                        self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "power-operational-state"):
                                                        self.power_operational_state = value
                                                        self.power_operational_state.value_namespace = name_space
                                                        self.power_operational_state.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    (self.basic_info is not None and self.basic_info.has_data()) or
                                                    (self.fru_info is not None and self.fru_info.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    (self.basic_info is not None and self.basic_info.has_operation()) or
                                                    (self.fru_info is not None and self.fru_info.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "basic-attributes" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "basic-info"):
                                                    if (self.basic_info is None):
                                                        self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.BasicInfo()
                                                        self.basic_info.parent = self
                                                        self._children_name_map["basic_info"] = "basic-info"
                                                    return self.basic_info

                                                if (child_yang_name == "fru-info"):
                                                    if (self.fru_info is None):
                                                        self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes.FruInfo()
                                                        self.fru_info.parent = self
                                                        self._children_name_map["fru_info"] = "fru-info"
                                                    return self.fru_info

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "basic-info" or name == "fru-info"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass

                                        def has_data(self):
                                            return (self.basic_attributes is not None and self.basic_attributes.has_data())

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.basic_attributes is not None and self.basic_attributes.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "port" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "basic-attributes"):
                                                if (self.basic_attributes is None):
                                                    self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port.BasicAttributes()
                                                    self.basic_attributes.parent = self
                                                    self._children_name_map["basic_attributes"] = "basic-attributes"
                                                return self.basic_attributes

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "basic-attributes"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass


                                    class BasicAttributes(Entity):
                                        """
                                        Attributes
                                        
                                        .. attribute:: basic_info
                                        
                                        	Inventory information
                                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.BasicInfo>`
                                        
                                        .. attribute:: fru_info
                                        
                                        	Field Replaceable Unit (FRU) inventory information
                                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo>`
                                        
                                        

                                        """

                                        _prefix = 'asr9k-sc-invmgr-oper'
                                        _revision = '2017-01-04'

                                        def __init__(self):
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes, self).__init__()

                                            self.yang_name = "basic-attributes"
                                            self.yang_parent_name = "port-slot"

                                            self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.BasicInfo()
                                            self.basic_info.parent = self
                                            self._children_name_map["basic_info"] = "basic-info"
                                            self._children_yang_names.add("basic-info")

                                            self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo()
                                            self.fru_info.parent = self
                                            self._children_name_map["fru_info"] = "fru-info"
                                            self._children_yang_names.add("fru-info")


                                        class BasicInfo(Entity):
                                            """
                                            Inventory information
                                            
                                            .. attribute:: alias
                                            
                                            	useful for storing an entity alias 
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: asset_id_str
                                            
                                            	asset Identification string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: asset_identification
                                            
                                            	asset Identification
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: ceport
                                            
                                            	1 if ce port found, 0 if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: chip_hardware_revision
                                            
                                            	chip module hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: composite_class_code
                                            
                                            	Major&minor class of the entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: description
                                            
                                            	describes in user\-readable terms       what the entity in question does
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: environmental_monitor_path
                                            
                                            	sysdb name of sensor in the envmon EDM
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: firmware_revision
                                            
                                            	firmware revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: group_flag
                                            
                                            	indicates if this entity is group       or not
                                            	**type**\:  bool
                                            
                                            .. attribute:: hardware_revision
                                            
                                            	hw revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: is_field_replaceable_unit
                                            
                                            	1 if Field Replaceable Unit 0, if not
                                            	**type**\:  bool
                                            
                                            .. attribute:: manufacturer_asset_tags
                                            
                                            	Manufacture Asset Tags
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: manufacturer_name
                                            
                                            	manufacturer's name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: memory_size
                                            
                                            	Size of memory associated with       the entity where applicable
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: model_name
                                            
                                            	model name
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: name
                                            
                                            	name string for the entity
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: new_deviation_number
                                            
                                            	integer value for New Deviation Number 0x88
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: physical_layer_interface_module_type
                                            
                                            	integer value for plim type if     applicable to this entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: redundancystate
                                            
                                            	integer value for Redundancy State if     applicable to this entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: serial_number
                                            
                                            	serial number
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: software_revision
                                            
                                            	software revision string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: unique_id
                                            
                                            	Unique id for an entity
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: unrecognized_fru
                                            
                                            	1 if UnrecognizedFRU and 0 for recognizedFRU
                                            	**type**\:  bool
                                            
                                            .. attribute:: vendor_type
                                            
                                            	maps to the vendor OID string
                                            	**type**\:  str
                                            
                                            	**length:** 0..255
                                            
                                            .. attribute:: xr_scoped
                                            
                                            	1 if xr scoped, 0 if not
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.BasicInfo, self).__init__()

                                                self.yang_name = "basic-info"
                                                self.yang_parent_name = "basic-attributes"

                                                self.alias = YLeaf(YType.str, "alias")

                                                self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                                self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                                self.ceport = YLeaf(YType.boolean, "ceport")

                                                self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                                self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                                self.description = YLeaf(YType.str, "description")

                                                self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                                self.group_flag = YLeaf(YType.boolean, "group-flag")

                                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                                self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                                self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                                self.memory_size = YLeaf(YType.int32, "memory-size")

                                                self.model_name = YLeaf(YType.str, "model-name")

                                                self.name = YLeaf(YType.str, "name")

                                                self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                                self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                                self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                                self.serial_number = YLeaf(YType.str, "serial-number")

                                                self.software_revision = YLeaf(YType.str, "software-revision")

                                                self.unique_id = YLeaf(YType.int32, "unique-id")

                                                self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                                self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("alias",
                                                                "asset_id_str",
                                                                "asset_identification",
                                                                "ceport",
                                                                "chip_hardware_revision",
                                                                "composite_class_code",
                                                                "description",
                                                                "environmental_monitor_path",
                                                                "firmware_revision",
                                                                "group_flag",
                                                                "hardware_revision",
                                                                "is_field_replaceable_unit",
                                                                "manufacturer_asset_tags",
                                                                "manufacturer_name",
                                                                "memory_size",
                                                                "model_name",
                                                                "name",
                                                                "new_deviation_number",
                                                                "physical_layer_interface_module_type",
                                                                "redundancystate",
                                                                "serial_number",
                                                                "software_revision",
                                                                "unique_id",
                                                                "unrecognized_fru",
                                                                "vendor_type",
                                                                "xr_scoped") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.alias.is_set or
                                                    self.asset_id_str.is_set or
                                                    self.asset_identification.is_set or
                                                    self.ceport.is_set or
                                                    self.chip_hardware_revision.is_set or
                                                    self.composite_class_code.is_set or
                                                    self.description.is_set or
                                                    self.environmental_monitor_path.is_set or
                                                    self.firmware_revision.is_set or
                                                    self.group_flag.is_set or
                                                    self.hardware_revision.is_set or
                                                    self.is_field_replaceable_unit.is_set or
                                                    self.manufacturer_asset_tags.is_set or
                                                    self.manufacturer_name.is_set or
                                                    self.memory_size.is_set or
                                                    self.model_name.is_set or
                                                    self.name.is_set or
                                                    self.new_deviation_number.is_set or
                                                    self.physical_layer_interface_module_type.is_set or
                                                    self.redundancystate.is_set or
                                                    self.serial_number.is_set or
                                                    self.software_revision.is_set or
                                                    self.unique_id.is_set or
                                                    self.unrecognized_fru.is_set or
                                                    self.vendor_type.is_set or
                                                    self.xr_scoped.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.alias.yfilter != YFilter.not_set or
                                                    self.asset_id_str.yfilter != YFilter.not_set or
                                                    self.asset_identification.yfilter != YFilter.not_set or
                                                    self.ceport.yfilter != YFilter.not_set or
                                                    self.chip_hardware_revision.yfilter != YFilter.not_set or
                                                    self.composite_class_code.yfilter != YFilter.not_set or
                                                    self.description.yfilter != YFilter.not_set or
                                                    self.environmental_monitor_path.yfilter != YFilter.not_set or
                                                    self.firmware_revision.yfilter != YFilter.not_set or
                                                    self.group_flag.yfilter != YFilter.not_set or
                                                    self.hardware_revision.yfilter != YFilter.not_set or
                                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                                    self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                                    self.manufacturer_name.yfilter != YFilter.not_set or
                                                    self.memory_size.yfilter != YFilter.not_set or
                                                    self.model_name.yfilter != YFilter.not_set or
                                                    self.name.yfilter != YFilter.not_set or
                                                    self.new_deviation_number.yfilter != YFilter.not_set or
                                                    self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                                    self.redundancystate.yfilter != YFilter.not_set or
                                                    self.serial_number.yfilter != YFilter.not_set or
                                                    self.software_revision.yfilter != YFilter.not_set or
                                                    self.unique_id.yfilter != YFilter.not_set or
                                                    self.unrecognized_fru.yfilter != YFilter.not_set or
                                                    self.vendor_type.yfilter != YFilter.not_set or
                                                    self.xr_scoped.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "basic-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.alias.get_name_leafdata())
                                                if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                                if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                                if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.ceport.get_name_leafdata())
                                                if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                                if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.description.get_name_leafdata())
                                                if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                                if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.group_flag.get_name_leafdata())
                                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                                if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                                if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                                if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.memory_size.get_name_leafdata())
                                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.name.get_name_leafdata())
                                                if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                                if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                                if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                                if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unique_id.get_name_leafdata())
                                                if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                                if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "alias"):
                                                    self.alias = value
                                                    self.alias.value_namespace = name_space
                                                    self.alias.value_namespace_prefix = name_space_prefix
                                                if(value_path == "asset-id-str"):
                                                    self.asset_id_str = value
                                                    self.asset_id_str.value_namespace = name_space
                                                    self.asset_id_str.value_namespace_prefix = name_space_prefix
                                                if(value_path == "asset-identification"):
                                                    self.asset_identification = value
                                                    self.asset_identification.value_namespace = name_space
                                                    self.asset_identification.value_namespace_prefix = name_space_prefix
                                                if(value_path == "ceport"):
                                                    self.ceport = value
                                                    self.ceport.value_namespace = name_space
                                                    self.ceport.value_namespace_prefix = name_space_prefix
                                                if(value_path == "chip-hardware-revision"):
                                                    self.chip_hardware_revision = value
                                                    self.chip_hardware_revision.value_namespace = name_space
                                                    self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "composite-class-code"):
                                                    self.composite_class_code = value
                                                    self.composite_class_code.value_namespace = name_space
                                                    self.composite_class_code.value_namespace_prefix = name_space_prefix
                                                if(value_path == "description"):
                                                    self.description = value
                                                    self.description.value_namespace = name_space
                                                    self.description.value_namespace_prefix = name_space_prefix
                                                if(value_path == "environmental-monitor-path"):
                                                    self.environmental_monitor_path = value
                                                    self.environmental_monitor_path.value_namespace = name_space
                                                    self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                                if(value_path == "firmware-revision"):
                                                    self.firmware_revision = value
                                                    self.firmware_revision.value_namespace = name_space
                                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "group-flag"):
                                                    self.group_flag = value
                                                    self.group_flag.value_namespace = name_space
                                                    self.group_flag.value_namespace_prefix = name_space_prefix
                                                if(value_path == "hardware-revision"):
                                                    self.hardware_revision = value
                                                    self.hardware_revision.value_namespace = name_space
                                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "is-field-replaceable-unit"):
                                                    self.is_field_replaceable_unit = value
                                                    self.is_field_replaceable_unit.value_namespace = name_space
                                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "manufacturer-asset-tags"):
                                                    self.manufacturer_asset_tags = value
                                                    self.manufacturer_asset_tags.value_namespace = name_space
                                                    self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                                if(value_path == "manufacturer-name"):
                                                    self.manufacturer_name = value
                                                    self.manufacturer_name.value_namespace = name_space
                                                    self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "memory-size"):
                                                    self.memory_size = value
                                                    self.memory_size.value_namespace = name_space
                                                    self.memory_size.value_namespace_prefix = name_space_prefix
                                                if(value_path == "model-name"):
                                                    self.model_name = value
                                                    self.model_name.value_namespace = name_space
                                                    self.model_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "name"):
                                                    self.name = value
                                                    self.name.value_namespace = name_space
                                                    self.name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "new-deviation-number"):
                                                    self.new_deviation_number = value
                                                    self.new_deviation_number.value_namespace = name_space
                                                    self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "physical-layer-interface-module-type"):
                                                    self.physical_layer_interface_module_type = value
                                                    self.physical_layer_interface_module_type.value_namespace = name_space
                                                    self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "redundancystate"):
                                                    self.redundancystate = value
                                                    self.redundancystate.value_namespace = name_space
                                                    self.redundancystate.value_namespace_prefix = name_space_prefix
                                                if(value_path == "serial-number"):
                                                    self.serial_number = value
                                                    self.serial_number.value_namespace = name_space
                                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                                if(value_path == "software-revision"):
                                                    self.software_revision = value
                                                    self.software_revision.value_namespace = name_space
                                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                                if(value_path == "unique-id"):
                                                    self.unique_id = value
                                                    self.unique_id.value_namespace = name_space
                                                    self.unique_id.value_namespace_prefix = name_space_prefix
                                                if(value_path == "unrecognized-fru"):
                                                    self.unrecognized_fru = value
                                                    self.unrecognized_fru.value_namespace = name_space
                                                    self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                                if(value_path == "vendor-type"):
                                                    self.vendor_type = value
                                                    self.vendor_type.value_namespace = name_space
                                                    self.vendor_type.value_namespace_prefix = name_space_prefix
                                                if(value_path == "xr-scoped"):
                                                    self.xr_scoped = value
                                                    self.xr_scoped.value_namespace = name_space
                                                    self.xr_scoped.value_namespace_prefix = name_space_prefix


                                        class FruInfo(Entity):
                                            """
                                            Field Replaceable Unit (FRU) inventory
                                            information
                                            
                                            .. attribute:: card_administrative_state
                                            
                                            	card admin state\: shutdown or not
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_monitor_state
                                            
                                            	card is monitored by a manager or left unmonitored
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_operational_state
                                            
                                            	card operation state
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: card_reset_reason
                                            
                                            	card reset reason enum
                                            	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                            
                                            .. attribute:: card_up_time
                                            
                                            	card up time
                                            	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime>`
                                            
                                            .. attribute:: last_operational_state_change
                                            
                                            	last card oper change state
                                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                            
                                            .. attribute:: power_administrative_state
                                            
                                            	power admin state\: up or down
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: power_current_measurement
                                            
                                            	power current\: not implemented
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            .. attribute:: power_operational_state
                                            
                                            	Power operation state
                                            	**type**\:  int
                                            
                                            	**range:** \-2147483648..2147483647
                                            
                                            

                                            """

                                            _prefix = 'asr9k-sc-invmgr-oper'
                                            _revision = '2017-01-04'

                                            def __init__(self):
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo, self).__init__()

                                                self.yang_name = "fru-info"
                                                self.yang_parent_name = "basic-attributes"

                                                self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                                self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                                self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                                self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                                self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                                self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                                self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                                self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime()
                                                self.card_up_time.parent = self
                                                self._children_name_map["card_up_time"] = "card-up-time"
                                                self._children_yang_names.add("card-up-time")

                                                self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                self.last_operational_state_change.parent = self
                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                self._children_yang_names.add("last-operational-state-change")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("card_administrative_state",
                                                                "card_monitor_state",
                                                                "card_operational_state",
                                                                "card_reset_reason",
                                                                "power_administrative_state",
                                                                "power_current_measurement",
                                                                "power_operational_state") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                            class LastOperationalStateChange(Entity):
                                                """
                                                last card oper change state
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                                    self.yang_name = "last-operational-state-change"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "last-operational-state-change" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                            class CardUpTime(Entity):
                                                """
                                                card up time
                                                
                                                .. attribute:: time_in_nano_seconds
                                                
                                                	Time Value in Nano\-seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: nanosecond
                                                
                                                .. attribute:: time_in_seconds
                                                
                                                	Time Value in Seconds
                                                	**type**\:  int
                                                
                                                	**range:** \-2147483648..2147483647
                                                
                                                	**units**\: second
                                                
                                                

                                                """

                                                _prefix = 'asr9k-sc-invmgr-oper'
                                                _revision = '2017-01-04'

                                                def __init__(self):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                                    self.yang_name = "card-up-time"
                                                    self.yang_parent_name = "fru-info"

                                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("time_in_nano_seconds",
                                                                    "time_in_seconds") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.time_in_nano_seconds.is_set or
                                                        self.time_in_seconds.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "card-up-time" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "time-in-nano-seconds"):
                                                        self.time_in_nano_seconds = value
                                                        self.time_in_nano_seconds.value_namespace = name_space
                                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "time-in-seconds"):
                                                        self.time_in_seconds = value
                                                        self.time_in_seconds.value_namespace = name_space
                                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.card_administrative_state.is_set or
                                                    self.card_monitor_state.is_set or
                                                    self.card_operational_state.is_set or
                                                    self.card_reset_reason.is_set or
                                                    self.power_administrative_state.is_set or
                                                    self.power_current_measurement.is_set or
                                                    self.power_operational_state.is_set or
                                                    (self.card_up_time is not None and self.card_up_time.has_data()) or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.card_administrative_state.yfilter != YFilter.not_set or
                                                    self.card_monitor_state.yfilter != YFilter.not_set or
                                                    self.card_operational_state.yfilter != YFilter.not_set or
                                                    self.card_reset_reason.yfilter != YFilter.not_set or
                                                    self.power_administrative_state.yfilter != YFilter.not_set or
                                                    self.power_current_measurement.yfilter != YFilter.not_set or
                                                    self.power_operational_state.yfilter != YFilter.not_set or
                                                    (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "fru-info" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                                if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                                if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                                if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                                if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                                if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                                if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "card-up-time"):
                                                    if (self.card_up_time is None):
                                                        self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.CardUpTime()
                                                        self.card_up_time.parent = self
                                                        self._children_name_map["card_up_time"] = "card-up-time"
                                                    return self.card_up_time

                                                if (child_yang_name == "last-operational-state-change"):
                                                    if (self.last_operational_state_change is None):
                                                        self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                        self.last_operational_state_change.parent = self
                                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                                    return self.last_operational_state_change

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "card-administrative-state"):
                                                    self.card_administrative_state = value
                                                    self.card_administrative_state.value_namespace = name_space
                                                    self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-monitor-state"):
                                                    self.card_monitor_state = value
                                                    self.card_monitor_state.value_namespace = name_space
                                                    self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-operational-state"):
                                                    self.card_operational_state = value
                                                    self.card_operational_state.value_namespace = name_space
                                                    self.card_operational_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "card-reset-reason"):
                                                    self.card_reset_reason = value
                                                    self.card_reset_reason.value_namespace = name_space
                                                    self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-administrative-state"):
                                                    self.power_administrative_state = value
                                                    self.power_administrative_state.value_namespace = name_space
                                                    self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-current-measurement"):
                                                    self.power_current_measurement = value
                                                    self.power_current_measurement.value_namespace = name_space
                                                    self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                                if(value_path == "power-operational-state"):
                                                    self.power_operational_state = value
                                                    self.power_operational_state.value_namespace = name_space
                                                    self.power_operational_state.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                (self.basic_info is not None and self.basic_info.has_data()) or
                                                (self.fru_info is not None and self.fru_info.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                                (self.fru_info is not None and self.fru_info.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "basic-attributes" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "basic-info"):
                                                if (self.basic_info is None):
                                                    self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.BasicInfo()
                                                    self.basic_info.parent = self
                                                    self._children_name_map["basic_info"] = "basic-info"
                                                return self.basic_info

                                            if (child_yang_name == "fru-info"):
                                                if (self.fru_info is None):
                                                    self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes.FruInfo()
                                                    self.fru_info.parent = self
                                                    self._children_name_map["fru_info"] = "fru-info"
                                                return self.fru_info

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "basic-info" or name == "fru-info"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            self.number.is_set or
                                            (self.basic_attributes is not None and self.basic_attributes.has_data()) or
                                            (self.port is not None and self.port.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.number.yfilter != YFilter.not_set or
                                            (self.basic_attributes is not None and self.basic_attributes.has_operation()) or
                                            (self.port is not None and self.port.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "port-slot" + "[number='" + self.number.get() + "']" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.number.is_set or self.number.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.number.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "basic-attributes"):
                                            if (self.basic_attributes is None):
                                                self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.BasicAttributes()
                                                self.basic_attributes.parent = self
                                                self._children_name_map["basic_attributes"] = "basic-attributes"
                                            return self.basic_attributes

                                        if (child_yang_name == "port"):
                                            if (self.port is None):
                                                self.port = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot.Port()
                                                self.port.parent = self
                                                self._children_name_map["port"] = "port"
                                            return self.port

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "basic-attributes" or name == "port" or name == "number"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "number"):
                                            self.number = value
                                            self.number.value_namespace = name_space
                                            self.number.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.port_slot:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.port_slot:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "port-slots" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "port-slot"):
                                        for c in self.port_slot:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots.PortSlot()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.port_slot.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "port-slot"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class BasicAttributes(Entity):
                                """
                                Attributes
                                
                                .. attribute:: basic_info
                                
                                	Inventory information
                                	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.BasicInfo>`
                                
                                .. attribute:: fru_info
                                
                                	Field Replaceable Unit (FRU) inventory information
                                	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo>`
                                
                                

                                """

                                _prefix = 'asr9k-sc-invmgr-oper'
                                _revision = '2017-01-04'

                                def __init__(self):
                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes, self).__init__()

                                    self.yang_name = "basic-attributes"
                                    self.yang_parent_name = "card"

                                    self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.BasicInfo()
                                    self.basic_info.parent = self
                                    self._children_name_map["basic_info"] = "basic-info"
                                    self._children_yang_names.add("basic-info")

                                    self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo()
                                    self.fru_info.parent = self
                                    self._children_name_map["fru_info"] = "fru-info"
                                    self._children_yang_names.add("fru-info")


                                class BasicInfo(Entity):
                                    """
                                    Inventory information
                                    
                                    .. attribute:: alias
                                    
                                    	useful for storing an entity alias 
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: asset_id_str
                                    
                                    	asset Identification string
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: asset_identification
                                    
                                    	asset Identification
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: ceport
                                    
                                    	1 if ce port found, 0 if not
                                    	**type**\:  bool
                                    
                                    .. attribute:: chip_hardware_revision
                                    
                                    	chip module hw revision string
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: composite_class_code
                                    
                                    	Major&minor class of the entity
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: description
                                    
                                    	describes in user\-readable terms       what the entity in question does
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: environmental_monitor_path
                                    
                                    	sysdb name of sensor in the envmon EDM
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: firmware_revision
                                    
                                    	firmware revision string
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: group_flag
                                    
                                    	indicates if this entity is group       or not
                                    	**type**\:  bool
                                    
                                    .. attribute:: hardware_revision
                                    
                                    	hw revision string
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: is_field_replaceable_unit
                                    
                                    	1 if Field Replaceable Unit 0, if not
                                    	**type**\:  bool
                                    
                                    .. attribute:: manufacturer_asset_tags
                                    
                                    	Manufacture Asset Tags
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: manufacturer_name
                                    
                                    	manufacturer's name
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: memory_size
                                    
                                    	Size of memory associated with       the entity where applicable
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: model_name
                                    
                                    	model name
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: name
                                    
                                    	name string for the entity
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: new_deviation_number
                                    
                                    	integer value for New Deviation Number 0x88
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: physical_layer_interface_module_type
                                    
                                    	integer value for plim type if     applicable to this entity
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: redundancystate
                                    
                                    	integer value for Redundancy State if     applicable to this entity
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: serial_number
                                    
                                    	serial number
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: software_revision
                                    
                                    	software revision string
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: unique_id
                                    
                                    	Unique id for an entity
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: unrecognized_fru
                                    
                                    	1 if UnrecognizedFRU and 0 for recognizedFRU
                                    	**type**\:  bool
                                    
                                    .. attribute:: vendor_type
                                    
                                    	maps to the vendor OID string
                                    	**type**\:  str
                                    
                                    	**length:** 0..255
                                    
                                    .. attribute:: xr_scoped
                                    
                                    	1 if xr scoped, 0 if not
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'asr9k-sc-invmgr-oper'
                                    _revision = '2017-01-04'

                                    def __init__(self):
                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.BasicInfo, self).__init__()

                                        self.yang_name = "basic-info"
                                        self.yang_parent_name = "basic-attributes"

                                        self.alias = YLeaf(YType.str, "alias")

                                        self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                        self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                        self.ceport = YLeaf(YType.boolean, "ceport")

                                        self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                        self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                        self.description = YLeaf(YType.str, "description")

                                        self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                        self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                        self.group_flag = YLeaf(YType.boolean, "group-flag")

                                        self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                        self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                        self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                        self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                        self.memory_size = YLeaf(YType.int32, "memory-size")

                                        self.model_name = YLeaf(YType.str, "model-name")

                                        self.name = YLeaf(YType.str, "name")

                                        self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                        self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                        self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                        self.serial_number = YLeaf(YType.str, "serial-number")

                                        self.software_revision = YLeaf(YType.str, "software-revision")

                                        self.unique_id = YLeaf(YType.int32, "unique-id")

                                        self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                        self.vendor_type = YLeaf(YType.str, "vendor-type")

                                        self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("alias",
                                                        "asset_id_str",
                                                        "asset_identification",
                                                        "ceport",
                                                        "chip_hardware_revision",
                                                        "composite_class_code",
                                                        "description",
                                                        "environmental_monitor_path",
                                                        "firmware_revision",
                                                        "group_flag",
                                                        "hardware_revision",
                                                        "is_field_replaceable_unit",
                                                        "manufacturer_asset_tags",
                                                        "manufacturer_name",
                                                        "memory_size",
                                                        "model_name",
                                                        "name",
                                                        "new_deviation_number",
                                                        "physical_layer_interface_module_type",
                                                        "redundancystate",
                                                        "serial_number",
                                                        "software_revision",
                                                        "unique_id",
                                                        "unrecognized_fru",
                                                        "vendor_type",
                                                        "xr_scoped") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.alias.is_set or
                                            self.asset_id_str.is_set or
                                            self.asset_identification.is_set or
                                            self.ceport.is_set or
                                            self.chip_hardware_revision.is_set or
                                            self.composite_class_code.is_set or
                                            self.description.is_set or
                                            self.environmental_monitor_path.is_set or
                                            self.firmware_revision.is_set or
                                            self.group_flag.is_set or
                                            self.hardware_revision.is_set or
                                            self.is_field_replaceable_unit.is_set or
                                            self.manufacturer_asset_tags.is_set or
                                            self.manufacturer_name.is_set or
                                            self.memory_size.is_set or
                                            self.model_name.is_set or
                                            self.name.is_set or
                                            self.new_deviation_number.is_set or
                                            self.physical_layer_interface_module_type.is_set or
                                            self.redundancystate.is_set or
                                            self.serial_number.is_set or
                                            self.software_revision.is_set or
                                            self.unique_id.is_set or
                                            self.unrecognized_fru.is_set or
                                            self.vendor_type.is_set or
                                            self.xr_scoped.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.alias.yfilter != YFilter.not_set or
                                            self.asset_id_str.yfilter != YFilter.not_set or
                                            self.asset_identification.yfilter != YFilter.not_set or
                                            self.ceport.yfilter != YFilter.not_set or
                                            self.chip_hardware_revision.yfilter != YFilter.not_set or
                                            self.composite_class_code.yfilter != YFilter.not_set or
                                            self.description.yfilter != YFilter.not_set or
                                            self.environmental_monitor_path.yfilter != YFilter.not_set or
                                            self.firmware_revision.yfilter != YFilter.not_set or
                                            self.group_flag.yfilter != YFilter.not_set or
                                            self.hardware_revision.yfilter != YFilter.not_set or
                                            self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                            self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                            self.manufacturer_name.yfilter != YFilter.not_set or
                                            self.memory_size.yfilter != YFilter.not_set or
                                            self.model_name.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set or
                                            self.new_deviation_number.yfilter != YFilter.not_set or
                                            self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                            self.redundancystate.yfilter != YFilter.not_set or
                                            self.serial_number.yfilter != YFilter.not_set or
                                            self.software_revision.yfilter != YFilter.not_set or
                                            self.unique_id.yfilter != YFilter.not_set or
                                            self.unrecognized_fru.yfilter != YFilter.not_set or
                                            self.vendor_type.yfilter != YFilter.not_set or
                                            self.xr_scoped.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "basic-info" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.alias.get_name_leafdata())
                                        if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                        if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                        if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ceport.get_name_leafdata())
                                        if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                        if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                        if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.description.get_name_leafdata())
                                        if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                        if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                        if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.group_flag.get_name_leafdata())
                                        if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                        if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                        if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                        if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                        if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.memory_size.get_name_leafdata())
                                        if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.model_name.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())
                                        if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                        if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                        if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                        if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.serial_number.get_name_leafdata())
                                        if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.software_revision.get_name_leafdata())
                                        if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.unique_id.get_name_leafdata())
                                        if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                        if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                        if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "alias"):
                                            self.alias = value
                                            self.alias.value_namespace = name_space
                                            self.alias.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asset-id-str"):
                                            self.asset_id_str = value
                                            self.asset_id_str.value_namespace = name_space
                                            self.asset_id_str.value_namespace_prefix = name_space_prefix
                                        if(value_path == "asset-identification"):
                                            self.asset_identification = value
                                            self.asset_identification.value_namespace = name_space
                                            self.asset_identification.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ceport"):
                                            self.ceport = value
                                            self.ceport.value_namespace = name_space
                                            self.ceport.value_namespace_prefix = name_space_prefix
                                        if(value_path == "chip-hardware-revision"):
                                            self.chip_hardware_revision = value
                                            self.chip_hardware_revision.value_namespace = name_space
                                            self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                        if(value_path == "composite-class-code"):
                                            self.composite_class_code = value
                                            self.composite_class_code.value_namespace = name_space
                                            self.composite_class_code.value_namespace_prefix = name_space_prefix
                                        if(value_path == "description"):
                                            self.description = value
                                            self.description.value_namespace = name_space
                                            self.description.value_namespace_prefix = name_space_prefix
                                        if(value_path == "environmental-monitor-path"):
                                            self.environmental_monitor_path = value
                                            self.environmental_monitor_path.value_namespace = name_space
                                            self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                        if(value_path == "firmware-revision"):
                                            self.firmware_revision = value
                                            self.firmware_revision.value_namespace = name_space
                                            self.firmware_revision.value_namespace_prefix = name_space_prefix
                                        if(value_path == "group-flag"):
                                            self.group_flag = value
                                            self.group_flag.value_namespace = name_space
                                            self.group_flag.value_namespace_prefix = name_space_prefix
                                        if(value_path == "hardware-revision"):
                                            self.hardware_revision = value
                                            self.hardware_revision.value_namespace = name_space
                                            self.hardware_revision.value_namespace_prefix = name_space_prefix
                                        if(value_path == "is-field-replaceable-unit"):
                                            self.is_field_replaceable_unit = value
                                            self.is_field_replaceable_unit.value_namespace = name_space
                                            self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                        if(value_path == "manufacturer-asset-tags"):
                                            self.manufacturer_asset_tags = value
                                            self.manufacturer_asset_tags.value_namespace = name_space
                                            self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                        if(value_path == "manufacturer-name"):
                                            self.manufacturer_name = value
                                            self.manufacturer_name.value_namespace = name_space
                                            self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "memory-size"):
                                            self.memory_size = value
                                            self.memory_size.value_namespace = name_space
                                            self.memory_size.value_namespace_prefix = name_space_prefix
                                        if(value_path == "model-name"):
                                            self.model_name = value
                                            self.model_name.value_namespace = name_space
                                            self.model_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "new-deviation-number"):
                                            self.new_deviation_number = value
                                            self.new_deviation_number.value_namespace = name_space
                                            self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                        if(value_path == "physical-layer-interface-module-type"):
                                            self.physical_layer_interface_module_type = value
                                            self.physical_layer_interface_module_type.value_namespace = name_space
                                            self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "redundancystate"):
                                            self.redundancystate = value
                                            self.redundancystate.value_namespace = name_space
                                            self.redundancystate.value_namespace_prefix = name_space_prefix
                                        if(value_path == "serial-number"):
                                            self.serial_number = value
                                            self.serial_number.value_namespace = name_space
                                            self.serial_number.value_namespace_prefix = name_space_prefix
                                        if(value_path == "software-revision"):
                                            self.software_revision = value
                                            self.software_revision.value_namespace = name_space
                                            self.software_revision.value_namespace_prefix = name_space_prefix
                                        if(value_path == "unique-id"):
                                            self.unique_id = value
                                            self.unique_id.value_namespace = name_space
                                            self.unique_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "unrecognized-fru"):
                                            self.unrecognized_fru = value
                                            self.unrecognized_fru.value_namespace = name_space
                                            self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                        if(value_path == "vendor-type"):
                                            self.vendor_type = value
                                            self.vendor_type.value_namespace = name_space
                                            self.vendor_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "xr-scoped"):
                                            self.xr_scoped = value
                                            self.xr_scoped.value_namespace = name_space
                                            self.xr_scoped.value_namespace_prefix = name_space_prefix


                                class FruInfo(Entity):
                                    """
                                    Field Replaceable Unit (FRU) inventory
                                    information
                                    
                                    .. attribute:: card_administrative_state
                                    
                                    	card admin state\: shutdown or not
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: card_monitor_state
                                    
                                    	card is monitored by a manager or left unmonitored
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: card_operational_state
                                    
                                    	card operation state
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: card_reset_reason
                                    
                                    	card reset reason enum
                                    	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                                    
                                    .. attribute:: card_up_time
                                    
                                    	card up time
                                    	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.CardUpTime>`
                                    
                                    .. attribute:: last_operational_state_change
                                    
                                    	last card oper change state
                                    	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.LastOperationalStateChange>`
                                    
                                    .. attribute:: power_administrative_state
                                    
                                    	power admin state\: up or down
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: power_current_measurement
                                    
                                    	power current\: not implemented
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: power_operational_state
                                    
                                    	Power operation state
                                    	**type**\:  int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'asr9k-sc-invmgr-oper'
                                    _revision = '2017-01-04'

                                    def __init__(self):
                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo, self).__init__()

                                        self.yang_name = "fru-info"
                                        self.yang_parent_name = "basic-attributes"

                                        self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                        self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                        self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                        self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                        self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                        self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                        self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                        self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.CardUpTime()
                                        self.card_up_time.parent = self
                                        self._children_name_map["card_up_time"] = "card-up-time"
                                        self._children_yang_names.add("card-up-time")

                                        self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.LastOperationalStateChange()
                                        self.last_operational_state_change.parent = self
                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                        self._children_yang_names.add("last-operational-state-change")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("card_administrative_state",
                                                        "card_monitor_state",
                                                        "card_operational_state",
                                                        "card_reset_reason",
                                                        "power_administrative_state",
                                                        "power_current_measurement",
                                                        "power_operational_state") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo, self).__setattr__(name, value)


                                    class LastOperationalStateChange(Entity):
                                        """
                                        last card oper change state
                                        
                                        .. attribute:: time_in_nano_seconds
                                        
                                        	Time Value in Nano\-seconds
                                        	**type**\:  int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        	**units**\: nanosecond
                                        
                                        .. attribute:: time_in_seconds
                                        
                                        	Time Value in Seconds
                                        	**type**\:  int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        	**units**\: second
                                        
                                        

                                        """

                                        _prefix = 'asr9k-sc-invmgr-oper'
                                        _revision = '2017-01-04'

                                        def __init__(self):
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                            self.yang_name = "last-operational-state-change"
                                            self.yang_parent_name = "fru-info"

                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_in_nano_seconds",
                                                            "time_in_seconds") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.time_in_nano_seconds.is_set or
                                                self.time_in_seconds.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "last-operational-state-change" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-in-nano-seconds"):
                                                self.time_in_nano_seconds = value
                                                self.time_in_nano_seconds.value_namespace = name_space
                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                            if(value_path == "time-in-seconds"):
                                                self.time_in_seconds = value
                                                self.time_in_seconds.value_namespace = name_space
                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix


                                    class CardUpTime(Entity):
                                        """
                                        card up time
                                        
                                        .. attribute:: time_in_nano_seconds
                                        
                                        	Time Value in Nano\-seconds
                                        	**type**\:  int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        	**units**\: nanosecond
                                        
                                        .. attribute:: time_in_seconds
                                        
                                        	Time Value in Seconds
                                        	**type**\:  int
                                        
                                        	**range:** \-2147483648..2147483647
                                        
                                        	**units**\: second
                                        
                                        

                                        """

                                        _prefix = 'asr9k-sc-invmgr-oper'
                                        _revision = '2017-01-04'

                                        def __init__(self):
                                            super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                            self.yang_name = "card-up-time"
                                            self.yang_parent_name = "fru-info"

                                            self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                            self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("time_in_nano_seconds",
                                                            "time_in_seconds") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.time_in_nano_seconds.is_set or
                                                self.time_in_seconds.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                                self.time_in_seconds.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "card-up-time" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                            if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "time-in-nano-seconds"):
                                                self.time_in_nano_seconds = value
                                                self.time_in_nano_seconds.value_namespace = name_space
                                                self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                            if(value_path == "time-in-seconds"):
                                                self.time_in_seconds = value
                                                self.time_in_seconds.value_namespace = name_space
                                                self.time_in_seconds.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.card_administrative_state.is_set or
                                            self.card_monitor_state.is_set or
                                            self.card_operational_state.is_set or
                                            self.card_reset_reason.is_set or
                                            self.power_administrative_state.is_set or
                                            self.power_current_measurement.is_set or
                                            self.power_operational_state.is_set or
                                            (self.card_up_time is not None and self.card_up_time.has_data()) or
                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.card_administrative_state.yfilter != YFilter.not_set or
                                            self.card_monitor_state.yfilter != YFilter.not_set or
                                            self.card_operational_state.yfilter != YFilter.not_set or
                                            self.card_reset_reason.yfilter != YFilter.not_set or
                                            self.power_administrative_state.yfilter != YFilter.not_set or
                                            self.power_current_measurement.yfilter != YFilter.not_set or
                                            self.power_operational_state.yfilter != YFilter.not_set or
                                            (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                            (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "fru-info" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                        if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                        if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                        if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                        if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                        if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                        if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "card-up-time"):
                                            if (self.card_up_time is None):
                                                self.card_up_time = Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.CardUpTime()
                                                self.card_up_time.parent = self
                                                self._children_name_map["card_up_time"] = "card-up-time"
                                            return self.card_up_time

                                        if (child_yang_name == "last-operational-state-change"):
                                            if (self.last_operational_state_change is None):
                                                self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo.LastOperationalStateChange()
                                                self.last_operational_state_change.parent = self
                                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                            return self.last_operational_state_change

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "card-administrative-state"):
                                            self.card_administrative_state = value
                                            self.card_administrative_state.value_namespace = name_space
                                            self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                        if(value_path == "card-monitor-state"):
                                            self.card_monitor_state = value
                                            self.card_monitor_state.value_namespace = name_space
                                            self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                        if(value_path == "card-operational-state"):
                                            self.card_operational_state = value
                                            self.card_operational_state.value_namespace = name_space
                                            self.card_operational_state.value_namespace_prefix = name_space_prefix
                                        if(value_path == "card-reset-reason"):
                                            self.card_reset_reason = value
                                            self.card_reset_reason.value_namespace = name_space
                                            self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                        if(value_path == "power-administrative-state"):
                                            self.power_administrative_state = value
                                            self.power_administrative_state.value_namespace = name_space
                                            self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                        if(value_path == "power-current-measurement"):
                                            self.power_current_measurement = value
                                            self.power_current_measurement.value_namespace = name_space
                                            self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                        if(value_path == "power-operational-state"):
                                            self.power_operational_state = value
                                            self.power_operational_state.value_namespace = name_space
                                            self.power_operational_state.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        (self.basic_info is not None and self.basic_info.has_data()) or
                                        (self.fru_info is not None and self.fru_info.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.basic_info is not None and self.basic_info.has_operation()) or
                                        (self.fru_info is not None and self.fru_info.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "basic-attributes" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "basic-info"):
                                        if (self.basic_info is None):
                                            self.basic_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.BasicInfo()
                                            self.basic_info.parent = self
                                            self._children_name_map["basic_info"] = "basic-info"
                                        return self.basic_info

                                    if (child_yang_name == "fru-info"):
                                        if (self.fru_info is None):
                                            self.fru_info = Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes.FruInfo()
                                            self.fru_info.parent = self
                                            self._children_name_map["fru_info"] = "fru-info"
                                        return self.fru_info

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "basic-info" or name == "fru-info"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    self.number.is_set or
                                    (self.basic_attributes is not None and self.basic_attributes.has_data()) or
                                    (self.hw_components is not None and self.hw_components.has_data()) or
                                    (self.port_slots is not None and self.port_slots.has_data()) or
                                    (self.sensors is not None and self.sensors.has_data()) or
                                    (self.sub_slots is not None and self.sub_slots.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.number.yfilter != YFilter.not_set or
                                    (self.basic_attributes is not None and self.basic_attributes.has_operation()) or
                                    (self.hw_components is not None and self.hw_components.has_operation()) or
                                    (self.port_slots is not None and self.port_slots.has_operation()) or
                                    (self.sensors is not None and self.sensors.has_operation()) or
                                    (self.sub_slots is not None and self.sub_slots.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "card" + "[number='" + self.number.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.number.is_set or self.number.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.number.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "basic-attributes"):
                                    if (self.basic_attributes is None):
                                        self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.Cards.Card.BasicAttributes()
                                        self.basic_attributes.parent = self
                                        self._children_name_map["basic_attributes"] = "basic-attributes"
                                    return self.basic_attributes

                                if (child_yang_name == "hw-components"):
                                    if (self.hw_components is None):
                                        self.hw_components = Inventory.Racks.Rack.Slots.Slot.Cards.Card.HwComponents()
                                        self.hw_components.parent = self
                                        self._children_name_map["hw_components"] = "hw-components"
                                    return self.hw_components

                                if (child_yang_name == "port-slots"):
                                    if (self.port_slots is None):
                                        self.port_slots = Inventory.Racks.Rack.Slots.Slot.Cards.Card.PortSlots()
                                        self.port_slots.parent = self
                                        self._children_name_map["port_slots"] = "port-slots"
                                    return self.port_slots

                                if (child_yang_name == "sensors"):
                                    if (self.sensors is None):
                                        self.sensors = Inventory.Racks.Rack.Slots.Slot.Cards.Card.Sensors()
                                        self.sensors.parent = self
                                        self._children_name_map["sensors"] = "sensors"
                                    return self.sensors

                                if (child_yang_name == "sub-slots"):
                                    if (self.sub_slots is None):
                                        self.sub_slots = Inventory.Racks.Rack.Slots.Slot.Cards.Card.SubSlots()
                                        self.sub_slots.parent = self
                                        self._children_name_map["sub_slots"] = "sub-slots"
                                    return self.sub_slots

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "basic-attributes" or name == "hw-components" or name == "port-slots" or name == "sensors" or name == "sub-slots" or name == "number"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "number"):
                                    self.number = value
                                    self.number.value_namespace = name_space
                                    self.number.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.card:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.card:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "cards" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "card"):
                                for c in self.card:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Inventory.Racks.Rack.Slots.Slot.Cards.Card()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.card.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "card"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class BasicAttributes(Entity):
                        """
                        Attributes
                        
                        .. attribute:: basic_info
                        
                        	Inventory information
                        	**type**\:   :py:class:`BasicInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.BasicAttributes.BasicInfo>`
                        
                        .. attribute:: fru_info
                        
                        	Field Replaceable Unit (FRU) inventory information
                        	**type**\:   :py:class:`FruInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo>`
                        
                        

                        """

                        _prefix = 'asr9k-sc-invmgr-oper'
                        _revision = '2017-01-04'

                        def __init__(self):
                            super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes, self).__init__()

                            self.yang_name = "basic-attributes"
                            self.yang_parent_name = "slot"

                            self.basic_info = Inventory.Racks.Rack.Slots.Slot.BasicAttributes.BasicInfo()
                            self.basic_info.parent = self
                            self._children_name_map["basic_info"] = "basic-info"
                            self._children_yang_names.add("basic-info")

                            self.fru_info = Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo()
                            self.fru_info.parent = self
                            self._children_name_map["fru_info"] = "fru-info"
                            self._children_yang_names.add("fru-info")


                        class BasicInfo(Entity):
                            """
                            Inventory information
                            
                            .. attribute:: alias
                            
                            	useful for storing an entity alias 
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: asset_id_str
                            
                            	asset Identification string
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: asset_identification
                            
                            	asset Identification
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: ceport
                            
                            	1 if ce port found, 0 if not
                            	**type**\:  bool
                            
                            .. attribute:: chip_hardware_revision
                            
                            	chip module hw revision string
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: composite_class_code
                            
                            	Major&minor class of the entity
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: description
                            
                            	describes in user\-readable terms       what the entity in question does
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: environmental_monitor_path
                            
                            	sysdb name of sensor in the envmon EDM
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: firmware_revision
                            
                            	firmware revision string
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: group_flag
                            
                            	indicates if this entity is group       or not
                            	**type**\:  bool
                            
                            .. attribute:: hardware_revision
                            
                            	hw revision string
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: is_field_replaceable_unit
                            
                            	1 if Field Replaceable Unit 0, if not
                            	**type**\:  bool
                            
                            .. attribute:: manufacturer_asset_tags
                            
                            	Manufacture Asset Tags
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: manufacturer_name
                            
                            	manufacturer's name
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: memory_size
                            
                            	Size of memory associated with       the entity where applicable
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: model_name
                            
                            	model name
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: name
                            
                            	name string for the entity
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: new_deviation_number
                            
                            	integer value for New Deviation Number 0x88
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: physical_layer_interface_module_type
                            
                            	integer value for plim type if     applicable to this entity
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: redundancystate
                            
                            	integer value for Redundancy State if     applicable to this entity
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: serial_number
                            
                            	serial number
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: software_revision
                            
                            	software revision string
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: unique_id
                            
                            	Unique id for an entity
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: unrecognized_fru
                            
                            	1 if UnrecognizedFRU and 0 for recognizedFRU
                            	**type**\:  bool
                            
                            .. attribute:: vendor_type
                            
                            	maps to the vendor OID string
                            	**type**\:  str
                            
                            	**length:** 0..255
                            
                            .. attribute:: xr_scoped
                            
                            	1 if xr scoped, 0 if not
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'asr9k-sc-invmgr-oper'
                            _revision = '2017-01-04'

                            def __init__(self):
                                super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.BasicInfo, self).__init__()

                                self.yang_name = "basic-info"
                                self.yang_parent_name = "basic-attributes"

                                self.alias = YLeaf(YType.str, "alias")

                                self.asset_id_str = YLeaf(YType.str, "asset-id-str")

                                self.asset_identification = YLeaf(YType.int32, "asset-identification")

                                self.ceport = YLeaf(YType.boolean, "ceport")

                                self.chip_hardware_revision = YLeaf(YType.str, "chip-hardware-revision")

                                self.composite_class_code = YLeaf(YType.int32, "composite-class-code")

                                self.description = YLeaf(YType.str, "description")

                                self.environmental_monitor_path = YLeaf(YType.str, "environmental-monitor-path")

                                self.firmware_revision = YLeaf(YType.str, "firmware-revision")

                                self.group_flag = YLeaf(YType.boolean, "group-flag")

                                self.hardware_revision = YLeaf(YType.str, "hardware-revision")

                                self.is_field_replaceable_unit = YLeaf(YType.boolean, "is-field-replaceable-unit")

                                self.manufacturer_asset_tags = YLeaf(YType.int32, "manufacturer-asset-tags")

                                self.manufacturer_name = YLeaf(YType.str, "manufacturer-name")

                                self.memory_size = YLeaf(YType.int32, "memory-size")

                                self.model_name = YLeaf(YType.str, "model-name")

                                self.name = YLeaf(YType.str, "name")

                                self.new_deviation_number = YLeaf(YType.int32, "new-deviation-number")

                                self.physical_layer_interface_module_type = YLeaf(YType.int32, "physical-layer-interface-module-type")

                                self.redundancystate = YLeaf(YType.int32, "redundancystate")

                                self.serial_number = YLeaf(YType.str, "serial-number")

                                self.software_revision = YLeaf(YType.str, "software-revision")

                                self.unique_id = YLeaf(YType.int32, "unique-id")

                                self.unrecognized_fru = YLeaf(YType.boolean, "unrecognized-fru")

                                self.vendor_type = YLeaf(YType.str, "vendor-type")

                                self.xr_scoped = YLeaf(YType.boolean, "xr-scoped")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("alias",
                                                "asset_id_str",
                                                "asset_identification",
                                                "ceport",
                                                "chip_hardware_revision",
                                                "composite_class_code",
                                                "description",
                                                "environmental_monitor_path",
                                                "firmware_revision",
                                                "group_flag",
                                                "hardware_revision",
                                                "is_field_replaceable_unit",
                                                "manufacturer_asset_tags",
                                                "manufacturer_name",
                                                "memory_size",
                                                "model_name",
                                                "name",
                                                "new_deviation_number",
                                                "physical_layer_interface_module_type",
                                                "redundancystate",
                                                "serial_number",
                                                "software_revision",
                                                "unique_id",
                                                "unrecognized_fru",
                                                "vendor_type",
                                                "xr_scoped") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.BasicInfo, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.BasicInfo, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.alias.is_set or
                                    self.asset_id_str.is_set or
                                    self.asset_identification.is_set or
                                    self.ceport.is_set or
                                    self.chip_hardware_revision.is_set or
                                    self.composite_class_code.is_set or
                                    self.description.is_set or
                                    self.environmental_monitor_path.is_set or
                                    self.firmware_revision.is_set or
                                    self.group_flag.is_set or
                                    self.hardware_revision.is_set or
                                    self.is_field_replaceable_unit.is_set or
                                    self.manufacturer_asset_tags.is_set or
                                    self.manufacturer_name.is_set or
                                    self.memory_size.is_set or
                                    self.model_name.is_set or
                                    self.name.is_set or
                                    self.new_deviation_number.is_set or
                                    self.physical_layer_interface_module_type.is_set or
                                    self.redundancystate.is_set or
                                    self.serial_number.is_set or
                                    self.software_revision.is_set or
                                    self.unique_id.is_set or
                                    self.unrecognized_fru.is_set or
                                    self.vendor_type.is_set or
                                    self.xr_scoped.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.alias.yfilter != YFilter.not_set or
                                    self.asset_id_str.yfilter != YFilter.not_set or
                                    self.asset_identification.yfilter != YFilter.not_set or
                                    self.ceport.yfilter != YFilter.not_set or
                                    self.chip_hardware_revision.yfilter != YFilter.not_set or
                                    self.composite_class_code.yfilter != YFilter.not_set or
                                    self.description.yfilter != YFilter.not_set or
                                    self.environmental_monitor_path.yfilter != YFilter.not_set or
                                    self.firmware_revision.yfilter != YFilter.not_set or
                                    self.group_flag.yfilter != YFilter.not_set or
                                    self.hardware_revision.yfilter != YFilter.not_set or
                                    self.is_field_replaceable_unit.yfilter != YFilter.not_set or
                                    self.manufacturer_asset_tags.yfilter != YFilter.not_set or
                                    self.manufacturer_name.yfilter != YFilter.not_set or
                                    self.memory_size.yfilter != YFilter.not_set or
                                    self.model_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set or
                                    self.new_deviation_number.yfilter != YFilter.not_set or
                                    self.physical_layer_interface_module_type.yfilter != YFilter.not_set or
                                    self.redundancystate.yfilter != YFilter.not_set or
                                    self.serial_number.yfilter != YFilter.not_set or
                                    self.software_revision.yfilter != YFilter.not_set or
                                    self.unique_id.yfilter != YFilter.not_set or
                                    self.unrecognized_fru.yfilter != YFilter.not_set or
                                    self.vendor_type.yfilter != YFilter.not_set or
                                    self.xr_scoped.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "basic-info" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.alias.is_set or self.alias.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.alias.get_name_leafdata())
                                if (self.asset_id_str.is_set or self.asset_id_str.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.asset_id_str.get_name_leafdata())
                                if (self.asset_identification.is_set or self.asset_identification.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.asset_identification.get_name_leafdata())
                                if (self.ceport.is_set or self.ceport.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ceport.get_name_leafdata())
                                if (self.chip_hardware_revision.is_set or self.chip_hardware_revision.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.chip_hardware_revision.get_name_leafdata())
                                if (self.composite_class_code.is_set or self.composite_class_code.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.composite_class_code.get_name_leafdata())
                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.description.get_name_leafdata())
                                if (self.environmental_monitor_path.is_set or self.environmental_monitor_path.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.environmental_monitor_path.get_name_leafdata())
                                if (self.firmware_revision.is_set or self.firmware_revision.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.firmware_revision.get_name_leafdata())
                                if (self.group_flag.is_set or self.group_flag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_flag.get_name_leafdata())
                                if (self.hardware_revision.is_set or self.hardware_revision.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.hardware_revision.get_name_leafdata())
                                if (self.is_field_replaceable_unit.is_set or self.is_field_replaceable_unit.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_field_replaceable_unit.get_name_leafdata())
                                if (self.manufacturer_asset_tags.is_set or self.manufacturer_asset_tags.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.manufacturer_asset_tags.get_name_leafdata())
                                if (self.manufacturer_name.is_set or self.manufacturer_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.manufacturer_name.get_name_leafdata())
                                if (self.memory_size.is_set or self.memory_size.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.memory_size.get_name_leafdata())
                                if (self.model_name.is_set or self.model_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.model_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())
                                if (self.new_deviation_number.is_set or self.new_deviation_number.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.new_deviation_number.get_name_leafdata())
                                if (self.physical_layer_interface_module_type.is_set or self.physical_layer_interface_module_type.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.physical_layer_interface_module_type.get_name_leafdata())
                                if (self.redundancystate.is_set or self.redundancystate.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.redundancystate.get_name_leafdata())
                                if (self.serial_number.is_set or self.serial_number.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.serial_number.get_name_leafdata())
                                if (self.software_revision.is_set or self.software_revision.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.software_revision.get_name_leafdata())
                                if (self.unique_id.is_set or self.unique_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unique_id.get_name_leafdata())
                                if (self.unrecognized_fru.is_set or self.unrecognized_fru.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unrecognized_fru.get_name_leafdata())
                                if (self.vendor_type.is_set or self.vendor_type.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vendor_type.get_name_leafdata())
                                if (self.xr_scoped.is_set or self.xr_scoped.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.xr_scoped.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "alias" or name == "asset-id-str" or name == "asset-identification" or name == "ceport" or name == "chip-hardware-revision" or name == "composite-class-code" or name == "description" or name == "environmental-monitor-path" or name == "firmware-revision" or name == "group-flag" or name == "hardware-revision" or name == "is-field-replaceable-unit" or name == "manufacturer-asset-tags" or name == "manufacturer-name" or name == "memory-size" or name == "model-name" or name == "name" or name == "new-deviation-number" or name == "physical-layer-interface-module-type" or name == "redundancystate" or name == "serial-number" or name == "software-revision" or name == "unique-id" or name == "unrecognized-fru" or name == "vendor-type" or name == "xr-scoped"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "alias"):
                                    self.alias = value
                                    self.alias.value_namespace = name_space
                                    self.alias.value_namespace_prefix = name_space_prefix
                                if(value_path == "asset-id-str"):
                                    self.asset_id_str = value
                                    self.asset_id_str.value_namespace = name_space
                                    self.asset_id_str.value_namespace_prefix = name_space_prefix
                                if(value_path == "asset-identification"):
                                    self.asset_identification = value
                                    self.asset_identification.value_namespace = name_space
                                    self.asset_identification.value_namespace_prefix = name_space_prefix
                                if(value_path == "ceport"):
                                    self.ceport = value
                                    self.ceport.value_namespace = name_space
                                    self.ceport.value_namespace_prefix = name_space_prefix
                                if(value_path == "chip-hardware-revision"):
                                    self.chip_hardware_revision = value
                                    self.chip_hardware_revision.value_namespace = name_space
                                    self.chip_hardware_revision.value_namespace_prefix = name_space_prefix
                                if(value_path == "composite-class-code"):
                                    self.composite_class_code = value
                                    self.composite_class_code.value_namespace = name_space
                                    self.composite_class_code.value_namespace_prefix = name_space_prefix
                                if(value_path == "description"):
                                    self.description = value
                                    self.description.value_namespace = name_space
                                    self.description.value_namespace_prefix = name_space_prefix
                                if(value_path == "environmental-monitor-path"):
                                    self.environmental_monitor_path = value
                                    self.environmental_monitor_path.value_namespace = name_space
                                    self.environmental_monitor_path.value_namespace_prefix = name_space_prefix
                                if(value_path == "firmware-revision"):
                                    self.firmware_revision = value
                                    self.firmware_revision.value_namespace = name_space
                                    self.firmware_revision.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-flag"):
                                    self.group_flag = value
                                    self.group_flag.value_namespace = name_space
                                    self.group_flag.value_namespace_prefix = name_space_prefix
                                if(value_path == "hardware-revision"):
                                    self.hardware_revision = value
                                    self.hardware_revision.value_namespace = name_space
                                    self.hardware_revision.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-field-replaceable-unit"):
                                    self.is_field_replaceable_unit = value
                                    self.is_field_replaceable_unit.value_namespace = name_space
                                    self.is_field_replaceable_unit.value_namespace_prefix = name_space_prefix
                                if(value_path == "manufacturer-asset-tags"):
                                    self.manufacturer_asset_tags = value
                                    self.manufacturer_asset_tags.value_namespace = name_space
                                    self.manufacturer_asset_tags.value_namespace_prefix = name_space_prefix
                                if(value_path == "manufacturer-name"):
                                    self.manufacturer_name = value
                                    self.manufacturer_name.value_namespace = name_space
                                    self.manufacturer_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "memory-size"):
                                    self.memory_size = value
                                    self.memory_size.value_namespace = name_space
                                    self.memory_size.value_namespace_prefix = name_space_prefix
                                if(value_path == "model-name"):
                                    self.model_name = value
                                    self.model_name.value_namespace = name_space
                                    self.model_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix
                                if(value_path == "new-deviation-number"):
                                    self.new_deviation_number = value
                                    self.new_deviation_number.value_namespace = name_space
                                    self.new_deviation_number.value_namespace_prefix = name_space_prefix
                                if(value_path == "physical-layer-interface-module-type"):
                                    self.physical_layer_interface_module_type = value
                                    self.physical_layer_interface_module_type.value_namespace = name_space
                                    self.physical_layer_interface_module_type.value_namespace_prefix = name_space_prefix
                                if(value_path == "redundancystate"):
                                    self.redundancystate = value
                                    self.redundancystate.value_namespace = name_space
                                    self.redundancystate.value_namespace_prefix = name_space_prefix
                                if(value_path == "serial-number"):
                                    self.serial_number = value
                                    self.serial_number.value_namespace = name_space
                                    self.serial_number.value_namespace_prefix = name_space_prefix
                                if(value_path == "software-revision"):
                                    self.software_revision = value
                                    self.software_revision.value_namespace = name_space
                                    self.software_revision.value_namespace_prefix = name_space_prefix
                                if(value_path == "unique-id"):
                                    self.unique_id = value
                                    self.unique_id.value_namespace = name_space
                                    self.unique_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "unrecognized-fru"):
                                    self.unrecognized_fru = value
                                    self.unrecognized_fru.value_namespace = name_space
                                    self.unrecognized_fru.value_namespace_prefix = name_space_prefix
                                if(value_path == "vendor-type"):
                                    self.vendor_type = value
                                    self.vendor_type.value_namespace = name_space
                                    self.vendor_type.value_namespace_prefix = name_space_prefix
                                if(value_path == "xr-scoped"):
                                    self.xr_scoped = value
                                    self.xr_scoped.value_namespace = name_space
                                    self.xr_scoped.value_namespace_prefix = name_space_prefix


                        class FruInfo(Entity):
                            """
                            Field Replaceable Unit (FRU) inventory
                            information
                            
                            .. attribute:: card_administrative_state
                            
                            	card admin state\: shutdown or not
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: card_monitor_state
                            
                            	card is monitored by a manager or left unmonitored
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: card_operational_state
                            
                            	card operation state
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: card_reset_reason
                            
                            	card reset reason enum
                            	**type**\:   :py:class:`CardResetReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.CardResetReason>`
                            
                            .. attribute:: card_up_time
                            
                            	card up time
                            	**type**\:   :py:class:`CardUpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.CardUpTime>`
                            
                            .. attribute:: last_operational_state_change
                            
                            	last card oper change state
                            	**type**\:   :py:class:`LastOperationalStateChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_sc_invmgr_oper.Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.LastOperationalStateChange>`
                            
                            .. attribute:: power_administrative_state
                            
                            	power admin state\: up or down
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: power_current_measurement
                            
                            	power current\: not implemented
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: power_operational_state
                            
                            	Power operation state
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'asr9k-sc-invmgr-oper'
                            _revision = '2017-01-04'

                            def __init__(self):
                                super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo, self).__init__()

                                self.yang_name = "fru-info"
                                self.yang_parent_name = "basic-attributes"

                                self.card_administrative_state = YLeaf(YType.int32, "card-administrative-state")

                                self.card_monitor_state = YLeaf(YType.int32, "card-monitor-state")

                                self.card_operational_state = YLeaf(YType.int32, "card-operational-state")

                                self.card_reset_reason = YLeaf(YType.enumeration, "card-reset-reason")

                                self.power_administrative_state = YLeaf(YType.int32, "power-administrative-state")

                                self.power_current_measurement = YLeaf(YType.int32, "power-current-measurement")

                                self.power_operational_state = YLeaf(YType.int32, "power-operational-state")

                                self.card_up_time = Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.CardUpTime()
                                self.card_up_time.parent = self
                                self._children_name_map["card_up_time"] = "card-up-time"
                                self._children_yang_names.add("card-up-time")

                                self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.LastOperationalStateChange()
                                self.last_operational_state_change.parent = self
                                self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                self._children_yang_names.add("last-operational-state-change")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("card_administrative_state",
                                                "card_monitor_state",
                                                "card_operational_state",
                                                "card_reset_reason",
                                                "power_administrative_state",
                                                "power_current_measurement",
                                                "power_operational_state") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo, self).__setattr__(name, value)


                            class LastOperationalStateChange(Entity):
                                """
                                last card oper change state
                                
                                .. attribute:: time_in_nano_seconds
                                
                                	Time Value in Nano\-seconds
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_in_seconds
                                
                                	Time Value in Seconds
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'asr9k-sc-invmgr-oper'
                                _revision = '2017-01-04'

                                def __init__(self):
                                    super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__init__()

                                    self.yang_name = "last-operational-state-change"
                                    self.yang_parent_name = "fru-info"

                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("time_in_nano_seconds",
                                                    "time_in_seconds") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.LastOperationalStateChange, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.time_in_nano_seconds.is_set or
                                        self.time_in_seconds.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "last-operational-state-change" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "time-in-nano-seconds"):
                                        self.time_in_nano_seconds = value
                                        self.time_in_nano_seconds.value_namespace = name_space
                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                    if(value_path == "time-in-seconds"):
                                        self.time_in_seconds = value
                                        self.time_in_seconds.value_namespace = name_space
                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix


                            class CardUpTime(Entity):
                                """
                                card up time
                                
                                .. attribute:: time_in_nano_seconds
                                
                                	Time Value in Nano\-seconds
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_in_seconds
                                
                                	Time Value in Seconds
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'asr9k-sc-invmgr-oper'
                                _revision = '2017-01-04'

                                def __init__(self):
                                    super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.CardUpTime, self).__init__()

                                    self.yang_name = "card-up-time"
                                    self.yang_parent_name = "fru-info"

                                    self.time_in_nano_seconds = YLeaf(YType.int32, "time-in-nano-seconds")

                                    self.time_in_seconds = YLeaf(YType.int32, "time-in-seconds")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("time_in_nano_seconds",
                                                    "time_in_seconds") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.CardUpTime, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.time_in_nano_seconds.is_set or
                                        self.time_in_seconds.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.time_in_nano_seconds.yfilter != YFilter.not_set or
                                        self.time_in_seconds.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "card-up-time" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.time_in_nano_seconds.is_set or self.time_in_nano_seconds.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_in_nano_seconds.get_name_leafdata())
                                    if (self.time_in_seconds.is_set or self.time_in_seconds.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_in_seconds.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "time-in-nano-seconds" or name == "time-in-seconds"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "time-in-nano-seconds"):
                                        self.time_in_nano_seconds = value
                                        self.time_in_nano_seconds.value_namespace = name_space
                                        self.time_in_nano_seconds.value_namespace_prefix = name_space_prefix
                                    if(value_path == "time-in-seconds"):
                                        self.time_in_seconds = value
                                        self.time_in_seconds.value_namespace = name_space
                                        self.time_in_seconds.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.card_administrative_state.is_set or
                                    self.card_monitor_state.is_set or
                                    self.card_operational_state.is_set or
                                    self.card_reset_reason.is_set or
                                    self.power_administrative_state.is_set or
                                    self.power_current_measurement.is_set or
                                    self.power_operational_state.is_set or
                                    (self.card_up_time is not None and self.card_up_time.has_data()) or
                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.card_administrative_state.yfilter != YFilter.not_set or
                                    self.card_monitor_state.yfilter != YFilter.not_set or
                                    self.card_operational_state.yfilter != YFilter.not_set or
                                    self.card_reset_reason.yfilter != YFilter.not_set or
                                    self.power_administrative_state.yfilter != YFilter.not_set or
                                    self.power_current_measurement.yfilter != YFilter.not_set or
                                    self.power_operational_state.yfilter != YFilter.not_set or
                                    (self.card_up_time is not None and self.card_up_time.has_operation()) or
                                    (self.last_operational_state_change is not None and self.last_operational_state_change.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "fru-info" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.card_administrative_state.is_set or self.card_administrative_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.card_administrative_state.get_name_leafdata())
                                if (self.card_monitor_state.is_set or self.card_monitor_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.card_monitor_state.get_name_leafdata())
                                if (self.card_operational_state.is_set or self.card_operational_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.card_operational_state.get_name_leafdata())
                                if (self.card_reset_reason.is_set or self.card_reset_reason.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.card_reset_reason.get_name_leafdata())
                                if (self.power_administrative_state.is_set or self.power_administrative_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.power_administrative_state.get_name_leafdata())
                                if (self.power_current_measurement.is_set or self.power_current_measurement.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.power_current_measurement.get_name_leafdata())
                                if (self.power_operational_state.is_set or self.power_operational_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.power_operational_state.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "card-up-time"):
                                    if (self.card_up_time is None):
                                        self.card_up_time = Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.CardUpTime()
                                        self.card_up_time.parent = self
                                        self._children_name_map["card_up_time"] = "card-up-time"
                                    return self.card_up_time

                                if (child_yang_name == "last-operational-state-change"):
                                    if (self.last_operational_state_change is None):
                                        self.last_operational_state_change = Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo.LastOperationalStateChange()
                                        self.last_operational_state_change.parent = self
                                        self._children_name_map["last_operational_state_change"] = "last-operational-state-change"
                                    return self.last_operational_state_change

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "card-up-time" or name == "last-operational-state-change" or name == "card-administrative-state" or name == "card-monitor-state" or name == "card-operational-state" or name == "card-reset-reason" or name == "power-administrative-state" or name == "power-current-measurement" or name == "power-operational-state"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "card-administrative-state"):
                                    self.card_administrative_state = value
                                    self.card_administrative_state.value_namespace = name_space
                                    self.card_administrative_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "card-monitor-state"):
                                    self.card_monitor_state = value
                                    self.card_monitor_state.value_namespace = name_space
                                    self.card_monitor_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "card-operational-state"):
                                    self.card_operational_state = value
                                    self.card_operational_state.value_namespace = name_space
                                    self.card_operational_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "card-reset-reason"):
                                    self.card_reset_reason = value
                                    self.card_reset_reason.value_namespace = name_space
                                    self.card_reset_reason.value_namespace_prefix = name_space_prefix
                                if(value_path == "power-administrative-state"):
                                    self.power_administrative_state = value
                                    self.power_administrative_state.value_namespace = name_space
                                    self.power_administrative_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "power-current-measurement"):
                                    self.power_current_measurement = value
                                    self.power_current_measurement.value_namespace = name_space
                                    self.power_current_measurement.value_namespace_prefix = name_space_prefix
                                if(value_path == "power-operational-state"):
                                    self.power_operational_state = value
                                    self.power_operational_state.value_namespace = name_space
                                    self.power_operational_state.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                (self.basic_info is not None and self.basic_info.has_data()) or
                                (self.fru_info is not None and self.fru_info.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.basic_info is not None and self.basic_info.has_operation()) or
                                (self.fru_info is not None and self.fru_info.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "basic-attributes" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "basic-info"):
                                if (self.basic_info is None):
                                    self.basic_info = Inventory.Racks.Rack.Slots.Slot.BasicAttributes.BasicInfo()
                                    self.basic_info.parent = self
                                    self._children_name_map["basic_info"] = "basic-info"
                                return self.basic_info

                            if (child_yang_name == "fru-info"):
                                if (self.fru_info is None):
                                    self.fru_info = Inventory.Racks.Rack.Slots.Slot.BasicAttributes.FruInfo()
                                    self.fru_info.parent = self
                                    self._children_name_map["fru_info"] = "fru-info"
                                return self.fru_info

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "basic-info" or name == "fru-info"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.number.is_set or
                            (self.basic_attributes is not None and self.basic_attributes.has_data()) or
                            (self.cards is not None and self.cards.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.number.yfilter != YFilter.not_set or
                            (self.basic_attributes is not None and self.basic_attributes.has_operation()) or
                            (self.cards is not None and self.cards.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "slot" + "[number='" + self.number.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.number.is_set or self.number.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.number.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "basic-attributes"):
                            if (self.basic_attributes is None):
                                self.basic_attributes = Inventory.Racks.Rack.Slots.Slot.BasicAttributes()
                                self.basic_attributes.parent = self
                                self._children_name_map["basic_attributes"] = "basic-attributes"
                            return self.basic_attributes

                        if (child_yang_name == "cards"):
                            if (self.cards is None):
                                self.cards = Inventory.Racks.Rack.Slots.Slot.Cards()
                                self.cards.parent = self
                                self._children_name_map["cards"] = "cards"
                            return self.cards

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "basic-attributes" or name == "cards" or name == "number"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "number"):
                            self.number = value
                            self.number.value_namespace = name_space
                            self.number.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.slot:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.slot:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "slots" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "slot"):
                        for c in self.slot:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Inventory.Racks.Rack.Slots.Slot()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.slot.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "slot"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    self.number.is_set or
                    (self.slots is not None and self.slots.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.number.yfilter != YFilter.not_set or
                    (self.slots is not None and self.slots.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "rack" + "[number='" + self.number.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-asr9k-sc-invmgr-oper:inventory/racks/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.number.is_set or self.number.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.number.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "slots"):
                    if (self.slots is None):
                        self.slots = Inventory.Racks.Rack.Slots()
                        self.slots.parent = self
                        self._children_name_map["slots"] = "slots"
                    return self.slots

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "slots" or name == "number"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "number"):
                    self.number = value
                    self.number.value_namespace = name_space
                    self.number.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.rack:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.rack:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "racks" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-asr9k-sc-invmgr-oper:inventory/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "rack"):
                for c in self.rack:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = Inventory.Racks.Rack()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.rack.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "rack"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (self.racks is not None and self.racks.has_data())

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.racks is not None and self.racks.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-asr9k-sc-invmgr-oper:inventory" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "racks"):
            if (self.racks is None):
                self.racks = Inventory.Racks()
                self.racks.parent = self
                self._children_name_map["racks"] = "racks"
            return self.racks

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "racks"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = Inventory()
        return self._top_entity

