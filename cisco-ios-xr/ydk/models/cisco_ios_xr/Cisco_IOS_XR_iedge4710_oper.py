""" Cisco_IOS_XR_iedge4710_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR iedge4710 package operational data.

This module contains definitions
for the following management objects\:
  subscriber\: Subscriber operational data
  iedge\-license\-manager\: iedge license manager

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class AaaAuthService(Enum):
    """
    AaaAuthService

    AAA authorization service types

    .. data:: none = 0

    	None

    .. data:: login = 1

    	Login

    .. data:: framed = 2

    	Framed

    .. data:: callback_login = 3

    	Callback login

    .. data:: callback_framed = 4

    	Callback framed

    .. data:: outbound = 5

    	Outbound

    .. data:: administrator = 6

    	Administrator

    .. data:: prompt = 7

    	Prompt

    .. data:: authentication_only = 8

    	Authentication only

    .. data:: callback_nas_prompt = 9

    	Callback NAS prompt

    .. data:: call_check = 10

    	Call check

    .. data:: callback_administrator = 11

    	Callback administrator

    .. data:: voice = 12

    	Voice

    .. data:: fax = 13

    	Fax

    .. data:: modem_relay = 14

    	Modem relay

    .. data:: eap_over_udp = 15

    	EAP over UDP

    """

    none = Enum.YLeaf(0, "none")

    login = Enum.YLeaf(1, "login")

    framed = Enum.YLeaf(2, "framed")

    callback_login = Enum.YLeaf(3, "callback-login")

    callback_framed = Enum.YLeaf(4, "callback-framed")

    outbound = Enum.YLeaf(5, "outbound")

    administrator = Enum.YLeaf(6, "administrator")

    prompt = Enum.YLeaf(7, "prompt")

    authentication_only = Enum.YLeaf(8, "authentication-only")

    callback_nas_prompt = Enum.YLeaf(9, "callback-nas-prompt")

    call_check = Enum.YLeaf(10, "call-check")

    callback_administrator = Enum.YLeaf(11, "callback-administrator")

    voice = Enum.YLeaf(12, "voice")

    fax = Enum.YLeaf(13, "fax")

    modem_relay = Enum.YLeaf(14, "modem-relay")

    eap_over_udp = Enum.YLeaf(15, "eap-over-udp")


class AaaInterface(Enum):
    """
    AaaInterface

    AAA interface types

    .. data:: none = 0

    	None

    .. data:: primary_rate = 1

    	Primary rate

    .. data:: basic_rate = 2

    	Basic rate

    .. data:: serial = 3

    	Serial

    .. data:: asynchronous = 4

    	Asynchronous

    .. data:: vty = 5

    	VTY

    .. data:: atm = 6

    	ATM

    .. data:: ethernet = 7

    	Ethernet

    .. data:: ppp_over_atm = 8

    	PPP over ATM

    .. data:: pppoe_over_atm = 9

    	PPPoE over ATM

    .. data:: pppoe_over_ethernet = 10

    	PPPoE over ethernet

    .. data:: ppp_over_vlan = 11

    	PPP over VLAN

    .. data:: ppp_over_qinq = 12

    	PPP over Q in Q

    .. data:: v120 = 13

    	V120

    .. data:: v110 = 14

    	V110

    .. data:: piafs = 15

    	PHS internet access forum standard

    .. data:: x75 = 16

    	X75

    .. data:: ip_sec = 17

    	IP sec

    .. data:: other = 18

    	Other

    .. data:: virtual_pppoe_over_ethernet = 19

    	Virtual PPPoE over ethernet

    .. data:: virtual_pppoe_over_vlan = 20

    	Virtual PPPoE over VLAN

    .. data:: virtual_pppoe_over_qinq = 21

    	Virtual PPPoE over Q in Q

    .. data:: ipo_e_over_ethernet = 22

    	IPoE over ethernet

    .. data:: ipo_e_over_vlan = 23

    	IPoE over VLAN

    .. data:: ipo_e_over_qinq = 24

    	IPoE over Q in Q

    .. data:: virtual_i_po_e_over_ethernet = 25

    	Virtual IPoE over ethernet

    .. data:: virtual_i_po_e_over_vlan = 26

    	Virtual IPoE over VLAN

    .. data:: virtual_i_po_e_over_qinq = 27

    	Virtual IPoE over Q in Q

    """

    none = Enum.YLeaf(0, "none")

    primary_rate = Enum.YLeaf(1, "primary-rate")

    basic_rate = Enum.YLeaf(2, "basic-rate")

    serial = Enum.YLeaf(3, "serial")

    asynchronous = Enum.YLeaf(4, "asynchronous")

    vty = Enum.YLeaf(5, "vty")

    atm = Enum.YLeaf(6, "atm")

    ethernet = Enum.YLeaf(7, "ethernet")

    ppp_over_atm = Enum.YLeaf(8, "ppp-over-atm")

    pppoe_over_atm = Enum.YLeaf(9, "pppoe-over-atm")

    pppoe_over_ethernet = Enum.YLeaf(10, "pppoe-over-ethernet")

    ppp_over_vlan = Enum.YLeaf(11, "ppp-over-vlan")

    ppp_over_qinq = Enum.YLeaf(12, "ppp-over-qinq")

    v120 = Enum.YLeaf(13, "v120")

    v110 = Enum.YLeaf(14, "v110")

    piafs = Enum.YLeaf(15, "piafs")

    x75 = Enum.YLeaf(16, "x75")

    ip_sec = Enum.YLeaf(17, "ip-sec")

    other = Enum.YLeaf(18, "other")

    virtual_pppoe_over_ethernet = Enum.YLeaf(19, "virtual-pppoe-over-ethernet")

    virtual_pppoe_over_vlan = Enum.YLeaf(20, "virtual-pppoe-over-vlan")

    virtual_pppoe_over_qinq = Enum.YLeaf(21, "virtual-pppoe-over-qinq")

    ipo_e_over_ethernet = Enum.YLeaf(22, "ipo-e-over-ethernet")

    ipo_e_over_vlan = Enum.YLeaf(23, "ipo-e-over-vlan")

    ipo_e_over_qinq = Enum.YLeaf(24, "ipo-e-over-qinq")

    virtual_i_po_e_over_ethernet = Enum.YLeaf(25, "virtual-i-po-e-over-ethernet")

    virtual_i_po_e_over_vlan = Enum.YLeaf(26, "virtual-i-po-e-over-vlan")

    virtual_i_po_e_over_qinq = Enum.YLeaf(27, "virtual-i-po-e-over-qinq")


class AaaTerminateCause(Enum):
    """
    AaaTerminateCause

    AAA terminate cause types

    .. data:: none = 0

    	None

    .. data:: user_request = 1

    	User request

    .. data:: lost_carrier = 2

    	Lost carrier

    .. data:: lost_service = 3

    	Lost service

    .. data:: idle_timeout = 4

    	Idle timeout

    .. data:: session_timeout = 5

    	Session timeout

    .. data:: admin_reset = 6

    	Admin reset

    .. data:: admin_reboot = 7

    	Admin reboot

    .. data:: port_error = 8

    	Port error

    .. data:: nas_error = 9

    	NAS error

    .. data:: nas_request = 10

    	NAS request

    .. data:: nas_reboot = 11

    	NAS reboot

    .. data:: port_unneeded = 12

    	Port unneeded

    .. data:: port_preempted = 13

    	Port preempted

    .. data:: port_suspended = 14

    	Port suspended

    .. data:: service_unavailable = 15

    	Service unavailable

    .. data:: callback = 16

    	Callback

    .. data:: user_error = 17

    	User error

    .. data:: host_request = 18

    	Host request

    .. data:: supplicant_restart = 19

    	Supplicant restart

    .. data:: reauthorization_failure = 20

    	Reauthorization failure

    .. data:: port_reinitialized = 21

    	Port reinitialized

    .. data:: admin_disabled = 22

    	Admin disabled

    """

    none = Enum.YLeaf(0, "none")

    user_request = Enum.YLeaf(1, "user-request")

    lost_carrier = Enum.YLeaf(2, "lost-carrier")

    lost_service = Enum.YLeaf(3, "lost-service")

    idle_timeout = Enum.YLeaf(4, "idle-timeout")

    session_timeout = Enum.YLeaf(5, "session-timeout")

    admin_reset = Enum.YLeaf(6, "admin-reset")

    admin_reboot = Enum.YLeaf(7, "admin-reboot")

    port_error = Enum.YLeaf(8, "port-error")

    nas_error = Enum.YLeaf(9, "nas-error")

    nas_request = Enum.YLeaf(10, "nas-request")

    nas_reboot = Enum.YLeaf(11, "nas-reboot")

    port_unneeded = Enum.YLeaf(12, "port-unneeded")

    port_preempted = Enum.YLeaf(13, "port-preempted")

    port_suspended = Enum.YLeaf(14, "port-suspended")

    service_unavailable = Enum.YLeaf(15, "service-unavailable")

    callback = Enum.YLeaf(16, "callback")

    user_error = Enum.YLeaf(17, "user-error")

    host_request = Enum.YLeaf(18, "host-request")

    supplicant_restart = Enum.YLeaf(19, "supplicant-restart")

    reauthorization_failure = Enum.YLeaf(20, "reauthorization-failure")

    port_reinitialized = Enum.YLeaf(21, "port-reinitialized")

    admin_disabled = Enum.YLeaf(22, "admin-disabled")


class AaaTunnelMedium(Enum):
    """
    AaaTunnelMedium

    Tunnel medium types

    .. data:: none = 0

    	None

    .. data:: ipv4 = 1

    	IPv4

    .. data:: ipv6 = 2

    	IPv6

    .. data:: nsap = 3

    	NSAP

    .. data:: hdlc = 4

    	HDLC

    .. data:: bbn = 5

    	BBN

    .. data:: all802 = 6

    	ALL 802

    """

    none = Enum.YLeaf(0, "none")

    ipv4 = Enum.YLeaf(1, "ipv4")

    ipv6 = Enum.YLeaf(2, "ipv6")

    nsap = Enum.YLeaf(3, "nsap")

    hdlc = Enum.YLeaf(4, "hdlc")

    bbn = Enum.YLeaf(5, "bbn")

    all802 = Enum.YLeaf(6, "all802")


class AaaTunnelProto(Enum):
    """
    AaaTunnelProto

    Tunnel protocol types

    .. data:: none = 0

    	None

    .. data:: pptp = 1

    	Point-to-point tunneling protocol

    .. data:: l2f = 2

    	Layer 2 forwarding

    .. data:: l2tp = 3

    	Layer 2 tunneling protocol

    .. data:: atmp = 4

    	Ascend tunnel management protocol

    .. data:: vtp = 5

    	VLAN trunk protocol

    .. data:: ah = 6

    	Authentication header

    .. data:: ip_over_ip = 7

    	IP over IP

    .. data:: minimum_ip_over_ip = 8

    	Minimum IP over IP

    .. data:: esp = 9

    	Encapsulating security payload

    .. data:: gre = 10

    	Generic routing encapsulation

    .. data:: bay_dvs = 11

    	Bay dial virtual services

    .. data:: ip_in_ip = 12

    	IP in IP

    .. data:: vlan = 13

    	VLAN

    """

    none = Enum.YLeaf(0, "none")

    pptp = Enum.YLeaf(1, "pptp")

    l2f = Enum.YLeaf(2, "l2f")

    l2tp = Enum.YLeaf(3, "l2tp")

    atmp = Enum.YLeaf(4, "atmp")

    vtp = Enum.YLeaf(5, "vtp")

    ah = Enum.YLeaf(6, "ah")

    ip_over_ip = Enum.YLeaf(7, "ip-over-ip")

    minimum_ip_over_ip = Enum.YLeaf(8, "minimum-ip-over-ip")

    esp = Enum.YLeaf(9, "esp")

    gre = Enum.YLeaf(10, "gre")

    bay_dvs = Enum.YLeaf(11, "bay-dvs")

    ip_in_ip = Enum.YLeaf(12, "ip-in-ip")

    vlan = Enum.YLeaf(13, "vlan")


class IedgeOperSession(Enum):
    """
    IedgeOperSession

    Subscriber session types

    .. data:: unknown = 0

    	Unknown

    .. data:: pppoe = 1

    	PPPoE/PPP client

    .. data:: ppp = 2

    	PPP serial client

    .. data:: ip_packet_trigger = 3

    	IP subscriber - packet trigger

    .. data:: ip_packet_dhcp_trigger = 4

    	IP subscriber - DHCP trigger

    """

    unknown = Enum.YLeaf(0, "unknown")

    pppoe = Enum.YLeaf(1, "pppoe")

    ppp = Enum.YLeaf(2, "ppp")

    ip_packet_trigger = Enum.YLeaf(3, "ip-packet-trigger")

    ip_packet_dhcp_trigger = Enum.YLeaf(4, "ip-packet-dhcp-trigger")


class IedgeOperSessionAfState(Enum):
    """
    IedgeOperSessionAfState

    Subscriber session address family state

    .. data:: not_started = 0

    	Not started

    .. data:: down = 1

    	Down

    .. data:: up_pending = 2

    	Up Pending

    .. data:: up = 3

    	Up

    """

    not_started = Enum.YLeaf(0, "not-started")

    down = Enum.YLeaf(1, "down")

    up_pending = Enum.YLeaf(2, "up-pending")

    up = Enum.YLeaf(3, "up")


class IedgeOperSessionState(Enum):
    """
    IedgeOperSessionState

    Subscriber session states

    .. data:: initialize = 0

    	Initialize

    .. data:: connecting = 1

    	Connecting

    .. data:: connected = 2

    	Connected

    .. data:: activated = 3

    	Activated

    .. data:: idle = 4

    	Idle

    .. data:: disconnecting = 5

    	Disconnecting

    .. data:: end = 6

    	End

    """

    initialize = Enum.YLeaf(0, "initialize")

    connecting = Enum.YLeaf(1, "connecting")

    connected = Enum.YLeaf(2, "connected")

    activated = Enum.YLeaf(3, "activated")

    idle = Enum.YLeaf(4, "idle")

    disconnecting = Enum.YLeaf(5, "disconnecting")

    end = Enum.YLeaf(6, "end")


class IedgePppSub(Enum):
    """
    IedgePppSub

    PPPoE sub types

    .. data:: pta = 0

    	PPP termination and aggregation

    .. data:: lac = 1

    	L2TP access controller

    """

    pta = Enum.YLeaf(0, "pta")

    lac = Enum.YLeaf(1, "lac")


class SubscriberAddressFamilyFilterFlag(Enum):
    """
    SubscriberAddressFamilyFilterFlag

    Subscriber address family filter flag

    .. data:: ipv4_only = 0

    	IPv4 only

    .. data:: ipv6_only = 1

    	IPv6 only

    .. data:: ipv4_all = 2

    	IPv4 all

    .. data:: ipv6_all = 3

    	IPv6 all

    .. data:: dual_all = 4

    	Dual all

    .. data:: dual_part_up = 5

    	Dual part up

    .. data:: dual_up = 6

    	Dual up

    .. data:: lac = 7

    	LAC

    """

    ipv4_only = Enum.YLeaf(0, "ipv4-only")

    ipv6_only = Enum.YLeaf(1, "ipv6-only")

    ipv4_all = Enum.YLeaf(2, "ipv4-all")

    ipv6_all = Enum.YLeaf(3, "ipv6-all")

    dual_all = Enum.YLeaf(4, "dual-all")

    dual_part_up = Enum.YLeaf(5, "dual-part-up")

    dual_up = Enum.YLeaf(6, "dual-up")

    lac = Enum.YLeaf(7, "lac")


class SubscriberAuthenStateFilterFlag(Enum):
    """
    SubscriberAuthenStateFilterFlag

    Subscriber authen state filter flag

    .. data:: un_authenticated = 0

    	UnAuthenticated

    .. data:: authenticated = 1

    	Authenticated

    """

    un_authenticated = Enum.YLeaf(0, "un-authenticated")

    authenticated = Enum.YLeaf(1, "authenticated")


class SubscriberAuthorStateFilterFlag(Enum):
    """
    SubscriberAuthorStateFilterFlag

    Subscriber author state filter flag

    .. data:: un_authorized = 0

    	UnAuthorized

    .. data:: authorized = 1

    	Authorized

    """

    un_authorized = Enum.YLeaf(0, "un-authorized")

    authorized = Enum.YLeaf(1, "authorized")


class SubscriberStateFilterFlag(Enum):
    """
    SubscriberStateFilterFlag

    Subscriber state filter flag

    .. data:: initializing = 0

    	Initializing

    .. data:: connecting = 1

    	Connecting

    .. data:: connected = 2

    	Connected

    .. data:: activated = 3

    	Activated

    .. data:: idle = 4

    	Idle

    .. data:: disconnecting = 5

    	Disconnecting

    .. data:: end = 6

    	End

    """

    initializing = Enum.YLeaf(0, "initializing")

    connecting = Enum.YLeaf(1, "connecting")

    connected = Enum.YLeaf(2, "connected")

    activated = Enum.YLeaf(3, "activated")

    idle = Enum.YLeaf(4, "idle")

    disconnecting = Enum.YLeaf(5, "disconnecting")

    end = Enum.YLeaf(6, "end")



class Subscriber(Entity):
    """
    Subscriber operational data
    
    .. attribute:: manager
    
    	Subscriber manager operational data
    	**type**\:   :py:class:`Manager <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager>`
    
    .. attribute:: session
    
    	Subscriber session operational data
    	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session>`
    
    

    """

    _prefix = 'iedge4710-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(Subscriber, self).__init__()
        self._top_entity = None

        self.yang_name = "subscriber"
        self.yang_parent_name = "Cisco-IOS-XR-iedge4710-oper"

        self.manager = Subscriber.Manager()
        self.manager.parent = self
        self._children_name_map["manager"] = "manager"
        self._children_yang_names.add("manager")

        self.session = Subscriber.Session()
        self.session.parent = self
        self._children_name_map["session"] = "session"
        self._children_yang_names.add("session")


    class Manager(Entity):
        """
        Subscriber manager operational data
        
        .. attribute:: nodes
        
        	Subscriber manager list of nodes
        	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes>`
        
        

        """

        _prefix = 'iedge4710-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Subscriber.Manager, self).__init__()

            self.yang_name = "manager"
            self.yang_parent_name = "subscriber"

            self.nodes = Subscriber.Manager.Nodes()
            self.nodes.parent = self
            self._children_name_map["nodes"] = "nodes"
            self._children_yang_names.add("nodes")


        class Nodes(Entity):
            """
            Subscriber manager list of nodes
            
            .. attribute:: node
            
            	Subscriber manager operational data for a particular node
            	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node>`
            
            

            """

            _prefix = 'iedge4710-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Subscriber.Manager.Nodes, self).__init__()

                self.yang_name = "nodes"
                self.yang_parent_name = "manager"

                self.node = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in () and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Subscriber.Manager.Nodes, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Subscriber.Manager.Nodes, self).__setattr__(name, value)


            class Node(Entity):
                """
                Subscriber manager operational data for a
                particular node
                
                .. attribute:: node_name  <key>
                
                	Node name
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: statistics
                
                	Subscriber manager statistics
                	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics>`
                
                

                """

                _prefix = 'iedge4710-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Subscriber.Manager.Nodes.Node, self).__init__()

                    self.yang_name = "node"
                    self.yang_parent_name = "nodes"

                    self.node_name = YLeaf(YType.str, "node-name")

                    self.statistics = Subscriber.Manager.Nodes.Node.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                    self._children_yang_names.add("statistics")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("node_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Subscriber.Manager.Nodes.Node, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Subscriber.Manager.Nodes.Node, self).__setattr__(name, value)


                class Statistics(Entity):
                    """
                    Subscriber manager statistics
                    
                    .. attribute:: aaa
                    
                    	AAA statistics
                    	**type**\:   :py:class:`Aaa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa>`
                    
                    .. attribute:: aggregate_summary
                    
                    	Aggregate summary of statistics
                    	**type**\:   :py:class:`AggregateSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.AggregateSummary>`
                    
                    .. attribute:: srg
                    
                    	Geo Redundancy statistics
                    	**type**\:   :py:class:`Srg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Srg>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Manager.Nodes.Node.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "node"

                        self.aaa = Subscriber.Manager.Nodes.Node.Statistics.Aaa()
                        self.aaa.parent = self
                        self._children_name_map["aaa"] = "aaa"
                        self._children_yang_names.add("aaa")

                        self.aggregate_summary = Subscriber.Manager.Nodes.Node.Statistics.AggregateSummary()
                        self.aggregate_summary.parent = self
                        self._children_name_map["aggregate_summary"] = "aggregate-summary"
                        self._children_yang_names.add("aggregate-summary")

                        self.srg = Subscriber.Manager.Nodes.Node.Statistics.Srg()
                        self.srg.parent = self
                        self._children_name_map["srg"] = "srg"
                        self._children_yang_names.add("srg")


                    class Aaa(Entity):
                        """
                        AAA statistics
                        
                        .. attribute:: accounting
                        
                        	Accounting statistics
                        	**type**\:   :py:class:`Accounting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting>`
                        
                        .. attribute:: accounting_stats_all
                        
                        	Display all subscriber management statistics
                        	**type**\:   :py:class:`AccountingStatsAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll>`
                        
                        .. attribute:: aggregate_accounting
                        
                        	Aggregate accounting statistics
                        	**type**\:   :py:class:`AggregateAccounting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting>`
                        
                        .. attribute:: aggregate_accounting_stats_all
                        
                        	Display all subscriber management total statistics
                        	**type**\:   :py:class:`AggregateAccountingStatsAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll>`
                        
                        .. attribute:: aggregate_authentication
                        
                        	Aggregate authentication statistics
                        	**type**\:   :py:class:`AggregateAuthentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthentication>`
                        
                        .. attribute:: aggregate_authorization
                        
                        	Aggregate authorization statistics
                        	**type**\:   :py:class:`AggregateAuthorization <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthorization>`
                        
                        .. attribute:: aggregate_change_of_authorization
                        
                        	Aggregate change of authorization (COA) statistics
                        	**type**\:   :py:class:`AggregateChangeOfAuthorization <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization>`
                        
                        .. attribute:: aggregate_mobility
                        
                        	Aggregate mobility statistics
                        	**type**\:   :py:class:`AggregateMobility <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateMobility>`
                        
                        .. attribute:: authentication
                        
                        	Authentication statistics
                        	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authentication>`
                        
                        .. attribute:: authorization
                        
                        	Authorization statistics
                        	**type**\:   :py:class:`Authorization <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authorization>`
                        
                        .. attribute:: change_of_authorization
                        
                        	Change of authorization (COA) statistics
                        	**type**\:   :py:class:`ChangeOfAuthorization <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization>`
                        
                        .. attribute:: mobility
                        
                        	Mobility statistics
                        	**type**\:   :py:class:`Mobility <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.Mobility>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa, self).__init__()

                            self.yang_name = "aaa"
                            self.yang_parent_name = "statistics"

                            self.accounting = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting()
                            self.accounting.parent = self
                            self._children_name_map["accounting"] = "accounting"
                            self._children_yang_names.add("accounting")

                            self.accounting_stats_all = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll()
                            self.accounting_stats_all.parent = self
                            self._children_name_map["accounting_stats_all"] = "accounting-stats-all"
                            self._children_yang_names.add("accounting-stats-all")

                            self.aggregate_accounting = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting()
                            self.aggregate_accounting.parent = self
                            self._children_name_map["aggregate_accounting"] = "aggregate-accounting"
                            self._children_yang_names.add("aggregate-accounting")

                            self.aggregate_accounting_stats_all = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll()
                            self.aggregate_accounting_stats_all.parent = self
                            self._children_name_map["aggregate_accounting_stats_all"] = "aggregate-accounting-stats-all"
                            self._children_yang_names.add("aggregate-accounting-stats-all")

                            self.aggregate_authentication = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthentication()
                            self.aggregate_authentication.parent = self
                            self._children_name_map["aggregate_authentication"] = "aggregate-authentication"
                            self._children_yang_names.add("aggregate-authentication")

                            self.aggregate_authorization = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthorization()
                            self.aggregate_authorization.parent = self
                            self._children_name_map["aggregate_authorization"] = "aggregate-authorization"
                            self._children_yang_names.add("aggregate-authorization")

                            self.aggregate_change_of_authorization = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization()
                            self.aggregate_change_of_authorization.parent = self
                            self._children_name_map["aggregate_change_of_authorization"] = "aggregate-change-of-authorization"
                            self._children_yang_names.add("aggregate-change-of-authorization")

                            self.aggregate_mobility = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateMobility()
                            self.aggregate_mobility.parent = self
                            self._children_name_map["aggregate_mobility"] = "aggregate-mobility"
                            self._children_yang_names.add("aggregate-mobility")

                            self.authentication = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authentication()
                            self.authentication.parent = self
                            self._children_name_map["authentication"] = "authentication"
                            self._children_yang_names.add("authentication")

                            self.authorization = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authorization()
                            self.authorization.parent = self
                            self._children_name_map["authorization"] = "authorization"
                            self._children_yang_names.add("authorization")

                            self.change_of_authorization = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization()
                            self.change_of_authorization.parent = self
                            self._children_name_map["change_of_authorization"] = "change-of-authorization"
                            self._children_yang_names.add("change-of-authorization")

                            self.mobility = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Mobility()
                            self.mobility.parent = self
                            self._children_name_map["mobility"] = "mobility"
                            self._children_yang_names.add("mobility")


                        class AggregateAccounting(Entity):
                            """
                            Aggregate accounting statistics
                            
                            .. attribute:: active_sessions
                            
                            	Active sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: interim
                            
                            	Interim statistics
                            	**type**\:   :py:class:`Interim <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Interim>`
                            
                            .. attribute:: interim_inflight
                            
                            	Interim inflight details
                            	**type**\:   :py:class:`InterimInflight <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.InterimInflight>`
                            
                            .. attribute:: pass_through
                            
                            	Pass\-through statistics
                            	**type**\:   :py:class:`PassThrough <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.PassThrough>`
                            
                            .. attribute:: policy_plane_errored_requests
                            
                            	Policy plane errored requests
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: policy_plane_unknown_requests
                            
                            	Policy plane unknown requests
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: start
                            
                            	Start statistics
                            	**type**\:   :py:class:`Start <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Start>`
                            
                            .. attribute:: started_sessions
                            
                            	Started sessions
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: stop
                            
                            	Stop statistics
                            	**type**\:   :py:class:`Stop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Stop>`
                            
                            .. attribute:: stopped_sessions
                            
                            	Stopped sessions
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: update
                            
                            	Update statistics
                            	**type**\:   :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Update>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting, self).__init__()

                                self.yang_name = "aggregate-accounting"
                                self.yang_parent_name = "aaa"

                                self.active_sessions = YLeaf(YType.uint32, "active-sessions")

                                self.policy_plane_errored_requests = YLeaf(YType.uint64, "policy-plane-errored-requests")

                                self.policy_plane_unknown_requests = YLeaf(YType.uint64, "policy-plane-unknown-requests")

                                self.started_sessions = YLeaf(YType.uint64, "started-sessions")

                                self.stopped_sessions = YLeaf(YType.uint64, "stopped-sessions")

                                self.interim = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Interim()
                                self.interim.parent = self
                                self._children_name_map["interim"] = "interim"
                                self._children_yang_names.add("interim")

                                self.interim_inflight = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.InterimInflight()
                                self.interim_inflight.parent = self
                                self._children_name_map["interim_inflight"] = "interim-inflight"
                                self._children_yang_names.add("interim-inflight")

                                self.pass_through = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.PassThrough()
                                self.pass_through.parent = self
                                self._children_name_map["pass_through"] = "pass-through"
                                self._children_yang_names.add("pass-through")

                                self.start = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Start()
                                self.start.parent = self
                                self._children_name_map["start"] = "start"
                                self._children_yang_names.add("start")

                                self.stop = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Stop()
                                self.stop.parent = self
                                self._children_name_map["stop"] = "stop"
                                self._children_yang_names.add("stop")

                                self.update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Update()
                                self.update.parent = self
                                self._children_name_map["update"] = "update"
                                self._children_yang_names.add("update")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("active_sessions",
                                                "policy_plane_errored_requests",
                                                "policy_plane_unknown_requests",
                                                "started_sessions",
                                                "stopped_sessions") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting, self).__setattr__(name, value)


                            class Start(Entity):
                                """
                                Start statistics
                                
                                .. attribute:: aaa_errored_requests
                                
                                	AAA errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_failed_responses
                                
                                	AAA failed responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_sent_requests
                                
                                	AAA requests sent
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_succeeded_responses
                                
                                	AAA succeeded responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Start, self).__init__()

                                    self.yang_name = "start"
                                    self.yang_parent_name = "aggregate-accounting"

                                    self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                    self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                    self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                    self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aaa_errored_requests",
                                                    "aaa_failed_responses",
                                                    "aaa_sent_requests",
                                                    "aaa_succeeded_responses",
                                                    "errored_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Start, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Start, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.aaa_errored_requests.is_set or
                                        self.aaa_failed_responses.is_set or
                                        self.aaa_sent_requests.is_set or
                                        self.aaa_succeeded_responses.is_set or
                                        self.errored_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aaa_errored_requests.yfilter != YFilter.not_set or
                                        self.aaa_failed_responses.yfilter != YFilter.not_set or
                                        self.aaa_sent_requests.yfilter != YFilter.not_set or
                                        self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "start" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                    if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                    if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                    if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aaa-errored-requests"):
                                        self.aaa_errored_requests = value
                                        self.aaa_errored_requests.value_namespace = name_space
                                        self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-failed-responses"):
                                        self.aaa_failed_responses = value
                                        self.aaa_failed_responses.value_namespace = name_space
                                        self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-sent-requests"):
                                        self.aaa_sent_requests = value
                                        self.aaa_sent_requests.value_namespace = name_space
                                        self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-succeeded-responses"):
                                        self.aaa_succeeded_responses = value
                                        self.aaa_succeeded_responses.value_namespace = name_space
                                        self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class Stop(Entity):
                                """
                                Stop statistics
                                
                                .. attribute:: aaa_errored_requests
                                
                                	AAA errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_failed_responses
                                
                                	AAA failed responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_sent_requests
                                
                                	AAA requests sent
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_succeeded_responses
                                
                                	AAA succeeded responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Stop, self).__init__()

                                    self.yang_name = "stop"
                                    self.yang_parent_name = "aggregate-accounting"

                                    self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                    self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                    self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                    self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aaa_errored_requests",
                                                    "aaa_failed_responses",
                                                    "aaa_sent_requests",
                                                    "aaa_succeeded_responses",
                                                    "errored_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Stop, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Stop, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.aaa_errored_requests.is_set or
                                        self.aaa_failed_responses.is_set or
                                        self.aaa_sent_requests.is_set or
                                        self.aaa_succeeded_responses.is_set or
                                        self.errored_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aaa_errored_requests.yfilter != YFilter.not_set or
                                        self.aaa_failed_responses.yfilter != YFilter.not_set or
                                        self.aaa_sent_requests.yfilter != YFilter.not_set or
                                        self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "stop" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                    if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                    if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                    if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aaa-errored-requests"):
                                        self.aaa_errored_requests = value
                                        self.aaa_errored_requests.value_namespace = name_space
                                        self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-failed-responses"):
                                        self.aaa_failed_responses = value
                                        self.aaa_failed_responses.value_namespace = name_space
                                        self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-sent-requests"):
                                        self.aaa_sent_requests = value
                                        self.aaa_sent_requests.value_namespace = name_space
                                        self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-succeeded-responses"):
                                        self.aaa_succeeded_responses = value
                                        self.aaa_succeeded_responses.value_namespace = name_space
                                        self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class Interim(Entity):
                                """
                                Interim statistics
                                
                                .. attribute:: aaa_errored_requests
                                
                                	AAA errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_failed_responses
                                
                                	AAA failed responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_sent_requests
                                
                                	AAA requests sent
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_succeeded_responses
                                
                                	AAA succeeded responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Interim, self).__init__()

                                    self.yang_name = "interim"
                                    self.yang_parent_name = "aggregate-accounting"

                                    self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                    self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                    self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                    self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aaa_errored_requests",
                                                    "aaa_failed_responses",
                                                    "aaa_sent_requests",
                                                    "aaa_succeeded_responses",
                                                    "errored_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Interim, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Interim, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.aaa_errored_requests.is_set or
                                        self.aaa_failed_responses.is_set or
                                        self.aaa_sent_requests.is_set or
                                        self.aaa_succeeded_responses.is_set or
                                        self.errored_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aaa_errored_requests.yfilter != YFilter.not_set or
                                        self.aaa_failed_responses.yfilter != YFilter.not_set or
                                        self.aaa_sent_requests.yfilter != YFilter.not_set or
                                        self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interim" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                    if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                    if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                    if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aaa-errored-requests"):
                                        self.aaa_errored_requests = value
                                        self.aaa_errored_requests.value_namespace = name_space
                                        self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-failed-responses"):
                                        self.aaa_failed_responses = value
                                        self.aaa_failed_responses.value_namespace = name_space
                                        self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-sent-requests"):
                                        self.aaa_sent_requests = value
                                        self.aaa_sent_requests.value_namespace = name_space
                                        self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-succeeded-responses"):
                                        self.aaa_succeeded_responses = value
                                        self.aaa_succeeded_responses.value_namespace = name_space
                                        self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class PassThrough(Entity):
                                """
                                Pass\-through statistics
                                
                                .. attribute:: aaa_errored_requests
                                
                                	AAA errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_failed_responses
                                
                                	AAA failed responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_sent_requests
                                
                                	AAA requests sent
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_succeeded_responses
                                
                                	AAA succeeded responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.PassThrough, self).__init__()

                                    self.yang_name = "pass-through"
                                    self.yang_parent_name = "aggregate-accounting"

                                    self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                    self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                    self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                    self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aaa_errored_requests",
                                                    "aaa_failed_responses",
                                                    "aaa_sent_requests",
                                                    "aaa_succeeded_responses",
                                                    "errored_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.PassThrough, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.PassThrough, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.aaa_errored_requests.is_set or
                                        self.aaa_failed_responses.is_set or
                                        self.aaa_sent_requests.is_set or
                                        self.aaa_succeeded_responses.is_set or
                                        self.errored_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aaa_errored_requests.yfilter != YFilter.not_set or
                                        self.aaa_failed_responses.yfilter != YFilter.not_set or
                                        self.aaa_sent_requests.yfilter != YFilter.not_set or
                                        self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pass-through" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                    if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                    if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                    if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aaa-errored-requests"):
                                        self.aaa_errored_requests = value
                                        self.aaa_errored_requests.value_namespace = name_space
                                        self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-failed-responses"):
                                        self.aaa_failed_responses = value
                                        self.aaa_failed_responses.value_namespace = name_space
                                        self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-sent-requests"):
                                        self.aaa_sent_requests = value
                                        self.aaa_sent_requests.value_namespace = name_space
                                        self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-succeeded-responses"):
                                        self.aaa_succeeded_responses = value
                                        self.aaa_succeeded_responses.value_namespace = name_space
                                        self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class Update(Entity):
                                """
                                Update statistics
                                
                                .. attribute:: aaa_errored_requests
                                
                                	AAA errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_failed_responses
                                
                                	AAA failed responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_sent_requests
                                
                                	AAA requests sent
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_succeeded_responses
                                
                                	AAA succeeded responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Update, self).__init__()

                                    self.yang_name = "update"
                                    self.yang_parent_name = "aggregate-accounting"

                                    self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                    self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                    self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                    self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aaa_errored_requests",
                                                    "aaa_failed_responses",
                                                    "aaa_sent_requests",
                                                    "aaa_succeeded_responses",
                                                    "errored_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Update, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Update, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.aaa_errored_requests.is_set or
                                        self.aaa_failed_responses.is_set or
                                        self.aaa_sent_requests.is_set or
                                        self.aaa_succeeded_responses.is_set or
                                        self.errored_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aaa_errored_requests.yfilter != YFilter.not_set or
                                        self.aaa_failed_responses.yfilter != YFilter.not_set or
                                        self.aaa_sent_requests.yfilter != YFilter.not_set or
                                        self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "update" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                    if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                    if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                    if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aaa-errored-requests"):
                                        self.aaa_errored_requests = value
                                        self.aaa_errored_requests.value_namespace = name_space
                                        self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-failed-responses"):
                                        self.aaa_failed_responses = value
                                        self.aaa_failed_responses.value_namespace = name_space
                                        self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-sent-requests"):
                                        self.aaa_sent_requests = value
                                        self.aaa_sent_requests.value_namespace = name_space
                                        self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-succeeded-responses"):
                                        self.aaa_succeeded_responses = value
                                        self.aaa_succeeded_responses.value_namespace = name_space
                                        self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class InterimInflight(Entity):
                                """
                                Interim inflight details
                                
                                .. attribute:: accepted_requests
                                
                                	Accepted requests
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: denied_requests
                                
                                	Denied requests
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low_water_mark_quota_of_requests
                                
                                	Low water mark quota of requests
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: quota_exhausts
                                
                                	Quota exhausts
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remaining_quota_of_requests
                                
                                	Remaining quota of requests
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: total_quota_of_requests
                                
                                	Total quota of requests
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.InterimInflight, self).__init__()

                                    self.yang_name = "interim-inflight"
                                    self.yang_parent_name = "aggregate-accounting"

                                    self.accepted_requests = YLeaf(YType.uint32, "accepted-requests")

                                    self.denied_requests = YLeaf(YType.uint32, "denied-requests")

                                    self.low_water_mark_quota_of_requests = YLeaf(YType.uint32, "low-water-mark-quota-of-requests")

                                    self.quota_exhausts = YLeaf(YType.uint32, "quota-exhausts")

                                    self.remaining_quota_of_requests = YLeaf(YType.uint32, "remaining-quota-of-requests")

                                    self.total_quota_of_requests = YLeaf(YType.uint32, "total-quota-of-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("accepted_requests",
                                                    "denied_requests",
                                                    "low_water_mark_quota_of_requests",
                                                    "quota_exhausts",
                                                    "remaining_quota_of_requests",
                                                    "total_quota_of_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.InterimInflight, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.InterimInflight, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.accepted_requests.is_set or
                                        self.denied_requests.is_set or
                                        self.low_water_mark_quota_of_requests.is_set or
                                        self.quota_exhausts.is_set or
                                        self.remaining_quota_of_requests.is_set or
                                        self.total_quota_of_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.accepted_requests.yfilter != YFilter.not_set or
                                        self.denied_requests.yfilter != YFilter.not_set or
                                        self.low_water_mark_quota_of_requests.yfilter != YFilter.not_set or
                                        self.quota_exhausts.yfilter != YFilter.not_set or
                                        self.remaining_quota_of_requests.yfilter != YFilter.not_set or
                                        self.total_quota_of_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interim-inflight" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                    if (self.denied_requests.is_set or self.denied_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.denied_requests.get_name_leafdata())
                                    if (self.low_water_mark_quota_of_requests.is_set or self.low_water_mark_quota_of_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.low_water_mark_quota_of_requests.get_name_leafdata())
                                    if (self.quota_exhausts.is_set or self.quota_exhausts.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.quota_exhausts.get_name_leafdata())
                                    if (self.remaining_quota_of_requests.is_set or self.remaining_quota_of_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.remaining_quota_of_requests.get_name_leafdata())
                                    if (self.total_quota_of_requests.is_set or self.total_quota_of_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.total_quota_of_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "accepted-requests" or name == "denied-requests" or name == "low-water-mark-quota-of-requests" or name == "quota-exhausts" or name == "remaining-quota-of-requests" or name == "total-quota-of-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "accepted-requests"):
                                        self.accepted_requests = value
                                        self.accepted_requests.value_namespace = name_space
                                        self.accepted_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "denied-requests"):
                                        self.denied_requests = value
                                        self.denied_requests.value_namespace = name_space
                                        self.denied_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "low-water-mark-quota-of-requests"):
                                        self.low_water_mark_quota_of_requests = value
                                        self.low_water_mark_quota_of_requests.value_namespace = name_space
                                        self.low_water_mark_quota_of_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "quota-exhausts"):
                                        self.quota_exhausts = value
                                        self.quota_exhausts.value_namespace = name_space
                                        self.quota_exhausts.value_namespace_prefix = name_space_prefix
                                    if(value_path == "remaining-quota-of-requests"):
                                        self.remaining_quota_of_requests = value
                                        self.remaining_quota_of_requests.value_namespace = name_space
                                        self.remaining_quota_of_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "total-quota-of-requests"):
                                        self.total_quota_of_requests = value
                                        self.total_quota_of_requests.value_namespace = name_space
                                        self.total_quota_of_requests.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.active_sessions.is_set or
                                    self.policy_plane_errored_requests.is_set or
                                    self.policy_plane_unknown_requests.is_set or
                                    self.started_sessions.is_set or
                                    self.stopped_sessions.is_set or
                                    (self.interim is not None and self.interim.has_data()) or
                                    (self.interim_inflight is not None and self.interim_inflight.has_data()) or
                                    (self.pass_through is not None and self.pass_through.has_data()) or
                                    (self.start is not None and self.start.has_data()) or
                                    (self.stop is not None and self.stop.has_data()) or
                                    (self.update is not None and self.update.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.active_sessions.yfilter != YFilter.not_set or
                                    self.policy_plane_errored_requests.yfilter != YFilter.not_set or
                                    self.policy_plane_unknown_requests.yfilter != YFilter.not_set or
                                    self.started_sessions.yfilter != YFilter.not_set or
                                    self.stopped_sessions.yfilter != YFilter.not_set or
                                    (self.interim is not None and self.interim.has_operation()) or
                                    (self.interim_inflight is not None and self.interim_inflight.has_operation()) or
                                    (self.pass_through is not None and self.pass_through.has_operation()) or
                                    (self.start is not None and self.start.has_operation()) or
                                    (self.stop is not None and self.stop.has_operation()) or
                                    (self.update is not None and self.update.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "aggregate-accounting" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.active_sessions.is_set or self.active_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.active_sessions.get_name_leafdata())
                                if (self.policy_plane_errored_requests.is_set or self.policy_plane_errored_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.policy_plane_errored_requests.get_name_leafdata())
                                if (self.policy_plane_unknown_requests.is_set or self.policy_plane_unknown_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.policy_plane_unknown_requests.get_name_leafdata())
                                if (self.started_sessions.is_set or self.started_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.started_sessions.get_name_leafdata())
                                if (self.stopped_sessions.is_set or self.stopped_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.stopped_sessions.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "interim"):
                                    if (self.interim is None):
                                        self.interim = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Interim()
                                        self.interim.parent = self
                                        self._children_name_map["interim"] = "interim"
                                    return self.interim

                                if (child_yang_name == "interim-inflight"):
                                    if (self.interim_inflight is None):
                                        self.interim_inflight = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.InterimInflight()
                                        self.interim_inflight.parent = self
                                        self._children_name_map["interim_inflight"] = "interim-inflight"
                                    return self.interim_inflight

                                if (child_yang_name == "pass-through"):
                                    if (self.pass_through is None):
                                        self.pass_through = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.PassThrough()
                                        self.pass_through.parent = self
                                        self._children_name_map["pass_through"] = "pass-through"
                                    return self.pass_through

                                if (child_yang_name == "start"):
                                    if (self.start is None):
                                        self.start = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Start()
                                        self.start.parent = self
                                        self._children_name_map["start"] = "start"
                                    return self.start

                                if (child_yang_name == "stop"):
                                    if (self.stop is None):
                                        self.stop = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Stop()
                                        self.stop.parent = self
                                        self._children_name_map["stop"] = "stop"
                                    return self.stop

                                if (child_yang_name == "update"):
                                    if (self.update is None):
                                        self.update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting.Update()
                                        self.update.parent = self
                                        self._children_name_map["update"] = "update"
                                    return self.update

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "interim" or name == "interim-inflight" or name == "pass-through" or name == "start" or name == "stop" or name == "update" or name == "active-sessions" or name == "policy-plane-errored-requests" or name == "policy-plane-unknown-requests" or name == "started-sessions" or name == "stopped-sessions"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "active-sessions"):
                                    self.active_sessions = value
                                    self.active_sessions.value_namespace = name_space
                                    self.active_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "policy-plane-errored-requests"):
                                    self.policy_plane_errored_requests = value
                                    self.policy_plane_errored_requests.value_namespace = name_space
                                    self.policy_plane_errored_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "policy-plane-unknown-requests"):
                                    self.policy_plane_unknown_requests = value
                                    self.policy_plane_unknown_requests.value_namespace = name_space
                                    self.policy_plane_unknown_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "started-sessions"):
                                    self.started_sessions = value
                                    self.started_sessions.value_namespace = name_space
                                    self.started_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "stopped-sessions"):
                                    self.stopped_sessions = value
                                    self.stopped_sessions.value_namespace = name_space
                                    self.stopped_sessions.value_namespace_prefix = name_space_prefix


                        class Authentication(Entity):
                            """
                            Authentication statistics
                            
                            .. attribute:: accepted_requests
                            
                            	Request accepted by Radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: errored_requests
                            
                            	Unexpected errors
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: incomplete_requests
                            
                            	Incomplete requests \- missing attributes
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: rejected_requests
                            
                            	Requests rejected by radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: sent_requests
                            
                            	Requests sent to radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: successful_requests
                            
                            	Requests which are successful
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: terminated_requests
                            
                            	Requests terminated by disconnect
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: unreachable_requests
                            
                            	Radius server not available
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authentication, self).__init__()

                                self.yang_name = "authentication"
                                self.yang_parent_name = "aaa"

                                self.accepted_requests = YLeaf(YType.uint64, "accepted-requests")

                                self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                self.incomplete_requests = YLeaf(YType.uint64, "incomplete-requests")

                                self.rejected_requests = YLeaf(YType.uint64, "rejected-requests")

                                self.sent_requests = YLeaf(YType.uint64, "sent-requests")

                                self.successful_requests = YLeaf(YType.uint64, "successful-requests")

                                self.terminated_requests = YLeaf(YType.uint64, "terminated-requests")

                                self.unreachable_requests = YLeaf(YType.uint64, "unreachable-requests")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("accepted_requests",
                                                "errored_requests",
                                                "incomplete_requests",
                                                "rejected_requests",
                                                "sent_requests",
                                                "successful_requests",
                                                "terminated_requests",
                                                "unreachable_requests") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authentication, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authentication, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.accepted_requests.is_set or
                                    self.errored_requests.is_set or
                                    self.incomplete_requests.is_set or
                                    self.rejected_requests.is_set or
                                    self.sent_requests.is_set or
                                    self.successful_requests.is_set or
                                    self.terminated_requests.is_set or
                                    self.unreachable_requests.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.accepted_requests.yfilter != YFilter.not_set or
                                    self.errored_requests.yfilter != YFilter.not_set or
                                    self.incomplete_requests.yfilter != YFilter.not_set or
                                    self.rejected_requests.yfilter != YFilter.not_set or
                                    self.sent_requests.yfilter != YFilter.not_set or
                                    self.successful_requests.yfilter != YFilter.not_set or
                                    self.terminated_requests.yfilter != YFilter.not_set or
                                    self.unreachable_requests.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "authentication" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                if (self.incomplete_requests.is_set or self.incomplete_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.incomplete_requests.get_name_leafdata())
                                if (self.rejected_requests.is_set or self.rejected_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rejected_requests.get_name_leafdata())
                                if (self.sent_requests.is_set or self.sent_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.sent_requests.get_name_leafdata())
                                if (self.successful_requests.is_set or self.successful_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.successful_requests.get_name_leafdata())
                                if (self.terminated_requests.is_set or self.terminated_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.terminated_requests.get_name_leafdata())
                                if (self.unreachable_requests.is_set or self.unreachable_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unreachable_requests.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "accepted-requests" or name == "errored-requests" or name == "incomplete-requests" or name == "rejected-requests" or name == "sent-requests" or name == "successful-requests" or name == "terminated-requests" or name == "unreachable-requests"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "accepted-requests"):
                                    self.accepted_requests = value
                                    self.accepted_requests.value_namespace = name_space
                                    self.accepted_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "errored-requests"):
                                    self.errored_requests = value
                                    self.errored_requests.value_namespace = name_space
                                    self.errored_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "incomplete-requests"):
                                    self.incomplete_requests = value
                                    self.incomplete_requests.value_namespace = name_space
                                    self.incomplete_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "rejected-requests"):
                                    self.rejected_requests = value
                                    self.rejected_requests.value_namespace = name_space
                                    self.rejected_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "sent-requests"):
                                    self.sent_requests = value
                                    self.sent_requests.value_namespace = name_space
                                    self.sent_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "successful-requests"):
                                    self.successful_requests = value
                                    self.successful_requests.value_namespace = name_space
                                    self.successful_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "terminated-requests"):
                                    self.terminated_requests = value
                                    self.terminated_requests.value_namespace = name_space
                                    self.terminated_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "unreachable-requests"):
                                    self.unreachable_requests = value
                                    self.unreachable_requests.value_namespace = name_space
                                    self.unreachable_requests.value_namespace_prefix = name_space_prefix


                        class AggregateMobility(Entity):
                            """
                            Aggregate mobility statistics
                            
                            .. attribute:: receive_response_failures
                            
                            	Response receive failures
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: receive_response_successes
                            
                            	Response receive success
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: send_request_failures
                            
                            	Request send failures
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: send_request_successes
                            
                            	Request send success
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateMobility, self).__init__()

                                self.yang_name = "aggregate-mobility"
                                self.yang_parent_name = "aaa"

                                self.receive_response_failures = YLeaf(YType.uint64, "receive-response-failures")

                                self.receive_response_successes = YLeaf(YType.uint64, "receive-response-successes")

                                self.send_request_failures = YLeaf(YType.uint64, "send-request-failures")

                                self.send_request_successes = YLeaf(YType.uint64, "send-request-successes")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("receive_response_failures",
                                                "receive_response_successes",
                                                "send_request_failures",
                                                "send_request_successes") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateMobility, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateMobility, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.receive_response_failures.is_set or
                                    self.receive_response_successes.is_set or
                                    self.send_request_failures.is_set or
                                    self.send_request_successes.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.receive_response_failures.yfilter != YFilter.not_set or
                                    self.receive_response_successes.yfilter != YFilter.not_set or
                                    self.send_request_failures.yfilter != YFilter.not_set or
                                    self.send_request_successes.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "aggregate-mobility" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.receive_response_failures.is_set or self.receive_response_failures.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.receive_response_failures.get_name_leafdata())
                                if (self.receive_response_successes.is_set or self.receive_response_successes.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.receive_response_successes.get_name_leafdata())
                                if (self.send_request_failures.is_set or self.send_request_failures.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.send_request_failures.get_name_leafdata())
                                if (self.send_request_successes.is_set or self.send_request_successes.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.send_request_successes.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "receive-response-failures" or name == "receive-response-successes" or name == "send-request-failures" or name == "send-request-successes"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "receive-response-failures"):
                                    self.receive_response_failures = value
                                    self.receive_response_failures.value_namespace = name_space
                                    self.receive_response_failures.value_namespace_prefix = name_space_prefix
                                if(value_path == "receive-response-successes"):
                                    self.receive_response_successes = value
                                    self.receive_response_successes.value_namespace = name_space
                                    self.receive_response_successes.value_namespace_prefix = name_space_prefix
                                if(value_path == "send-request-failures"):
                                    self.send_request_failures = value
                                    self.send_request_failures.value_namespace = name_space
                                    self.send_request_failures.value_namespace_prefix = name_space_prefix
                                if(value_path == "send-request-successes"):
                                    self.send_request_successes = value
                                    self.send_request_successes.value_namespace = name_space
                                    self.send_request_successes.value_namespace_prefix = name_space_prefix


                        class AggregateAuthentication(Entity):
                            """
                            Aggregate authentication statistics
                            
                            .. attribute:: accepted_requests
                            
                            	Request accepted by Radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: errored_requests
                            
                            	Unexpected errors
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: incomplete_requests
                            
                            	Incomplete requests \- missing attributes
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: rejected_requests
                            
                            	Requests rejected by radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: sent_requests
                            
                            	Requests sent to radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: successful_requests
                            
                            	Requests which are successful
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: terminated_requests
                            
                            	Requests terminated by disconnect
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: unreachable_requests
                            
                            	Radius server not available
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthentication, self).__init__()

                                self.yang_name = "aggregate-authentication"
                                self.yang_parent_name = "aaa"

                                self.accepted_requests = YLeaf(YType.uint64, "accepted-requests")

                                self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                self.incomplete_requests = YLeaf(YType.uint64, "incomplete-requests")

                                self.rejected_requests = YLeaf(YType.uint64, "rejected-requests")

                                self.sent_requests = YLeaf(YType.uint64, "sent-requests")

                                self.successful_requests = YLeaf(YType.uint64, "successful-requests")

                                self.terminated_requests = YLeaf(YType.uint64, "terminated-requests")

                                self.unreachable_requests = YLeaf(YType.uint64, "unreachable-requests")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("accepted_requests",
                                                "errored_requests",
                                                "incomplete_requests",
                                                "rejected_requests",
                                                "sent_requests",
                                                "successful_requests",
                                                "terminated_requests",
                                                "unreachable_requests") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthentication, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthentication, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.accepted_requests.is_set or
                                    self.errored_requests.is_set or
                                    self.incomplete_requests.is_set or
                                    self.rejected_requests.is_set or
                                    self.sent_requests.is_set or
                                    self.successful_requests.is_set or
                                    self.terminated_requests.is_set or
                                    self.unreachable_requests.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.accepted_requests.yfilter != YFilter.not_set or
                                    self.errored_requests.yfilter != YFilter.not_set or
                                    self.incomplete_requests.yfilter != YFilter.not_set or
                                    self.rejected_requests.yfilter != YFilter.not_set or
                                    self.sent_requests.yfilter != YFilter.not_set or
                                    self.successful_requests.yfilter != YFilter.not_set or
                                    self.terminated_requests.yfilter != YFilter.not_set or
                                    self.unreachable_requests.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "aggregate-authentication" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                if (self.incomplete_requests.is_set or self.incomplete_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.incomplete_requests.get_name_leafdata())
                                if (self.rejected_requests.is_set or self.rejected_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rejected_requests.get_name_leafdata())
                                if (self.sent_requests.is_set or self.sent_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.sent_requests.get_name_leafdata())
                                if (self.successful_requests.is_set or self.successful_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.successful_requests.get_name_leafdata())
                                if (self.terminated_requests.is_set or self.terminated_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.terminated_requests.get_name_leafdata())
                                if (self.unreachable_requests.is_set or self.unreachable_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unreachable_requests.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "accepted-requests" or name == "errored-requests" or name == "incomplete-requests" or name == "rejected-requests" or name == "sent-requests" or name == "successful-requests" or name == "terminated-requests" or name == "unreachable-requests"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "accepted-requests"):
                                    self.accepted_requests = value
                                    self.accepted_requests.value_namespace = name_space
                                    self.accepted_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "errored-requests"):
                                    self.errored_requests = value
                                    self.errored_requests.value_namespace = name_space
                                    self.errored_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "incomplete-requests"):
                                    self.incomplete_requests = value
                                    self.incomplete_requests.value_namespace = name_space
                                    self.incomplete_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "rejected-requests"):
                                    self.rejected_requests = value
                                    self.rejected_requests.value_namespace = name_space
                                    self.rejected_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "sent-requests"):
                                    self.sent_requests = value
                                    self.sent_requests.value_namespace = name_space
                                    self.sent_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "successful-requests"):
                                    self.successful_requests = value
                                    self.successful_requests.value_namespace = name_space
                                    self.successful_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "terminated-requests"):
                                    self.terminated_requests = value
                                    self.terminated_requests.value_namespace = name_space
                                    self.terminated_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "unreachable-requests"):
                                    self.unreachable_requests = value
                                    self.unreachable_requests.value_namespace = name_space
                                    self.unreachable_requests.value_namespace_prefix = name_space_prefix


                        class AccountingStatsAll(Entity):
                            """
                            Display all subscriber management
                            statistics
                            
                            .. attribute:: accounting_statistics
                            
                            	List of stats for accounting
                            	**type**\:   :py:class:`AccountingStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics>`
                            
                            .. attribute:: authentication_statistics
                            
                            	List of stats for authentication
                            	**type**\:   :py:class:`AuthenticationStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthenticationStatistics>`
                            
                            .. attribute:: authorization_statistics
                            
                            	List of stats for authorization
                            	**type**\:   :py:class:`AuthorizationStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthorizationStatistics>`
                            
                            .. attribute:: change_of_authorization_statistics
                            
                            	List of stats for COA
                            	**type**\:   :py:class:`ChangeOfAuthorizationStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics>`
                            
                            .. attribute:: mobility_statistics
                            
                            	List of stats for Mobility
                            	**type**\:   :py:class:`MobilityStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.MobilityStatistics>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll, self).__init__()

                                self.yang_name = "accounting-stats-all"
                                self.yang_parent_name = "aaa"

                                self.accounting_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics()
                                self.accounting_statistics.parent = self
                                self._children_name_map["accounting_statistics"] = "accounting-statistics"
                                self._children_yang_names.add("accounting-statistics")

                                self.authentication_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthenticationStatistics()
                                self.authentication_statistics.parent = self
                                self._children_name_map["authentication_statistics"] = "authentication-statistics"
                                self._children_yang_names.add("authentication-statistics")

                                self.authorization_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthorizationStatistics()
                                self.authorization_statistics.parent = self
                                self._children_name_map["authorization_statistics"] = "authorization-statistics"
                                self._children_yang_names.add("authorization-statistics")

                                self.change_of_authorization_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics()
                                self.change_of_authorization_statistics.parent = self
                                self._children_name_map["change_of_authorization_statistics"] = "change-of-authorization-statistics"
                                self._children_yang_names.add("change-of-authorization-statistics")

                                self.mobility_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.MobilityStatistics()
                                self.mobility_statistics.parent = self
                                self._children_name_map["mobility_statistics"] = "mobility-statistics"
                                self._children_yang_names.add("mobility-statistics")


                            class AccountingStatistics(Entity):
                                """
                                List of stats for accounting
                                
                                .. attribute:: active_sessions
                                
                                	Active sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: interim
                                
                                	Interim statistics
                                	**type**\:   :py:class:`Interim <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Interim>`
                                
                                .. attribute:: interim_inflight
                                
                                	Interim inflight details
                                	**type**\:   :py:class:`InterimInflight <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.InterimInflight>`
                                
                                .. attribute:: pass_through
                                
                                	Pass\-through statistics
                                	**type**\:   :py:class:`PassThrough <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.PassThrough>`
                                
                                .. attribute:: policy_plane_errored_requests
                                
                                	Policy plane errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: policy_plane_unknown_requests
                                
                                	Policy plane unknown requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: start
                                
                                	Start statistics
                                	**type**\:   :py:class:`Start <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Start>`
                                
                                .. attribute:: started_sessions
                                
                                	Started sessions
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: stop
                                
                                	Stop statistics
                                	**type**\:   :py:class:`Stop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Stop>`
                                
                                .. attribute:: stopped_sessions
                                
                                	Stopped sessions
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: update
                                
                                	Update statistics
                                	**type**\:   :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Update>`
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics, self).__init__()

                                    self.yang_name = "accounting-statistics"
                                    self.yang_parent_name = "accounting-stats-all"

                                    self.active_sessions = YLeaf(YType.uint32, "active-sessions")

                                    self.policy_plane_errored_requests = YLeaf(YType.uint64, "policy-plane-errored-requests")

                                    self.policy_plane_unknown_requests = YLeaf(YType.uint64, "policy-plane-unknown-requests")

                                    self.started_sessions = YLeaf(YType.uint64, "started-sessions")

                                    self.stopped_sessions = YLeaf(YType.uint64, "stopped-sessions")

                                    self.interim = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Interim()
                                    self.interim.parent = self
                                    self._children_name_map["interim"] = "interim"
                                    self._children_yang_names.add("interim")

                                    self.interim_inflight = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.InterimInflight()
                                    self.interim_inflight.parent = self
                                    self._children_name_map["interim_inflight"] = "interim-inflight"
                                    self._children_yang_names.add("interim-inflight")

                                    self.pass_through = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.PassThrough()
                                    self.pass_through.parent = self
                                    self._children_name_map["pass_through"] = "pass-through"
                                    self._children_yang_names.add("pass-through")

                                    self.start = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Start()
                                    self.start.parent = self
                                    self._children_name_map["start"] = "start"
                                    self._children_yang_names.add("start")

                                    self.stop = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Stop()
                                    self.stop.parent = self
                                    self._children_name_map["stop"] = "stop"
                                    self._children_yang_names.add("stop")

                                    self.update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Update()
                                    self.update.parent = self
                                    self._children_name_map["update"] = "update"
                                    self._children_yang_names.add("update")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("active_sessions",
                                                    "policy_plane_errored_requests",
                                                    "policy_plane_unknown_requests",
                                                    "started_sessions",
                                                    "stopped_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics, self).__setattr__(name, value)


                                class Start(Entity):
                                    """
                                    Start statistics
                                    
                                    .. attribute:: aaa_errored_requests
                                    
                                    	AAA errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_failed_responses
                                    
                                    	AAA failed responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_sent_requests
                                    
                                    	AAA requests sent
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_succeeded_responses
                                    
                                    	AAA succeeded responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: errored_requests
                                    
                                    	Errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Start, self).__init__()

                                        self.yang_name = "start"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                        self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                        self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                        self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                        self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("aaa_errored_requests",
                                                        "aaa_failed_responses",
                                                        "aaa_sent_requests",
                                                        "aaa_succeeded_responses",
                                                        "errored_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Start, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Start, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.aaa_errored_requests.is_set or
                                            self.aaa_failed_responses.is_set or
                                            self.aaa_sent_requests.is_set or
                                            self.aaa_succeeded_responses.is_set or
                                            self.errored_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.aaa_errored_requests.yfilter != YFilter.not_set or
                                            self.aaa_failed_responses.yfilter != YFilter.not_set or
                                            self.aaa_sent_requests.yfilter != YFilter.not_set or
                                            self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                            self.errored_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "start" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                        if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                        if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                        if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                        if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "aaa-errored-requests"):
                                            self.aaa_errored_requests = value
                                            self.aaa_errored_requests.value_namespace = name_space
                                            self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-failed-responses"):
                                            self.aaa_failed_responses = value
                                            self.aaa_failed_responses.value_namespace = name_space
                                            self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-sent-requests"):
                                            self.aaa_sent_requests = value
                                            self.aaa_sent_requests.value_namespace = name_space
                                            self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-succeeded-responses"):
                                            self.aaa_succeeded_responses = value
                                            self.aaa_succeeded_responses.value_namespace = name_space
                                            self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "errored-requests"):
                                            self.errored_requests = value
                                            self.errored_requests.value_namespace = name_space
                                            self.errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class Stop(Entity):
                                    """
                                    Stop statistics
                                    
                                    .. attribute:: aaa_errored_requests
                                    
                                    	AAA errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_failed_responses
                                    
                                    	AAA failed responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_sent_requests
                                    
                                    	AAA requests sent
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_succeeded_responses
                                    
                                    	AAA succeeded responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: errored_requests
                                    
                                    	Errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Stop, self).__init__()

                                        self.yang_name = "stop"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                        self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                        self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                        self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                        self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("aaa_errored_requests",
                                                        "aaa_failed_responses",
                                                        "aaa_sent_requests",
                                                        "aaa_succeeded_responses",
                                                        "errored_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Stop, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Stop, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.aaa_errored_requests.is_set or
                                            self.aaa_failed_responses.is_set or
                                            self.aaa_sent_requests.is_set or
                                            self.aaa_succeeded_responses.is_set or
                                            self.errored_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.aaa_errored_requests.yfilter != YFilter.not_set or
                                            self.aaa_failed_responses.yfilter != YFilter.not_set or
                                            self.aaa_sent_requests.yfilter != YFilter.not_set or
                                            self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                            self.errored_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "stop" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                        if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                        if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                        if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                        if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "aaa-errored-requests"):
                                            self.aaa_errored_requests = value
                                            self.aaa_errored_requests.value_namespace = name_space
                                            self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-failed-responses"):
                                            self.aaa_failed_responses = value
                                            self.aaa_failed_responses.value_namespace = name_space
                                            self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-sent-requests"):
                                            self.aaa_sent_requests = value
                                            self.aaa_sent_requests.value_namespace = name_space
                                            self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-succeeded-responses"):
                                            self.aaa_succeeded_responses = value
                                            self.aaa_succeeded_responses.value_namespace = name_space
                                            self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "errored-requests"):
                                            self.errored_requests = value
                                            self.errored_requests.value_namespace = name_space
                                            self.errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class Interim(Entity):
                                    """
                                    Interim statistics
                                    
                                    .. attribute:: aaa_errored_requests
                                    
                                    	AAA errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_failed_responses
                                    
                                    	AAA failed responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_sent_requests
                                    
                                    	AAA requests sent
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_succeeded_responses
                                    
                                    	AAA succeeded responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: errored_requests
                                    
                                    	Errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Interim, self).__init__()

                                        self.yang_name = "interim"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                        self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                        self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                        self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                        self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("aaa_errored_requests",
                                                        "aaa_failed_responses",
                                                        "aaa_sent_requests",
                                                        "aaa_succeeded_responses",
                                                        "errored_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Interim, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Interim, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.aaa_errored_requests.is_set or
                                            self.aaa_failed_responses.is_set or
                                            self.aaa_sent_requests.is_set or
                                            self.aaa_succeeded_responses.is_set or
                                            self.errored_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.aaa_errored_requests.yfilter != YFilter.not_set or
                                            self.aaa_failed_responses.yfilter != YFilter.not_set or
                                            self.aaa_sent_requests.yfilter != YFilter.not_set or
                                            self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                            self.errored_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "interim" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                        if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                        if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                        if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                        if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "aaa-errored-requests"):
                                            self.aaa_errored_requests = value
                                            self.aaa_errored_requests.value_namespace = name_space
                                            self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-failed-responses"):
                                            self.aaa_failed_responses = value
                                            self.aaa_failed_responses.value_namespace = name_space
                                            self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-sent-requests"):
                                            self.aaa_sent_requests = value
                                            self.aaa_sent_requests.value_namespace = name_space
                                            self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-succeeded-responses"):
                                            self.aaa_succeeded_responses = value
                                            self.aaa_succeeded_responses.value_namespace = name_space
                                            self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "errored-requests"):
                                            self.errored_requests = value
                                            self.errored_requests.value_namespace = name_space
                                            self.errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class PassThrough(Entity):
                                    """
                                    Pass\-through statistics
                                    
                                    .. attribute:: aaa_errored_requests
                                    
                                    	AAA errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_failed_responses
                                    
                                    	AAA failed responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_sent_requests
                                    
                                    	AAA requests sent
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_succeeded_responses
                                    
                                    	AAA succeeded responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: errored_requests
                                    
                                    	Errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.PassThrough, self).__init__()

                                        self.yang_name = "pass-through"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                        self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                        self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                        self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                        self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("aaa_errored_requests",
                                                        "aaa_failed_responses",
                                                        "aaa_sent_requests",
                                                        "aaa_succeeded_responses",
                                                        "errored_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.PassThrough, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.PassThrough, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.aaa_errored_requests.is_set or
                                            self.aaa_failed_responses.is_set or
                                            self.aaa_sent_requests.is_set or
                                            self.aaa_succeeded_responses.is_set or
                                            self.errored_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.aaa_errored_requests.yfilter != YFilter.not_set or
                                            self.aaa_failed_responses.yfilter != YFilter.not_set or
                                            self.aaa_sent_requests.yfilter != YFilter.not_set or
                                            self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                            self.errored_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "pass-through" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                        if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                        if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                        if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                        if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "aaa-errored-requests"):
                                            self.aaa_errored_requests = value
                                            self.aaa_errored_requests.value_namespace = name_space
                                            self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-failed-responses"):
                                            self.aaa_failed_responses = value
                                            self.aaa_failed_responses.value_namespace = name_space
                                            self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-sent-requests"):
                                            self.aaa_sent_requests = value
                                            self.aaa_sent_requests.value_namespace = name_space
                                            self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-succeeded-responses"):
                                            self.aaa_succeeded_responses = value
                                            self.aaa_succeeded_responses.value_namespace = name_space
                                            self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "errored-requests"):
                                            self.errored_requests = value
                                            self.errored_requests.value_namespace = name_space
                                            self.errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class Update(Entity):
                                    """
                                    Update statistics
                                    
                                    .. attribute:: aaa_errored_requests
                                    
                                    	AAA errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_failed_responses
                                    
                                    	AAA failed responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_sent_requests
                                    
                                    	AAA requests sent
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_succeeded_responses
                                    
                                    	AAA succeeded responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: errored_requests
                                    
                                    	Errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Update, self).__init__()

                                        self.yang_name = "update"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                        self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                        self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                        self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                        self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("aaa_errored_requests",
                                                        "aaa_failed_responses",
                                                        "aaa_sent_requests",
                                                        "aaa_succeeded_responses",
                                                        "errored_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Update, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Update, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.aaa_errored_requests.is_set or
                                            self.aaa_failed_responses.is_set or
                                            self.aaa_sent_requests.is_set or
                                            self.aaa_succeeded_responses.is_set or
                                            self.errored_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.aaa_errored_requests.yfilter != YFilter.not_set or
                                            self.aaa_failed_responses.yfilter != YFilter.not_set or
                                            self.aaa_sent_requests.yfilter != YFilter.not_set or
                                            self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                            self.errored_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "update" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                        if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                        if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                        if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                        if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "aaa-errored-requests"):
                                            self.aaa_errored_requests = value
                                            self.aaa_errored_requests.value_namespace = name_space
                                            self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-failed-responses"):
                                            self.aaa_failed_responses = value
                                            self.aaa_failed_responses.value_namespace = name_space
                                            self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-sent-requests"):
                                            self.aaa_sent_requests = value
                                            self.aaa_sent_requests.value_namespace = name_space
                                            self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-succeeded-responses"):
                                            self.aaa_succeeded_responses = value
                                            self.aaa_succeeded_responses.value_namespace = name_space
                                            self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "errored-requests"):
                                            self.errored_requests = value
                                            self.errored_requests.value_namespace = name_space
                                            self.errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class InterimInflight(Entity):
                                    """
                                    Interim inflight details
                                    
                                    .. attribute:: accepted_requests
                                    
                                    	Accepted requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: denied_requests
                                    
                                    	Denied requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: low_water_mark_quota_of_requests
                                    
                                    	Low water mark quota of requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: quota_exhausts
                                    
                                    	Quota exhausts
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: remaining_quota_of_requests
                                    
                                    	Remaining quota of requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_quota_of_requests
                                    
                                    	Total quota of requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.InterimInflight, self).__init__()

                                        self.yang_name = "interim-inflight"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.accepted_requests = YLeaf(YType.uint32, "accepted-requests")

                                        self.denied_requests = YLeaf(YType.uint32, "denied-requests")

                                        self.low_water_mark_quota_of_requests = YLeaf(YType.uint32, "low-water-mark-quota-of-requests")

                                        self.quota_exhausts = YLeaf(YType.uint32, "quota-exhausts")

                                        self.remaining_quota_of_requests = YLeaf(YType.uint32, "remaining-quota-of-requests")

                                        self.total_quota_of_requests = YLeaf(YType.uint32, "total-quota-of-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("accepted_requests",
                                                        "denied_requests",
                                                        "low_water_mark_quota_of_requests",
                                                        "quota_exhausts",
                                                        "remaining_quota_of_requests",
                                                        "total_quota_of_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.InterimInflight, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.InterimInflight, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.accepted_requests.is_set or
                                            self.denied_requests.is_set or
                                            self.low_water_mark_quota_of_requests.is_set or
                                            self.quota_exhausts.is_set or
                                            self.remaining_quota_of_requests.is_set or
                                            self.total_quota_of_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.accepted_requests.yfilter != YFilter.not_set or
                                            self.denied_requests.yfilter != YFilter.not_set or
                                            self.low_water_mark_quota_of_requests.yfilter != YFilter.not_set or
                                            self.quota_exhausts.yfilter != YFilter.not_set or
                                            self.remaining_quota_of_requests.yfilter != YFilter.not_set or
                                            self.total_quota_of_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "interim-inflight" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                        if (self.denied_requests.is_set or self.denied_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.denied_requests.get_name_leafdata())
                                        if (self.low_water_mark_quota_of_requests.is_set or self.low_water_mark_quota_of_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.low_water_mark_quota_of_requests.get_name_leafdata())
                                        if (self.quota_exhausts.is_set or self.quota_exhausts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.quota_exhausts.get_name_leafdata())
                                        if (self.remaining_quota_of_requests.is_set or self.remaining_quota_of_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.remaining_quota_of_requests.get_name_leafdata())
                                        if (self.total_quota_of_requests.is_set or self.total_quota_of_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.total_quota_of_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "accepted-requests" or name == "denied-requests" or name == "low-water-mark-quota-of-requests" or name == "quota-exhausts" or name == "remaining-quota-of-requests" or name == "total-quota-of-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "accepted-requests"):
                                            self.accepted_requests = value
                                            self.accepted_requests.value_namespace = name_space
                                            self.accepted_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "denied-requests"):
                                            self.denied_requests = value
                                            self.denied_requests.value_namespace = name_space
                                            self.denied_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "low-water-mark-quota-of-requests"):
                                            self.low_water_mark_quota_of_requests = value
                                            self.low_water_mark_quota_of_requests.value_namespace = name_space
                                            self.low_water_mark_quota_of_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "quota-exhausts"):
                                            self.quota_exhausts = value
                                            self.quota_exhausts.value_namespace = name_space
                                            self.quota_exhausts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "remaining-quota-of-requests"):
                                            self.remaining_quota_of_requests = value
                                            self.remaining_quota_of_requests.value_namespace = name_space
                                            self.remaining_quota_of_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "total-quota-of-requests"):
                                            self.total_quota_of_requests = value
                                            self.total_quota_of_requests.value_namespace = name_space
                                            self.total_quota_of_requests.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        self.active_sessions.is_set or
                                        self.policy_plane_errored_requests.is_set or
                                        self.policy_plane_unknown_requests.is_set or
                                        self.started_sessions.is_set or
                                        self.stopped_sessions.is_set or
                                        (self.interim is not None and self.interim.has_data()) or
                                        (self.interim_inflight is not None and self.interim_inflight.has_data()) or
                                        (self.pass_through is not None and self.pass_through.has_data()) or
                                        (self.start is not None and self.start.has_data()) or
                                        (self.stop is not None and self.stop.has_data()) or
                                        (self.update is not None and self.update.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.active_sessions.yfilter != YFilter.not_set or
                                        self.policy_plane_errored_requests.yfilter != YFilter.not_set or
                                        self.policy_plane_unknown_requests.yfilter != YFilter.not_set or
                                        self.started_sessions.yfilter != YFilter.not_set or
                                        self.stopped_sessions.yfilter != YFilter.not_set or
                                        (self.interim is not None and self.interim.has_operation()) or
                                        (self.interim_inflight is not None and self.interim_inflight.has_operation()) or
                                        (self.pass_through is not None and self.pass_through.has_operation()) or
                                        (self.start is not None and self.start.has_operation()) or
                                        (self.stop is not None and self.stop.has_operation()) or
                                        (self.update is not None and self.update.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "accounting-statistics" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.active_sessions.is_set or self.active_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.active_sessions.get_name_leafdata())
                                    if (self.policy_plane_errored_requests.is_set or self.policy_plane_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.policy_plane_errored_requests.get_name_leafdata())
                                    if (self.policy_plane_unknown_requests.is_set or self.policy_plane_unknown_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.policy_plane_unknown_requests.get_name_leafdata())
                                    if (self.started_sessions.is_set or self.started_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.started_sessions.get_name_leafdata())
                                    if (self.stopped_sessions.is_set or self.stopped_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.stopped_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "interim"):
                                        if (self.interim is None):
                                            self.interim = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Interim()
                                            self.interim.parent = self
                                            self._children_name_map["interim"] = "interim"
                                        return self.interim

                                    if (child_yang_name == "interim-inflight"):
                                        if (self.interim_inflight is None):
                                            self.interim_inflight = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.InterimInflight()
                                            self.interim_inflight.parent = self
                                            self._children_name_map["interim_inflight"] = "interim-inflight"
                                        return self.interim_inflight

                                    if (child_yang_name == "pass-through"):
                                        if (self.pass_through is None):
                                            self.pass_through = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.PassThrough()
                                            self.pass_through.parent = self
                                            self._children_name_map["pass_through"] = "pass-through"
                                        return self.pass_through

                                    if (child_yang_name == "start"):
                                        if (self.start is None):
                                            self.start = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Start()
                                            self.start.parent = self
                                            self._children_name_map["start"] = "start"
                                        return self.start

                                    if (child_yang_name == "stop"):
                                        if (self.stop is None):
                                            self.stop = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Stop()
                                            self.stop.parent = self
                                            self._children_name_map["stop"] = "stop"
                                        return self.stop

                                    if (child_yang_name == "update"):
                                        if (self.update is None):
                                            self.update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics.Update()
                                            self.update.parent = self
                                            self._children_name_map["update"] = "update"
                                        return self.update

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "interim" or name == "interim-inflight" or name == "pass-through" or name == "start" or name == "stop" or name == "update" or name == "active-sessions" or name == "policy-plane-errored-requests" or name == "policy-plane-unknown-requests" or name == "started-sessions" or name == "stopped-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "active-sessions"):
                                        self.active_sessions = value
                                        self.active_sessions.value_namespace = name_space
                                        self.active_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "policy-plane-errored-requests"):
                                        self.policy_plane_errored_requests = value
                                        self.policy_plane_errored_requests.value_namespace = name_space
                                        self.policy_plane_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "policy-plane-unknown-requests"):
                                        self.policy_plane_unknown_requests = value
                                        self.policy_plane_unknown_requests.value_namespace = name_space
                                        self.policy_plane_unknown_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "started-sessions"):
                                        self.started_sessions = value
                                        self.started_sessions.value_namespace = name_space
                                        self.started_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "stopped-sessions"):
                                        self.stopped_sessions = value
                                        self.stopped_sessions.value_namespace = name_space
                                        self.stopped_sessions.value_namespace_prefix = name_space_prefix


                            class AuthenticationStatistics(Entity):
                                """
                                List of stats for authentication
                                
                                .. attribute:: accepted_requests
                                
                                	Request accepted by Radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Unexpected errors
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: incomplete_requests
                                
                                	Incomplete requests \- missing attributes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rejected_requests
                                
                                	Requests rejected by radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sent_requests
                                
                                	Requests sent to radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: successful_requests
                                
                                	Requests which are successful
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: terminated_requests
                                
                                	Requests terminated by disconnect
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: unreachable_requests
                                
                                	Radius server not available
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthenticationStatistics, self).__init__()

                                    self.yang_name = "authentication-statistics"
                                    self.yang_parent_name = "accounting-stats-all"

                                    self.accepted_requests = YLeaf(YType.uint64, "accepted-requests")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.incomplete_requests = YLeaf(YType.uint64, "incomplete-requests")

                                    self.rejected_requests = YLeaf(YType.uint64, "rejected-requests")

                                    self.sent_requests = YLeaf(YType.uint64, "sent-requests")

                                    self.successful_requests = YLeaf(YType.uint64, "successful-requests")

                                    self.terminated_requests = YLeaf(YType.uint64, "terminated-requests")

                                    self.unreachable_requests = YLeaf(YType.uint64, "unreachable-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("accepted_requests",
                                                    "errored_requests",
                                                    "incomplete_requests",
                                                    "rejected_requests",
                                                    "sent_requests",
                                                    "successful_requests",
                                                    "terminated_requests",
                                                    "unreachable_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthenticationStatistics, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthenticationStatistics, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.accepted_requests.is_set or
                                        self.errored_requests.is_set or
                                        self.incomplete_requests.is_set or
                                        self.rejected_requests.is_set or
                                        self.sent_requests.is_set or
                                        self.successful_requests.is_set or
                                        self.terminated_requests.is_set or
                                        self.unreachable_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.accepted_requests.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.incomplete_requests.yfilter != YFilter.not_set or
                                        self.rejected_requests.yfilter != YFilter.not_set or
                                        self.sent_requests.yfilter != YFilter.not_set or
                                        self.successful_requests.yfilter != YFilter.not_set or
                                        self.terminated_requests.yfilter != YFilter.not_set or
                                        self.unreachable_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "authentication-statistics" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.incomplete_requests.is_set or self.incomplete_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.incomplete_requests.get_name_leafdata())
                                    if (self.rejected_requests.is_set or self.rejected_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.rejected_requests.get_name_leafdata())
                                    if (self.sent_requests.is_set or self.sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.sent_requests.get_name_leafdata())
                                    if (self.successful_requests.is_set or self.successful_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.successful_requests.get_name_leafdata())
                                    if (self.terminated_requests.is_set or self.terminated_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.terminated_requests.get_name_leafdata())
                                    if (self.unreachable_requests.is_set or self.unreachable_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unreachable_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "accepted-requests" or name == "errored-requests" or name == "incomplete-requests" or name == "rejected-requests" or name == "sent-requests" or name == "successful-requests" or name == "terminated-requests" or name == "unreachable-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "accepted-requests"):
                                        self.accepted_requests = value
                                        self.accepted_requests.value_namespace = name_space
                                        self.accepted_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "incomplete-requests"):
                                        self.incomplete_requests = value
                                        self.incomplete_requests.value_namespace = name_space
                                        self.incomplete_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "rejected-requests"):
                                        self.rejected_requests = value
                                        self.rejected_requests.value_namespace = name_space
                                        self.rejected_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "sent-requests"):
                                        self.sent_requests = value
                                        self.sent_requests.value_namespace = name_space
                                        self.sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "successful-requests"):
                                        self.successful_requests = value
                                        self.successful_requests.value_namespace = name_space
                                        self.successful_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "terminated-requests"):
                                        self.terminated_requests = value
                                        self.terminated_requests.value_namespace = name_space
                                        self.terminated_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "unreachable-requests"):
                                        self.unreachable_requests = value
                                        self.unreachable_requests.value_namespace = name_space
                                        self.unreachable_requests.value_namespace_prefix = name_space_prefix


                            class AuthorizationStatistics(Entity):
                                """
                                List of stats for authorization
                                
                                .. attribute:: accepted_requests
                                
                                	Request accepted by Radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Unexpected errors
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: incomplete_requests
                                
                                	Incomplete requests \- missing attributes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rejected_requests
                                
                                	Requests rejected by radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sent_requests
                                
                                	Requests sent to radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: successful_requests
                                
                                	Requests which are successful
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: terminated_requests
                                
                                	Requests terminated by disconnect
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: unreachable_requests
                                
                                	Radius server not available
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthorizationStatistics, self).__init__()

                                    self.yang_name = "authorization-statistics"
                                    self.yang_parent_name = "accounting-stats-all"

                                    self.accepted_requests = YLeaf(YType.uint64, "accepted-requests")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.incomplete_requests = YLeaf(YType.uint64, "incomplete-requests")

                                    self.rejected_requests = YLeaf(YType.uint64, "rejected-requests")

                                    self.sent_requests = YLeaf(YType.uint64, "sent-requests")

                                    self.successful_requests = YLeaf(YType.uint64, "successful-requests")

                                    self.terminated_requests = YLeaf(YType.uint64, "terminated-requests")

                                    self.unreachable_requests = YLeaf(YType.uint64, "unreachable-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("accepted_requests",
                                                    "errored_requests",
                                                    "incomplete_requests",
                                                    "rejected_requests",
                                                    "sent_requests",
                                                    "successful_requests",
                                                    "terminated_requests",
                                                    "unreachable_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthorizationStatistics, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthorizationStatistics, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.accepted_requests.is_set or
                                        self.errored_requests.is_set or
                                        self.incomplete_requests.is_set or
                                        self.rejected_requests.is_set or
                                        self.sent_requests.is_set or
                                        self.successful_requests.is_set or
                                        self.terminated_requests.is_set or
                                        self.unreachable_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.accepted_requests.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.incomplete_requests.yfilter != YFilter.not_set or
                                        self.rejected_requests.yfilter != YFilter.not_set or
                                        self.sent_requests.yfilter != YFilter.not_set or
                                        self.successful_requests.yfilter != YFilter.not_set or
                                        self.terminated_requests.yfilter != YFilter.not_set or
                                        self.unreachable_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "authorization-statistics" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.incomplete_requests.is_set or self.incomplete_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.incomplete_requests.get_name_leafdata())
                                    if (self.rejected_requests.is_set or self.rejected_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.rejected_requests.get_name_leafdata())
                                    if (self.sent_requests.is_set or self.sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.sent_requests.get_name_leafdata())
                                    if (self.successful_requests.is_set or self.successful_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.successful_requests.get_name_leafdata())
                                    if (self.terminated_requests.is_set or self.terminated_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.terminated_requests.get_name_leafdata())
                                    if (self.unreachable_requests.is_set or self.unreachable_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unreachable_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "accepted-requests" or name == "errored-requests" or name == "incomplete-requests" or name == "rejected-requests" or name == "sent-requests" or name == "successful-requests" or name == "terminated-requests" or name == "unreachable-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "accepted-requests"):
                                        self.accepted_requests = value
                                        self.accepted_requests.value_namespace = name_space
                                        self.accepted_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "incomplete-requests"):
                                        self.incomplete_requests = value
                                        self.incomplete_requests.value_namespace = name_space
                                        self.incomplete_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "rejected-requests"):
                                        self.rejected_requests = value
                                        self.rejected_requests.value_namespace = name_space
                                        self.rejected_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "sent-requests"):
                                        self.sent_requests = value
                                        self.sent_requests.value_namespace = name_space
                                        self.sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "successful-requests"):
                                        self.successful_requests = value
                                        self.successful_requests.value_namespace = name_space
                                        self.successful_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "terminated-requests"):
                                        self.terminated_requests = value
                                        self.terminated_requests.value_namespace = name_space
                                        self.terminated_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "unreachable-requests"):
                                        self.unreachable_requests = value
                                        self.unreachable_requests.value_namespace = name_space
                                        self.unreachable_requests.value_namespace_prefix = name_space_prefix


                            class ChangeOfAuthorizationStatistics(Entity):
                                """
                                List of stats for COA
                                
                                .. attribute:: account_logoff
                                
                                	Account logoff request statistics
                                	**type**\:   :py:class:`AccountLogoff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff>`
                                
                                .. attribute:: account_logon
                                
                                	Account logon request statistics
                                	**type**\:   :py:class:`AccountLogon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon>`
                                
                                .. attribute:: account_update
                                
                                	Account update request statistics
                                	**type**\:   :py:class:`AccountUpdate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate>`
                                
                                .. attribute:: attr_list_retrieve_failure_resps
                                
                                	Responses to attribute list failure errors
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: internal_err_resps
                                
                                	Responses to internal error
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: no_cmd_resps
                                
                                	Responses empty (no command) COA request
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: no_session_found_resps
                                
                                	Responses to COA with unknown session identifier
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: no_session_peer_resps
                                
                                	Responses to session peer not found error
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: resp_send_failure
                                
                                	Response send failures
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: service_multi
                                
                                	MA\-CoA Service request statistics
                                	**type**\:   :py:class:`ServiceMulti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti>`
                                
                                .. attribute:: service_profile_push_failure_resps
                                
                                	Responses to service profile push failures
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: session_disconnect
                                
                                	Session disconnect request statistics
                                	**type**\:   :py:class:`SessionDisconnect <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect>`
                                
                                .. attribute:: single_service_logoff
                                
                                	Single Service logoff request statistics
                                	**type**\:   :py:class:`SingleServiceLogoff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff>`
                                
                                .. attribute:: single_service_logon
                                
                                	Service logon request statistics
                                	**type**\:   :py:class:`SingleServiceLogon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon>`
                                
                                .. attribute:: single_service_modify
                                
                                	Single Service Modify request statistics
                                	**type**\:   :py:class:`SingleServiceModify <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify>`
                                
                                .. attribute:: unknown_account_cmd_resps
                                
                                	Responses to unknown account command
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: unknown_cmd_resps
                                
                                	Responses to unknown command
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: unknown_service_cmd_resps
                                
                                	Responses to unknown service command
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics, self).__init__()

                                    self.yang_name = "change-of-authorization-statistics"
                                    self.yang_parent_name = "accounting-stats-all"

                                    self.attr_list_retrieve_failure_resps = YLeaf(YType.uint64, "attr-list-retrieve-failure-resps")

                                    self.internal_err_resps = YLeaf(YType.uint64, "internal-err-resps")

                                    self.no_cmd_resps = YLeaf(YType.uint64, "no-cmd-resps")

                                    self.no_session_found_resps = YLeaf(YType.uint64, "no-session-found-resps")

                                    self.no_session_peer_resps = YLeaf(YType.uint64, "no-session-peer-resps")

                                    self.resp_send_failure = YLeaf(YType.uint64, "resp-send-failure")

                                    self.service_profile_push_failure_resps = YLeaf(YType.uint64, "service-profile-push-failure-resps")

                                    self.unknown_account_cmd_resps = YLeaf(YType.uint64, "unknown-account-cmd-resps")

                                    self.unknown_cmd_resps = YLeaf(YType.uint64, "unknown-cmd-resps")

                                    self.unknown_service_cmd_resps = YLeaf(YType.uint64, "unknown-service-cmd-resps")

                                    self.account_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff()
                                    self.account_logoff.parent = self
                                    self._children_name_map["account_logoff"] = "account-logoff"
                                    self._children_yang_names.add("account-logoff")

                                    self.account_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon()
                                    self.account_logon.parent = self
                                    self._children_name_map["account_logon"] = "account-logon"
                                    self._children_yang_names.add("account-logon")

                                    self.account_update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate()
                                    self.account_update.parent = self
                                    self._children_name_map["account_update"] = "account-update"
                                    self._children_yang_names.add("account-update")

                                    self.service_multi = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti()
                                    self.service_multi.parent = self
                                    self._children_name_map["service_multi"] = "service-multi"
                                    self._children_yang_names.add("service-multi")

                                    self.session_disconnect = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect()
                                    self.session_disconnect.parent = self
                                    self._children_name_map["session_disconnect"] = "session-disconnect"
                                    self._children_yang_names.add("session-disconnect")

                                    self.single_service_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff()
                                    self.single_service_logoff.parent = self
                                    self._children_name_map["single_service_logoff"] = "single-service-logoff"
                                    self._children_yang_names.add("single-service-logoff")

                                    self.single_service_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon()
                                    self.single_service_logon.parent = self
                                    self._children_name_map["single_service_logon"] = "single-service-logon"
                                    self._children_yang_names.add("single-service-logon")

                                    self.single_service_modify = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify()
                                    self.single_service_modify.parent = self
                                    self._children_name_map["single_service_modify"] = "single-service-modify"
                                    self._children_yang_names.add("single-service-modify")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("attr_list_retrieve_failure_resps",
                                                    "internal_err_resps",
                                                    "no_cmd_resps",
                                                    "no_session_found_resps",
                                                    "no_session_peer_resps",
                                                    "resp_send_failure",
                                                    "service_profile_push_failure_resps",
                                                    "unknown_account_cmd_resps",
                                                    "unknown_cmd_resps",
                                                    "unknown_service_cmd_resps") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics, self).__setattr__(name, value)


                                class AccountLogon(Entity):
                                    """
                                    Account logon request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon, self).__init__()

                                        self.yang_name = "account-logon"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "account-logon" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class AccountLogoff(Entity):
                                    """
                                    Account logoff request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff, self).__init__()

                                        self.yang_name = "account-logoff"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "account-logoff" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class AccountUpdate(Entity):
                                    """
                                    Account update request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate, self).__init__()

                                        self.yang_name = "account-update"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "account-update" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class SessionDisconnect(Entity):
                                    """
                                    Session disconnect request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect, self).__init__()

                                        self.yang_name = "session-disconnect"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "session-disconnect" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class SingleServiceLogon(Entity):
                                    """
                                    Service logon request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon, self).__init__()

                                        self.yang_name = "single-service-logon"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "single-service-logon" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class SingleServiceLogoff(Entity):
                                    """
                                    Single Service logoff request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff, self).__init__()

                                        self.yang_name = "single-service-logoff"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "single-service-logoff" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class SingleServiceModify(Entity):
                                    """
                                    Single Service Modify request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify, self).__init__()

                                        self.yang_name = "single-service-modify"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "single-service-modify" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class ServiceMulti(Entity):
                                    """
                                    MA\-CoA Service request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti, self).__init__()

                                        self.yang_name = "service-multi"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "service-multi" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        self.attr_list_retrieve_failure_resps.is_set or
                                        self.internal_err_resps.is_set or
                                        self.no_cmd_resps.is_set or
                                        self.no_session_found_resps.is_set or
                                        self.no_session_peer_resps.is_set or
                                        self.resp_send_failure.is_set or
                                        self.service_profile_push_failure_resps.is_set or
                                        self.unknown_account_cmd_resps.is_set or
                                        self.unknown_cmd_resps.is_set or
                                        self.unknown_service_cmd_resps.is_set or
                                        (self.account_logoff is not None and self.account_logoff.has_data()) or
                                        (self.account_logon is not None and self.account_logon.has_data()) or
                                        (self.account_update is not None and self.account_update.has_data()) or
                                        (self.service_multi is not None and self.service_multi.has_data()) or
                                        (self.session_disconnect is not None and self.session_disconnect.has_data()) or
                                        (self.single_service_logoff is not None and self.single_service_logoff.has_data()) or
                                        (self.single_service_logon is not None and self.single_service_logon.has_data()) or
                                        (self.single_service_modify is not None and self.single_service_modify.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.attr_list_retrieve_failure_resps.yfilter != YFilter.not_set or
                                        self.internal_err_resps.yfilter != YFilter.not_set or
                                        self.no_cmd_resps.yfilter != YFilter.not_set or
                                        self.no_session_found_resps.yfilter != YFilter.not_set or
                                        self.no_session_peer_resps.yfilter != YFilter.not_set or
                                        self.resp_send_failure.yfilter != YFilter.not_set or
                                        self.service_profile_push_failure_resps.yfilter != YFilter.not_set or
                                        self.unknown_account_cmd_resps.yfilter != YFilter.not_set or
                                        self.unknown_cmd_resps.yfilter != YFilter.not_set or
                                        self.unknown_service_cmd_resps.yfilter != YFilter.not_set or
                                        (self.account_logoff is not None and self.account_logoff.has_operation()) or
                                        (self.account_logon is not None and self.account_logon.has_operation()) or
                                        (self.account_update is not None and self.account_update.has_operation()) or
                                        (self.service_multi is not None and self.service_multi.has_operation()) or
                                        (self.session_disconnect is not None and self.session_disconnect.has_operation()) or
                                        (self.single_service_logoff is not None and self.single_service_logoff.has_operation()) or
                                        (self.single_service_logon is not None and self.single_service_logon.has_operation()) or
                                        (self.single_service_modify is not None and self.single_service_modify.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "change-of-authorization-statistics" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.attr_list_retrieve_failure_resps.is_set or self.attr_list_retrieve_failure_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.attr_list_retrieve_failure_resps.get_name_leafdata())
                                    if (self.internal_err_resps.is_set or self.internal_err_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.internal_err_resps.get_name_leafdata())
                                    if (self.no_cmd_resps.is_set or self.no_cmd_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.no_cmd_resps.get_name_leafdata())
                                    if (self.no_session_found_resps.is_set or self.no_session_found_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.no_session_found_resps.get_name_leafdata())
                                    if (self.no_session_peer_resps.is_set or self.no_session_peer_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.no_session_peer_resps.get_name_leafdata())
                                    if (self.resp_send_failure.is_set or self.resp_send_failure.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.resp_send_failure.get_name_leafdata())
                                    if (self.service_profile_push_failure_resps.is_set or self.service_profile_push_failure_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.service_profile_push_failure_resps.get_name_leafdata())
                                    if (self.unknown_account_cmd_resps.is_set or self.unknown_account_cmd_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unknown_account_cmd_resps.get_name_leafdata())
                                    if (self.unknown_cmd_resps.is_set or self.unknown_cmd_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unknown_cmd_resps.get_name_leafdata())
                                    if (self.unknown_service_cmd_resps.is_set or self.unknown_service_cmd_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unknown_service_cmd_resps.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "account-logoff"):
                                        if (self.account_logoff is None):
                                            self.account_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff()
                                            self.account_logoff.parent = self
                                            self._children_name_map["account_logoff"] = "account-logoff"
                                        return self.account_logoff

                                    if (child_yang_name == "account-logon"):
                                        if (self.account_logon is None):
                                            self.account_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon()
                                            self.account_logon.parent = self
                                            self._children_name_map["account_logon"] = "account-logon"
                                        return self.account_logon

                                    if (child_yang_name == "account-update"):
                                        if (self.account_update is None):
                                            self.account_update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate()
                                            self.account_update.parent = self
                                            self._children_name_map["account_update"] = "account-update"
                                        return self.account_update

                                    if (child_yang_name == "service-multi"):
                                        if (self.service_multi is None):
                                            self.service_multi = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti()
                                            self.service_multi.parent = self
                                            self._children_name_map["service_multi"] = "service-multi"
                                        return self.service_multi

                                    if (child_yang_name == "session-disconnect"):
                                        if (self.session_disconnect is None):
                                            self.session_disconnect = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect()
                                            self.session_disconnect.parent = self
                                            self._children_name_map["session_disconnect"] = "session-disconnect"
                                        return self.session_disconnect

                                    if (child_yang_name == "single-service-logoff"):
                                        if (self.single_service_logoff is None):
                                            self.single_service_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff()
                                            self.single_service_logoff.parent = self
                                            self._children_name_map["single_service_logoff"] = "single-service-logoff"
                                        return self.single_service_logoff

                                    if (child_yang_name == "single-service-logon"):
                                        if (self.single_service_logon is None):
                                            self.single_service_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon()
                                            self.single_service_logon.parent = self
                                            self._children_name_map["single_service_logon"] = "single-service-logon"
                                        return self.single_service_logon

                                    if (child_yang_name == "single-service-modify"):
                                        if (self.single_service_modify is None):
                                            self.single_service_modify = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify()
                                            self.single_service_modify.parent = self
                                            self._children_name_map["single_service_modify"] = "single-service-modify"
                                        return self.single_service_modify

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "account-logoff" or name == "account-logon" or name == "account-update" or name == "service-multi" or name == "session-disconnect" or name == "single-service-logoff" or name == "single-service-logon" or name == "single-service-modify" or name == "attr-list-retrieve-failure-resps" or name == "internal-err-resps" or name == "no-cmd-resps" or name == "no-session-found-resps" or name == "no-session-peer-resps" or name == "resp-send-failure" or name == "service-profile-push-failure-resps" or name == "unknown-account-cmd-resps" or name == "unknown-cmd-resps" or name == "unknown-service-cmd-resps"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "attr-list-retrieve-failure-resps"):
                                        self.attr_list_retrieve_failure_resps = value
                                        self.attr_list_retrieve_failure_resps.value_namespace = name_space
                                        self.attr_list_retrieve_failure_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "internal-err-resps"):
                                        self.internal_err_resps = value
                                        self.internal_err_resps.value_namespace = name_space
                                        self.internal_err_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "no-cmd-resps"):
                                        self.no_cmd_resps = value
                                        self.no_cmd_resps.value_namespace = name_space
                                        self.no_cmd_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "no-session-found-resps"):
                                        self.no_session_found_resps = value
                                        self.no_session_found_resps.value_namespace = name_space
                                        self.no_session_found_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "no-session-peer-resps"):
                                        self.no_session_peer_resps = value
                                        self.no_session_peer_resps.value_namespace = name_space
                                        self.no_session_peer_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "resp-send-failure"):
                                        self.resp_send_failure = value
                                        self.resp_send_failure.value_namespace = name_space
                                        self.resp_send_failure.value_namespace_prefix = name_space_prefix
                                    if(value_path == "service-profile-push-failure-resps"):
                                        self.service_profile_push_failure_resps = value
                                        self.service_profile_push_failure_resps.value_namespace = name_space
                                        self.service_profile_push_failure_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "unknown-account-cmd-resps"):
                                        self.unknown_account_cmd_resps = value
                                        self.unknown_account_cmd_resps.value_namespace = name_space
                                        self.unknown_account_cmd_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "unknown-cmd-resps"):
                                        self.unknown_cmd_resps = value
                                        self.unknown_cmd_resps.value_namespace = name_space
                                        self.unknown_cmd_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "unknown-service-cmd-resps"):
                                        self.unknown_service_cmd_resps = value
                                        self.unknown_service_cmd_resps.value_namespace = name_space
                                        self.unknown_service_cmd_resps.value_namespace_prefix = name_space_prefix


                            class MobilityStatistics(Entity):
                                """
                                List of stats for Mobility
                                
                                .. attribute:: receive_response_failures
                                
                                	Response receive failures
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: receive_response_successes
                                
                                	Response receive success
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: send_request_failures
                                
                                	Request send failures
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: send_request_successes
                                
                                	Request send success
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.MobilityStatistics, self).__init__()

                                    self.yang_name = "mobility-statistics"
                                    self.yang_parent_name = "accounting-stats-all"

                                    self.receive_response_failures = YLeaf(YType.uint64, "receive-response-failures")

                                    self.receive_response_successes = YLeaf(YType.uint64, "receive-response-successes")

                                    self.send_request_failures = YLeaf(YType.uint64, "send-request-failures")

                                    self.send_request_successes = YLeaf(YType.uint64, "send-request-successes")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("receive_response_failures",
                                                    "receive_response_successes",
                                                    "send_request_failures",
                                                    "send_request_successes") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.MobilityStatistics, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.MobilityStatistics, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.receive_response_failures.is_set or
                                        self.receive_response_successes.is_set or
                                        self.send_request_failures.is_set or
                                        self.send_request_successes.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.receive_response_failures.yfilter != YFilter.not_set or
                                        self.receive_response_successes.yfilter != YFilter.not_set or
                                        self.send_request_failures.yfilter != YFilter.not_set or
                                        self.send_request_successes.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "mobility-statistics" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.receive_response_failures.is_set or self.receive_response_failures.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.receive_response_failures.get_name_leafdata())
                                    if (self.receive_response_successes.is_set or self.receive_response_successes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.receive_response_successes.get_name_leafdata())
                                    if (self.send_request_failures.is_set or self.send_request_failures.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.send_request_failures.get_name_leafdata())
                                    if (self.send_request_successes.is_set or self.send_request_successes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.send_request_successes.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "receive-response-failures" or name == "receive-response-successes" or name == "send-request-failures" or name == "send-request-successes"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "receive-response-failures"):
                                        self.receive_response_failures = value
                                        self.receive_response_failures.value_namespace = name_space
                                        self.receive_response_failures.value_namespace_prefix = name_space_prefix
                                    if(value_path == "receive-response-successes"):
                                        self.receive_response_successes = value
                                        self.receive_response_successes.value_namespace = name_space
                                        self.receive_response_successes.value_namespace_prefix = name_space_prefix
                                    if(value_path == "send-request-failures"):
                                        self.send_request_failures = value
                                        self.send_request_failures.value_namespace = name_space
                                        self.send_request_failures.value_namespace_prefix = name_space_prefix
                                    if(value_path == "send-request-successes"):
                                        self.send_request_successes = value
                                        self.send_request_successes.value_namespace = name_space
                                        self.send_request_successes.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.accounting_statistics is not None and self.accounting_statistics.has_data()) or
                                    (self.authentication_statistics is not None and self.authentication_statistics.has_data()) or
                                    (self.authorization_statistics is not None and self.authorization_statistics.has_data()) or
                                    (self.change_of_authorization_statistics is not None and self.change_of_authorization_statistics.has_data()) or
                                    (self.mobility_statistics is not None and self.mobility_statistics.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.accounting_statistics is not None and self.accounting_statistics.has_operation()) or
                                    (self.authentication_statistics is not None and self.authentication_statistics.has_operation()) or
                                    (self.authorization_statistics is not None and self.authorization_statistics.has_operation()) or
                                    (self.change_of_authorization_statistics is not None and self.change_of_authorization_statistics.has_operation()) or
                                    (self.mobility_statistics is not None and self.mobility_statistics.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "accounting-stats-all" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "accounting-statistics"):
                                    if (self.accounting_statistics is None):
                                        self.accounting_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AccountingStatistics()
                                        self.accounting_statistics.parent = self
                                        self._children_name_map["accounting_statistics"] = "accounting-statistics"
                                    return self.accounting_statistics

                                if (child_yang_name == "authentication-statistics"):
                                    if (self.authentication_statistics is None):
                                        self.authentication_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthenticationStatistics()
                                        self.authentication_statistics.parent = self
                                        self._children_name_map["authentication_statistics"] = "authentication-statistics"
                                    return self.authentication_statistics

                                if (child_yang_name == "authorization-statistics"):
                                    if (self.authorization_statistics is None):
                                        self.authorization_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.AuthorizationStatistics()
                                        self.authorization_statistics.parent = self
                                        self._children_name_map["authorization_statistics"] = "authorization-statistics"
                                    return self.authorization_statistics

                                if (child_yang_name == "change-of-authorization-statistics"):
                                    if (self.change_of_authorization_statistics is None):
                                        self.change_of_authorization_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.ChangeOfAuthorizationStatistics()
                                        self.change_of_authorization_statistics.parent = self
                                        self._children_name_map["change_of_authorization_statistics"] = "change-of-authorization-statistics"
                                    return self.change_of_authorization_statistics

                                if (child_yang_name == "mobility-statistics"):
                                    if (self.mobility_statistics is None):
                                        self.mobility_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll.MobilityStatistics()
                                        self.mobility_statistics.parent = self
                                        self._children_name_map["mobility_statistics"] = "mobility-statistics"
                                    return self.mobility_statistics

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "accounting-statistics" or name == "authentication-statistics" or name == "authorization-statistics" or name == "change-of-authorization-statistics" or name == "mobility-statistics"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class ChangeOfAuthorization(Entity):
                            """
                            Change of authorization (COA) statistics
                            
                            .. attribute:: account_logoff
                            
                            	Account logoff request statistics
                            	**type**\:   :py:class:`AccountLogoff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogoff>`
                            
                            .. attribute:: account_logon
                            
                            	Account logon request statistics
                            	**type**\:   :py:class:`AccountLogon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogon>`
                            
                            .. attribute:: account_update
                            
                            	Account update request statistics
                            	**type**\:   :py:class:`AccountUpdate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountUpdate>`
                            
                            .. attribute:: attr_list_retrieve_failure_resps
                            
                            	Responses to attribute list failure errors
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: internal_err_resps
                            
                            	Responses to internal error
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: no_cmd_resps
                            
                            	Responses empty (no command) COA request
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: no_session_found_resps
                            
                            	Responses to COA with unknown session identifier
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: no_session_peer_resps
                            
                            	Responses to session peer not found error
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: resp_send_failure
                            
                            	Response send failures
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: service_multi
                            
                            	MA\-CoA Service request statistics
                            	**type**\:   :py:class:`ServiceMulti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.ServiceMulti>`
                            
                            .. attribute:: service_profile_push_failure_resps
                            
                            	Responses to service profile push failures
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: session_disconnect
                            
                            	Session disconnect request statistics
                            	**type**\:   :py:class:`SessionDisconnect <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SessionDisconnect>`
                            
                            .. attribute:: single_service_logoff
                            
                            	Single Service logoff request statistics
                            	**type**\:   :py:class:`SingleServiceLogoff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogoff>`
                            
                            .. attribute:: single_service_logon
                            
                            	Service logon request statistics
                            	**type**\:   :py:class:`SingleServiceLogon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogon>`
                            
                            .. attribute:: single_service_modify
                            
                            	Single Service Modify request statistics
                            	**type**\:   :py:class:`SingleServiceModify <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceModify>`
                            
                            .. attribute:: unknown_account_cmd_resps
                            
                            	Responses to unknown account command
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: unknown_cmd_resps
                            
                            	Responses to unknown command
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: unknown_service_cmd_resps
                            
                            	Responses to unknown service command
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization, self).__init__()

                                self.yang_name = "change-of-authorization"
                                self.yang_parent_name = "aaa"

                                self.attr_list_retrieve_failure_resps = YLeaf(YType.uint64, "attr-list-retrieve-failure-resps")

                                self.internal_err_resps = YLeaf(YType.uint64, "internal-err-resps")

                                self.no_cmd_resps = YLeaf(YType.uint64, "no-cmd-resps")

                                self.no_session_found_resps = YLeaf(YType.uint64, "no-session-found-resps")

                                self.no_session_peer_resps = YLeaf(YType.uint64, "no-session-peer-resps")

                                self.resp_send_failure = YLeaf(YType.uint64, "resp-send-failure")

                                self.service_profile_push_failure_resps = YLeaf(YType.uint64, "service-profile-push-failure-resps")

                                self.unknown_account_cmd_resps = YLeaf(YType.uint64, "unknown-account-cmd-resps")

                                self.unknown_cmd_resps = YLeaf(YType.uint64, "unknown-cmd-resps")

                                self.unknown_service_cmd_resps = YLeaf(YType.uint64, "unknown-service-cmd-resps")

                                self.account_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogoff()
                                self.account_logoff.parent = self
                                self._children_name_map["account_logoff"] = "account-logoff"
                                self._children_yang_names.add("account-logoff")

                                self.account_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogon()
                                self.account_logon.parent = self
                                self._children_name_map["account_logon"] = "account-logon"
                                self._children_yang_names.add("account-logon")

                                self.account_update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountUpdate()
                                self.account_update.parent = self
                                self._children_name_map["account_update"] = "account-update"
                                self._children_yang_names.add("account-update")

                                self.service_multi = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.ServiceMulti()
                                self.service_multi.parent = self
                                self._children_name_map["service_multi"] = "service-multi"
                                self._children_yang_names.add("service-multi")

                                self.session_disconnect = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SessionDisconnect()
                                self.session_disconnect.parent = self
                                self._children_name_map["session_disconnect"] = "session-disconnect"
                                self._children_yang_names.add("session-disconnect")

                                self.single_service_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogoff()
                                self.single_service_logoff.parent = self
                                self._children_name_map["single_service_logoff"] = "single-service-logoff"
                                self._children_yang_names.add("single-service-logoff")

                                self.single_service_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogon()
                                self.single_service_logon.parent = self
                                self._children_name_map["single_service_logon"] = "single-service-logon"
                                self._children_yang_names.add("single-service-logon")

                                self.single_service_modify = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceModify()
                                self.single_service_modify.parent = self
                                self._children_name_map["single_service_modify"] = "single-service-modify"
                                self._children_yang_names.add("single-service-modify")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("attr_list_retrieve_failure_resps",
                                                "internal_err_resps",
                                                "no_cmd_resps",
                                                "no_session_found_resps",
                                                "no_session_peer_resps",
                                                "resp_send_failure",
                                                "service_profile_push_failure_resps",
                                                "unknown_account_cmd_resps",
                                                "unknown_cmd_resps",
                                                "unknown_service_cmd_resps") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization, self).__setattr__(name, value)


                            class AccountLogon(Entity):
                                """
                                Account logon request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogon, self).__init__()

                                    self.yang_name = "account-logon"
                                    self.yang_parent_name = "change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogon, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogon, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "account-logon" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class AccountLogoff(Entity):
                                """
                                Account logoff request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogoff, self).__init__()

                                    self.yang_name = "account-logoff"
                                    self.yang_parent_name = "change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogoff, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogoff, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "account-logoff" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class AccountUpdate(Entity):
                                """
                                Account update request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountUpdate, self).__init__()

                                    self.yang_name = "account-update"
                                    self.yang_parent_name = "change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountUpdate, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountUpdate, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "account-update" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class SessionDisconnect(Entity):
                                """
                                Session disconnect request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SessionDisconnect, self).__init__()

                                    self.yang_name = "session-disconnect"
                                    self.yang_parent_name = "change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SessionDisconnect, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SessionDisconnect, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "session-disconnect" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class SingleServiceLogon(Entity):
                                """
                                Service logon request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogon, self).__init__()

                                    self.yang_name = "single-service-logon"
                                    self.yang_parent_name = "change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogon, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogon, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "single-service-logon" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class SingleServiceLogoff(Entity):
                                """
                                Single Service logoff request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogoff, self).__init__()

                                    self.yang_name = "single-service-logoff"
                                    self.yang_parent_name = "change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogoff, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogoff, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "single-service-logoff" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class SingleServiceModify(Entity):
                                """
                                Single Service Modify request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceModify, self).__init__()

                                    self.yang_name = "single-service-modify"
                                    self.yang_parent_name = "change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceModify, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceModify, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "single-service-modify" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class ServiceMulti(Entity):
                                """
                                MA\-CoA Service request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.ServiceMulti, self).__init__()

                                    self.yang_name = "service-multi"
                                    self.yang_parent_name = "change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.ServiceMulti, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.ServiceMulti, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "service-multi" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.attr_list_retrieve_failure_resps.is_set or
                                    self.internal_err_resps.is_set or
                                    self.no_cmd_resps.is_set or
                                    self.no_session_found_resps.is_set or
                                    self.no_session_peer_resps.is_set or
                                    self.resp_send_failure.is_set or
                                    self.service_profile_push_failure_resps.is_set or
                                    self.unknown_account_cmd_resps.is_set or
                                    self.unknown_cmd_resps.is_set or
                                    self.unknown_service_cmd_resps.is_set or
                                    (self.account_logoff is not None and self.account_logoff.has_data()) or
                                    (self.account_logon is not None and self.account_logon.has_data()) or
                                    (self.account_update is not None and self.account_update.has_data()) or
                                    (self.service_multi is not None and self.service_multi.has_data()) or
                                    (self.session_disconnect is not None and self.session_disconnect.has_data()) or
                                    (self.single_service_logoff is not None and self.single_service_logoff.has_data()) or
                                    (self.single_service_logon is not None and self.single_service_logon.has_data()) or
                                    (self.single_service_modify is not None and self.single_service_modify.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.attr_list_retrieve_failure_resps.yfilter != YFilter.not_set or
                                    self.internal_err_resps.yfilter != YFilter.not_set or
                                    self.no_cmd_resps.yfilter != YFilter.not_set or
                                    self.no_session_found_resps.yfilter != YFilter.not_set or
                                    self.no_session_peer_resps.yfilter != YFilter.not_set or
                                    self.resp_send_failure.yfilter != YFilter.not_set or
                                    self.service_profile_push_failure_resps.yfilter != YFilter.not_set or
                                    self.unknown_account_cmd_resps.yfilter != YFilter.not_set or
                                    self.unknown_cmd_resps.yfilter != YFilter.not_set or
                                    self.unknown_service_cmd_resps.yfilter != YFilter.not_set or
                                    (self.account_logoff is not None and self.account_logoff.has_operation()) or
                                    (self.account_logon is not None and self.account_logon.has_operation()) or
                                    (self.account_update is not None and self.account_update.has_operation()) or
                                    (self.service_multi is not None and self.service_multi.has_operation()) or
                                    (self.session_disconnect is not None and self.session_disconnect.has_operation()) or
                                    (self.single_service_logoff is not None and self.single_service_logoff.has_operation()) or
                                    (self.single_service_logon is not None and self.single_service_logon.has_operation()) or
                                    (self.single_service_modify is not None and self.single_service_modify.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "change-of-authorization" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.attr_list_retrieve_failure_resps.is_set or self.attr_list_retrieve_failure_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attr_list_retrieve_failure_resps.get_name_leafdata())
                                if (self.internal_err_resps.is_set or self.internal_err_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.internal_err_resps.get_name_leafdata())
                                if (self.no_cmd_resps.is_set or self.no_cmd_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.no_cmd_resps.get_name_leafdata())
                                if (self.no_session_found_resps.is_set or self.no_session_found_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.no_session_found_resps.get_name_leafdata())
                                if (self.no_session_peer_resps.is_set or self.no_session_peer_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.no_session_peer_resps.get_name_leafdata())
                                if (self.resp_send_failure.is_set or self.resp_send_failure.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.resp_send_failure.get_name_leafdata())
                                if (self.service_profile_push_failure_resps.is_set or self.service_profile_push_failure_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.service_profile_push_failure_resps.get_name_leafdata())
                                if (self.unknown_account_cmd_resps.is_set or self.unknown_account_cmd_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unknown_account_cmd_resps.get_name_leafdata())
                                if (self.unknown_cmd_resps.is_set or self.unknown_cmd_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unknown_cmd_resps.get_name_leafdata())
                                if (self.unknown_service_cmd_resps.is_set or self.unknown_service_cmd_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unknown_service_cmd_resps.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "account-logoff"):
                                    if (self.account_logoff is None):
                                        self.account_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogoff()
                                        self.account_logoff.parent = self
                                        self._children_name_map["account_logoff"] = "account-logoff"
                                    return self.account_logoff

                                if (child_yang_name == "account-logon"):
                                    if (self.account_logon is None):
                                        self.account_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountLogon()
                                        self.account_logon.parent = self
                                        self._children_name_map["account_logon"] = "account-logon"
                                    return self.account_logon

                                if (child_yang_name == "account-update"):
                                    if (self.account_update is None):
                                        self.account_update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.AccountUpdate()
                                        self.account_update.parent = self
                                        self._children_name_map["account_update"] = "account-update"
                                    return self.account_update

                                if (child_yang_name == "service-multi"):
                                    if (self.service_multi is None):
                                        self.service_multi = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.ServiceMulti()
                                        self.service_multi.parent = self
                                        self._children_name_map["service_multi"] = "service-multi"
                                    return self.service_multi

                                if (child_yang_name == "session-disconnect"):
                                    if (self.session_disconnect is None):
                                        self.session_disconnect = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SessionDisconnect()
                                        self.session_disconnect.parent = self
                                        self._children_name_map["session_disconnect"] = "session-disconnect"
                                    return self.session_disconnect

                                if (child_yang_name == "single-service-logoff"):
                                    if (self.single_service_logoff is None):
                                        self.single_service_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogoff()
                                        self.single_service_logoff.parent = self
                                        self._children_name_map["single_service_logoff"] = "single-service-logoff"
                                    return self.single_service_logoff

                                if (child_yang_name == "single-service-logon"):
                                    if (self.single_service_logon is None):
                                        self.single_service_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceLogon()
                                        self.single_service_logon.parent = self
                                        self._children_name_map["single_service_logon"] = "single-service-logon"
                                    return self.single_service_logon

                                if (child_yang_name == "single-service-modify"):
                                    if (self.single_service_modify is None):
                                        self.single_service_modify = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization.SingleServiceModify()
                                        self.single_service_modify.parent = self
                                        self._children_name_map["single_service_modify"] = "single-service-modify"
                                    return self.single_service_modify

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "account-logoff" or name == "account-logon" or name == "account-update" or name == "service-multi" or name == "session-disconnect" or name == "single-service-logoff" or name == "single-service-logon" or name == "single-service-modify" or name == "attr-list-retrieve-failure-resps" or name == "internal-err-resps" or name == "no-cmd-resps" or name == "no-session-found-resps" or name == "no-session-peer-resps" or name == "resp-send-failure" or name == "service-profile-push-failure-resps" or name == "unknown-account-cmd-resps" or name == "unknown-cmd-resps" or name == "unknown-service-cmd-resps"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "attr-list-retrieve-failure-resps"):
                                    self.attr_list_retrieve_failure_resps = value
                                    self.attr_list_retrieve_failure_resps.value_namespace = name_space
                                    self.attr_list_retrieve_failure_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "internal-err-resps"):
                                    self.internal_err_resps = value
                                    self.internal_err_resps.value_namespace = name_space
                                    self.internal_err_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "no-cmd-resps"):
                                    self.no_cmd_resps = value
                                    self.no_cmd_resps.value_namespace = name_space
                                    self.no_cmd_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "no-session-found-resps"):
                                    self.no_session_found_resps = value
                                    self.no_session_found_resps.value_namespace = name_space
                                    self.no_session_found_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "no-session-peer-resps"):
                                    self.no_session_peer_resps = value
                                    self.no_session_peer_resps.value_namespace = name_space
                                    self.no_session_peer_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "resp-send-failure"):
                                    self.resp_send_failure = value
                                    self.resp_send_failure.value_namespace = name_space
                                    self.resp_send_failure.value_namespace_prefix = name_space_prefix
                                if(value_path == "service-profile-push-failure-resps"):
                                    self.service_profile_push_failure_resps = value
                                    self.service_profile_push_failure_resps.value_namespace = name_space
                                    self.service_profile_push_failure_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "unknown-account-cmd-resps"):
                                    self.unknown_account_cmd_resps = value
                                    self.unknown_account_cmd_resps.value_namespace = name_space
                                    self.unknown_account_cmd_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "unknown-cmd-resps"):
                                    self.unknown_cmd_resps = value
                                    self.unknown_cmd_resps.value_namespace = name_space
                                    self.unknown_cmd_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "unknown-service-cmd-resps"):
                                    self.unknown_service_cmd_resps = value
                                    self.unknown_service_cmd_resps.value_namespace = name_space
                                    self.unknown_service_cmd_resps.value_namespace_prefix = name_space_prefix


                        class Authorization(Entity):
                            """
                            Authorization statistics
                            
                            .. attribute:: accepted_requests
                            
                            	Request accepted by Radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: errored_requests
                            
                            	Unexpected errors
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: incomplete_requests
                            
                            	Incomplete requests \- missing attributes
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: rejected_requests
                            
                            	Requests rejected by radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: sent_requests
                            
                            	Requests sent to radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: successful_requests
                            
                            	Requests which are successful
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: terminated_requests
                            
                            	Requests terminated by disconnect
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: unreachable_requests
                            
                            	Radius server not available
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authorization, self).__init__()

                                self.yang_name = "authorization"
                                self.yang_parent_name = "aaa"

                                self.accepted_requests = YLeaf(YType.uint64, "accepted-requests")

                                self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                self.incomplete_requests = YLeaf(YType.uint64, "incomplete-requests")

                                self.rejected_requests = YLeaf(YType.uint64, "rejected-requests")

                                self.sent_requests = YLeaf(YType.uint64, "sent-requests")

                                self.successful_requests = YLeaf(YType.uint64, "successful-requests")

                                self.terminated_requests = YLeaf(YType.uint64, "terminated-requests")

                                self.unreachable_requests = YLeaf(YType.uint64, "unreachable-requests")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("accepted_requests",
                                                "errored_requests",
                                                "incomplete_requests",
                                                "rejected_requests",
                                                "sent_requests",
                                                "successful_requests",
                                                "terminated_requests",
                                                "unreachable_requests") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authorization, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authorization, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.accepted_requests.is_set or
                                    self.errored_requests.is_set or
                                    self.incomplete_requests.is_set or
                                    self.rejected_requests.is_set or
                                    self.sent_requests.is_set or
                                    self.successful_requests.is_set or
                                    self.terminated_requests.is_set or
                                    self.unreachable_requests.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.accepted_requests.yfilter != YFilter.not_set or
                                    self.errored_requests.yfilter != YFilter.not_set or
                                    self.incomplete_requests.yfilter != YFilter.not_set or
                                    self.rejected_requests.yfilter != YFilter.not_set or
                                    self.sent_requests.yfilter != YFilter.not_set or
                                    self.successful_requests.yfilter != YFilter.not_set or
                                    self.terminated_requests.yfilter != YFilter.not_set or
                                    self.unreachable_requests.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "authorization" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                if (self.incomplete_requests.is_set or self.incomplete_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.incomplete_requests.get_name_leafdata())
                                if (self.rejected_requests.is_set or self.rejected_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rejected_requests.get_name_leafdata())
                                if (self.sent_requests.is_set or self.sent_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.sent_requests.get_name_leafdata())
                                if (self.successful_requests.is_set or self.successful_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.successful_requests.get_name_leafdata())
                                if (self.terminated_requests.is_set or self.terminated_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.terminated_requests.get_name_leafdata())
                                if (self.unreachable_requests.is_set or self.unreachable_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unreachable_requests.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "accepted-requests" or name == "errored-requests" or name == "incomplete-requests" or name == "rejected-requests" or name == "sent-requests" or name == "successful-requests" or name == "terminated-requests" or name == "unreachable-requests"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "accepted-requests"):
                                    self.accepted_requests = value
                                    self.accepted_requests.value_namespace = name_space
                                    self.accepted_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "errored-requests"):
                                    self.errored_requests = value
                                    self.errored_requests.value_namespace = name_space
                                    self.errored_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "incomplete-requests"):
                                    self.incomplete_requests = value
                                    self.incomplete_requests.value_namespace = name_space
                                    self.incomplete_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "rejected-requests"):
                                    self.rejected_requests = value
                                    self.rejected_requests.value_namespace = name_space
                                    self.rejected_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "sent-requests"):
                                    self.sent_requests = value
                                    self.sent_requests.value_namespace = name_space
                                    self.sent_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "successful-requests"):
                                    self.successful_requests = value
                                    self.successful_requests.value_namespace = name_space
                                    self.successful_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "terminated-requests"):
                                    self.terminated_requests = value
                                    self.terminated_requests.value_namespace = name_space
                                    self.terminated_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "unreachable-requests"):
                                    self.unreachable_requests = value
                                    self.unreachable_requests.value_namespace = name_space
                                    self.unreachable_requests.value_namespace_prefix = name_space_prefix


                        class AggregateAuthorization(Entity):
                            """
                            Aggregate authorization statistics
                            
                            .. attribute:: accepted_requests
                            
                            	Request accepted by Radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: errored_requests
                            
                            	Unexpected errors
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: incomplete_requests
                            
                            	Incomplete requests \- missing attributes
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: rejected_requests
                            
                            	Requests rejected by radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: sent_requests
                            
                            	Requests sent to radius server
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: successful_requests
                            
                            	Requests which are successful
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: terminated_requests
                            
                            	Requests terminated by disconnect
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: unreachable_requests
                            
                            	Radius server not available
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthorization, self).__init__()

                                self.yang_name = "aggregate-authorization"
                                self.yang_parent_name = "aaa"

                                self.accepted_requests = YLeaf(YType.uint64, "accepted-requests")

                                self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                self.incomplete_requests = YLeaf(YType.uint64, "incomplete-requests")

                                self.rejected_requests = YLeaf(YType.uint64, "rejected-requests")

                                self.sent_requests = YLeaf(YType.uint64, "sent-requests")

                                self.successful_requests = YLeaf(YType.uint64, "successful-requests")

                                self.terminated_requests = YLeaf(YType.uint64, "terminated-requests")

                                self.unreachable_requests = YLeaf(YType.uint64, "unreachable-requests")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("accepted_requests",
                                                "errored_requests",
                                                "incomplete_requests",
                                                "rejected_requests",
                                                "sent_requests",
                                                "successful_requests",
                                                "terminated_requests",
                                                "unreachable_requests") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthorization, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthorization, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.accepted_requests.is_set or
                                    self.errored_requests.is_set or
                                    self.incomplete_requests.is_set or
                                    self.rejected_requests.is_set or
                                    self.sent_requests.is_set or
                                    self.successful_requests.is_set or
                                    self.terminated_requests.is_set or
                                    self.unreachable_requests.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.accepted_requests.yfilter != YFilter.not_set or
                                    self.errored_requests.yfilter != YFilter.not_set or
                                    self.incomplete_requests.yfilter != YFilter.not_set or
                                    self.rejected_requests.yfilter != YFilter.not_set or
                                    self.sent_requests.yfilter != YFilter.not_set or
                                    self.successful_requests.yfilter != YFilter.not_set or
                                    self.terminated_requests.yfilter != YFilter.not_set or
                                    self.unreachable_requests.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "aggregate-authorization" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                if (self.incomplete_requests.is_set or self.incomplete_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.incomplete_requests.get_name_leafdata())
                                if (self.rejected_requests.is_set or self.rejected_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rejected_requests.get_name_leafdata())
                                if (self.sent_requests.is_set or self.sent_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.sent_requests.get_name_leafdata())
                                if (self.successful_requests.is_set or self.successful_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.successful_requests.get_name_leafdata())
                                if (self.terminated_requests.is_set or self.terminated_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.terminated_requests.get_name_leafdata())
                                if (self.unreachable_requests.is_set or self.unreachable_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unreachable_requests.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "accepted-requests" or name == "errored-requests" or name == "incomplete-requests" or name == "rejected-requests" or name == "sent-requests" or name == "successful-requests" or name == "terminated-requests" or name == "unreachable-requests"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "accepted-requests"):
                                    self.accepted_requests = value
                                    self.accepted_requests.value_namespace = name_space
                                    self.accepted_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "errored-requests"):
                                    self.errored_requests = value
                                    self.errored_requests.value_namespace = name_space
                                    self.errored_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "incomplete-requests"):
                                    self.incomplete_requests = value
                                    self.incomplete_requests.value_namespace = name_space
                                    self.incomplete_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "rejected-requests"):
                                    self.rejected_requests = value
                                    self.rejected_requests.value_namespace = name_space
                                    self.rejected_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "sent-requests"):
                                    self.sent_requests = value
                                    self.sent_requests.value_namespace = name_space
                                    self.sent_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "successful-requests"):
                                    self.successful_requests = value
                                    self.successful_requests.value_namespace = name_space
                                    self.successful_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "terminated-requests"):
                                    self.terminated_requests = value
                                    self.terminated_requests.value_namespace = name_space
                                    self.terminated_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "unreachable-requests"):
                                    self.unreachable_requests = value
                                    self.unreachable_requests.value_namespace = name_space
                                    self.unreachable_requests.value_namespace_prefix = name_space_prefix


                        class AggregateAccountingStatsAll(Entity):
                            """
                            Display all subscriber management total
                            statistics
                            
                            .. attribute:: accounting_statistics
                            
                            	List of stats for accounting
                            	**type**\:   :py:class:`AccountingStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics>`
                            
                            .. attribute:: authentication_statistics
                            
                            	List of stats for authentication
                            	**type**\:   :py:class:`AuthenticationStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthenticationStatistics>`
                            
                            .. attribute:: authorization_statistics
                            
                            	List of stats for authorization
                            	**type**\:   :py:class:`AuthorizationStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthorizationStatistics>`
                            
                            .. attribute:: change_of_authorization_statistics
                            
                            	List of stats for COA
                            	**type**\:   :py:class:`ChangeOfAuthorizationStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics>`
                            
                            .. attribute:: mobility_statistics
                            
                            	List of stats for Mobility
                            	**type**\:   :py:class:`MobilityStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.MobilityStatistics>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll, self).__init__()

                                self.yang_name = "aggregate-accounting-stats-all"
                                self.yang_parent_name = "aaa"

                                self.accounting_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics()
                                self.accounting_statistics.parent = self
                                self._children_name_map["accounting_statistics"] = "accounting-statistics"
                                self._children_yang_names.add("accounting-statistics")

                                self.authentication_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthenticationStatistics()
                                self.authentication_statistics.parent = self
                                self._children_name_map["authentication_statistics"] = "authentication-statistics"
                                self._children_yang_names.add("authentication-statistics")

                                self.authorization_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthorizationStatistics()
                                self.authorization_statistics.parent = self
                                self._children_name_map["authorization_statistics"] = "authorization-statistics"
                                self._children_yang_names.add("authorization-statistics")

                                self.change_of_authorization_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics()
                                self.change_of_authorization_statistics.parent = self
                                self._children_name_map["change_of_authorization_statistics"] = "change-of-authorization-statistics"
                                self._children_yang_names.add("change-of-authorization-statistics")

                                self.mobility_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.MobilityStatistics()
                                self.mobility_statistics.parent = self
                                self._children_name_map["mobility_statistics"] = "mobility-statistics"
                                self._children_yang_names.add("mobility-statistics")


                            class AccountingStatistics(Entity):
                                """
                                List of stats for accounting
                                
                                .. attribute:: active_sessions
                                
                                	Active sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: interim
                                
                                	Interim statistics
                                	**type**\:   :py:class:`Interim <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Interim>`
                                
                                .. attribute:: interim_inflight
                                
                                	Interim inflight details
                                	**type**\:   :py:class:`InterimInflight <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.InterimInflight>`
                                
                                .. attribute:: pass_through
                                
                                	Pass\-through statistics
                                	**type**\:   :py:class:`PassThrough <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.PassThrough>`
                                
                                .. attribute:: policy_plane_errored_requests
                                
                                	Policy plane errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: policy_plane_unknown_requests
                                
                                	Policy plane unknown requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: start
                                
                                	Start statistics
                                	**type**\:   :py:class:`Start <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Start>`
                                
                                .. attribute:: started_sessions
                                
                                	Started sessions
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: stop
                                
                                	Stop statistics
                                	**type**\:   :py:class:`Stop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Stop>`
                                
                                .. attribute:: stopped_sessions
                                
                                	Stopped sessions
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: update
                                
                                	Update statistics
                                	**type**\:   :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Update>`
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics, self).__init__()

                                    self.yang_name = "accounting-statistics"
                                    self.yang_parent_name = "aggregate-accounting-stats-all"

                                    self.active_sessions = YLeaf(YType.uint32, "active-sessions")

                                    self.policy_plane_errored_requests = YLeaf(YType.uint64, "policy-plane-errored-requests")

                                    self.policy_plane_unknown_requests = YLeaf(YType.uint64, "policy-plane-unknown-requests")

                                    self.started_sessions = YLeaf(YType.uint64, "started-sessions")

                                    self.stopped_sessions = YLeaf(YType.uint64, "stopped-sessions")

                                    self.interim = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Interim()
                                    self.interim.parent = self
                                    self._children_name_map["interim"] = "interim"
                                    self._children_yang_names.add("interim")

                                    self.interim_inflight = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.InterimInflight()
                                    self.interim_inflight.parent = self
                                    self._children_name_map["interim_inflight"] = "interim-inflight"
                                    self._children_yang_names.add("interim-inflight")

                                    self.pass_through = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.PassThrough()
                                    self.pass_through.parent = self
                                    self._children_name_map["pass_through"] = "pass-through"
                                    self._children_yang_names.add("pass-through")

                                    self.start = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Start()
                                    self.start.parent = self
                                    self._children_name_map["start"] = "start"
                                    self._children_yang_names.add("start")

                                    self.stop = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Stop()
                                    self.stop.parent = self
                                    self._children_name_map["stop"] = "stop"
                                    self._children_yang_names.add("stop")

                                    self.update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Update()
                                    self.update.parent = self
                                    self._children_name_map["update"] = "update"
                                    self._children_yang_names.add("update")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("active_sessions",
                                                    "policy_plane_errored_requests",
                                                    "policy_plane_unknown_requests",
                                                    "started_sessions",
                                                    "stopped_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics, self).__setattr__(name, value)


                                class Start(Entity):
                                    """
                                    Start statistics
                                    
                                    .. attribute:: aaa_errored_requests
                                    
                                    	AAA errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_failed_responses
                                    
                                    	AAA failed responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_sent_requests
                                    
                                    	AAA requests sent
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_succeeded_responses
                                    
                                    	AAA succeeded responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: errored_requests
                                    
                                    	Errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Start, self).__init__()

                                        self.yang_name = "start"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                        self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                        self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                        self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                        self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("aaa_errored_requests",
                                                        "aaa_failed_responses",
                                                        "aaa_sent_requests",
                                                        "aaa_succeeded_responses",
                                                        "errored_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Start, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Start, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.aaa_errored_requests.is_set or
                                            self.aaa_failed_responses.is_set or
                                            self.aaa_sent_requests.is_set or
                                            self.aaa_succeeded_responses.is_set or
                                            self.errored_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.aaa_errored_requests.yfilter != YFilter.not_set or
                                            self.aaa_failed_responses.yfilter != YFilter.not_set or
                                            self.aaa_sent_requests.yfilter != YFilter.not_set or
                                            self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                            self.errored_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "start" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                        if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                        if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                        if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                        if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "aaa-errored-requests"):
                                            self.aaa_errored_requests = value
                                            self.aaa_errored_requests.value_namespace = name_space
                                            self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-failed-responses"):
                                            self.aaa_failed_responses = value
                                            self.aaa_failed_responses.value_namespace = name_space
                                            self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-sent-requests"):
                                            self.aaa_sent_requests = value
                                            self.aaa_sent_requests.value_namespace = name_space
                                            self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-succeeded-responses"):
                                            self.aaa_succeeded_responses = value
                                            self.aaa_succeeded_responses.value_namespace = name_space
                                            self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "errored-requests"):
                                            self.errored_requests = value
                                            self.errored_requests.value_namespace = name_space
                                            self.errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class Stop(Entity):
                                    """
                                    Stop statistics
                                    
                                    .. attribute:: aaa_errored_requests
                                    
                                    	AAA errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_failed_responses
                                    
                                    	AAA failed responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_sent_requests
                                    
                                    	AAA requests sent
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_succeeded_responses
                                    
                                    	AAA succeeded responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: errored_requests
                                    
                                    	Errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Stop, self).__init__()

                                        self.yang_name = "stop"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                        self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                        self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                        self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                        self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("aaa_errored_requests",
                                                        "aaa_failed_responses",
                                                        "aaa_sent_requests",
                                                        "aaa_succeeded_responses",
                                                        "errored_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Stop, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Stop, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.aaa_errored_requests.is_set or
                                            self.aaa_failed_responses.is_set or
                                            self.aaa_sent_requests.is_set or
                                            self.aaa_succeeded_responses.is_set or
                                            self.errored_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.aaa_errored_requests.yfilter != YFilter.not_set or
                                            self.aaa_failed_responses.yfilter != YFilter.not_set or
                                            self.aaa_sent_requests.yfilter != YFilter.not_set or
                                            self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                            self.errored_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "stop" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                        if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                        if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                        if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                        if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "aaa-errored-requests"):
                                            self.aaa_errored_requests = value
                                            self.aaa_errored_requests.value_namespace = name_space
                                            self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-failed-responses"):
                                            self.aaa_failed_responses = value
                                            self.aaa_failed_responses.value_namespace = name_space
                                            self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-sent-requests"):
                                            self.aaa_sent_requests = value
                                            self.aaa_sent_requests.value_namespace = name_space
                                            self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-succeeded-responses"):
                                            self.aaa_succeeded_responses = value
                                            self.aaa_succeeded_responses.value_namespace = name_space
                                            self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "errored-requests"):
                                            self.errored_requests = value
                                            self.errored_requests.value_namespace = name_space
                                            self.errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class Interim(Entity):
                                    """
                                    Interim statistics
                                    
                                    .. attribute:: aaa_errored_requests
                                    
                                    	AAA errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_failed_responses
                                    
                                    	AAA failed responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_sent_requests
                                    
                                    	AAA requests sent
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_succeeded_responses
                                    
                                    	AAA succeeded responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: errored_requests
                                    
                                    	Errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Interim, self).__init__()

                                        self.yang_name = "interim"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                        self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                        self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                        self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                        self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("aaa_errored_requests",
                                                        "aaa_failed_responses",
                                                        "aaa_sent_requests",
                                                        "aaa_succeeded_responses",
                                                        "errored_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Interim, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Interim, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.aaa_errored_requests.is_set or
                                            self.aaa_failed_responses.is_set or
                                            self.aaa_sent_requests.is_set or
                                            self.aaa_succeeded_responses.is_set or
                                            self.errored_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.aaa_errored_requests.yfilter != YFilter.not_set or
                                            self.aaa_failed_responses.yfilter != YFilter.not_set or
                                            self.aaa_sent_requests.yfilter != YFilter.not_set or
                                            self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                            self.errored_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "interim" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                        if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                        if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                        if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                        if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "aaa-errored-requests"):
                                            self.aaa_errored_requests = value
                                            self.aaa_errored_requests.value_namespace = name_space
                                            self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-failed-responses"):
                                            self.aaa_failed_responses = value
                                            self.aaa_failed_responses.value_namespace = name_space
                                            self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-sent-requests"):
                                            self.aaa_sent_requests = value
                                            self.aaa_sent_requests.value_namespace = name_space
                                            self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-succeeded-responses"):
                                            self.aaa_succeeded_responses = value
                                            self.aaa_succeeded_responses.value_namespace = name_space
                                            self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "errored-requests"):
                                            self.errored_requests = value
                                            self.errored_requests.value_namespace = name_space
                                            self.errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class PassThrough(Entity):
                                    """
                                    Pass\-through statistics
                                    
                                    .. attribute:: aaa_errored_requests
                                    
                                    	AAA errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_failed_responses
                                    
                                    	AAA failed responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_sent_requests
                                    
                                    	AAA requests sent
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_succeeded_responses
                                    
                                    	AAA succeeded responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: errored_requests
                                    
                                    	Errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.PassThrough, self).__init__()

                                        self.yang_name = "pass-through"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                        self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                        self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                        self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                        self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("aaa_errored_requests",
                                                        "aaa_failed_responses",
                                                        "aaa_sent_requests",
                                                        "aaa_succeeded_responses",
                                                        "errored_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.PassThrough, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.PassThrough, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.aaa_errored_requests.is_set or
                                            self.aaa_failed_responses.is_set or
                                            self.aaa_sent_requests.is_set or
                                            self.aaa_succeeded_responses.is_set or
                                            self.errored_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.aaa_errored_requests.yfilter != YFilter.not_set or
                                            self.aaa_failed_responses.yfilter != YFilter.not_set or
                                            self.aaa_sent_requests.yfilter != YFilter.not_set or
                                            self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                            self.errored_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "pass-through" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                        if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                        if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                        if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                        if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "aaa-errored-requests"):
                                            self.aaa_errored_requests = value
                                            self.aaa_errored_requests.value_namespace = name_space
                                            self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-failed-responses"):
                                            self.aaa_failed_responses = value
                                            self.aaa_failed_responses.value_namespace = name_space
                                            self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-sent-requests"):
                                            self.aaa_sent_requests = value
                                            self.aaa_sent_requests.value_namespace = name_space
                                            self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-succeeded-responses"):
                                            self.aaa_succeeded_responses = value
                                            self.aaa_succeeded_responses.value_namespace = name_space
                                            self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "errored-requests"):
                                            self.errored_requests = value
                                            self.errored_requests.value_namespace = name_space
                                            self.errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class Update(Entity):
                                    """
                                    Update statistics
                                    
                                    .. attribute:: aaa_errored_requests
                                    
                                    	AAA errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_failed_responses
                                    
                                    	AAA failed responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_sent_requests
                                    
                                    	AAA requests sent
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: aaa_succeeded_responses
                                    
                                    	AAA succeeded responses
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: errored_requests
                                    
                                    	Errored requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Update, self).__init__()

                                        self.yang_name = "update"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                        self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                        self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                        self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                        self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("aaa_errored_requests",
                                                        "aaa_failed_responses",
                                                        "aaa_sent_requests",
                                                        "aaa_succeeded_responses",
                                                        "errored_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Update, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Update, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.aaa_errored_requests.is_set or
                                            self.aaa_failed_responses.is_set or
                                            self.aaa_sent_requests.is_set or
                                            self.aaa_succeeded_responses.is_set or
                                            self.errored_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.aaa_errored_requests.yfilter != YFilter.not_set or
                                            self.aaa_failed_responses.yfilter != YFilter.not_set or
                                            self.aaa_sent_requests.yfilter != YFilter.not_set or
                                            self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                            self.errored_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "update" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                        if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                        if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                        if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                        if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "aaa-errored-requests"):
                                            self.aaa_errored_requests = value
                                            self.aaa_errored_requests.value_namespace = name_space
                                            self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-failed-responses"):
                                            self.aaa_failed_responses = value
                                            self.aaa_failed_responses.value_namespace = name_space
                                            self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-sent-requests"):
                                            self.aaa_sent_requests = value
                                            self.aaa_sent_requests.value_namespace = name_space
                                            self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "aaa-succeeded-responses"):
                                            self.aaa_succeeded_responses = value
                                            self.aaa_succeeded_responses.value_namespace = name_space
                                            self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                        if(value_path == "errored-requests"):
                                            self.errored_requests = value
                                            self.errored_requests.value_namespace = name_space
                                            self.errored_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class InterimInflight(Entity):
                                    """
                                    Interim inflight details
                                    
                                    .. attribute:: accepted_requests
                                    
                                    	Accepted requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: denied_requests
                                    
                                    	Denied requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: low_water_mark_quota_of_requests
                                    
                                    	Low water mark quota of requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: quota_exhausts
                                    
                                    	Quota exhausts
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: remaining_quota_of_requests
                                    
                                    	Remaining quota of requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_quota_of_requests
                                    
                                    	Total quota of requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.InterimInflight, self).__init__()

                                        self.yang_name = "interim-inflight"
                                        self.yang_parent_name = "accounting-statistics"

                                        self.accepted_requests = YLeaf(YType.uint32, "accepted-requests")

                                        self.denied_requests = YLeaf(YType.uint32, "denied-requests")

                                        self.low_water_mark_quota_of_requests = YLeaf(YType.uint32, "low-water-mark-quota-of-requests")

                                        self.quota_exhausts = YLeaf(YType.uint32, "quota-exhausts")

                                        self.remaining_quota_of_requests = YLeaf(YType.uint32, "remaining-quota-of-requests")

                                        self.total_quota_of_requests = YLeaf(YType.uint32, "total-quota-of-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("accepted_requests",
                                                        "denied_requests",
                                                        "low_water_mark_quota_of_requests",
                                                        "quota_exhausts",
                                                        "remaining_quota_of_requests",
                                                        "total_quota_of_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.InterimInflight, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.InterimInflight, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.accepted_requests.is_set or
                                            self.denied_requests.is_set or
                                            self.low_water_mark_quota_of_requests.is_set or
                                            self.quota_exhausts.is_set or
                                            self.remaining_quota_of_requests.is_set or
                                            self.total_quota_of_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.accepted_requests.yfilter != YFilter.not_set or
                                            self.denied_requests.yfilter != YFilter.not_set or
                                            self.low_water_mark_quota_of_requests.yfilter != YFilter.not_set or
                                            self.quota_exhausts.yfilter != YFilter.not_set or
                                            self.remaining_quota_of_requests.yfilter != YFilter.not_set or
                                            self.total_quota_of_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "interim-inflight" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                        if (self.denied_requests.is_set or self.denied_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.denied_requests.get_name_leafdata())
                                        if (self.low_water_mark_quota_of_requests.is_set or self.low_water_mark_quota_of_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.low_water_mark_quota_of_requests.get_name_leafdata())
                                        if (self.quota_exhausts.is_set or self.quota_exhausts.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.quota_exhausts.get_name_leafdata())
                                        if (self.remaining_quota_of_requests.is_set or self.remaining_quota_of_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.remaining_quota_of_requests.get_name_leafdata())
                                        if (self.total_quota_of_requests.is_set or self.total_quota_of_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.total_quota_of_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "accepted-requests" or name == "denied-requests" or name == "low-water-mark-quota-of-requests" or name == "quota-exhausts" or name == "remaining-quota-of-requests" or name == "total-quota-of-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "accepted-requests"):
                                            self.accepted_requests = value
                                            self.accepted_requests.value_namespace = name_space
                                            self.accepted_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "denied-requests"):
                                            self.denied_requests = value
                                            self.denied_requests.value_namespace = name_space
                                            self.denied_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "low-water-mark-quota-of-requests"):
                                            self.low_water_mark_quota_of_requests = value
                                            self.low_water_mark_quota_of_requests.value_namespace = name_space
                                            self.low_water_mark_quota_of_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "quota-exhausts"):
                                            self.quota_exhausts = value
                                            self.quota_exhausts.value_namespace = name_space
                                            self.quota_exhausts.value_namespace_prefix = name_space_prefix
                                        if(value_path == "remaining-quota-of-requests"):
                                            self.remaining_quota_of_requests = value
                                            self.remaining_quota_of_requests.value_namespace = name_space
                                            self.remaining_quota_of_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "total-quota-of-requests"):
                                            self.total_quota_of_requests = value
                                            self.total_quota_of_requests.value_namespace = name_space
                                            self.total_quota_of_requests.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        self.active_sessions.is_set or
                                        self.policy_plane_errored_requests.is_set or
                                        self.policy_plane_unknown_requests.is_set or
                                        self.started_sessions.is_set or
                                        self.stopped_sessions.is_set or
                                        (self.interim is not None and self.interim.has_data()) or
                                        (self.interim_inflight is not None and self.interim_inflight.has_data()) or
                                        (self.pass_through is not None and self.pass_through.has_data()) or
                                        (self.start is not None and self.start.has_data()) or
                                        (self.stop is not None and self.stop.has_data()) or
                                        (self.update is not None and self.update.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.active_sessions.yfilter != YFilter.not_set or
                                        self.policy_plane_errored_requests.yfilter != YFilter.not_set or
                                        self.policy_plane_unknown_requests.yfilter != YFilter.not_set or
                                        self.started_sessions.yfilter != YFilter.not_set or
                                        self.stopped_sessions.yfilter != YFilter.not_set or
                                        (self.interim is not None and self.interim.has_operation()) or
                                        (self.interim_inflight is not None and self.interim_inflight.has_operation()) or
                                        (self.pass_through is not None and self.pass_through.has_operation()) or
                                        (self.start is not None and self.start.has_operation()) or
                                        (self.stop is not None and self.stop.has_operation()) or
                                        (self.update is not None and self.update.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "accounting-statistics" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.active_sessions.is_set or self.active_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.active_sessions.get_name_leafdata())
                                    if (self.policy_plane_errored_requests.is_set or self.policy_plane_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.policy_plane_errored_requests.get_name_leafdata())
                                    if (self.policy_plane_unknown_requests.is_set or self.policy_plane_unknown_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.policy_plane_unknown_requests.get_name_leafdata())
                                    if (self.started_sessions.is_set or self.started_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.started_sessions.get_name_leafdata())
                                    if (self.stopped_sessions.is_set or self.stopped_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.stopped_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "interim"):
                                        if (self.interim is None):
                                            self.interim = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Interim()
                                            self.interim.parent = self
                                            self._children_name_map["interim"] = "interim"
                                        return self.interim

                                    if (child_yang_name == "interim-inflight"):
                                        if (self.interim_inflight is None):
                                            self.interim_inflight = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.InterimInflight()
                                            self.interim_inflight.parent = self
                                            self._children_name_map["interim_inflight"] = "interim-inflight"
                                        return self.interim_inflight

                                    if (child_yang_name == "pass-through"):
                                        if (self.pass_through is None):
                                            self.pass_through = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.PassThrough()
                                            self.pass_through.parent = self
                                            self._children_name_map["pass_through"] = "pass-through"
                                        return self.pass_through

                                    if (child_yang_name == "start"):
                                        if (self.start is None):
                                            self.start = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Start()
                                            self.start.parent = self
                                            self._children_name_map["start"] = "start"
                                        return self.start

                                    if (child_yang_name == "stop"):
                                        if (self.stop is None):
                                            self.stop = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Stop()
                                            self.stop.parent = self
                                            self._children_name_map["stop"] = "stop"
                                        return self.stop

                                    if (child_yang_name == "update"):
                                        if (self.update is None):
                                            self.update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics.Update()
                                            self.update.parent = self
                                            self._children_name_map["update"] = "update"
                                        return self.update

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "interim" or name == "interim-inflight" or name == "pass-through" or name == "start" or name == "stop" or name == "update" or name == "active-sessions" or name == "policy-plane-errored-requests" or name == "policy-plane-unknown-requests" or name == "started-sessions" or name == "stopped-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "active-sessions"):
                                        self.active_sessions = value
                                        self.active_sessions.value_namespace = name_space
                                        self.active_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "policy-plane-errored-requests"):
                                        self.policy_plane_errored_requests = value
                                        self.policy_plane_errored_requests.value_namespace = name_space
                                        self.policy_plane_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "policy-plane-unknown-requests"):
                                        self.policy_plane_unknown_requests = value
                                        self.policy_plane_unknown_requests.value_namespace = name_space
                                        self.policy_plane_unknown_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "started-sessions"):
                                        self.started_sessions = value
                                        self.started_sessions.value_namespace = name_space
                                        self.started_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "stopped-sessions"):
                                        self.stopped_sessions = value
                                        self.stopped_sessions.value_namespace = name_space
                                        self.stopped_sessions.value_namespace_prefix = name_space_prefix


                            class AuthenticationStatistics(Entity):
                                """
                                List of stats for authentication
                                
                                .. attribute:: accepted_requests
                                
                                	Request accepted by Radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Unexpected errors
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: incomplete_requests
                                
                                	Incomplete requests \- missing attributes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rejected_requests
                                
                                	Requests rejected by radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sent_requests
                                
                                	Requests sent to radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: successful_requests
                                
                                	Requests which are successful
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: terminated_requests
                                
                                	Requests terminated by disconnect
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: unreachable_requests
                                
                                	Radius server not available
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthenticationStatistics, self).__init__()

                                    self.yang_name = "authentication-statistics"
                                    self.yang_parent_name = "aggregate-accounting-stats-all"

                                    self.accepted_requests = YLeaf(YType.uint64, "accepted-requests")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.incomplete_requests = YLeaf(YType.uint64, "incomplete-requests")

                                    self.rejected_requests = YLeaf(YType.uint64, "rejected-requests")

                                    self.sent_requests = YLeaf(YType.uint64, "sent-requests")

                                    self.successful_requests = YLeaf(YType.uint64, "successful-requests")

                                    self.terminated_requests = YLeaf(YType.uint64, "terminated-requests")

                                    self.unreachable_requests = YLeaf(YType.uint64, "unreachable-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("accepted_requests",
                                                    "errored_requests",
                                                    "incomplete_requests",
                                                    "rejected_requests",
                                                    "sent_requests",
                                                    "successful_requests",
                                                    "terminated_requests",
                                                    "unreachable_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthenticationStatistics, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthenticationStatistics, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.accepted_requests.is_set or
                                        self.errored_requests.is_set or
                                        self.incomplete_requests.is_set or
                                        self.rejected_requests.is_set or
                                        self.sent_requests.is_set or
                                        self.successful_requests.is_set or
                                        self.terminated_requests.is_set or
                                        self.unreachable_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.accepted_requests.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.incomplete_requests.yfilter != YFilter.not_set or
                                        self.rejected_requests.yfilter != YFilter.not_set or
                                        self.sent_requests.yfilter != YFilter.not_set or
                                        self.successful_requests.yfilter != YFilter.not_set or
                                        self.terminated_requests.yfilter != YFilter.not_set or
                                        self.unreachable_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "authentication-statistics" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.incomplete_requests.is_set or self.incomplete_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.incomplete_requests.get_name_leafdata())
                                    if (self.rejected_requests.is_set or self.rejected_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.rejected_requests.get_name_leafdata())
                                    if (self.sent_requests.is_set or self.sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.sent_requests.get_name_leafdata())
                                    if (self.successful_requests.is_set or self.successful_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.successful_requests.get_name_leafdata())
                                    if (self.terminated_requests.is_set or self.terminated_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.terminated_requests.get_name_leafdata())
                                    if (self.unreachable_requests.is_set or self.unreachable_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unreachable_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "accepted-requests" or name == "errored-requests" or name == "incomplete-requests" or name == "rejected-requests" or name == "sent-requests" or name == "successful-requests" or name == "terminated-requests" or name == "unreachable-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "accepted-requests"):
                                        self.accepted_requests = value
                                        self.accepted_requests.value_namespace = name_space
                                        self.accepted_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "incomplete-requests"):
                                        self.incomplete_requests = value
                                        self.incomplete_requests.value_namespace = name_space
                                        self.incomplete_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "rejected-requests"):
                                        self.rejected_requests = value
                                        self.rejected_requests.value_namespace = name_space
                                        self.rejected_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "sent-requests"):
                                        self.sent_requests = value
                                        self.sent_requests.value_namespace = name_space
                                        self.sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "successful-requests"):
                                        self.successful_requests = value
                                        self.successful_requests.value_namespace = name_space
                                        self.successful_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "terminated-requests"):
                                        self.terminated_requests = value
                                        self.terminated_requests.value_namespace = name_space
                                        self.terminated_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "unreachable-requests"):
                                        self.unreachable_requests = value
                                        self.unreachable_requests.value_namespace = name_space
                                        self.unreachable_requests.value_namespace_prefix = name_space_prefix


                            class AuthorizationStatistics(Entity):
                                """
                                List of stats for authorization
                                
                                .. attribute:: accepted_requests
                                
                                	Request accepted by Radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Unexpected errors
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: incomplete_requests
                                
                                	Incomplete requests \- missing attributes
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: rejected_requests
                                
                                	Requests rejected by radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: sent_requests
                                
                                	Requests sent to radius server
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: successful_requests
                                
                                	Requests which are successful
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: terminated_requests
                                
                                	Requests terminated by disconnect
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: unreachable_requests
                                
                                	Radius server not available
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthorizationStatistics, self).__init__()

                                    self.yang_name = "authorization-statistics"
                                    self.yang_parent_name = "aggregate-accounting-stats-all"

                                    self.accepted_requests = YLeaf(YType.uint64, "accepted-requests")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.incomplete_requests = YLeaf(YType.uint64, "incomplete-requests")

                                    self.rejected_requests = YLeaf(YType.uint64, "rejected-requests")

                                    self.sent_requests = YLeaf(YType.uint64, "sent-requests")

                                    self.successful_requests = YLeaf(YType.uint64, "successful-requests")

                                    self.terminated_requests = YLeaf(YType.uint64, "terminated-requests")

                                    self.unreachable_requests = YLeaf(YType.uint64, "unreachable-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("accepted_requests",
                                                    "errored_requests",
                                                    "incomplete_requests",
                                                    "rejected_requests",
                                                    "sent_requests",
                                                    "successful_requests",
                                                    "terminated_requests",
                                                    "unreachable_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthorizationStatistics, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthorizationStatistics, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.accepted_requests.is_set or
                                        self.errored_requests.is_set or
                                        self.incomplete_requests.is_set or
                                        self.rejected_requests.is_set or
                                        self.sent_requests.is_set or
                                        self.successful_requests.is_set or
                                        self.terminated_requests.is_set or
                                        self.unreachable_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.accepted_requests.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.incomplete_requests.yfilter != YFilter.not_set or
                                        self.rejected_requests.yfilter != YFilter.not_set or
                                        self.sent_requests.yfilter != YFilter.not_set or
                                        self.successful_requests.yfilter != YFilter.not_set or
                                        self.terminated_requests.yfilter != YFilter.not_set or
                                        self.unreachable_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "authorization-statistics" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.incomplete_requests.is_set or self.incomplete_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.incomplete_requests.get_name_leafdata())
                                    if (self.rejected_requests.is_set or self.rejected_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.rejected_requests.get_name_leafdata())
                                    if (self.sent_requests.is_set or self.sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.sent_requests.get_name_leafdata())
                                    if (self.successful_requests.is_set or self.successful_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.successful_requests.get_name_leafdata())
                                    if (self.terminated_requests.is_set or self.terminated_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.terminated_requests.get_name_leafdata())
                                    if (self.unreachable_requests.is_set or self.unreachable_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unreachable_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "accepted-requests" or name == "errored-requests" or name == "incomplete-requests" or name == "rejected-requests" or name == "sent-requests" or name == "successful-requests" or name == "terminated-requests" or name == "unreachable-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "accepted-requests"):
                                        self.accepted_requests = value
                                        self.accepted_requests.value_namespace = name_space
                                        self.accepted_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "incomplete-requests"):
                                        self.incomplete_requests = value
                                        self.incomplete_requests.value_namespace = name_space
                                        self.incomplete_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "rejected-requests"):
                                        self.rejected_requests = value
                                        self.rejected_requests.value_namespace = name_space
                                        self.rejected_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "sent-requests"):
                                        self.sent_requests = value
                                        self.sent_requests.value_namespace = name_space
                                        self.sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "successful-requests"):
                                        self.successful_requests = value
                                        self.successful_requests.value_namespace = name_space
                                        self.successful_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "terminated-requests"):
                                        self.terminated_requests = value
                                        self.terminated_requests.value_namespace = name_space
                                        self.terminated_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "unreachable-requests"):
                                        self.unreachable_requests = value
                                        self.unreachable_requests.value_namespace = name_space
                                        self.unreachable_requests.value_namespace_prefix = name_space_prefix


                            class ChangeOfAuthorizationStatistics(Entity):
                                """
                                List of stats for COA
                                
                                .. attribute:: account_logoff
                                
                                	Account logoff request statistics
                                	**type**\:   :py:class:`AccountLogoff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff>`
                                
                                .. attribute:: account_logon
                                
                                	Account logon request statistics
                                	**type**\:   :py:class:`AccountLogon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon>`
                                
                                .. attribute:: account_update
                                
                                	Account update request statistics
                                	**type**\:   :py:class:`AccountUpdate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate>`
                                
                                .. attribute:: attr_list_retrieve_failure_resps
                                
                                	Responses to attribute list failure errors
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: internal_err_resps
                                
                                	Responses to internal error
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: no_cmd_resps
                                
                                	Responses empty (no command) COA request
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: no_session_found_resps
                                
                                	Responses to COA with unknown session identifier
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: no_session_peer_resps
                                
                                	Responses to session peer not found error
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: resp_send_failure
                                
                                	Response send failures
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: service_multi
                                
                                	MA\-CoA Service request statistics
                                	**type**\:   :py:class:`ServiceMulti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti>`
                                
                                .. attribute:: service_profile_push_failure_resps
                                
                                	Responses to service profile push failures
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: session_disconnect
                                
                                	Session disconnect request statistics
                                	**type**\:   :py:class:`SessionDisconnect <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect>`
                                
                                .. attribute:: single_service_logoff
                                
                                	Single Service logoff request statistics
                                	**type**\:   :py:class:`SingleServiceLogoff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff>`
                                
                                .. attribute:: single_service_logon
                                
                                	Service logon request statistics
                                	**type**\:   :py:class:`SingleServiceLogon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon>`
                                
                                .. attribute:: single_service_modify
                                
                                	Single Service Modify request statistics
                                	**type**\:   :py:class:`SingleServiceModify <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify>`
                                
                                .. attribute:: unknown_account_cmd_resps
                                
                                	Responses to unknown account command
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: unknown_cmd_resps
                                
                                	Responses to unknown command
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: unknown_service_cmd_resps
                                
                                	Responses to unknown service command
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics, self).__init__()

                                    self.yang_name = "change-of-authorization-statistics"
                                    self.yang_parent_name = "aggregate-accounting-stats-all"

                                    self.attr_list_retrieve_failure_resps = YLeaf(YType.uint64, "attr-list-retrieve-failure-resps")

                                    self.internal_err_resps = YLeaf(YType.uint64, "internal-err-resps")

                                    self.no_cmd_resps = YLeaf(YType.uint64, "no-cmd-resps")

                                    self.no_session_found_resps = YLeaf(YType.uint64, "no-session-found-resps")

                                    self.no_session_peer_resps = YLeaf(YType.uint64, "no-session-peer-resps")

                                    self.resp_send_failure = YLeaf(YType.uint64, "resp-send-failure")

                                    self.service_profile_push_failure_resps = YLeaf(YType.uint64, "service-profile-push-failure-resps")

                                    self.unknown_account_cmd_resps = YLeaf(YType.uint64, "unknown-account-cmd-resps")

                                    self.unknown_cmd_resps = YLeaf(YType.uint64, "unknown-cmd-resps")

                                    self.unknown_service_cmd_resps = YLeaf(YType.uint64, "unknown-service-cmd-resps")

                                    self.account_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff()
                                    self.account_logoff.parent = self
                                    self._children_name_map["account_logoff"] = "account-logoff"
                                    self._children_yang_names.add("account-logoff")

                                    self.account_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon()
                                    self.account_logon.parent = self
                                    self._children_name_map["account_logon"] = "account-logon"
                                    self._children_yang_names.add("account-logon")

                                    self.account_update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate()
                                    self.account_update.parent = self
                                    self._children_name_map["account_update"] = "account-update"
                                    self._children_yang_names.add("account-update")

                                    self.service_multi = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti()
                                    self.service_multi.parent = self
                                    self._children_name_map["service_multi"] = "service-multi"
                                    self._children_yang_names.add("service-multi")

                                    self.session_disconnect = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect()
                                    self.session_disconnect.parent = self
                                    self._children_name_map["session_disconnect"] = "session-disconnect"
                                    self._children_yang_names.add("session-disconnect")

                                    self.single_service_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff()
                                    self.single_service_logoff.parent = self
                                    self._children_name_map["single_service_logoff"] = "single-service-logoff"
                                    self._children_yang_names.add("single-service-logoff")

                                    self.single_service_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon()
                                    self.single_service_logon.parent = self
                                    self._children_name_map["single_service_logon"] = "single-service-logon"
                                    self._children_yang_names.add("single-service-logon")

                                    self.single_service_modify = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify()
                                    self.single_service_modify.parent = self
                                    self._children_name_map["single_service_modify"] = "single-service-modify"
                                    self._children_yang_names.add("single-service-modify")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("attr_list_retrieve_failure_resps",
                                                    "internal_err_resps",
                                                    "no_cmd_resps",
                                                    "no_session_found_resps",
                                                    "no_session_peer_resps",
                                                    "resp_send_failure",
                                                    "service_profile_push_failure_resps",
                                                    "unknown_account_cmd_resps",
                                                    "unknown_cmd_resps",
                                                    "unknown_service_cmd_resps") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics, self).__setattr__(name, value)


                                class AccountLogon(Entity):
                                    """
                                    Account logon request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon, self).__init__()

                                        self.yang_name = "account-logon"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "account-logon" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class AccountLogoff(Entity):
                                    """
                                    Account logoff request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff, self).__init__()

                                        self.yang_name = "account-logoff"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "account-logoff" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class AccountUpdate(Entity):
                                    """
                                    Account update request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate, self).__init__()

                                        self.yang_name = "account-update"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "account-update" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class SessionDisconnect(Entity):
                                    """
                                    Session disconnect request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect, self).__init__()

                                        self.yang_name = "session-disconnect"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "session-disconnect" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class SingleServiceLogon(Entity):
                                    """
                                    Service logon request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon, self).__init__()

                                        self.yang_name = "single-service-logon"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "single-service-logon" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class SingleServiceLogoff(Entity):
                                    """
                                    Single Service logoff request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff, self).__init__()

                                        self.yang_name = "single-service-logoff"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "single-service-logoff" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class SingleServiceModify(Entity):
                                    """
                                    Single Service Modify request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify, self).__init__()

                                        self.yang_name = "single-service-modify"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "single-service-modify" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix


                                class ServiceMulti(Entity):
                                    """
                                    MA\-CoA Service request statistics
                                    
                                    .. attribute:: acknowledged_requests
                                    
                                    	Acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: non_acknowledged_requests
                                    
                                    	Non acknowledged requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: received_requests
                                    
                                    	Received requests
                                    	**type**\:  int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'iedge4710-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti, self).__init__()

                                        self.yang_name = "service-multi"
                                        self.yang_parent_name = "change-of-authorization-statistics"

                                        self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                        self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                        self.received_requests = YLeaf(YType.uint64, "received-requests")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("acknowledged_requests",
                                                        "non_acknowledged_requests",
                                                        "received_requests") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.acknowledged_requests.is_set or
                                            self.non_acknowledged_requests.is_set or
                                            self.received_requests.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.acknowledged_requests.yfilter != YFilter.not_set or
                                            self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                            self.received_requests.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "service-multi" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                        if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                        if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.received_requests.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "acknowledged-requests"):
                                            self.acknowledged_requests = value
                                            self.acknowledged_requests.value_namespace = name_space
                                            self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "non-acknowledged-requests"):
                                            self.non_acknowledged_requests = value
                                            self.non_acknowledged_requests.value_namespace = name_space
                                            self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                        if(value_path == "received-requests"):
                                            self.received_requests = value
                                            self.received_requests.value_namespace = name_space
                                            self.received_requests.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        self.attr_list_retrieve_failure_resps.is_set or
                                        self.internal_err_resps.is_set or
                                        self.no_cmd_resps.is_set or
                                        self.no_session_found_resps.is_set or
                                        self.no_session_peer_resps.is_set or
                                        self.resp_send_failure.is_set or
                                        self.service_profile_push_failure_resps.is_set or
                                        self.unknown_account_cmd_resps.is_set or
                                        self.unknown_cmd_resps.is_set or
                                        self.unknown_service_cmd_resps.is_set or
                                        (self.account_logoff is not None and self.account_logoff.has_data()) or
                                        (self.account_logon is not None and self.account_logon.has_data()) or
                                        (self.account_update is not None and self.account_update.has_data()) or
                                        (self.service_multi is not None and self.service_multi.has_data()) or
                                        (self.session_disconnect is not None and self.session_disconnect.has_data()) or
                                        (self.single_service_logoff is not None and self.single_service_logoff.has_data()) or
                                        (self.single_service_logon is not None and self.single_service_logon.has_data()) or
                                        (self.single_service_modify is not None and self.single_service_modify.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.attr_list_retrieve_failure_resps.yfilter != YFilter.not_set or
                                        self.internal_err_resps.yfilter != YFilter.not_set or
                                        self.no_cmd_resps.yfilter != YFilter.not_set or
                                        self.no_session_found_resps.yfilter != YFilter.not_set or
                                        self.no_session_peer_resps.yfilter != YFilter.not_set or
                                        self.resp_send_failure.yfilter != YFilter.not_set or
                                        self.service_profile_push_failure_resps.yfilter != YFilter.not_set or
                                        self.unknown_account_cmd_resps.yfilter != YFilter.not_set or
                                        self.unknown_cmd_resps.yfilter != YFilter.not_set or
                                        self.unknown_service_cmd_resps.yfilter != YFilter.not_set or
                                        (self.account_logoff is not None and self.account_logoff.has_operation()) or
                                        (self.account_logon is not None and self.account_logon.has_operation()) or
                                        (self.account_update is not None and self.account_update.has_operation()) or
                                        (self.service_multi is not None and self.service_multi.has_operation()) or
                                        (self.session_disconnect is not None and self.session_disconnect.has_operation()) or
                                        (self.single_service_logoff is not None and self.single_service_logoff.has_operation()) or
                                        (self.single_service_logon is not None and self.single_service_logon.has_operation()) or
                                        (self.single_service_modify is not None and self.single_service_modify.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "change-of-authorization-statistics" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.attr_list_retrieve_failure_resps.is_set or self.attr_list_retrieve_failure_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.attr_list_retrieve_failure_resps.get_name_leafdata())
                                    if (self.internal_err_resps.is_set or self.internal_err_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.internal_err_resps.get_name_leafdata())
                                    if (self.no_cmd_resps.is_set or self.no_cmd_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.no_cmd_resps.get_name_leafdata())
                                    if (self.no_session_found_resps.is_set or self.no_session_found_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.no_session_found_resps.get_name_leafdata())
                                    if (self.no_session_peer_resps.is_set or self.no_session_peer_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.no_session_peer_resps.get_name_leafdata())
                                    if (self.resp_send_failure.is_set or self.resp_send_failure.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.resp_send_failure.get_name_leafdata())
                                    if (self.service_profile_push_failure_resps.is_set or self.service_profile_push_failure_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.service_profile_push_failure_resps.get_name_leafdata())
                                    if (self.unknown_account_cmd_resps.is_set or self.unknown_account_cmd_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unknown_account_cmd_resps.get_name_leafdata())
                                    if (self.unknown_cmd_resps.is_set or self.unknown_cmd_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unknown_cmd_resps.get_name_leafdata())
                                    if (self.unknown_service_cmd_resps.is_set or self.unknown_service_cmd_resps.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unknown_service_cmd_resps.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "account-logoff"):
                                        if (self.account_logoff is None):
                                            self.account_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogoff()
                                            self.account_logoff.parent = self
                                            self._children_name_map["account_logoff"] = "account-logoff"
                                        return self.account_logoff

                                    if (child_yang_name == "account-logon"):
                                        if (self.account_logon is None):
                                            self.account_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountLogon()
                                            self.account_logon.parent = self
                                            self._children_name_map["account_logon"] = "account-logon"
                                        return self.account_logon

                                    if (child_yang_name == "account-update"):
                                        if (self.account_update is None):
                                            self.account_update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.AccountUpdate()
                                            self.account_update.parent = self
                                            self._children_name_map["account_update"] = "account-update"
                                        return self.account_update

                                    if (child_yang_name == "service-multi"):
                                        if (self.service_multi is None):
                                            self.service_multi = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.ServiceMulti()
                                            self.service_multi.parent = self
                                            self._children_name_map["service_multi"] = "service-multi"
                                        return self.service_multi

                                    if (child_yang_name == "session-disconnect"):
                                        if (self.session_disconnect is None):
                                            self.session_disconnect = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SessionDisconnect()
                                            self.session_disconnect.parent = self
                                            self._children_name_map["session_disconnect"] = "session-disconnect"
                                        return self.session_disconnect

                                    if (child_yang_name == "single-service-logoff"):
                                        if (self.single_service_logoff is None):
                                            self.single_service_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogoff()
                                            self.single_service_logoff.parent = self
                                            self._children_name_map["single_service_logoff"] = "single-service-logoff"
                                        return self.single_service_logoff

                                    if (child_yang_name == "single-service-logon"):
                                        if (self.single_service_logon is None):
                                            self.single_service_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceLogon()
                                            self.single_service_logon.parent = self
                                            self._children_name_map["single_service_logon"] = "single-service-logon"
                                        return self.single_service_logon

                                    if (child_yang_name == "single-service-modify"):
                                        if (self.single_service_modify is None):
                                            self.single_service_modify = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics.SingleServiceModify()
                                            self.single_service_modify.parent = self
                                            self._children_name_map["single_service_modify"] = "single-service-modify"
                                        return self.single_service_modify

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "account-logoff" or name == "account-logon" or name == "account-update" or name == "service-multi" or name == "session-disconnect" or name == "single-service-logoff" or name == "single-service-logon" or name == "single-service-modify" or name == "attr-list-retrieve-failure-resps" or name == "internal-err-resps" or name == "no-cmd-resps" or name == "no-session-found-resps" or name == "no-session-peer-resps" or name == "resp-send-failure" or name == "service-profile-push-failure-resps" or name == "unknown-account-cmd-resps" or name == "unknown-cmd-resps" or name == "unknown-service-cmd-resps"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "attr-list-retrieve-failure-resps"):
                                        self.attr_list_retrieve_failure_resps = value
                                        self.attr_list_retrieve_failure_resps.value_namespace = name_space
                                        self.attr_list_retrieve_failure_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "internal-err-resps"):
                                        self.internal_err_resps = value
                                        self.internal_err_resps.value_namespace = name_space
                                        self.internal_err_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "no-cmd-resps"):
                                        self.no_cmd_resps = value
                                        self.no_cmd_resps.value_namespace = name_space
                                        self.no_cmd_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "no-session-found-resps"):
                                        self.no_session_found_resps = value
                                        self.no_session_found_resps.value_namespace = name_space
                                        self.no_session_found_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "no-session-peer-resps"):
                                        self.no_session_peer_resps = value
                                        self.no_session_peer_resps.value_namespace = name_space
                                        self.no_session_peer_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "resp-send-failure"):
                                        self.resp_send_failure = value
                                        self.resp_send_failure.value_namespace = name_space
                                        self.resp_send_failure.value_namespace_prefix = name_space_prefix
                                    if(value_path == "service-profile-push-failure-resps"):
                                        self.service_profile_push_failure_resps = value
                                        self.service_profile_push_failure_resps.value_namespace = name_space
                                        self.service_profile_push_failure_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "unknown-account-cmd-resps"):
                                        self.unknown_account_cmd_resps = value
                                        self.unknown_account_cmd_resps.value_namespace = name_space
                                        self.unknown_account_cmd_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "unknown-cmd-resps"):
                                        self.unknown_cmd_resps = value
                                        self.unknown_cmd_resps.value_namespace = name_space
                                        self.unknown_cmd_resps.value_namespace_prefix = name_space_prefix
                                    if(value_path == "unknown-service-cmd-resps"):
                                        self.unknown_service_cmd_resps = value
                                        self.unknown_service_cmd_resps.value_namespace = name_space
                                        self.unknown_service_cmd_resps.value_namespace_prefix = name_space_prefix


                            class MobilityStatistics(Entity):
                                """
                                List of stats for Mobility
                                
                                .. attribute:: receive_response_failures
                                
                                	Response receive failures
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: receive_response_successes
                                
                                	Response receive success
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: send_request_failures
                                
                                	Request send failures
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: send_request_successes
                                
                                	Request send success
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.MobilityStatistics, self).__init__()

                                    self.yang_name = "mobility-statistics"
                                    self.yang_parent_name = "aggregate-accounting-stats-all"

                                    self.receive_response_failures = YLeaf(YType.uint64, "receive-response-failures")

                                    self.receive_response_successes = YLeaf(YType.uint64, "receive-response-successes")

                                    self.send_request_failures = YLeaf(YType.uint64, "send-request-failures")

                                    self.send_request_successes = YLeaf(YType.uint64, "send-request-successes")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("receive_response_failures",
                                                    "receive_response_successes",
                                                    "send_request_failures",
                                                    "send_request_successes") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.MobilityStatistics, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.MobilityStatistics, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.receive_response_failures.is_set or
                                        self.receive_response_successes.is_set or
                                        self.send_request_failures.is_set or
                                        self.send_request_successes.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.receive_response_failures.yfilter != YFilter.not_set or
                                        self.receive_response_successes.yfilter != YFilter.not_set or
                                        self.send_request_failures.yfilter != YFilter.not_set or
                                        self.send_request_successes.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "mobility-statistics" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.receive_response_failures.is_set or self.receive_response_failures.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.receive_response_failures.get_name_leafdata())
                                    if (self.receive_response_successes.is_set or self.receive_response_successes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.receive_response_successes.get_name_leafdata())
                                    if (self.send_request_failures.is_set or self.send_request_failures.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.send_request_failures.get_name_leafdata())
                                    if (self.send_request_successes.is_set or self.send_request_successes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.send_request_successes.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "receive-response-failures" or name == "receive-response-successes" or name == "send-request-failures" or name == "send-request-successes"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "receive-response-failures"):
                                        self.receive_response_failures = value
                                        self.receive_response_failures.value_namespace = name_space
                                        self.receive_response_failures.value_namespace_prefix = name_space_prefix
                                    if(value_path == "receive-response-successes"):
                                        self.receive_response_successes = value
                                        self.receive_response_successes.value_namespace = name_space
                                        self.receive_response_successes.value_namespace_prefix = name_space_prefix
                                    if(value_path == "send-request-failures"):
                                        self.send_request_failures = value
                                        self.send_request_failures.value_namespace = name_space
                                        self.send_request_failures.value_namespace_prefix = name_space_prefix
                                    if(value_path == "send-request-successes"):
                                        self.send_request_successes = value
                                        self.send_request_successes.value_namespace = name_space
                                        self.send_request_successes.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.accounting_statistics is not None and self.accounting_statistics.has_data()) or
                                    (self.authentication_statistics is not None and self.authentication_statistics.has_data()) or
                                    (self.authorization_statistics is not None and self.authorization_statistics.has_data()) or
                                    (self.change_of_authorization_statistics is not None and self.change_of_authorization_statistics.has_data()) or
                                    (self.mobility_statistics is not None and self.mobility_statistics.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.accounting_statistics is not None and self.accounting_statistics.has_operation()) or
                                    (self.authentication_statistics is not None and self.authentication_statistics.has_operation()) or
                                    (self.authorization_statistics is not None and self.authorization_statistics.has_operation()) or
                                    (self.change_of_authorization_statistics is not None and self.change_of_authorization_statistics.has_operation()) or
                                    (self.mobility_statistics is not None and self.mobility_statistics.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "aggregate-accounting-stats-all" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "accounting-statistics"):
                                    if (self.accounting_statistics is None):
                                        self.accounting_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AccountingStatistics()
                                        self.accounting_statistics.parent = self
                                        self._children_name_map["accounting_statistics"] = "accounting-statistics"
                                    return self.accounting_statistics

                                if (child_yang_name == "authentication-statistics"):
                                    if (self.authentication_statistics is None):
                                        self.authentication_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthenticationStatistics()
                                        self.authentication_statistics.parent = self
                                        self._children_name_map["authentication_statistics"] = "authentication-statistics"
                                    return self.authentication_statistics

                                if (child_yang_name == "authorization-statistics"):
                                    if (self.authorization_statistics is None):
                                        self.authorization_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.AuthorizationStatistics()
                                        self.authorization_statistics.parent = self
                                        self._children_name_map["authorization_statistics"] = "authorization-statistics"
                                    return self.authorization_statistics

                                if (child_yang_name == "change-of-authorization-statistics"):
                                    if (self.change_of_authorization_statistics is None):
                                        self.change_of_authorization_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.ChangeOfAuthorizationStatistics()
                                        self.change_of_authorization_statistics.parent = self
                                        self._children_name_map["change_of_authorization_statistics"] = "change-of-authorization-statistics"
                                    return self.change_of_authorization_statistics

                                if (child_yang_name == "mobility-statistics"):
                                    if (self.mobility_statistics is None):
                                        self.mobility_statistics = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll.MobilityStatistics()
                                        self.mobility_statistics.parent = self
                                        self._children_name_map["mobility_statistics"] = "mobility-statistics"
                                    return self.mobility_statistics

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "accounting-statistics" or name == "authentication-statistics" or name == "authorization-statistics" or name == "change-of-authorization-statistics" or name == "mobility-statistics"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class Accounting(Entity):
                            """
                            Accounting statistics
                            
                            .. attribute:: active_sessions
                            
                            	Active sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: interim
                            
                            	Interim statistics
                            	**type**\:   :py:class:`Interim <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Interim>`
                            
                            .. attribute:: interim_inflight
                            
                            	Interim inflight details
                            	**type**\:   :py:class:`InterimInflight <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.InterimInflight>`
                            
                            .. attribute:: pass_through
                            
                            	Pass\-through statistics
                            	**type**\:   :py:class:`PassThrough <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.PassThrough>`
                            
                            .. attribute:: policy_plane_errored_requests
                            
                            	Policy plane errored requests
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: policy_plane_unknown_requests
                            
                            	Policy plane unknown requests
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: start
                            
                            	Start statistics
                            	**type**\:   :py:class:`Start <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Start>`
                            
                            .. attribute:: started_sessions
                            
                            	Started sessions
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: stop
                            
                            	Stop statistics
                            	**type**\:   :py:class:`Stop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Stop>`
                            
                            .. attribute:: stopped_sessions
                            
                            	Stopped sessions
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: update
                            
                            	Update statistics
                            	**type**\:   :py:class:`Update <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Update>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting, self).__init__()

                                self.yang_name = "accounting"
                                self.yang_parent_name = "aaa"

                                self.active_sessions = YLeaf(YType.uint32, "active-sessions")

                                self.policy_plane_errored_requests = YLeaf(YType.uint64, "policy-plane-errored-requests")

                                self.policy_plane_unknown_requests = YLeaf(YType.uint64, "policy-plane-unknown-requests")

                                self.started_sessions = YLeaf(YType.uint64, "started-sessions")

                                self.stopped_sessions = YLeaf(YType.uint64, "stopped-sessions")

                                self.interim = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Interim()
                                self.interim.parent = self
                                self._children_name_map["interim"] = "interim"
                                self._children_yang_names.add("interim")

                                self.interim_inflight = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.InterimInflight()
                                self.interim_inflight.parent = self
                                self._children_name_map["interim_inflight"] = "interim-inflight"
                                self._children_yang_names.add("interim-inflight")

                                self.pass_through = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.PassThrough()
                                self.pass_through.parent = self
                                self._children_name_map["pass_through"] = "pass-through"
                                self._children_yang_names.add("pass-through")

                                self.start = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Start()
                                self.start.parent = self
                                self._children_name_map["start"] = "start"
                                self._children_yang_names.add("start")

                                self.stop = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Stop()
                                self.stop.parent = self
                                self._children_name_map["stop"] = "stop"
                                self._children_yang_names.add("stop")

                                self.update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Update()
                                self.update.parent = self
                                self._children_name_map["update"] = "update"
                                self._children_yang_names.add("update")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("active_sessions",
                                                "policy_plane_errored_requests",
                                                "policy_plane_unknown_requests",
                                                "started_sessions",
                                                "stopped_sessions") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting, self).__setattr__(name, value)


                            class Start(Entity):
                                """
                                Start statistics
                                
                                .. attribute:: aaa_errored_requests
                                
                                	AAA errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_failed_responses
                                
                                	AAA failed responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_sent_requests
                                
                                	AAA requests sent
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_succeeded_responses
                                
                                	AAA succeeded responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Start, self).__init__()

                                    self.yang_name = "start"
                                    self.yang_parent_name = "accounting"

                                    self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                    self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                    self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                    self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aaa_errored_requests",
                                                    "aaa_failed_responses",
                                                    "aaa_sent_requests",
                                                    "aaa_succeeded_responses",
                                                    "errored_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Start, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Start, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.aaa_errored_requests.is_set or
                                        self.aaa_failed_responses.is_set or
                                        self.aaa_sent_requests.is_set or
                                        self.aaa_succeeded_responses.is_set or
                                        self.errored_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aaa_errored_requests.yfilter != YFilter.not_set or
                                        self.aaa_failed_responses.yfilter != YFilter.not_set or
                                        self.aaa_sent_requests.yfilter != YFilter.not_set or
                                        self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "start" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                    if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                    if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                    if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aaa-errored-requests"):
                                        self.aaa_errored_requests = value
                                        self.aaa_errored_requests.value_namespace = name_space
                                        self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-failed-responses"):
                                        self.aaa_failed_responses = value
                                        self.aaa_failed_responses.value_namespace = name_space
                                        self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-sent-requests"):
                                        self.aaa_sent_requests = value
                                        self.aaa_sent_requests.value_namespace = name_space
                                        self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-succeeded-responses"):
                                        self.aaa_succeeded_responses = value
                                        self.aaa_succeeded_responses.value_namespace = name_space
                                        self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class Stop(Entity):
                                """
                                Stop statistics
                                
                                .. attribute:: aaa_errored_requests
                                
                                	AAA errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_failed_responses
                                
                                	AAA failed responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_sent_requests
                                
                                	AAA requests sent
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_succeeded_responses
                                
                                	AAA succeeded responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Stop, self).__init__()

                                    self.yang_name = "stop"
                                    self.yang_parent_name = "accounting"

                                    self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                    self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                    self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                    self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aaa_errored_requests",
                                                    "aaa_failed_responses",
                                                    "aaa_sent_requests",
                                                    "aaa_succeeded_responses",
                                                    "errored_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Stop, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Stop, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.aaa_errored_requests.is_set or
                                        self.aaa_failed_responses.is_set or
                                        self.aaa_sent_requests.is_set or
                                        self.aaa_succeeded_responses.is_set or
                                        self.errored_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aaa_errored_requests.yfilter != YFilter.not_set or
                                        self.aaa_failed_responses.yfilter != YFilter.not_set or
                                        self.aaa_sent_requests.yfilter != YFilter.not_set or
                                        self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "stop" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                    if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                    if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                    if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aaa-errored-requests"):
                                        self.aaa_errored_requests = value
                                        self.aaa_errored_requests.value_namespace = name_space
                                        self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-failed-responses"):
                                        self.aaa_failed_responses = value
                                        self.aaa_failed_responses.value_namespace = name_space
                                        self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-sent-requests"):
                                        self.aaa_sent_requests = value
                                        self.aaa_sent_requests.value_namespace = name_space
                                        self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-succeeded-responses"):
                                        self.aaa_succeeded_responses = value
                                        self.aaa_succeeded_responses.value_namespace = name_space
                                        self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class Interim(Entity):
                                """
                                Interim statistics
                                
                                .. attribute:: aaa_errored_requests
                                
                                	AAA errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_failed_responses
                                
                                	AAA failed responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_sent_requests
                                
                                	AAA requests sent
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_succeeded_responses
                                
                                	AAA succeeded responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Interim, self).__init__()

                                    self.yang_name = "interim"
                                    self.yang_parent_name = "accounting"

                                    self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                    self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                    self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                    self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aaa_errored_requests",
                                                    "aaa_failed_responses",
                                                    "aaa_sent_requests",
                                                    "aaa_succeeded_responses",
                                                    "errored_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Interim, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Interim, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.aaa_errored_requests.is_set or
                                        self.aaa_failed_responses.is_set or
                                        self.aaa_sent_requests.is_set or
                                        self.aaa_succeeded_responses.is_set or
                                        self.errored_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aaa_errored_requests.yfilter != YFilter.not_set or
                                        self.aaa_failed_responses.yfilter != YFilter.not_set or
                                        self.aaa_sent_requests.yfilter != YFilter.not_set or
                                        self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interim" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                    if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                    if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                    if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aaa-errored-requests"):
                                        self.aaa_errored_requests = value
                                        self.aaa_errored_requests.value_namespace = name_space
                                        self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-failed-responses"):
                                        self.aaa_failed_responses = value
                                        self.aaa_failed_responses.value_namespace = name_space
                                        self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-sent-requests"):
                                        self.aaa_sent_requests = value
                                        self.aaa_sent_requests.value_namespace = name_space
                                        self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-succeeded-responses"):
                                        self.aaa_succeeded_responses = value
                                        self.aaa_succeeded_responses.value_namespace = name_space
                                        self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class PassThrough(Entity):
                                """
                                Pass\-through statistics
                                
                                .. attribute:: aaa_errored_requests
                                
                                	AAA errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_failed_responses
                                
                                	AAA failed responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_sent_requests
                                
                                	AAA requests sent
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_succeeded_responses
                                
                                	AAA succeeded responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.PassThrough, self).__init__()

                                    self.yang_name = "pass-through"
                                    self.yang_parent_name = "accounting"

                                    self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                    self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                    self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                    self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aaa_errored_requests",
                                                    "aaa_failed_responses",
                                                    "aaa_sent_requests",
                                                    "aaa_succeeded_responses",
                                                    "errored_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.PassThrough, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.PassThrough, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.aaa_errored_requests.is_set or
                                        self.aaa_failed_responses.is_set or
                                        self.aaa_sent_requests.is_set or
                                        self.aaa_succeeded_responses.is_set or
                                        self.errored_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aaa_errored_requests.yfilter != YFilter.not_set or
                                        self.aaa_failed_responses.yfilter != YFilter.not_set or
                                        self.aaa_sent_requests.yfilter != YFilter.not_set or
                                        self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pass-through" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                    if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                    if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                    if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aaa-errored-requests"):
                                        self.aaa_errored_requests = value
                                        self.aaa_errored_requests.value_namespace = name_space
                                        self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-failed-responses"):
                                        self.aaa_failed_responses = value
                                        self.aaa_failed_responses.value_namespace = name_space
                                        self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-sent-requests"):
                                        self.aaa_sent_requests = value
                                        self.aaa_sent_requests.value_namespace = name_space
                                        self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-succeeded-responses"):
                                        self.aaa_succeeded_responses = value
                                        self.aaa_succeeded_responses.value_namespace = name_space
                                        self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class Update(Entity):
                                """
                                Update statistics
                                
                                .. attribute:: aaa_errored_requests
                                
                                	AAA errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_failed_responses
                                
                                	AAA failed responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_sent_requests
                                
                                	AAA requests sent
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: aaa_succeeded_responses
                                
                                	AAA succeeded responses
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: errored_requests
                                
                                	Errored requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Update, self).__init__()

                                    self.yang_name = "update"
                                    self.yang_parent_name = "accounting"

                                    self.aaa_errored_requests = YLeaf(YType.uint64, "aaa-errored-requests")

                                    self.aaa_failed_responses = YLeaf(YType.uint64, "aaa-failed-responses")

                                    self.aaa_sent_requests = YLeaf(YType.uint64, "aaa-sent-requests")

                                    self.aaa_succeeded_responses = YLeaf(YType.uint64, "aaa-succeeded-responses")

                                    self.errored_requests = YLeaf(YType.uint64, "errored-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("aaa_errored_requests",
                                                    "aaa_failed_responses",
                                                    "aaa_sent_requests",
                                                    "aaa_succeeded_responses",
                                                    "errored_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Update, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Update, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.aaa_errored_requests.is_set or
                                        self.aaa_failed_responses.is_set or
                                        self.aaa_sent_requests.is_set or
                                        self.aaa_succeeded_responses.is_set or
                                        self.errored_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.aaa_errored_requests.yfilter != YFilter.not_set or
                                        self.aaa_failed_responses.yfilter != YFilter.not_set or
                                        self.aaa_sent_requests.yfilter != YFilter.not_set or
                                        self.aaa_succeeded_responses.yfilter != YFilter.not_set or
                                        self.errored_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "update" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.aaa_errored_requests.is_set or self.aaa_errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_errored_requests.get_name_leafdata())
                                    if (self.aaa_failed_responses.is_set or self.aaa_failed_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_failed_responses.get_name_leafdata())
                                    if (self.aaa_sent_requests.is_set or self.aaa_sent_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_sent_requests.get_name_leafdata())
                                    if (self.aaa_succeeded_responses.is_set or self.aaa_succeeded_responses.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.aaa_succeeded_responses.get_name_leafdata())
                                    if (self.errored_requests.is_set or self.errored_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.errored_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "aaa-errored-requests" or name == "aaa-failed-responses" or name == "aaa-sent-requests" or name == "aaa-succeeded-responses" or name == "errored-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "aaa-errored-requests"):
                                        self.aaa_errored_requests = value
                                        self.aaa_errored_requests.value_namespace = name_space
                                        self.aaa_errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-failed-responses"):
                                        self.aaa_failed_responses = value
                                        self.aaa_failed_responses.value_namespace = name_space
                                        self.aaa_failed_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-sent-requests"):
                                        self.aaa_sent_requests = value
                                        self.aaa_sent_requests.value_namespace = name_space
                                        self.aaa_sent_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "aaa-succeeded-responses"):
                                        self.aaa_succeeded_responses = value
                                        self.aaa_succeeded_responses.value_namespace = name_space
                                        self.aaa_succeeded_responses.value_namespace_prefix = name_space_prefix
                                    if(value_path == "errored-requests"):
                                        self.errored_requests = value
                                        self.errored_requests.value_namespace = name_space
                                        self.errored_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class InterimInflight(Entity):
                                """
                                Interim inflight details
                                
                                .. attribute:: accepted_requests
                                
                                	Accepted requests
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: denied_requests
                                
                                	Denied requests
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low_water_mark_quota_of_requests
                                
                                	Low water mark quota of requests
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: quota_exhausts
                                
                                	Quota exhausts
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remaining_quota_of_requests
                                
                                	Remaining quota of requests
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: total_quota_of_requests
                                
                                	Total quota of requests
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.InterimInflight, self).__init__()

                                    self.yang_name = "interim-inflight"
                                    self.yang_parent_name = "accounting"

                                    self.accepted_requests = YLeaf(YType.uint32, "accepted-requests")

                                    self.denied_requests = YLeaf(YType.uint32, "denied-requests")

                                    self.low_water_mark_quota_of_requests = YLeaf(YType.uint32, "low-water-mark-quota-of-requests")

                                    self.quota_exhausts = YLeaf(YType.uint32, "quota-exhausts")

                                    self.remaining_quota_of_requests = YLeaf(YType.uint32, "remaining-quota-of-requests")

                                    self.total_quota_of_requests = YLeaf(YType.uint32, "total-quota-of-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("accepted_requests",
                                                    "denied_requests",
                                                    "low_water_mark_quota_of_requests",
                                                    "quota_exhausts",
                                                    "remaining_quota_of_requests",
                                                    "total_quota_of_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.InterimInflight, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.InterimInflight, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.accepted_requests.is_set or
                                        self.denied_requests.is_set or
                                        self.low_water_mark_quota_of_requests.is_set or
                                        self.quota_exhausts.is_set or
                                        self.remaining_quota_of_requests.is_set or
                                        self.total_quota_of_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.accepted_requests.yfilter != YFilter.not_set or
                                        self.denied_requests.yfilter != YFilter.not_set or
                                        self.low_water_mark_quota_of_requests.yfilter != YFilter.not_set or
                                        self.quota_exhausts.yfilter != YFilter.not_set or
                                        self.remaining_quota_of_requests.yfilter != YFilter.not_set or
                                        self.total_quota_of_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interim-inflight" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.accepted_requests.is_set or self.accepted_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.accepted_requests.get_name_leafdata())
                                    if (self.denied_requests.is_set or self.denied_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.denied_requests.get_name_leafdata())
                                    if (self.low_water_mark_quota_of_requests.is_set or self.low_water_mark_quota_of_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.low_water_mark_quota_of_requests.get_name_leafdata())
                                    if (self.quota_exhausts.is_set or self.quota_exhausts.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.quota_exhausts.get_name_leafdata())
                                    if (self.remaining_quota_of_requests.is_set or self.remaining_quota_of_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.remaining_quota_of_requests.get_name_leafdata())
                                    if (self.total_quota_of_requests.is_set or self.total_quota_of_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.total_quota_of_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "accepted-requests" or name == "denied-requests" or name == "low-water-mark-quota-of-requests" or name == "quota-exhausts" or name == "remaining-quota-of-requests" or name == "total-quota-of-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "accepted-requests"):
                                        self.accepted_requests = value
                                        self.accepted_requests.value_namespace = name_space
                                        self.accepted_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "denied-requests"):
                                        self.denied_requests = value
                                        self.denied_requests.value_namespace = name_space
                                        self.denied_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "low-water-mark-quota-of-requests"):
                                        self.low_water_mark_quota_of_requests = value
                                        self.low_water_mark_quota_of_requests.value_namespace = name_space
                                        self.low_water_mark_quota_of_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "quota-exhausts"):
                                        self.quota_exhausts = value
                                        self.quota_exhausts.value_namespace = name_space
                                        self.quota_exhausts.value_namespace_prefix = name_space_prefix
                                    if(value_path == "remaining-quota-of-requests"):
                                        self.remaining_quota_of_requests = value
                                        self.remaining_quota_of_requests.value_namespace = name_space
                                        self.remaining_quota_of_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "total-quota-of-requests"):
                                        self.total_quota_of_requests = value
                                        self.total_quota_of_requests.value_namespace = name_space
                                        self.total_quota_of_requests.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.active_sessions.is_set or
                                    self.policy_plane_errored_requests.is_set or
                                    self.policy_plane_unknown_requests.is_set or
                                    self.started_sessions.is_set or
                                    self.stopped_sessions.is_set or
                                    (self.interim is not None and self.interim.has_data()) or
                                    (self.interim_inflight is not None and self.interim_inflight.has_data()) or
                                    (self.pass_through is not None and self.pass_through.has_data()) or
                                    (self.start is not None and self.start.has_data()) or
                                    (self.stop is not None and self.stop.has_data()) or
                                    (self.update is not None and self.update.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.active_sessions.yfilter != YFilter.not_set or
                                    self.policy_plane_errored_requests.yfilter != YFilter.not_set or
                                    self.policy_plane_unknown_requests.yfilter != YFilter.not_set or
                                    self.started_sessions.yfilter != YFilter.not_set or
                                    self.stopped_sessions.yfilter != YFilter.not_set or
                                    (self.interim is not None and self.interim.has_operation()) or
                                    (self.interim_inflight is not None and self.interim_inflight.has_operation()) or
                                    (self.pass_through is not None and self.pass_through.has_operation()) or
                                    (self.start is not None and self.start.has_operation()) or
                                    (self.stop is not None and self.stop.has_operation()) or
                                    (self.update is not None and self.update.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "accounting" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.active_sessions.is_set or self.active_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.active_sessions.get_name_leafdata())
                                if (self.policy_plane_errored_requests.is_set or self.policy_plane_errored_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.policy_plane_errored_requests.get_name_leafdata())
                                if (self.policy_plane_unknown_requests.is_set or self.policy_plane_unknown_requests.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.policy_plane_unknown_requests.get_name_leafdata())
                                if (self.started_sessions.is_set or self.started_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.started_sessions.get_name_leafdata())
                                if (self.stopped_sessions.is_set or self.stopped_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.stopped_sessions.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "interim"):
                                    if (self.interim is None):
                                        self.interim = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Interim()
                                        self.interim.parent = self
                                        self._children_name_map["interim"] = "interim"
                                    return self.interim

                                if (child_yang_name == "interim-inflight"):
                                    if (self.interim_inflight is None):
                                        self.interim_inflight = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.InterimInflight()
                                        self.interim_inflight.parent = self
                                        self._children_name_map["interim_inflight"] = "interim-inflight"
                                    return self.interim_inflight

                                if (child_yang_name == "pass-through"):
                                    if (self.pass_through is None):
                                        self.pass_through = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.PassThrough()
                                        self.pass_through.parent = self
                                        self._children_name_map["pass_through"] = "pass-through"
                                    return self.pass_through

                                if (child_yang_name == "start"):
                                    if (self.start is None):
                                        self.start = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Start()
                                        self.start.parent = self
                                        self._children_name_map["start"] = "start"
                                    return self.start

                                if (child_yang_name == "stop"):
                                    if (self.stop is None):
                                        self.stop = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Stop()
                                        self.stop.parent = self
                                        self._children_name_map["stop"] = "stop"
                                    return self.stop

                                if (child_yang_name == "update"):
                                    if (self.update is None):
                                        self.update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting.Update()
                                        self.update.parent = self
                                        self._children_name_map["update"] = "update"
                                    return self.update

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "interim" or name == "interim-inflight" or name == "pass-through" or name == "start" or name == "stop" or name == "update" or name == "active-sessions" or name == "policy-plane-errored-requests" or name == "policy-plane-unknown-requests" or name == "started-sessions" or name == "stopped-sessions"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "active-sessions"):
                                    self.active_sessions = value
                                    self.active_sessions.value_namespace = name_space
                                    self.active_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "policy-plane-errored-requests"):
                                    self.policy_plane_errored_requests = value
                                    self.policy_plane_errored_requests.value_namespace = name_space
                                    self.policy_plane_errored_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "policy-plane-unknown-requests"):
                                    self.policy_plane_unknown_requests = value
                                    self.policy_plane_unknown_requests.value_namespace = name_space
                                    self.policy_plane_unknown_requests.value_namespace_prefix = name_space_prefix
                                if(value_path == "started-sessions"):
                                    self.started_sessions = value
                                    self.started_sessions.value_namespace = name_space
                                    self.started_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "stopped-sessions"):
                                    self.stopped_sessions = value
                                    self.stopped_sessions.value_namespace = name_space
                                    self.stopped_sessions.value_namespace_prefix = name_space_prefix


                        class Mobility(Entity):
                            """
                            Mobility statistics
                            
                            .. attribute:: receive_response_failures
                            
                            	Response receive failures
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: receive_response_successes
                            
                            	Response receive success
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: send_request_failures
                            
                            	Request send failures
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: send_request_successes
                            
                            	Request send success
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Mobility, self).__init__()

                                self.yang_name = "mobility"
                                self.yang_parent_name = "aaa"

                                self.receive_response_failures = YLeaf(YType.uint64, "receive-response-failures")

                                self.receive_response_successes = YLeaf(YType.uint64, "receive-response-successes")

                                self.send_request_failures = YLeaf(YType.uint64, "send-request-failures")

                                self.send_request_successes = YLeaf(YType.uint64, "send-request-successes")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("receive_response_failures",
                                                "receive_response_successes",
                                                "send_request_failures",
                                                "send_request_successes") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Mobility, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.Mobility, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.receive_response_failures.is_set or
                                    self.receive_response_successes.is_set or
                                    self.send_request_failures.is_set or
                                    self.send_request_successes.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.receive_response_failures.yfilter != YFilter.not_set or
                                    self.receive_response_successes.yfilter != YFilter.not_set or
                                    self.send_request_failures.yfilter != YFilter.not_set or
                                    self.send_request_successes.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "mobility" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.receive_response_failures.is_set or self.receive_response_failures.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.receive_response_failures.get_name_leafdata())
                                if (self.receive_response_successes.is_set or self.receive_response_successes.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.receive_response_successes.get_name_leafdata())
                                if (self.send_request_failures.is_set or self.send_request_failures.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.send_request_failures.get_name_leafdata())
                                if (self.send_request_successes.is_set or self.send_request_successes.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.send_request_successes.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "receive-response-failures" or name == "receive-response-successes" or name == "send-request-failures" or name == "send-request-successes"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "receive-response-failures"):
                                    self.receive_response_failures = value
                                    self.receive_response_failures.value_namespace = name_space
                                    self.receive_response_failures.value_namespace_prefix = name_space_prefix
                                if(value_path == "receive-response-successes"):
                                    self.receive_response_successes = value
                                    self.receive_response_successes.value_namespace = name_space
                                    self.receive_response_successes.value_namespace_prefix = name_space_prefix
                                if(value_path == "send-request-failures"):
                                    self.send_request_failures = value
                                    self.send_request_failures.value_namespace = name_space
                                    self.send_request_failures.value_namespace_prefix = name_space_prefix
                                if(value_path == "send-request-successes"):
                                    self.send_request_successes = value
                                    self.send_request_successes.value_namespace = name_space
                                    self.send_request_successes.value_namespace_prefix = name_space_prefix


                        class AggregateChangeOfAuthorization(Entity):
                            """
                            Aggregate change of authorization (COA)
                            statistics
                            
                            .. attribute:: account_logoff
                            
                            	Account logoff request statistics
                            	**type**\:   :py:class:`AccountLogoff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogoff>`
                            
                            .. attribute:: account_logon
                            
                            	Account logon request statistics
                            	**type**\:   :py:class:`AccountLogon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogon>`
                            
                            .. attribute:: account_update
                            
                            	Account update request statistics
                            	**type**\:   :py:class:`AccountUpdate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountUpdate>`
                            
                            .. attribute:: attr_list_retrieve_failure_resps
                            
                            	Responses to attribute list failure errors
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: internal_err_resps
                            
                            	Responses to internal error
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: no_cmd_resps
                            
                            	Responses empty (no command) COA request
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: no_session_found_resps
                            
                            	Responses to COA with unknown session identifier
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: no_session_peer_resps
                            
                            	Responses to session peer not found error
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: resp_send_failure
                            
                            	Response send failures
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: service_multi
                            
                            	MA\-CoA Service request statistics
                            	**type**\:   :py:class:`ServiceMulti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.ServiceMulti>`
                            
                            .. attribute:: service_profile_push_failure_resps
                            
                            	Responses to service profile push failures
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: session_disconnect
                            
                            	Session disconnect request statistics
                            	**type**\:   :py:class:`SessionDisconnect <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SessionDisconnect>`
                            
                            .. attribute:: single_service_logoff
                            
                            	Single Service logoff request statistics
                            	**type**\:   :py:class:`SingleServiceLogoff <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogoff>`
                            
                            .. attribute:: single_service_logon
                            
                            	Service logon request statistics
                            	**type**\:   :py:class:`SingleServiceLogon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogon>`
                            
                            .. attribute:: single_service_modify
                            
                            	Single Service Modify request statistics
                            	**type**\:   :py:class:`SingleServiceModify <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceModify>`
                            
                            .. attribute:: unknown_account_cmd_resps
                            
                            	Responses to unknown account command
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: unknown_cmd_resps
                            
                            	Responses to unknown command
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: unknown_service_cmd_resps
                            
                            	Responses to unknown service command
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization, self).__init__()

                                self.yang_name = "aggregate-change-of-authorization"
                                self.yang_parent_name = "aaa"

                                self.attr_list_retrieve_failure_resps = YLeaf(YType.uint64, "attr-list-retrieve-failure-resps")

                                self.internal_err_resps = YLeaf(YType.uint64, "internal-err-resps")

                                self.no_cmd_resps = YLeaf(YType.uint64, "no-cmd-resps")

                                self.no_session_found_resps = YLeaf(YType.uint64, "no-session-found-resps")

                                self.no_session_peer_resps = YLeaf(YType.uint64, "no-session-peer-resps")

                                self.resp_send_failure = YLeaf(YType.uint64, "resp-send-failure")

                                self.service_profile_push_failure_resps = YLeaf(YType.uint64, "service-profile-push-failure-resps")

                                self.unknown_account_cmd_resps = YLeaf(YType.uint64, "unknown-account-cmd-resps")

                                self.unknown_cmd_resps = YLeaf(YType.uint64, "unknown-cmd-resps")

                                self.unknown_service_cmd_resps = YLeaf(YType.uint64, "unknown-service-cmd-resps")

                                self.account_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogoff()
                                self.account_logoff.parent = self
                                self._children_name_map["account_logoff"] = "account-logoff"
                                self._children_yang_names.add("account-logoff")

                                self.account_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogon()
                                self.account_logon.parent = self
                                self._children_name_map["account_logon"] = "account-logon"
                                self._children_yang_names.add("account-logon")

                                self.account_update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountUpdate()
                                self.account_update.parent = self
                                self._children_name_map["account_update"] = "account-update"
                                self._children_yang_names.add("account-update")

                                self.service_multi = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.ServiceMulti()
                                self.service_multi.parent = self
                                self._children_name_map["service_multi"] = "service-multi"
                                self._children_yang_names.add("service-multi")

                                self.session_disconnect = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SessionDisconnect()
                                self.session_disconnect.parent = self
                                self._children_name_map["session_disconnect"] = "session-disconnect"
                                self._children_yang_names.add("session-disconnect")

                                self.single_service_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogoff()
                                self.single_service_logoff.parent = self
                                self._children_name_map["single_service_logoff"] = "single-service-logoff"
                                self._children_yang_names.add("single-service-logoff")

                                self.single_service_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogon()
                                self.single_service_logon.parent = self
                                self._children_name_map["single_service_logon"] = "single-service-logon"
                                self._children_yang_names.add("single-service-logon")

                                self.single_service_modify = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceModify()
                                self.single_service_modify.parent = self
                                self._children_name_map["single_service_modify"] = "single-service-modify"
                                self._children_yang_names.add("single-service-modify")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("attr_list_retrieve_failure_resps",
                                                "internal_err_resps",
                                                "no_cmd_resps",
                                                "no_session_found_resps",
                                                "no_session_peer_resps",
                                                "resp_send_failure",
                                                "service_profile_push_failure_resps",
                                                "unknown_account_cmd_resps",
                                                "unknown_cmd_resps",
                                                "unknown_service_cmd_resps") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization, self).__setattr__(name, value)


                            class AccountLogon(Entity):
                                """
                                Account logon request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogon, self).__init__()

                                    self.yang_name = "account-logon"
                                    self.yang_parent_name = "aggregate-change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogon, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogon, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "account-logon" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class AccountLogoff(Entity):
                                """
                                Account logoff request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogoff, self).__init__()

                                    self.yang_name = "account-logoff"
                                    self.yang_parent_name = "aggregate-change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogoff, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogoff, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "account-logoff" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class AccountUpdate(Entity):
                                """
                                Account update request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountUpdate, self).__init__()

                                    self.yang_name = "account-update"
                                    self.yang_parent_name = "aggregate-change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountUpdate, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountUpdate, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "account-update" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class SessionDisconnect(Entity):
                                """
                                Session disconnect request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SessionDisconnect, self).__init__()

                                    self.yang_name = "session-disconnect"
                                    self.yang_parent_name = "aggregate-change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SessionDisconnect, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SessionDisconnect, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "session-disconnect" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class SingleServiceLogon(Entity):
                                """
                                Service logon request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogon, self).__init__()

                                    self.yang_name = "single-service-logon"
                                    self.yang_parent_name = "aggregate-change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogon, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogon, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "single-service-logon" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class SingleServiceLogoff(Entity):
                                """
                                Single Service logoff request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogoff, self).__init__()

                                    self.yang_name = "single-service-logoff"
                                    self.yang_parent_name = "aggregate-change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogoff, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogoff, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "single-service-logoff" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class SingleServiceModify(Entity):
                                """
                                Single Service Modify request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceModify, self).__init__()

                                    self.yang_name = "single-service-modify"
                                    self.yang_parent_name = "aggregate-change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceModify, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceModify, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "single-service-modify" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix


                            class ServiceMulti(Entity):
                                """
                                MA\-CoA Service request statistics
                                
                                .. attribute:: acknowledged_requests
                                
                                	Acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: non_acknowledged_requests
                                
                                	Non acknowledged requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_requests
                                
                                	Received requests
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.ServiceMulti, self).__init__()

                                    self.yang_name = "service-multi"
                                    self.yang_parent_name = "aggregate-change-of-authorization"

                                    self.acknowledged_requests = YLeaf(YType.uint64, "acknowledged-requests")

                                    self.non_acknowledged_requests = YLeaf(YType.uint64, "non-acknowledged-requests")

                                    self.received_requests = YLeaf(YType.uint64, "received-requests")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("acknowledged_requests",
                                                    "non_acknowledged_requests",
                                                    "received_requests") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.ServiceMulti, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.ServiceMulti, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.acknowledged_requests.is_set or
                                        self.non_acknowledged_requests.is_set or
                                        self.received_requests.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.acknowledged_requests.yfilter != YFilter.not_set or
                                        self.non_acknowledged_requests.yfilter != YFilter.not_set or
                                        self.received_requests.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "service-multi" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.acknowledged_requests.is_set or self.acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.acknowledged_requests.get_name_leafdata())
                                    if (self.non_acknowledged_requests.is_set or self.non_acknowledged_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.non_acknowledged_requests.get_name_leafdata())
                                    if (self.received_requests.is_set or self.received_requests.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_requests.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "acknowledged-requests" or name == "non-acknowledged-requests" or name == "received-requests"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "acknowledged-requests"):
                                        self.acknowledged_requests = value
                                        self.acknowledged_requests.value_namespace = name_space
                                        self.acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "non-acknowledged-requests"):
                                        self.non_acknowledged_requests = value
                                        self.non_acknowledged_requests.value_namespace = name_space
                                        self.non_acknowledged_requests.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-requests"):
                                        self.received_requests = value
                                        self.received_requests.value_namespace = name_space
                                        self.received_requests.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    self.attr_list_retrieve_failure_resps.is_set or
                                    self.internal_err_resps.is_set or
                                    self.no_cmd_resps.is_set or
                                    self.no_session_found_resps.is_set or
                                    self.no_session_peer_resps.is_set or
                                    self.resp_send_failure.is_set or
                                    self.service_profile_push_failure_resps.is_set or
                                    self.unknown_account_cmd_resps.is_set or
                                    self.unknown_cmd_resps.is_set or
                                    self.unknown_service_cmd_resps.is_set or
                                    (self.account_logoff is not None and self.account_logoff.has_data()) or
                                    (self.account_logon is not None and self.account_logon.has_data()) or
                                    (self.account_update is not None and self.account_update.has_data()) or
                                    (self.service_multi is not None and self.service_multi.has_data()) or
                                    (self.session_disconnect is not None and self.session_disconnect.has_data()) or
                                    (self.single_service_logoff is not None and self.single_service_logoff.has_data()) or
                                    (self.single_service_logon is not None and self.single_service_logon.has_data()) or
                                    (self.single_service_modify is not None and self.single_service_modify.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.attr_list_retrieve_failure_resps.yfilter != YFilter.not_set or
                                    self.internal_err_resps.yfilter != YFilter.not_set or
                                    self.no_cmd_resps.yfilter != YFilter.not_set or
                                    self.no_session_found_resps.yfilter != YFilter.not_set or
                                    self.no_session_peer_resps.yfilter != YFilter.not_set or
                                    self.resp_send_failure.yfilter != YFilter.not_set or
                                    self.service_profile_push_failure_resps.yfilter != YFilter.not_set or
                                    self.unknown_account_cmd_resps.yfilter != YFilter.not_set or
                                    self.unknown_cmd_resps.yfilter != YFilter.not_set or
                                    self.unknown_service_cmd_resps.yfilter != YFilter.not_set or
                                    (self.account_logoff is not None and self.account_logoff.has_operation()) or
                                    (self.account_logon is not None and self.account_logon.has_operation()) or
                                    (self.account_update is not None and self.account_update.has_operation()) or
                                    (self.service_multi is not None and self.service_multi.has_operation()) or
                                    (self.session_disconnect is not None and self.session_disconnect.has_operation()) or
                                    (self.single_service_logoff is not None and self.single_service_logoff.has_operation()) or
                                    (self.single_service_logon is not None and self.single_service_logon.has_operation()) or
                                    (self.single_service_modify is not None and self.single_service_modify.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "aggregate-change-of-authorization" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.attr_list_retrieve_failure_resps.is_set or self.attr_list_retrieve_failure_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attr_list_retrieve_failure_resps.get_name_leafdata())
                                if (self.internal_err_resps.is_set or self.internal_err_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.internal_err_resps.get_name_leafdata())
                                if (self.no_cmd_resps.is_set or self.no_cmd_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.no_cmd_resps.get_name_leafdata())
                                if (self.no_session_found_resps.is_set or self.no_session_found_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.no_session_found_resps.get_name_leafdata())
                                if (self.no_session_peer_resps.is_set or self.no_session_peer_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.no_session_peer_resps.get_name_leafdata())
                                if (self.resp_send_failure.is_set or self.resp_send_failure.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.resp_send_failure.get_name_leafdata())
                                if (self.service_profile_push_failure_resps.is_set or self.service_profile_push_failure_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.service_profile_push_failure_resps.get_name_leafdata())
                                if (self.unknown_account_cmd_resps.is_set or self.unknown_account_cmd_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unknown_account_cmd_resps.get_name_leafdata())
                                if (self.unknown_cmd_resps.is_set or self.unknown_cmd_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unknown_cmd_resps.get_name_leafdata())
                                if (self.unknown_service_cmd_resps.is_set or self.unknown_service_cmd_resps.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.unknown_service_cmd_resps.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "account-logoff"):
                                    if (self.account_logoff is None):
                                        self.account_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogoff()
                                        self.account_logoff.parent = self
                                        self._children_name_map["account_logoff"] = "account-logoff"
                                    return self.account_logoff

                                if (child_yang_name == "account-logon"):
                                    if (self.account_logon is None):
                                        self.account_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountLogon()
                                        self.account_logon.parent = self
                                        self._children_name_map["account_logon"] = "account-logon"
                                    return self.account_logon

                                if (child_yang_name == "account-update"):
                                    if (self.account_update is None):
                                        self.account_update = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.AccountUpdate()
                                        self.account_update.parent = self
                                        self._children_name_map["account_update"] = "account-update"
                                    return self.account_update

                                if (child_yang_name == "service-multi"):
                                    if (self.service_multi is None):
                                        self.service_multi = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.ServiceMulti()
                                        self.service_multi.parent = self
                                        self._children_name_map["service_multi"] = "service-multi"
                                    return self.service_multi

                                if (child_yang_name == "session-disconnect"):
                                    if (self.session_disconnect is None):
                                        self.session_disconnect = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SessionDisconnect()
                                        self.session_disconnect.parent = self
                                        self._children_name_map["session_disconnect"] = "session-disconnect"
                                    return self.session_disconnect

                                if (child_yang_name == "single-service-logoff"):
                                    if (self.single_service_logoff is None):
                                        self.single_service_logoff = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogoff()
                                        self.single_service_logoff.parent = self
                                        self._children_name_map["single_service_logoff"] = "single-service-logoff"
                                    return self.single_service_logoff

                                if (child_yang_name == "single-service-logon"):
                                    if (self.single_service_logon is None):
                                        self.single_service_logon = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceLogon()
                                        self.single_service_logon.parent = self
                                        self._children_name_map["single_service_logon"] = "single-service-logon"
                                    return self.single_service_logon

                                if (child_yang_name == "single-service-modify"):
                                    if (self.single_service_modify is None):
                                        self.single_service_modify = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization.SingleServiceModify()
                                        self.single_service_modify.parent = self
                                        self._children_name_map["single_service_modify"] = "single-service-modify"
                                    return self.single_service_modify

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "account-logoff" or name == "account-logon" or name == "account-update" or name == "service-multi" or name == "session-disconnect" or name == "single-service-logoff" or name == "single-service-logon" or name == "single-service-modify" or name == "attr-list-retrieve-failure-resps" or name == "internal-err-resps" or name == "no-cmd-resps" or name == "no-session-found-resps" or name == "no-session-peer-resps" or name == "resp-send-failure" or name == "service-profile-push-failure-resps" or name == "unknown-account-cmd-resps" or name == "unknown-cmd-resps" or name == "unknown-service-cmd-resps"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "attr-list-retrieve-failure-resps"):
                                    self.attr_list_retrieve_failure_resps = value
                                    self.attr_list_retrieve_failure_resps.value_namespace = name_space
                                    self.attr_list_retrieve_failure_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "internal-err-resps"):
                                    self.internal_err_resps = value
                                    self.internal_err_resps.value_namespace = name_space
                                    self.internal_err_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "no-cmd-resps"):
                                    self.no_cmd_resps = value
                                    self.no_cmd_resps.value_namespace = name_space
                                    self.no_cmd_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "no-session-found-resps"):
                                    self.no_session_found_resps = value
                                    self.no_session_found_resps.value_namespace = name_space
                                    self.no_session_found_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "no-session-peer-resps"):
                                    self.no_session_peer_resps = value
                                    self.no_session_peer_resps.value_namespace = name_space
                                    self.no_session_peer_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "resp-send-failure"):
                                    self.resp_send_failure = value
                                    self.resp_send_failure.value_namespace = name_space
                                    self.resp_send_failure.value_namespace_prefix = name_space_prefix
                                if(value_path == "service-profile-push-failure-resps"):
                                    self.service_profile_push_failure_resps = value
                                    self.service_profile_push_failure_resps.value_namespace = name_space
                                    self.service_profile_push_failure_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "unknown-account-cmd-resps"):
                                    self.unknown_account_cmd_resps = value
                                    self.unknown_account_cmd_resps.value_namespace = name_space
                                    self.unknown_account_cmd_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "unknown-cmd-resps"):
                                    self.unknown_cmd_resps = value
                                    self.unknown_cmd_resps.value_namespace = name_space
                                    self.unknown_cmd_resps.value_namespace_prefix = name_space_prefix
                                if(value_path == "unknown-service-cmd-resps"):
                                    self.unknown_service_cmd_resps = value
                                    self.unknown_service_cmd_resps.value_namespace = name_space
                                    self.unknown_service_cmd_resps.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                (self.accounting is not None and self.accounting.has_data()) or
                                (self.accounting_stats_all is not None and self.accounting_stats_all.has_data()) or
                                (self.aggregate_accounting is not None and self.aggregate_accounting.has_data()) or
                                (self.aggregate_accounting_stats_all is not None and self.aggregate_accounting_stats_all.has_data()) or
                                (self.aggregate_authentication is not None and self.aggregate_authentication.has_data()) or
                                (self.aggregate_authorization is not None and self.aggregate_authorization.has_data()) or
                                (self.aggregate_change_of_authorization is not None and self.aggregate_change_of_authorization.has_data()) or
                                (self.aggregate_mobility is not None and self.aggregate_mobility.has_data()) or
                                (self.authentication is not None and self.authentication.has_data()) or
                                (self.authorization is not None and self.authorization.has_data()) or
                                (self.change_of_authorization is not None and self.change_of_authorization.has_data()) or
                                (self.mobility is not None and self.mobility.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.accounting is not None and self.accounting.has_operation()) or
                                (self.accounting_stats_all is not None and self.accounting_stats_all.has_operation()) or
                                (self.aggregate_accounting is not None and self.aggregate_accounting.has_operation()) or
                                (self.aggregate_accounting_stats_all is not None and self.aggregate_accounting_stats_all.has_operation()) or
                                (self.aggregate_authentication is not None and self.aggregate_authentication.has_operation()) or
                                (self.aggregate_authorization is not None and self.aggregate_authorization.has_operation()) or
                                (self.aggregate_change_of_authorization is not None and self.aggregate_change_of_authorization.has_operation()) or
                                (self.aggregate_mobility is not None and self.aggregate_mobility.has_operation()) or
                                (self.authentication is not None and self.authentication.has_operation()) or
                                (self.authorization is not None and self.authorization.has_operation()) or
                                (self.change_of_authorization is not None and self.change_of_authorization.has_operation()) or
                                (self.mobility is not None and self.mobility.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "aaa" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "accounting"):
                                if (self.accounting is None):
                                    self.accounting = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Accounting()
                                    self.accounting.parent = self
                                    self._children_name_map["accounting"] = "accounting"
                                return self.accounting

                            if (child_yang_name == "accounting-stats-all"):
                                if (self.accounting_stats_all is None):
                                    self.accounting_stats_all = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AccountingStatsAll()
                                    self.accounting_stats_all.parent = self
                                    self._children_name_map["accounting_stats_all"] = "accounting-stats-all"
                                return self.accounting_stats_all

                            if (child_yang_name == "aggregate-accounting"):
                                if (self.aggregate_accounting is None):
                                    self.aggregate_accounting = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccounting()
                                    self.aggregate_accounting.parent = self
                                    self._children_name_map["aggregate_accounting"] = "aggregate-accounting"
                                return self.aggregate_accounting

                            if (child_yang_name == "aggregate-accounting-stats-all"):
                                if (self.aggregate_accounting_stats_all is None):
                                    self.aggregate_accounting_stats_all = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAccountingStatsAll()
                                    self.aggregate_accounting_stats_all.parent = self
                                    self._children_name_map["aggregate_accounting_stats_all"] = "aggregate-accounting-stats-all"
                                return self.aggregate_accounting_stats_all

                            if (child_yang_name == "aggregate-authentication"):
                                if (self.aggregate_authentication is None):
                                    self.aggregate_authentication = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthentication()
                                    self.aggregate_authentication.parent = self
                                    self._children_name_map["aggregate_authentication"] = "aggregate-authentication"
                                return self.aggregate_authentication

                            if (child_yang_name == "aggregate-authorization"):
                                if (self.aggregate_authorization is None):
                                    self.aggregate_authorization = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateAuthorization()
                                    self.aggregate_authorization.parent = self
                                    self._children_name_map["aggregate_authorization"] = "aggregate-authorization"
                                return self.aggregate_authorization

                            if (child_yang_name == "aggregate-change-of-authorization"):
                                if (self.aggregate_change_of_authorization is None):
                                    self.aggregate_change_of_authorization = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateChangeOfAuthorization()
                                    self.aggregate_change_of_authorization.parent = self
                                    self._children_name_map["aggregate_change_of_authorization"] = "aggregate-change-of-authorization"
                                return self.aggregate_change_of_authorization

                            if (child_yang_name == "aggregate-mobility"):
                                if (self.aggregate_mobility is None):
                                    self.aggregate_mobility = Subscriber.Manager.Nodes.Node.Statistics.Aaa.AggregateMobility()
                                    self.aggregate_mobility.parent = self
                                    self._children_name_map["aggregate_mobility"] = "aggregate-mobility"
                                return self.aggregate_mobility

                            if (child_yang_name == "authentication"):
                                if (self.authentication is None):
                                    self.authentication = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                return self.authentication

                            if (child_yang_name == "authorization"):
                                if (self.authorization is None):
                                    self.authorization = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Authorization()
                                    self.authorization.parent = self
                                    self._children_name_map["authorization"] = "authorization"
                                return self.authorization

                            if (child_yang_name == "change-of-authorization"):
                                if (self.change_of_authorization is None):
                                    self.change_of_authorization = Subscriber.Manager.Nodes.Node.Statistics.Aaa.ChangeOfAuthorization()
                                    self.change_of_authorization.parent = self
                                    self._children_name_map["change_of_authorization"] = "change-of-authorization"
                                return self.change_of_authorization

                            if (child_yang_name == "mobility"):
                                if (self.mobility is None):
                                    self.mobility = Subscriber.Manager.Nodes.Node.Statistics.Aaa.Mobility()
                                    self.mobility.parent = self
                                    self._children_name_map["mobility"] = "mobility"
                                return self.mobility

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "accounting" or name == "accounting-stats-all" or name == "aggregate-accounting" or name == "aggregate-accounting-stats-all" or name == "aggregate-authentication" or name == "aggregate-authorization" or name == "aggregate-change-of-authorization" or name == "aggregate-mobility" or name == "authentication" or name == "authorization" or name == "change-of-authorization" or name == "mobility"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class AggregateSummary(Entity):
                        """
                        Aggregate summary of statistics
                        
                        .. attribute:: calling_station_id_attribute_format_warnings
                        
                        	Calling station ID attribute format warnings
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: destination_station_id_attribute_format_warnings
                        
                        	Destination station ID attribute format warnings
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: install_user_profiles
                        
                        	User profiles installed
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: nas_port_attribute_format_warnings
                        
                        	NAS port attribute format warnings
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: nas_port_id_attribute_format_warnings
                        
                        	NAS port ID attribute format warnings
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: no_class_match_in_start_request
                        
                        	No control policy class match during subscriber start
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: no_subscriber_control_policy_on_interface
                        
                        	Subscriber control policy not applied on interface
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: sess_disc_no_quota
                        
                        	Session Disconnect Request Queued, no quota
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: sess_disc_none_started
                        
                        	Session Disconnect Requests not Dequeued, no quota
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: sess_disc_q_count
                        
                        	Session Disconnect Requests Queued
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: sess_disc_quota
                        
                        	Session Disconnect Quota
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: sess_disc_quota_avail
                        
                        	Session Disconnect Request Accepted, quota available
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: sess_disc_quota_exhausts
                        
                        	Session Disconnect Quota Exhausts
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: sess_disc_quota_remaining
                        
                        	Session Disconnect Quota Remaining
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: sess_disc_recon_ip
                        
                        	Session Disconnect Requests not Dequeued, reconciliation in progress
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: user_profile_errors
                        
                        	User profile errors
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: user_profile_install_errors
                        
                        	User profile install errors
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: user_profile_removals
                        
                        	User profile removals
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: username_attribute_format_warnings
                        
                        	Username attribute format warnings
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Manager.Nodes.Node.Statistics.AggregateSummary, self).__init__()

                            self.yang_name = "aggregate-summary"
                            self.yang_parent_name = "statistics"

                            self.calling_station_id_attribute_format_warnings = YLeaf(YType.uint64, "calling-station-id-attribute-format-warnings")

                            self.destination_station_id_attribute_format_warnings = YLeaf(YType.uint64, "destination-station-id-attribute-format-warnings")

                            self.install_user_profiles = YLeaf(YType.uint64, "install-user-profiles")

                            self.nas_port_attribute_format_warnings = YLeaf(YType.uint64, "nas-port-attribute-format-warnings")

                            self.nas_port_id_attribute_format_warnings = YLeaf(YType.uint64, "nas-port-id-attribute-format-warnings")

                            self.no_class_match_in_start_request = YLeaf(YType.uint64, "no-class-match-in-start-request")

                            self.no_subscriber_control_policy_on_interface = YLeaf(YType.uint64, "no-subscriber-control-policy-on-interface")

                            self.sess_disc_no_quota = YLeaf(YType.uint64, "sess-disc-no-quota")

                            self.sess_disc_none_started = YLeaf(YType.uint64, "sess-disc-none-started")

                            self.sess_disc_q_count = YLeaf(YType.uint32, "sess-disc-q-count")

                            self.sess_disc_quota = YLeaf(YType.uint32, "sess-disc-quota")

                            self.sess_disc_quota_avail = YLeaf(YType.uint64, "sess-disc-quota-avail")

                            self.sess_disc_quota_exhausts = YLeaf(YType.uint64, "sess-disc-quota-exhausts")

                            self.sess_disc_quota_remaining = YLeaf(YType.uint32, "sess-disc-quota-remaining")

                            self.sess_disc_recon_ip = YLeaf(YType.uint64, "sess-disc-recon-ip")

                            self.user_profile_errors = YLeaf(YType.uint64, "user-profile-errors")

                            self.user_profile_install_errors = YLeaf(YType.uint64, "user-profile-install-errors")

                            self.user_profile_removals = YLeaf(YType.uint64, "user-profile-removals")

                            self.username_attribute_format_warnings = YLeaf(YType.uint64, "username-attribute-format-warnings")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("calling_station_id_attribute_format_warnings",
                                            "destination_station_id_attribute_format_warnings",
                                            "install_user_profiles",
                                            "nas_port_attribute_format_warnings",
                                            "nas_port_id_attribute_format_warnings",
                                            "no_class_match_in_start_request",
                                            "no_subscriber_control_policy_on_interface",
                                            "sess_disc_no_quota",
                                            "sess_disc_none_started",
                                            "sess_disc_q_count",
                                            "sess_disc_quota",
                                            "sess_disc_quota_avail",
                                            "sess_disc_quota_exhausts",
                                            "sess_disc_quota_remaining",
                                            "sess_disc_recon_ip",
                                            "user_profile_errors",
                                            "user_profile_install_errors",
                                            "user_profile_removals",
                                            "username_attribute_format_warnings") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.AggregateSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Manager.Nodes.Node.Statistics.AggregateSummary, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.calling_station_id_attribute_format_warnings.is_set or
                                self.destination_station_id_attribute_format_warnings.is_set or
                                self.install_user_profiles.is_set or
                                self.nas_port_attribute_format_warnings.is_set or
                                self.nas_port_id_attribute_format_warnings.is_set or
                                self.no_class_match_in_start_request.is_set or
                                self.no_subscriber_control_policy_on_interface.is_set or
                                self.sess_disc_no_quota.is_set or
                                self.sess_disc_none_started.is_set or
                                self.sess_disc_q_count.is_set or
                                self.sess_disc_quota.is_set or
                                self.sess_disc_quota_avail.is_set or
                                self.sess_disc_quota_exhausts.is_set or
                                self.sess_disc_quota_remaining.is_set or
                                self.sess_disc_recon_ip.is_set or
                                self.user_profile_errors.is_set or
                                self.user_profile_install_errors.is_set or
                                self.user_profile_removals.is_set or
                                self.username_attribute_format_warnings.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.calling_station_id_attribute_format_warnings.yfilter != YFilter.not_set or
                                self.destination_station_id_attribute_format_warnings.yfilter != YFilter.not_set or
                                self.install_user_profiles.yfilter != YFilter.not_set or
                                self.nas_port_attribute_format_warnings.yfilter != YFilter.not_set or
                                self.nas_port_id_attribute_format_warnings.yfilter != YFilter.not_set or
                                self.no_class_match_in_start_request.yfilter != YFilter.not_set or
                                self.no_subscriber_control_policy_on_interface.yfilter != YFilter.not_set or
                                self.sess_disc_no_quota.yfilter != YFilter.not_set or
                                self.sess_disc_none_started.yfilter != YFilter.not_set or
                                self.sess_disc_q_count.yfilter != YFilter.not_set or
                                self.sess_disc_quota.yfilter != YFilter.not_set or
                                self.sess_disc_quota_avail.yfilter != YFilter.not_set or
                                self.sess_disc_quota_exhausts.yfilter != YFilter.not_set or
                                self.sess_disc_quota_remaining.yfilter != YFilter.not_set or
                                self.sess_disc_recon_ip.yfilter != YFilter.not_set or
                                self.user_profile_errors.yfilter != YFilter.not_set or
                                self.user_profile_install_errors.yfilter != YFilter.not_set or
                                self.user_profile_removals.yfilter != YFilter.not_set or
                                self.username_attribute_format_warnings.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "aggregate-summary" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.calling_station_id_attribute_format_warnings.is_set or self.calling_station_id_attribute_format_warnings.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.calling_station_id_attribute_format_warnings.get_name_leafdata())
                            if (self.destination_station_id_attribute_format_warnings.is_set or self.destination_station_id_attribute_format_warnings.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.destination_station_id_attribute_format_warnings.get_name_leafdata())
                            if (self.install_user_profiles.is_set or self.install_user_profiles.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.install_user_profiles.get_name_leafdata())
                            if (self.nas_port_attribute_format_warnings.is_set or self.nas_port_attribute_format_warnings.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.nas_port_attribute_format_warnings.get_name_leafdata())
                            if (self.nas_port_id_attribute_format_warnings.is_set or self.nas_port_id_attribute_format_warnings.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.nas_port_id_attribute_format_warnings.get_name_leafdata())
                            if (self.no_class_match_in_start_request.is_set or self.no_class_match_in_start_request.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.no_class_match_in_start_request.get_name_leafdata())
                            if (self.no_subscriber_control_policy_on_interface.is_set or self.no_subscriber_control_policy_on_interface.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.no_subscriber_control_policy_on_interface.get_name_leafdata())
                            if (self.sess_disc_no_quota.is_set or self.sess_disc_no_quota.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sess_disc_no_quota.get_name_leafdata())
                            if (self.sess_disc_none_started.is_set or self.sess_disc_none_started.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sess_disc_none_started.get_name_leafdata())
                            if (self.sess_disc_q_count.is_set or self.sess_disc_q_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sess_disc_q_count.get_name_leafdata())
                            if (self.sess_disc_quota.is_set or self.sess_disc_quota.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sess_disc_quota.get_name_leafdata())
                            if (self.sess_disc_quota_avail.is_set or self.sess_disc_quota_avail.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sess_disc_quota_avail.get_name_leafdata())
                            if (self.sess_disc_quota_exhausts.is_set or self.sess_disc_quota_exhausts.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sess_disc_quota_exhausts.get_name_leafdata())
                            if (self.sess_disc_quota_remaining.is_set or self.sess_disc_quota_remaining.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sess_disc_quota_remaining.get_name_leafdata())
                            if (self.sess_disc_recon_ip.is_set or self.sess_disc_recon_ip.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sess_disc_recon_ip.get_name_leafdata())
                            if (self.user_profile_errors.is_set or self.user_profile_errors.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.user_profile_errors.get_name_leafdata())
                            if (self.user_profile_install_errors.is_set or self.user_profile_install_errors.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.user_profile_install_errors.get_name_leafdata())
                            if (self.user_profile_removals.is_set or self.user_profile_removals.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.user_profile_removals.get_name_leafdata())
                            if (self.username_attribute_format_warnings.is_set or self.username_attribute_format_warnings.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.username_attribute_format_warnings.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "calling-station-id-attribute-format-warnings" or name == "destination-station-id-attribute-format-warnings" or name == "install-user-profiles" or name == "nas-port-attribute-format-warnings" or name == "nas-port-id-attribute-format-warnings" or name == "no-class-match-in-start-request" or name == "no-subscriber-control-policy-on-interface" or name == "sess-disc-no-quota" or name == "sess-disc-none-started" or name == "sess-disc-q-count" or name == "sess-disc-quota" or name == "sess-disc-quota-avail" or name == "sess-disc-quota-exhausts" or name == "sess-disc-quota-remaining" or name == "sess-disc-recon-ip" or name == "user-profile-errors" or name == "user-profile-install-errors" or name == "user-profile-removals" or name == "username-attribute-format-warnings"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "calling-station-id-attribute-format-warnings"):
                                self.calling_station_id_attribute_format_warnings = value
                                self.calling_station_id_attribute_format_warnings.value_namespace = name_space
                                self.calling_station_id_attribute_format_warnings.value_namespace_prefix = name_space_prefix
                            if(value_path == "destination-station-id-attribute-format-warnings"):
                                self.destination_station_id_attribute_format_warnings = value
                                self.destination_station_id_attribute_format_warnings.value_namespace = name_space
                                self.destination_station_id_attribute_format_warnings.value_namespace_prefix = name_space_prefix
                            if(value_path == "install-user-profiles"):
                                self.install_user_profiles = value
                                self.install_user_profiles.value_namespace = name_space
                                self.install_user_profiles.value_namespace_prefix = name_space_prefix
                            if(value_path == "nas-port-attribute-format-warnings"):
                                self.nas_port_attribute_format_warnings = value
                                self.nas_port_attribute_format_warnings.value_namespace = name_space
                                self.nas_port_attribute_format_warnings.value_namespace_prefix = name_space_prefix
                            if(value_path == "nas-port-id-attribute-format-warnings"):
                                self.nas_port_id_attribute_format_warnings = value
                                self.nas_port_id_attribute_format_warnings.value_namespace = name_space
                                self.nas_port_id_attribute_format_warnings.value_namespace_prefix = name_space_prefix
                            if(value_path == "no-class-match-in-start-request"):
                                self.no_class_match_in_start_request = value
                                self.no_class_match_in_start_request.value_namespace = name_space
                                self.no_class_match_in_start_request.value_namespace_prefix = name_space_prefix
                            if(value_path == "no-subscriber-control-policy-on-interface"):
                                self.no_subscriber_control_policy_on_interface = value
                                self.no_subscriber_control_policy_on_interface.value_namespace = name_space
                                self.no_subscriber_control_policy_on_interface.value_namespace_prefix = name_space_prefix
                            if(value_path == "sess-disc-no-quota"):
                                self.sess_disc_no_quota = value
                                self.sess_disc_no_quota.value_namespace = name_space
                                self.sess_disc_no_quota.value_namespace_prefix = name_space_prefix
                            if(value_path == "sess-disc-none-started"):
                                self.sess_disc_none_started = value
                                self.sess_disc_none_started.value_namespace = name_space
                                self.sess_disc_none_started.value_namespace_prefix = name_space_prefix
                            if(value_path == "sess-disc-q-count"):
                                self.sess_disc_q_count = value
                                self.sess_disc_q_count.value_namespace = name_space
                                self.sess_disc_q_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "sess-disc-quota"):
                                self.sess_disc_quota = value
                                self.sess_disc_quota.value_namespace = name_space
                                self.sess_disc_quota.value_namespace_prefix = name_space_prefix
                            if(value_path == "sess-disc-quota-avail"):
                                self.sess_disc_quota_avail = value
                                self.sess_disc_quota_avail.value_namespace = name_space
                                self.sess_disc_quota_avail.value_namespace_prefix = name_space_prefix
                            if(value_path == "sess-disc-quota-exhausts"):
                                self.sess_disc_quota_exhausts = value
                                self.sess_disc_quota_exhausts.value_namespace = name_space
                                self.sess_disc_quota_exhausts.value_namespace_prefix = name_space_prefix
                            if(value_path == "sess-disc-quota-remaining"):
                                self.sess_disc_quota_remaining = value
                                self.sess_disc_quota_remaining.value_namespace = name_space
                                self.sess_disc_quota_remaining.value_namespace_prefix = name_space_prefix
                            if(value_path == "sess-disc-recon-ip"):
                                self.sess_disc_recon_ip = value
                                self.sess_disc_recon_ip.value_namespace = name_space
                                self.sess_disc_recon_ip.value_namespace_prefix = name_space_prefix
                            if(value_path == "user-profile-errors"):
                                self.user_profile_errors = value
                                self.user_profile_errors.value_namespace = name_space
                                self.user_profile_errors.value_namespace_prefix = name_space_prefix
                            if(value_path == "user-profile-install-errors"):
                                self.user_profile_install_errors = value
                                self.user_profile_install_errors.value_namespace = name_space
                                self.user_profile_install_errors.value_namespace_prefix = name_space_prefix
                            if(value_path == "user-profile-removals"):
                                self.user_profile_removals = value
                                self.user_profile_removals.value_namespace = name_space
                                self.user_profile_removals.value_namespace_prefix = name_space_prefix
                            if(value_path == "username-attribute-format-warnings"):
                                self.username_attribute_format_warnings = value
                                self.username_attribute_format_warnings.value_namespace = name_space
                                self.username_attribute_format_warnings.value_namespace_prefix = name_space_prefix


                    class Srg(Entity):
                        """
                        Geo Redundancy statistics
                        
                        .. attribute:: ack_to_srg
                        
                        	Number of ACKs sent to Srg
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: actual_txlist_sent
                        
                        	Txlist Send Success
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: alreadyin_txlist
                        
                        	Element already in Txlist
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: create_upd_clean_callback
                        
                        	Txlist Create/update clean callback
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: create_update_encode
                        
                        	Txlist Create Update Encode
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: delete_clean_callback
                        
                        	Txlist Delete clean callback
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: delete_encode
                        
                        	Txlist Delete Encode
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: eod_count
                        
                        	Number of EODs Received
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_control_resume_threshold
                        
                        	Threshold Limit to resume the flow control
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: inflight_add_count
                        
                        	No.of inflight sessions added
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: inflight_alloc_fails
                        
                        	Memory Alloc Failures for Inflight Entry
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: inflight_delete_failures
                        
                        	Inflight Entry Delete Failures
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: inflight_deletes
                        
                        	Inflight Deletes Count
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: inflight_insert_failures
                        
                        	Inflight Entry Insert Failures
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: inflight_not_found
                        
                        	Inflight Entries not found during delete
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: inflight_session_count
                        
                        	No.of Sessions inflight at given time
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: inflight_under_run_count
                        
                        	Inflight Underrun Counter
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: is_srg_flow_control_enabled
                        
                        	Flag indicating SRG Flow control enabled or not
                        	**type**\:  bool
                        
                        .. attribute:: last_pause_period
                        
                        	Amount of time paused during last flow control window
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: last_pause_time
                        
                        	Timestamp of recent Pause Event
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: last_resume_time
                        
                        	Timestamp of recent Resume Event
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: max_inflight_sessoin_count
                        
                        	Maximum no.of inflight sessions allowed
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: nack_to_srg
                        
                        	Number of NACKs sent to Srg
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: nack_to_srg_fail_cnt
                        
                        	Number of NACKs Failed to send to Srg
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: slave_create_update
                        
                        	Create Update received on slave
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: slave_decode_fail
                        
                        	Decode failed on Slave
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: slave_delete
                        
                        	Delete received on slave
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: slave_recv_entry
                        
                        	Slave Recieved Sync
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: sod_count
                        
                        	Number of SODs Received
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: sod_eod_dirty_delete_count
                        
                        	Number of Sessions Invalid Deletes Within SOD EOD Window
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: sod_eod_dirty_mark_count
                        
                        	Number of Sessions Marked as Invalid Within SOD EOD Window
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: sod_eod_replay_req_count
                        
                        	Number of Replay Requests Within SOD EOD Window
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: srg_context_free
                        
                        	SRG context freed
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: srg_context_malloc
                        
                        	SRG context allocated
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_dont_send_to_txlist
                        
                        	Total No of times Dont send to Txlist
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_master_eoms_pending
                        
                        	Total No of times Master EOMS Pending
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_pause_count
                        
                        	Total No.of times Pause is Enabled
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_pause_time
                        
                        	Total Amount of time paused during all flow control windows
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: total_resume_count
                        
                        	Total No.of times Resume is triggered
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_srg_not_master
                        
                        	Total No of times SRG Not Master
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_clean_invalid_state
                        
                        	Number of Txlist Cleanup called on Invalid subscriber srg state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_del_app
                        
                        	Number of Txlist delete for App msg
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_del_app_notlinked
                        
                        	Number of Txlist delete for App which are not linked
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_del_sync
                        
                        	Number for Txlist delete for sync msg
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_del_sync_notlinked
                        
                        	Number of Txlist delete for sync which are not linked
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_encode
                        
                        	Txlist Encode
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_encode_fail
                        
                        	Txlist encode Failed
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_remove_all
                        
                        	Number of Txlist remove all calls
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_remove_all_internal_error
                        
                        	Number of Internal errors upon Master Txlist remove all call
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_send_failed
                        
                        	Txlist Send Failed
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_send_failed_notactive
                        
                        	Txlist send failed due to not active
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: txlist_send_triggered
                        
                        	Txlist Send Triggered
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Manager.Nodes.Node.Statistics.Srg, self).__init__()

                            self.yang_name = "srg"
                            self.yang_parent_name = "statistics"

                            self.ack_to_srg = YLeaf(YType.uint32, "ack-to-srg")

                            self.actual_txlist_sent = YLeaf(YType.uint32, "actual-txlist-sent")

                            self.alreadyin_txlist = YLeaf(YType.uint32, "alreadyin-txlist")

                            self.create_upd_clean_callback = YLeaf(YType.uint32, "create-upd-clean-callback")

                            self.create_update_encode = YLeaf(YType.uint32, "create-update-encode")

                            self.delete_clean_callback = YLeaf(YType.uint32, "delete-clean-callback")

                            self.delete_encode = YLeaf(YType.uint32, "delete-encode")

                            self.eod_count = YLeaf(YType.uint32, "eod-count")

                            self.flow_control_resume_threshold = YLeaf(YType.uint32, "flow-control-resume-threshold")

                            self.inflight_add_count = YLeaf(YType.uint32, "inflight-add-count")

                            self.inflight_alloc_fails = YLeaf(YType.uint32, "inflight-alloc-fails")

                            self.inflight_delete_failures = YLeaf(YType.uint32, "inflight-delete-failures")

                            self.inflight_deletes = YLeaf(YType.uint32, "inflight-deletes")

                            self.inflight_insert_failures = YLeaf(YType.uint32, "inflight-insert-failures")

                            self.inflight_not_found = YLeaf(YType.uint32, "inflight-not-found")

                            self.inflight_session_count = YLeaf(YType.uint32, "inflight-session-count")

                            self.inflight_under_run_count = YLeaf(YType.uint32, "inflight-under-run-count")

                            self.is_srg_flow_control_enabled = YLeaf(YType.boolean, "is-srg-flow-control-enabled")

                            self.last_pause_period = YLeaf(YType.uint64, "last-pause-period")

                            self.last_pause_time = YLeaf(YType.uint64, "last-pause-time")

                            self.last_resume_time = YLeaf(YType.uint64, "last-resume-time")

                            self.max_inflight_sessoin_count = YLeaf(YType.uint32, "max-inflight-sessoin-count")

                            self.nack_to_srg = YLeaf(YType.uint32, "nack-to-srg")

                            self.nack_to_srg_fail_cnt = YLeaf(YType.uint32, "nack-to-srg-fail-cnt")

                            self.slave_create_update = YLeaf(YType.uint32, "slave-create-update")

                            self.slave_decode_fail = YLeaf(YType.uint32, "slave-decode-fail")

                            self.slave_delete = YLeaf(YType.uint32, "slave-delete")

                            self.slave_recv_entry = YLeaf(YType.uint32, "slave-recv-entry")

                            self.sod_count = YLeaf(YType.uint32, "sod-count")

                            self.sod_eod_dirty_delete_count = YLeaf(YType.uint32, "sod-eod-dirty-delete-count")

                            self.sod_eod_dirty_mark_count = YLeaf(YType.uint32, "sod-eod-dirty-mark-count")

                            self.sod_eod_replay_req_count = YLeaf(YType.uint32, "sod-eod-replay-req-count")

                            self.srg_context_free = YLeaf(YType.uint32, "srg-context-free")

                            self.srg_context_malloc = YLeaf(YType.uint32, "srg-context-malloc")

                            self.total_dont_send_to_txlist = YLeaf(YType.uint32, "total-dont-send-to-txlist")

                            self.total_master_eoms_pending = YLeaf(YType.uint32, "total-master-eoms-pending")

                            self.total_pause_count = YLeaf(YType.uint32, "total-pause-count")

                            self.total_pause_time = YLeaf(YType.uint64, "total-pause-time")

                            self.total_resume_count = YLeaf(YType.uint32, "total-resume-count")

                            self.total_srg_not_master = YLeaf(YType.uint32, "total-srg-not-master")

                            self.txlist_clean_invalid_state = YLeaf(YType.uint32, "txlist-clean-invalid-state")

                            self.txlist_del_app = YLeaf(YType.uint32, "txlist-del-app")

                            self.txlist_del_app_notlinked = YLeaf(YType.uint32, "txlist-del-app-notlinked")

                            self.txlist_del_sync = YLeaf(YType.uint32, "txlist-del-sync")

                            self.txlist_del_sync_notlinked = YLeaf(YType.uint32, "txlist-del-sync-notlinked")

                            self.txlist_encode = YLeaf(YType.uint32, "txlist-encode")

                            self.txlist_encode_fail = YLeaf(YType.uint32, "txlist-encode-fail")

                            self.txlist_remove_all = YLeaf(YType.uint32, "txlist-remove-all")

                            self.txlist_remove_all_internal_error = YLeaf(YType.uint32, "txlist-remove-all-internal-error")

                            self.txlist_send_failed = YLeaf(YType.uint32, "txlist-send-failed")

                            self.txlist_send_failed_notactive = YLeaf(YType.uint32, "txlist-send-failed-notactive")

                            self.txlist_send_triggered = YLeaf(YType.uint32, "txlist-send-triggered")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("ack_to_srg",
                                            "actual_txlist_sent",
                                            "alreadyin_txlist",
                                            "create_upd_clean_callback",
                                            "create_update_encode",
                                            "delete_clean_callback",
                                            "delete_encode",
                                            "eod_count",
                                            "flow_control_resume_threshold",
                                            "inflight_add_count",
                                            "inflight_alloc_fails",
                                            "inflight_delete_failures",
                                            "inflight_deletes",
                                            "inflight_insert_failures",
                                            "inflight_not_found",
                                            "inflight_session_count",
                                            "inflight_under_run_count",
                                            "is_srg_flow_control_enabled",
                                            "last_pause_period",
                                            "last_pause_time",
                                            "last_resume_time",
                                            "max_inflight_sessoin_count",
                                            "nack_to_srg",
                                            "nack_to_srg_fail_cnt",
                                            "slave_create_update",
                                            "slave_decode_fail",
                                            "slave_delete",
                                            "slave_recv_entry",
                                            "sod_count",
                                            "sod_eod_dirty_delete_count",
                                            "sod_eod_dirty_mark_count",
                                            "sod_eod_replay_req_count",
                                            "srg_context_free",
                                            "srg_context_malloc",
                                            "total_dont_send_to_txlist",
                                            "total_master_eoms_pending",
                                            "total_pause_count",
                                            "total_pause_time",
                                            "total_resume_count",
                                            "total_srg_not_master",
                                            "txlist_clean_invalid_state",
                                            "txlist_del_app",
                                            "txlist_del_app_notlinked",
                                            "txlist_del_sync",
                                            "txlist_del_sync_notlinked",
                                            "txlist_encode",
                                            "txlist_encode_fail",
                                            "txlist_remove_all",
                                            "txlist_remove_all_internal_error",
                                            "txlist_send_failed",
                                            "txlist_send_failed_notactive",
                                            "txlist_send_triggered") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Manager.Nodes.Node.Statistics.Srg, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Manager.Nodes.Node.Statistics.Srg, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.ack_to_srg.is_set or
                                self.actual_txlist_sent.is_set or
                                self.alreadyin_txlist.is_set or
                                self.create_upd_clean_callback.is_set or
                                self.create_update_encode.is_set or
                                self.delete_clean_callback.is_set or
                                self.delete_encode.is_set or
                                self.eod_count.is_set or
                                self.flow_control_resume_threshold.is_set or
                                self.inflight_add_count.is_set or
                                self.inflight_alloc_fails.is_set or
                                self.inflight_delete_failures.is_set or
                                self.inflight_deletes.is_set or
                                self.inflight_insert_failures.is_set or
                                self.inflight_not_found.is_set or
                                self.inflight_session_count.is_set or
                                self.inflight_under_run_count.is_set or
                                self.is_srg_flow_control_enabled.is_set or
                                self.last_pause_period.is_set or
                                self.last_pause_time.is_set or
                                self.last_resume_time.is_set or
                                self.max_inflight_sessoin_count.is_set or
                                self.nack_to_srg.is_set or
                                self.nack_to_srg_fail_cnt.is_set or
                                self.slave_create_update.is_set or
                                self.slave_decode_fail.is_set or
                                self.slave_delete.is_set or
                                self.slave_recv_entry.is_set or
                                self.sod_count.is_set or
                                self.sod_eod_dirty_delete_count.is_set or
                                self.sod_eod_dirty_mark_count.is_set or
                                self.sod_eod_replay_req_count.is_set or
                                self.srg_context_free.is_set or
                                self.srg_context_malloc.is_set or
                                self.total_dont_send_to_txlist.is_set or
                                self.total_master_eoms_pending.is_set or
                                self.total_pause_count.is_set or
                                self.total_pause_time.is_set or
                                self.total_resume_count.is_set or
                                self.total_srg_not_master.is_set or
                                self.txlist_clean_invalid_state.is_set or
                                self.txlist_del_app.is_set or
                                self.txlist_del_app_notlinked.is_set or
                                self.txlist_del_sync.is_set or
                                self.txlist_del_sync_notlinked.is_set or
                                self.txlist_encode.is_set or
                                self.txlist_encode_fail.is_set or
                                self.txlist_remove_all.is_set or
                                self.txlist_remove_all_internal_error.is_set or
                                self.txlist_send_failed.is_set or
                                self.txlist_send_failed_notactive.is_set or
                                self.txlist_send_triggered.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.ack_to_srg.yfilter != YFilter.not_set or
                                self.actual_txlist_sent.yfilter != YFilter.not_set or
                                self.alreadyin_txlist.yfilter != YFilter.not_set or
                                self.create_upd_clean_callback.yfilter != YFilter.not_set or
                                self.create_update_encode.yfilter != YFilter.not_set or
                                self.delete_clean_callback.yfilter != YFilter.not_set or
                                self.delete_encode.yfilter != YFilter.not_set or
                                self.eod_count.yfilter != YFilter.not_set or
                                self.flow_control_resume_threshold.yfilter != YFilter.not_set or
                                self.inflight_add_count.yfilter != YFilter.not_set or
                                self.inflight_alloc_fails.yfilter != YFilter.not_set or
                                self.inflight_delete_failures.yfilter != YFilter.not_set or
                                self.inflight_deletes.yfilter != YFilter.not_set or
                                self.inflight_insert_failures.yfilter != YFilter.not_set or
                                self.inflight_not_found.yfilter != YFilter.not_set or
                                self.inflight_session_count.yfilter != YFilter.not_set or
                                self.inflight_under_run_count.yfilter != YFilter.not_set or
                                self.is_srg_flow_control_enabled.yfilter != YFilter.not_set or
                                self.last_pause_period.yfilter != YFilter.not_set or
                                self.last_pause_time.yfilter != YFilter.not_set or
                                self.last_resume_time.yfilter != YFilter.not_set or
                                self.max_inflight_sessoin_count.yfilter != YFilter.not_set or
                                self.nack_to_srg.yfilter != YFilter.not_set or
                                self.nack_to_srg_fail_cnt.yfilter != YFilter.not_set or
                                self.slave_create_update.yfilter != YFilter.not_set or
                                self.slave_decode_fail.yfilter != YFilter.not_set or
                                self.slave_delete.yfilter != YFilter.not_set or
                                self.slave_recv_entry.yfilter != YFilter.not_set or
                                self.sod_count.yfilter != YFilter.not_set or
                                self.sod_eod_dirty_delete_count.yfilter != YFilter.not_set or
                                self.sod_eod_dirty_mark_count.yfilter != YFilter.not_set or
                                self.sod_eod_replay_req_count.yfilter != YFilter.not_set or
                                self.srg_context_free.yfilter != YFilter.not_set or
                                self.srg_context_malloc.yfilter != YFilter.not_set or
                                self.total_dont_send_to_txlist.yfilter != YFilter.not_set or
                                self.total_master_eoms_pending.yfilter != YFilter.not_set or
                                self.total_pause_count.yfilter != YFilter.not_set or
                                self.total_pause_time.yfilter != YFilter.not_set or
                                self.total_resume_count.yfilter != YFilter.not_set or
                                self.total_srg_not_master.yfilter != YFilter.not_set or
                                self.txlist_clean_invalid_state.yfilter != YFilter.not_set or
                                self.txlist_del_app.yfilter != YFilter.not_set or
                                self.txlist_del_app_notlinked.yfilter != YFilter.not_set or
                                self.txlist_del_sync.yfilter != YFilter.not_set or
                                self.txlist_del_sync_notlinked.yfilter != YFilter.not_set or
                                self.txlist_encode.yfilter != YFilter.not_set or
                                self.txlist_encode_fail.yfilter != YFilter.not_set or
                                self.txlist_remove_all.yfilter != YFilter.not_set or
                                self.txlist_remove_all_internal_error.yfilter != YFilter.not_set or
                                self.txlist_send_failed.yfilter != YFilter.not_set or
                                self.txlist_send_failed_notactive.yfilter != YFilter.not_set or
                                self.txlist_send_triggered.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "srg" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.ack_to_srg.is_set or self.ack_to_srg.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.ack_to_srg.get_name_leafdata())
                            if (self.actual_txlist_sent.is_set or self.actual_txlist_sent.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.actual_txlist_sent.get_name_leafdata())
                            if (self.alreadyin_txlist.is_set or self.alreadyin_txlist.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.alreadyin_txlist.get_name_leafdata())
                            if (self.create_upd_clean_callback.is_set or self.create_upd_clean_callback.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.create_upd_clean_callback.get_name_leafdata())
                            if (self.create_update_encode.is_set or self.create_update_encode.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.create_update_encode.get_name_leafdata())
                            if (self.delete_clean_callback.is_set or self.delete_clean_callback.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.delete_clean_callback.get_name_leafdata())
                            if (self.delete_encode.is_set or self.delete_encode.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.delete_encode.get_name_leafdata())
                            if (self.eod_count.is_set or self.eod_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.eod_count.get_name_leafdata())
                            if (self.flow_control_resume_threshold.is_set or self.flow_control_resume_threshold.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.flow_control_resume_threshold.get_name_leafdata())
                            if (self.inflight_add_count.is_set or self.inflight_add_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.inflight_add_count.get_name_leafdata())
                            if (self.inflight_alloc_fails.is_set or self.inflight_alloc_fails.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.inflight_alloc_fails.get_name_leafdata())
                            if (self.inflight_delete_failures.is_set or self.inflight_delete_failures.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.inflight_delete_failures.get_name_leafdata())
                            if (self.inflight_deletes.is_set or self.inflight_deletes.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.inflight_deletes.get_name_leafdata())
                            if (self.inflight_insert_failures.is_set or self.inflight_insert_failures.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.inflight_insert_failures.get_name_leafdata())
                            if (self.inflight_not_found.is_set or self.inflight_not_found.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.inflight_not_found.get_name_leafdata())
                            if (self.inflight_session_count.is_set or self.inflight_session_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.inflight_session_count.get_name_leafdata())
                            if (self.inflight_under_run_count.is_set or self.inflight_under_run_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.inflight_under_run_count.get_name_leafdata())
                            if (self.is_srg_flow_control_enabled.is_set or self.is_srg_flow_control_enabled.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_srg_flow_control_enabled.get_name_leafdata())
                            if (self.last_pause_period.is_set or self.last_pause_period.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.last_pause_period.get_name_leafdata())
                            if (self.last_pause_time.is_set or self.last_pause_time.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.last_pause_time.get_name_leafdata())
                            if (self.last_resume_time.is_set or self.last_resume_time.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.last_resume_time.get_name_leafdata())
                            if (self.max_inflight_sessoin_count.is_set or self.max_inflight_sessoin_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.max_inflight_sessoin_count.get_name_leafdata())
                            if (self.nack_to_srg.is_set or self.nack_to_srg.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.nack_to_srg.get_name_leafdata())
                            if (self.nack_to_srg_fail_cnt.is_set or self.nack_to_srg_fail_cnt.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.nack_to_srg_fail_cnt.get_name_leafdata())
                            if (self.slave_create_update.is_set or self.slave_create_update.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.slave_create_update.get_name_leafdata())
                            if (self.slave_decode_fail.is_set or self.slave_decode_fail.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.slave_decode_fail.get_name_leafdata())
                            if (self.slave_delete.is_set or self.slave_delete.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.slave_delete.get_name_leafdata())
                            if (self.slave_recv_entry.is_set or self.slave_recv_entry.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.slave_recv_entry.get_name_leafdata())
                            if (self.sod_count.is_set or self.sod_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sod_count.get_name_leafdata())
                            if (self.sod_eod_dirty_delete_count.is_set or self.sod_eod_dirty_delete_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sod_eod_dirty_delete_count.get_name_leafdata())
                            if (self.sod_eod_dirty_mark_count.is_set or self.sod_eod_dirty_mark_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sod_eod_dirty_mark_count.get_name_leafdata())
                            if (self.sod_eod_replay_req_count.is_set or self.sod_eod_replay_req_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.sod_eod_replay_req_count.get_name_leafdata())
                            if (self.srg_context_free.is_set or self.srg_context_free.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.srg_context_free.get_name_leafdata())
                            if (self.srg_context_malloc.is_set or self.srg_context_malloc.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.srg_context_malloc.get_name_leafdata())
                            if (self.total_dont_send_to_txlist.is_set or self.total_dont_send_to_txlist.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.total_dont_send_to_txlist.get_name_leafdata())
                            if (self.total_master_eoms_pending.is_set or self.total_master_eoms_pending.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.total_master_eoms_pending.get_name_leafdata())
                            if (self.total_pause_count.is_set or self.total_pause_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.total_pause_count.get_name_leafdata())
                            if (self.total_pause_time.is_set or self.total_pause_time.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.total_pause_time.get_name_leafdata())
                            if (self.total_resume_count.is_set or self.total_resume_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.total_resume_count.get_name_leafdata())
                            if (self.total_srg_not_master.is_set or self.total_srg_not_master.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.total_srg_not_master.get_name_leafdata())
                            if (self.txlist_clean_invalid_state.is_set or self.txlist_clean_invalid_state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_clean_invalid_state.get_name_leafdata())
                            if (self.txlist_del_app.is_set or self.txlist_del_app.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_del_app.get_name_leafdata())
                            if (self.txlist_del_app_notlinked.is_set or self.txlist_del_app_notlinked.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_del_app_notlinked.get_name_leafdata())
                            if (self.txlist_del_sync.is_set or self.txlist_del_sync.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_del_sync.get_name_leafdata())
                            if (self.txlist_del_sync_notlinked.is_set or self.txlist_del_sync_notlinked.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_del_sync_notlinked.get_name_leafdata())
                            if (self.txlist_encode.is_set or self.txlist_encode.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_encode.get_name_leafdata())
                            if (self.txlist_encode_fail.is_set or self.txlist_encode_fail.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_encode_fail.get_name_leafdata())
                            if (self.txlist_remove_all.is_set or self.txlist_remove_all.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_remove_all.get_name_leafdata())
                            if (self.txlist_remove_all_internal_error.is_set or self.txlist_remove_all_internal_error.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_remove_all_internal_error.get_name_leafdata())
                            if (self.txlist_send_failed.is_set or self.txlist_send_failed.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_send_failed.get_name_leafdata())
                            if (self.txlist_send_failed_notactive.is_set or self.txlist_send_failed_notactive.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_send_failed_notactive.get_name_leafdata())
                            if (self.txlist_send_triggered.is_set or self.txlist_send_triggered.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.txlist_send_triggered.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "ack-to-srg" or name == "actual-txlist-sent" or name == "alreadyin-txlist" or name == "create-upd-clean-callback" or name == "create-update-encode" or name == "delete-clean-callback" or name == "delete-encode" or name == "eod-count" or name == "flow-control-resume-threshold" or name == "inflight-add-count" or name == "inflight-alloc-fails" or name == "inflight-delete-failures" or name == "inflight-deletes" or name == "inflight-insert-failures" or name == "inflight-not-found" or name == "inflight-session-count" or name == "inflight-under-run-count" or name == "is-srg-flow-control-enabled" or name == "last-pause-period" or name == "last-pause-time" or name == "last-resume-time" or name == "max-inflight-sessoin-count" or name == "nack-to-srg" or name == "nack-to-srg-fail-cnt" or name == "slave-create-update" or name == "slave-decode-fail" or name == "slave-delete" or name == "slave-recv-entry" or name == "sod-count" or name == "sod-eod-dirty-delete-count" or name == "sod-eod-dirty-mark-count" or name == "sod-eod-replay-req-count" or name == "srg-context-free" or name == "srg-context-malloc" or name == "total-dont-send-to-txlist" or name == "total-master-eoms-pending" or name == "total-pause-count" or name == "total-pause-time" or name == "total-resume-count" or name == "total-srg-not-master" or name == "txlist-clean-invalid-state" or name == "txlist-del-app" or name == "txlist-del-app-notlinked" or name == "txlist-del-sync" or name == "txlist-del-sync-notlinked" or name == "txlist-encode" or name == "txlist-encode-fail" or name == "txlist-remove-all" or name == "txlist-remove-all-internal-error" or name == "txlist-send-failed" or name == "txlist-send-failed-notactive" or name == "txlist-send-triggered"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "ack-to-srg"):
                                self.ack_to_srg = value
                                self.ack_to_srg.value_namespace = name_space
                                self.ack_to_srg.value_namespace_prefix = name_space_prefix
                            if(value_path == "actual-txlist-sent"):
                                self.actual_txlist_sent = value
                                self.actual_txlist_sent.value_namespace = name_space
                                self.actual_txlist_sent.value_namespace_prefix = name_space_prefix
                            if(value_path == "alreadyin-txlist"):
                                self.alreadyin_txlist = value
                                self.alreadyin_txlist.value_namespace = name_space
                                self.alreadyin_txlist.value_namespace_prefix = name_space_prefix
                            if(value_path == "create-upd-clean-callback"):
                                self.create_upd_clean_callback = value
                                self.create_upd_clean_callback.value_namespace = name_space
                                self.create_upd_clean_callback.value_namespace_prefix = name_space_prefix
                            if(value_path == "create-update-encode"):
                                self.create_update_encode = value
                                self.create_update_encode.value_namespace = name_space
                                self.create_update_encode.value_namespace_prefix = name_space_prefix
                            if(value_path == "delete-clean-callback"):
                                self.delete_clean_callback = value
                                self.delete_clean_callback.value_namespace = name_space
                                self.delete_clean_callback.value_namespace_prefix = name_space_prefix
                            if(value_path == "delete-encode"):
                                self.delete_encode = value
                                self.delete_encode.value_namespace = name_space
                                self.delete_encode.value_namespace_prefix = name_space_prefix
                            if(value_path == "eod-count"):
                                self.eod_count = value
                                self.eod_count.value_namespace = name_space
                                self.eod_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "flow-control-resume-threshold"):
                                self.flow_control_resume_threshold = value
                                self.flow_control_resume_threshold.value_namespace = name_space
                                self.flow_control_resume_threshold.value_namespace_prefix = name_space_prefix
                            if(value_path == "inflight-add-count"):
                                self.inflight_add_count = value
                                self.inflight_add_count.value_namespace = name_space
                                self.inflight_add_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "inflight-alloc-fails"):
                                self.inflight_alloc_fails = value
                                self.inflight_alloc_fails.value_namespace = name_space
                                self.inflight_alloc_fails.value_namespace_prefix = name_space_prefix
                            if(value_path == "inflight-delete-failures"):
                                self.inflight_delete_failures = value
                                self.inflight_delete_failures.value_namespace = name_space
                                self.inflight_delete_failures.value_namespace_prefix = name_space_prefix
                            if(value_path == "inflight-deletes"):
                                self.inflight_deletes = value
                                self.inflight_deletes.value_namespace = name_space
                                self.inflight_deletes.value_namespace_prefix = name_space_prefix
                            if(value_path == "inflight-insert-failures"):
                                self.inflight_insert_failures = value
                                self.inflight_insert_failures.value_namespace = name_space
                                self.inflight_insert_failures.value_namespace_prefix = name_space_prefix
                            if(value_path == "inflight-not-found"):
                                self.inflight_not_found = value
                                self.inflight_not_found.value_namespace = name_space
                                self.inflight_not_found.value_namespace_prefix = name_space_prefix
                            if(value_path == "inflight-session-count"):
                                self.inflight_session_count = value
                                self.inflight_session_count.value_namespace = name_space
                                self.inflight_session_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "inflight-under-run-count"):
                                self.inflight_under_run_count = value
                                self.inflight_under_run_count.value_namespace = name_space
                                self.inflight_under_run_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-srg-flow-control-enabled"):
                                self.is_srg_flow_control_enabled = value
                                self.is_srg_flow_control_enabled.value_namespace = name_space
                                self.is_srg_flow_control_enabled.value_namespace_prefix = name_space_prefix
                            if(value_path == "last-pause-period"):
                                self.last_pause_period = value
                                self.last_pause_period.value_namespace = name_space
                                self.last_pause_period.value_namespace_prefix = name_space_prefix
                            if(value_path == "last-pause-time"):
                                self.last_pause_time = value
                                self.last_pause_time.value_namespace = name_space
                                self.last_pause_time.value_namespace_prefix = name_space_prefix
                            if(value_path == "last-resume-time"):
                                self.last_resume_time = value
                                self.last_resume_time.value_namespace = name_space
                                self.last_resume_time.value_namespace_prefix = name_space_prefix
                            if(value_path == "max-inflight-sessoin-count"):
                                self.max_inflight_sessoin_count = value
                                self.max_inflight_sessoin_count.value_namespace = name_space
                                self.max_inflight_sessoin_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "nack-to-srg"):
                                self.nack_to_srg = value
                                self.nack_to_srg.value_namespace = name_space
                                self.nack_to_srg.value_namespace_prefix = name_space_prefix
                            if(value_path == "nack-to-srg-fail-cnt"):
                                self.nack_to_srg_fail_cnt = value
                                self.nack_to_srg_fail_cnt.value_namespace = name_space
                                self.nack_to_srg_fail_cnt.value_namespace_prefix = name_space_prefix
                            if(value_path == "slave-create-update"):
                                self.slave_create_update = value
                                self.slave_create_update.value_namespace = name_space
                                self.slave_create_update.value_namespace_prefix = name_space_prefix
                            if(value_path == "slave-decode-fail"):
                                self.slave_decode_fail = value
                                self.slave_decode_fail.value_namespace = name_space
                                self.slave_decode_fail.value_namespace_prefix = name_space_prefix
                            if(value_path == "slave-delete"):
                                self.slave_delete = value
                                self.slave_delete.value_namespace = name_space
                                self.slave_delete.value_namespace_prefix = name_space_prefix
                            if(value_path == "slave-recv-entry"):
                                self.slave_recv_entry = value
                                self.slave_recv_entry.value_namespace = name_space
                                self.slave_recv_entry.value_namespace_prefix = name_space_prefix
                            if(value_path == "sod-count"):
                                self.sod_count = value
                                self.sod_count.value_namespace = name_space
                                self.sod_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "sod-eod-dirty-delete-count"):
                                self.sod_eod_dirty_delete_count = value
                                self.sod_eod_dirty_delete_count.value_namespace = name_space
                                self.sod_eod_dirty_delete_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "sod-eod-dirty-mark-count"):
                                self.sod_eod_dirty_mark_count = value
                                self.sod_eod_dirty_mark_count.value_namespace = name_space
                                self.sod_eod_dirty_mark_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "sod-eod-replay-req-count"):
                                self.sod_eod_replay_req_count = value
                                self.sod_eod_replay_req_count.value_namespace = name_space
                                self.sod_eod_replay_req_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "srg-context-free"):
                                self.srg_context_free = value
                                self.srg_context_free.value_namespace = name_space
                                self.srg_context_free.value_namespace_prefix = name_space_prefix
                            if(value_path == "srg-context-malloc"):
                                self.srg_context_malloc = value
                                self.srg_context_malloc.value_namespace = name_space
                                self.srg_context_malloc.value_namespace_prefix = name_space_prefix
                            if(value_path == "total-dont-send-to-txlist"):
                                self.total_dont_send_to_txlist = value
                                self.total_dont_send_to_txlist.value_namespace = name_space
                                self.total_dont_send_to_txlist.value_namespace_prefix = name_space_prefix
                            if(value_path == "total-master-eoms-pending"):
                                self.total_master_eoms_pending = value
                                self.total_master_eoms_pending.value_namespace = name_space
                                self.total_master_eoms_pending.value_namespace_prefix = name_space_prefix
                            if(value_path == "total-pause-count"):
                                self.total_pause_count = value
                                self.total_pause_count.value_namespace = name_space
                                self.total_pause_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "total-pause-time"):
                                self.total_pause_time = value
                                self.total_pause_time.value_namespace = name_space
                                self.total_pause_time.value_namespace_prefix = name_space_prefix
                            if(value_path == "total-resume-count"):
                                self.total_resume_count = value
                                self.total_resume_count.value_namespace = name_space
                                self.total_resume_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "total-srg-not-master"):
                                self.total_srg_not_master = value
                                self.total_srg_not_master.value_namespace = name_space
                                self.total_srg_not_master.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-clean-invalid-state"):
                                self.txlist_clean_invalid_state = value
                                self.txlist_clean_invalid_state.value_namespace = name_space
                                self.txlist_clean_invalid_state.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-del-app"):
                                self.txlist_del_app = value
                                self.txlist_del_app.value_namespace = name_space
                                self.txlist_del_app.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-del-app-notlinked"):
                                self.txlist_del_app_notlinked = value
                                self.txlist_del_app_notlinked.value_namespace = name_space
                                self.txlist_del_app_notlinked.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-del-sync"):
                                self.txlist_del_sync = value
                                self.txlist_del_sync.value_namespace = name_space
                                self.txlist_del_sync.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-del-sync-notlinked"):
                                self.txlist_del_sync_notlinked = value
                                self.txlist_del_sync_notlinked.value_namespace = name_space
                                self.txlist_del_sync_notlinked.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-encode"):
                                self.txlist_encode = value
                                self.txlist_encode.value_namespace = name_space
                                self.txlist_encode.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-encode-fail"):
                                self.txlist_encode_fail = value
                                self.txlist_encode_fail.value_namespace = name_space
                                self.txlist_encode_fail.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-remove-all"):
                                self.txlist_remove_all = value
                                self.txlist_remove_all.value_namespace = name_space
                                self.txlist_remove_all.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-remove-all-internal-error"):
                                self.txlist_remove_all_internal_error = value
                                self.txlist_remove_all_internal_error.value_namespace = name_space
                                self.txlist_remove_all_internal_error.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-send-failed"):
                                self.txlist_send_failed = value
                                self.txlist_send_failed.value_namespace = name_space
                                self.txlist_send_failed.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-send-failed-notactive"):
                                self.txlist_send_failed_notactive = value
                                self.txlist_send_failed_notactive.value_namespace = name_space
                                self.txlist_send_failed_notactive.value_namespace_prefix = name_space_prefix
                            if(value_path == "txlist-send-triggered"):
                                self.txlist_send_triggered = value
                                self.txlist_send_triggered.value_namespace = name_space
                                self.txlist_send_triggered.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            (self.aaa is not None and self.aaa.has_data()) or
                            (self.aggregate_summary is not None and self.aggregate_summary.has_data()) or
                            (self.srg is not None and self.srg.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.aaa is not None and self.aaa.has_operation()) or
                            (self.aggregate_summary is not None and self.aggregate_summary.has_operation()) or
                            (self.srg is not None and self.srg.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "aaa"):
                            if (self.aaa is None):
                                self.aaa = Subscriber.Manager.Nodes.Node.Statistics.Aaa()
                                self.aaa.parent = self
                                self._children_name_map["aaa"] = "aaa"
                            return self.aaa

                        if (child_yang_name == "aggregate-summary"):
                            if (self.aggregate_summary is None):
                                self.aggregate_summary = Subscriber.Manager.Nodes.Node.Statistics.AggregateSummary()
                                self.aggregate_summary.parent = self
                                self._children_name_map["aggregate_summary"] = "aggregate-summary"
                            return self.aggregate_summary

                        if (child_yang_name == "srg"):
                            if (self.srg is None):
                                self.srg = Subscriber.Manager.Nodes.Node.Statistics.Srg()
                                self.srg.parent = self
                                self._children_name_map["srg"] = "srg"
                            return self.srg

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "aaa" or name == "aggregate-summary" or name == "srg"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        self.node_name.is_set or
                        (self.statistics is not None and self.statistics.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.node_name.yfilter != YFilter.not_set or
                        (self.statistics is not None and self.statistics.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "node" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-iedge4710-oper:subscriber/manager/nodes/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.node_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "statistics"):
                        if (self.statistics is None):
                            self.statistics = Subscriber.Manager.Nodes.Node.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                        return self.statistics

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "statistics" or name == "node-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "node-name"):
                        self.node_name = value
                        self.node_name.value_namespace = name_space
                        self.node_name.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.node:
                    if (c.has_data()):
                        return True
                return False

            def has_operation(self):
                for c in self.node:
                    if (c.has_operation()):
                        return True
                return self.yfilter != YFilter.not_set

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "nodes" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-iedge4710-oper:subscriber/manager/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "node"):
                    for c in self.node:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Subscriber.Manager.Nodes.Node()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.node.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "node"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass

        def has_data(self):
            return (self.nodes is not None and self.nodes.has_data())

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.nodes is not None and self.nodes.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "manager" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-iedge4710-oper:subscriber/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "nodes"):
                if (self.nodes is None):
                    self.nodes = Subscriber.Manager.Nodes()
                    self.nodes.parent = self
                    self._children_name_map["nodes"] = "nodes"
                return self.nodes

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "nodes"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class Session(Entity):
        """
        Subscriber session operational data
        
        .. attribute:: nodes
        
        	List of subscriber session supported nodes
        	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes>`
        
        

        """

        _prefix = 'iedge4710-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Subscriber.Session, self).__init__()

            self.yang_name = "session"
            self.yang_parent_name = "subscriber"

            self.nodes = Subscriber.Session.Nodes()
            self.nodes.parent = self
            self._children_name_map["nodes"] = "nodes"
            self._children_yang_names.add("nodes")


        class Nodes(Entity):
            """
            List of subscriber session supported nodes
            
            .. attribute:: node
            
            	Subscriber session operational data for a particular node
            	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node>`
            
            

            """

            _prefix = 'iedge4710-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Subscriber.Session.Nodes, self).__init__()

                self.yang_name = "nodes"
                self.yang_parent_name = "session"

                self.node = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in () and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Subscriber.Session.Nodes, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Subscriber.Session.Nodes, self).__setattr__(name, value)


            class Node(Entity):
                """
                Subscriber session operational data for a
                particular node
                
                .. attribute:: node_name  <key>
                
                	Node name
                	**type**\:  str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                .. attribute:: access_interface_summaries
                
                	Summary information filtered by access interface
                	**type**\:   :py:class:`AccessInterfaceSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AccessInterfaceSummaries>`
                
                .. attribute:: address_family_summaries
                
                	Summary information filtered by address family
                	**type**\:   :py:class:`AddressFamilySummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AddressFamilySummaries>`
                
                .. attribute:: authentication_summaries
                
                	Summary information filtered by authentication state
                	**type**\:   :py:class:`AuthenticationSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthenticationSummaries>`
                
                .. attribute:: author_summaries
                
                	Summary information filtered by authorization state
                	**type**\:   :py:class:`AuthorSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthorSummaries>`
                
                .. attribute:: interface_summaries
                
                	Summary information filtered by interface
                	**type**\:   :py:class:`InterfaceSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.InterfaceSummaries>`
                
                .. attribute:: ipv4_address_summaries
                
                	Summary information filtered by subscriber IPv4 address
                	**type**\:   :py:class:`Ipv4AddressSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressSummaries>`
                
                .. attribute:: ipv4_address_vrf_summaries
                
                	Summary information filtered by IPv4 address and VRF
                	**type**\:   :py:class:`Ipv4AddressVrfSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries>`
                
                .. attribute:: mac_summaries
                
                	Summary information filtered by MAC address
                	**type**\:   :py:class:`MacSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.MacSummaries>`
                
                .. attribute:: sessions
                
                	IP subscriber sessions
                	**type**\:   :py:class:`Sessions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Sessions>`
                
                .. attribute:: state_summaries
                
                	Summary information filtered by session state
                	**type**\:   :py:class:`StateSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.StateSummaries>`
                
                .. attribute:: summary
                
                	Subscriber session summary information
                	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Summary>`
                
                .. attribute:: username_summaries
                
                	Summary information filtered by username
                	**type**\:   :py:class:`UsernameSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.UsernameSummaries>`
                
                .. attribute:: vrf_summaries
                
                	Summary information filtered by VRF
                	**type**\:   :py:class:`VrfSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.VrfSummaries>`
                
                

                """

                _prefix = 'iedge4710-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Subscriber.Session.Nodes.Node, self).__init__()

                    self.yang_name = "node"
                    self.yang_parent_name = "nodes"

                    self.node_name = YLeaf(YType.str, "node-name")

                    self.access_interface_summaries = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries()
                    self.access_interface_summaries.parent = self
                    self._children_name_map["access_interface_summaries"] = "access-interface-summaries"
                    self._children_yang_names.add("access-interface-summaries")

                    self.address_family_summaries = Subscriber.Session.Nodes.Node.AddressFamilySummaries()
                    self.address_family_summaries.parent = self
                    self._children_name_map["address_family_summaries"] = "address-family-summaries"
                    self._children_yang_names.add("address-family-summaries")

                    self.authentication_summaries = Subscriber.Session.Nodes.Node.AuthenticationSummaries()
                    self.authentication_summaries.parent = self
                    self._children_name_map["authentication_summaries"] = "authentication-summaries"
                    self._children_yang_names.add("authentication-summaries")

                    self.author_summaries = Subscriber.Session.Nodes.Node.AuthorSummaries()
                    self.author_summaries.parent = self
                    self._children_name_map["author_summaries"] = "author-summaries"
                    self._children_yang_names.add("author-summaries")

                    self.interface_summaries = Subscriber.Session.Nodes.Node.InterfaceSummaries()
                    self.interface_summaries.parent = self
                    self._children_name_map["interface_summaries"] = "interface-summaries"
                    self._children_yang_names.add("interface-summaries")

                    self.ipv4_address_summaries = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries()
                    self.ipv4_address_summaries.parent = self
                    self._children_name_map["ipv4_address_summaries"] = "ipv4-address-summaries"
                    self._children_yang_names.add("ipv4-address-summaries")

                    self.ipv4_address_vrf_summaries = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries()
                    self.ipv4_address_vrf_summaries.parent = self
                    self._children_name_map["ipv4_address_vrf_summaries"] = "ipv4-address-vrf-summaries"
                    self._children_yang_names.add("ipv4-address-vrf-summaries")

                    self.mac_summaries = Subscriber.Session.Nodes.Node.MacSummaries()
                    self.mac_summaries.parent = self
                    self._children_name_map["mac_summaries"] = "mac-summaries"
                    self._children_yang_names.add("mac-summaries")

                    self.sessions = Subscriber.Session.Nodes.Node.Sessions()
                    self.sessions.parent = self
                    self._children_name_map["sessions"] = "sessions"
                    self._children_yang_names.add("sessions")

                    self.state_summaries = Subscriber.Session.Nodes.Node.StateSummaries()
                    self.state_summaries.parent = self
                    self._children_name_map["state_summaries"] = "state-summaries"
                    self._children_yang_names.add("state-summaries")

                    self.summary = Subscriber.Session.Nodes.Node.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"
                    self._children_yang_names.add("summary")

                    self.username_summaries = Subscriber.Session.Nodes.Node.UsernameSummaries()
                    self.username_summaries.parent = self
                    self._children_name_map["username_summaries"] = "username-summaries"
                    self._children_yang_names.add("username-summaries")

                    self.vrf_summaries = Subscriber.Session.Nodes.Node.VrfSummaries()
                    self.vrf_summaries.parent = self
                    self._children_name_map["vrf_summaries"] = "vrf-summaries"
                    self._children_yang_names.add("vrf-summaries")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("node_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Subscriber.Session.Nodes.Node, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Subscriber.Session.Nodes.Node, self).__setattr__(name, value)


                class AuthorSummaries(Entity):
                    """
                    Summary information filtered by authorization
                    state
                    
                    .. attribute:: author_summary
                    
                    	authorization summary
                    	**type**\: list of    :py:class:`AuthorSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.AuthorSummaries, self).__init__()

                        self.yang_name = "author-summaries"
                        self.yang_parent_name = "node"

                        self.author_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.AuthorSummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.AuthorSummaries, self).__setattr__(name, value)


                    class AuthorSummary(Entity):
                        """
                        authorization summary
                        
                        .. attribute:: author_state  <key>
                        
                        	Authorization state
                        	**type**\:   :py:class:`SubscriberAuthorStateFilterFlag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.SubscriberAuthorStateFilterFlag>`
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary, self).__init__()

                            self.yang_name = "author-summary"
                            self.yang_parent_name = "author-summaries"

                            self.author_state = YLeaf(YType.enumeration, "author-state")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("author_state") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "author-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "author-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.author_state.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.author_state.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "author-summary" + "[author-state='" + self.author_state.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.author_state.is_set or self.author_state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.author_state.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "author-state"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "author-state"):
                                self.author_state = value
                                self.author_state.value_namespace = name_space
                                self.author_state.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.author_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.author_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "author-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "author-summary"):
                            for c in self.author_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.AuthorSummaries.AuthorSummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.author_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "author-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Summary(Entity):
                    """
                    Subscriber session summary information
                    
                    .. attribute:: address_family_xr
                    
                    	Address family summary
                    	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr>`
                    
                    .. attribute:: state_xr
                    
                    	State summary
                    	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Summary.StateXr>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "node"

                        self.address_family_xr = Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr()
                        self.address_family_xr.parent = self
                        self._children_name_map["address_family_xr"] = "address-family-xr"
                        self._children_yang_names.add("address-family-xr")

                        self.state_xr = Subscriber.Session.Nodes.Node.Summary.StateXr()
                        self.state_xr.parent = self
                        self._children_name_map["state_xr"] = "state-xr"
                        self._children_yang_names.add("state-xr")


                    class StateXr(Entity):
                        """
                        State summary
                        
                        .. attribute:: ip_subscriber_dhcp
                        
                        	IP subscriber DHCP summary
                        	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberDhcp>`
                        
                        .. attribute:: ip_subscriber_packet
                        
                        	IP subscriber packet summary
                        	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberPacket>`
                        
                        .. attribute:: pppoe
                        
                        	PPPoE summary
                        	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Summary.StateXr.Pppoe>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.Summary.StateXr, self).__init__()

                            self.yang_name = "state-xr"
                            self.yang_parent_name = "summary"

                            self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberDhcp()
                            self.ip_subscriber_dhcp.parent = self
                            self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                            self._children_yang_names.add("ip-subscriber-dhcp")

                            self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberPacket()
                            self.ip_subscriber_packet.parent = self
                            self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                            self._children_yang_names.add("ip-subscriber-packet")

                            self.pppoe = Subscriber.Session.Nodes.Node.Summary.StateXr.Pppoe()
                            self.pppoe.parent = self
                            self._children_name_map["pppoe"] = "pppoe"
                            self._children_yang_names.add("pppoe")


                        class Pppoe(Entity):
                            """
                            PPPoE summary
                            
                            .. attribute:: activated_sessions
                            
                            	Sessions in activated state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: connected_sessions
                            
                            	Sessions in connected state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: connecting_sessions
                            
                            	Sessions in connecting state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: disconnecting_sessions
                            
                            	Sessions in disconnecting state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: end_sessions
                            
                            	Sessions in end state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: idle_sessions
                            
                            	Sessions in idle state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: initialized_sessions
                            
                            	Sessions in initialized state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Summary.StateXr.Pppoe, self).__init__()

                                self.yang_name = "pppoe"
                                self.yang_parent_name = "state-xr"

                                self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("activated_sessions",
                                                "connected_sessions",
                                                "connecting_sessions",
                                                "disconnecting_sessions",
                                                "end_sessions",
                                                "idle_sessions",
                                                "initialized_sessions") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Session.Nodes.Node.Summary.StateXr.Pppoe, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Session.Nodes.Node.Summary.StateXr.Pppoe, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.activated_sessions.is_set or
                                    self.connected_sessions.is_set or
                                    self.connecting_sessions.is_set or
                                    self.disconnecting_sessions.is_set or
                                    self.end_sessions.is_set or
                                    self.idle_sessions.is_set or
                                    self.initialized_sessions.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.activated_sessions.yfilter != YFilter.not_set or
                                    self.connected_sessions.yfilter != YFilter.not_set or
                                    self.connecting_sessions.yfilter != YFilter.not_set or
                                    self.disconnecting_sessions.yfilter != YFilter.not_set or
                                    self.end_sessions.yfilter != YFilter.not_set or
                                    self.idle_sessions.yfilter != YFilter.not_set or
                                    self.initialized_sessions.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "pppoe" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "activated-sessions"):
                                    self.activated_sessions = value
                                    self.activated_sessions.value_namespace = name_space
                                    self.activated_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "connected-sessions"):
                                    self.connected_sessions = value
                                    self.connected_sessions.value_namespace = name_space
                                    self.connected_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "connecting-sessions"):
                                    self.connecting_sessions = value
                                    self.connecting_sessions.value_namespace = name_space
                                    self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "disconnecting-sessions"):
                                    self.disconnecting_sessions = value
                                    self.disconnecting_sessions.value_namespace = name_space
                                    self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "end-sessions"):
                                    self.end_sessions = value
                                    self.end_sessions.value_namespace = name_space
                                    self.end_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "idle-sessions"):
                                    self.idle_sessions = value
                                    self.idle_sessions.value_namespace = name_space
                                    self.idle_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "initialized-sessions"):
                                    self.initialized_sessions = value
                                    self.initialized_sessions.value_namespace = name_space
                                    self.initialized_sessions.value_namespace_prefix = name_space_prefix


                        class IpSubscriberDhcp(Entity):
                            """
                            IP subscriber DHCP summary
                            
                            .. attribute:: activated_sessions
                            
                            	Sessions in activated state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: connected_sessions
                            
                            	Sessions in connected state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: connecting_sessions
                            
                            	Sessions in connecting state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: disconnecting_sessions
                            
                            	Sessions in disconnecting state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: end_sessions
                            
                            	Sessions in end state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: idle_sessions
                            
                            	Sessions in idle state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: initialized_sessions
                            
                            	Sessions in initialized state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberDhcp, self).__init__()

                                self.yang_name = "ip-subscriber-dhcp"
                                self.yang_parent_name = "state-xr"

                                self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("activated_sessions",
                                                "connected_sessions",
                                                "connecting_sessions",
                                                "disconnecting_sessions",
                                                "end_sessions",
                                                "idle_sessions",
                                                "initialized_sessions") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.activated_sessions.is_set or
                                    self.connected_sessions.is_set or
                                    self.connecting_sessions.is_set or
                                    self.disconnecting_sessions.is_set or
                                    self.end_sessions.is_set or
                                    self.idle_sessions.is_set or
                                    self.initialized_sessions.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.activated_sessions.yfilter != YFilter.not_set or
                                    self.connected_sessions.yfilter != YFilter.not_set or
                                    self.connecting_sessions.yfilter != YFilter.not_set or
                                    self.disconnecting_sessions.yfilter != YFilter.not_set or
                                    self.end_sessions.yfilter != YFilter.not_set or
                                    self.idle_sessions.yfilter != YFilter.not_set or
                                    self.initialized_sessions.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "ip-subscriber-dhcp" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "activated-sessions"):
                                    self.activated_sessions = value
                                    self.activated_sessions.value_namespace = name_space
                                    self.activated_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "connected-sessions"):
                                    self.connected_sessions = value
                                    self.connected_sessions.value_namespace = name_space
                                    self.connected_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "connecting-sessions"):
                                    self.connecting_sessions = value
                                    self.connecting_sessions.value_namespace = name_space
                                    self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "disconnecting-sessions"):
                                    self.disconnecting_sessions = value
                                    self.disconnecting_sessions.value_namespace = name_space
                                    self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "end-sessions"):
                                    self.end_sessions = value
                                    self.end_sessions.value_namespace = name_space
                                    self.end_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "idle-sessions"):
                                    self.idle_sessions = value
                                    self.idle_sessions.value_namespace = name_space
                                    self.idle_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "initialized-sessions"):
                                    self.initialized_sessions = value
                                    self.initialized_sessions.value_namespace = name_space
                                    self.initialized_sessions.value_namespace_prefix = name_space_prefix


                        class IpSubscriberPacket(Entity):
                            """
                            IP subscriber packet summary
                            
                            .. attribute:: activated_sessions
                            
                            	Sessions in activated state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: connected_sessions
                            
                            	Sessions in connected state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: connecting_sessions
                            
                            	Sessions in connecting state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: disconnecting_sessions
                            
                            	Sessions in disconnecting state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: end_sessions
                            
                            	Sessions in end state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: idle_sessions
                            
                            	Sessions in idle state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: initialized_sessions
                            
                            	Sessions in initialized state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberPacket, self).__init__()

                                self.yang_name = "ip-subscriber-packet"
                                self.yang_parent_name = "state-xr"

                                self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("activated_sessions",
                                                "connected_sessions",
                                                "connecting_sessions",
                                                "disconnecting_sessions",
                                                "end_sessions",
                                                "idle_sessions",
                                                "initialized_sessions") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.activated_sessions.is_set or
                                    self.connected_sessions.is_set or
                                    self.connecting_sessions.is_set or
                                    self.disconnecting_sessions.is_set or
                                    self.end_sessions.is_set or
                                    self.idle_sessions.is_set or
                                    self.initialized_sessions.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.activated_sessions.yfilter != YFilter.not_set or
                                    self.connected_sessions.yfilter != YFilter.not_set or
                                    self.connecting_sessions.yfilter != YFilter.not_set or
                                    self.disconnecting_sessions.yfilter != YFilter.not_set or
                                    self.end_sessions.yfilter != YFilter.not_set or
                                    self.idle_sessions.yfilter != YFilter.not_set or
                                    self.initialized_sessions.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "ip-subscriber-packet" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "activated-sessions"):
                                    self.activated_sessions = value
                                    self.activated_sessions.value_namespace = name_space
                                    self.activated_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "connected-sessions"):
                                    self.connected_sessions = value
                                    self.connected_sessions.value_namespace = name_space
                                    self.connected_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "connecting-sessions"):
                                    self.connecting_sessions = value
                                    self.connecting_sessions.value_namespace = name_space
                                    self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "disconnecting-sessions"):
                                    self.disconnecting_sessions = value
                                    self.disconnecting_sessions.value_namespace = name_space
                                    self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "end-sessions"):
                                    self.end_sessions = value
                                    self.end_sessions.value_namespace = name_space
                                    self.end_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "idle-sessions"):
                                    self.idle_sessions = value
                                    self.idle_sessions.value_namespace = name_space
                                    self.idle_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "initialized-sessions"):
                                    self.initialized_sessions = value
                                    self.initialized_sessions.value_namespace = name_space
                                    self.initialized_sessions.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                (self.pppoe is not None and self.pppoe.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                (self.pppoe is not None and self.pppoe.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "state-xr" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "ip-subscriber-dhcp"):
                                if (self.ip_subscriber_dhcp is None):
                                    self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberDhcp()
                                    self.ip_subscriber_dhcp.parent = self
                                    self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                return self.ip_subscriber_dhcp

                            if (child_yang_name == "ip-subscriber-packet"):
                                if (self.ip_subscriber_packet is None):
                                    self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Summary.StateXr.IpSubscriberPacket()
                                    self.ip_subscriber_packet.parent = self
                                    self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                return self.ip_subscriber_packet

                            if (child_yang_name == "pppoe"):
                                if (self.pppoe is None):
                                    self.pppoe = Subscriber.Session.Nodes.Node.Summary.StateXr.Pppoe()
                                    self.pppoe.parent = self
                                    self._children_name_map["pppoe"] = "pppoe"
                                return self.pppoe

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class AddressFamilyXr(Entity):
                        """
                        Address family summary
                        
                        .. attribute:: ip_subscriber_dhcp
                        
                        	IP subscriber DHCP summary
                        	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberDhcp>`
                        
                        .. attribute:: ip_subscriber_packet
                        
                        	IP subscriber packet summary
                        	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberPacket>`
                        
                        .. attribute:: pppoe
                        
                        	PPPoE summary
                        	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.Pppoe>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr, self).__init__()

                            self.yang_name = "address-family-xr"
                            self.yang_parent_name = "summary"

                            self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberDhcp()
                            self.ip_subscriber_dhcp.parent = self
                            self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                            self._children_yang_names.add("ip-subscriber-dhcp")

                            self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberPacket()
                            self.ip_subscriber_packet.parent = self
                            self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                            self._children_yang_names.add("ip-subscriber-packet")

                            self.pppoe = Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.Pppoe()
                            self.pppoe.parent = self
                            self._children_name_map["pppoe"] = "pppoe"
                            self._children_yang_names.add("pppoe")


                        class Pppoe(Entity):
                            """
                            PPPoE summary
                            
                            .. attribute:: dual_part_up_sessions
                            
                            	Dual stack partially up sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: dual_up_sessions
                            
                            	Dual stack up sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: in_progress_sessions
                            
                            	Sessions with undecided address family
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv4_only_sessions
                            
                            	IPv4 only sessions 
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv6_only_sessions
                            
                            	IPv6 only sessions 
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: lac_sessions
                            
                            	LAC sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.Pppoe, self).__init__()

                                self.yang_name = "pppoe"
                                self.yang_parent_name = "address-family-xr"

                                self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("dual_part_up_sessions",
                                                "dual_up_sessions",
                                                "in_progress_sessions",
                                                "ipv4_only_sessions",
                                                "ipv6_only_sessions",
                                                "lac_sessions") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.dual_part_up_sessions.is_set or
                                    self.dual_up_sessions.is_set or
                                    self.in_progress_sessions.is_set or
                                    self.ipv4_only_sessions.is_set or
                                    self.ipv6_only_sessions.is_set or
                                    self.lac_sessions.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                    self.dual_up_sessions.yfilter != YFilter.not_set or
                                    self.in_progress_sessions.yfilter != YFilter.not_set or
                                    self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                    self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                    self.lac_sessions.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "pppoe" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "dual-part-up-sessions"):
                                    self.dual_part_up_sessions = value
                                    self.dual_part_up_sessions.value_namespace = name_space
                                    self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "dual-up-sessions"):
                                    self.dual_up_sessions = value
                                    self.dual_up_sessions.value_namespace = name_space
                                    self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "in-progress-sessions"):
                                    self.in_progress_sessions = value
                                    self.in_progress_sessions.value_namespace = name_space
                                    self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "ipv4-only-sessions"):
                                    self.ipv4_only_sessions = value
                                    self.ipv4_only_sessions.value_namespace = name_space
                                    self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "ipv6-only-sessions"):
                                    self.ipv6_only_sessions = value
                                    self.ipv6_only_sessions.value_namespace = name_space
                                    self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "lac-sessions"):
                                    self.lac_sessions = value
                                    self.lac_sessions.value_namespace = name_space
                                    self.lac_sessions.value_namespace_prefix = name_space_prefix


                        class IpSubscriberDhcp(Entity):
                            """
                            IP subscriber DHCP summary
                            
                            .. attribute:: dual_part_up_sessions
                            
                            	Dual stack partially up sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: dual_up_sessions
                            
                            	Dual stack up sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: in_progress_sessions
                            
                            	Sessions with undecided address family
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv4_only_sessions
                            
                            	IPv4 only sessions 
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv6_only_sessions
                            
                            	IPv6 only sessions 
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: lac_sessions
                            
                            	LAC sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                self.yang_name = "ip-subscriber-dhcp"
                                self.yang_parent_name = "address-family-xr"

                                self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("dual_part_up_sessions",
                                                "dual_up_sessions",
                                                "in_progress_sessions",
                                                "ipv4_only_sessions",
                                                "ipv6_only_sessions",
                                                "lac_sessions") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.dual_part_up_sessions.is_set or
                                    self.dual_up_sessions.is_set or
                                    self.in_progress_sessions.is_set or
                                    self.ipv4_only_sessions.is_set or
                                    self.ipv6_only_sessions.is_set or
                                    self.lac_sessions.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                    self.dual_up_sessions.yfilter != YFilter.not_set or
                                    self.in_progress_sessions.yfilter != YFilter.not_set or
                                    self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                    self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                    self.lac_sessions.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "ip-subscriber-dhcp" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "dual-part-up-sessions"):
                                    self.dual_part_up_sessions = value
                                    self.dual_part_up_sessions.value_namespace = name_space
                                    self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "dual-up-sessions"):
                                    self.dual_up_sessions = value
                                    self.dual_up_sessions.value_namespace = name_space
                                    self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "in-progress-sessions"):
                                    self.in_progress_sessions = value
                                    self.in_progress_sessions.value_namespace = name_space
                                    self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "ipv4-only-sessions"):
                                    self.ipv4_only_sessions = value
                                    self.ipv4_only_sessions.value_namespace = name_space
                                    self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "ipv6-only-sessions"):
                                    self.ipv6_only_sessions = value
                                    self.ipv6_only_sessions.value_namespace = name_space
                                    self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "lac-sessions"):
                                    self.lac_sessions = value
                                    self.lac_sessions.value_namespace = name_space
                                    self.lac_sessions.value_namespace_prefix = name_space_prefix


                        class IpSubscriberPacket(Entity):
                            """
                            IP subscriber packet summary
                            
                            .. attribute:: dual_part_up_sessions
                            
                            	Dual stack partially up sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: dual_up_sessions
                            
                            	Dual stack up sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: in_progress_sessions
                            
                            	Sessions with undecided address family
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv4_only_sessions
                            
                            	IPv4 only sessions 
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv6_only_sessions
                            
                            	IPv6 only sessions 
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: lac_sessions
                            
                            	LAC sessions
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                self.yang_name = "ip-subscriber-packet"
                                self.yang_parent_name = "address-family-xr"

                                self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("dual_part_up_sessions",
                                                "dual_up_sessions",
                                                "in_progress_sessions",
                                                "ipv4_only_sessions",
                                                "ipv6_only_sessions",
                                                "lac_sessions") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.dual_part_up_sessions.is_set or
                                    self.dual_up_sessions.is_set or
                                    self.in_progress_sessions.is_set or
                                    self.ipv4_only_sessions.is_set or
                                    self.ipv6_only_sessions.is_set or
                                    self.lac_sessions.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                    self.dual_up_sessions.yfilter != YFilter.not_set or
                                    self.in_progress_sessions.yfilter != YFilter.not_set or
                                    self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                    self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                    self.lac_sessions.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "ip-subscriber-packet" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "dual-part-up-sessions"):
                                    self.dual_part_up_sessions = value
                                    self.dual_part_up_sessions.value_namespace = name_space
                                    self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "dual-up-sessions"):
                                    self.dual_up_sessions = value
                                    self.dual_up_sessions.value_namespace = name_space
                                    self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "in-progress-sessions"):
                                    self.in_progress_sessions = value
                                    self.in_progress_sessions.value_namespace = name_space
                                    self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "ipv4-only-sessions"):
                                    self.ipv4_only_sessions = value
                                    self.ipv4_only_sessions.value_namespace = name_space
                                    self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "ipv6-only-sessions"):
                                    self.ipv6_only_sessions = value
                                    self.ipv6_only_sessions.value_namespace = name_space
                                    self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                if(value_path == "lac-sessions"):
                                    self.lac_sessions = value
                                    self.lac_sessions.value_namespace = name_space
                                    self.lac_sessions.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                (self.pppoe is not None and self.pppoe.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                (self.pppoe is not None and self.pppoe.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "address-family-xr" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "ip-subscriber-dhcp"):
                                if (self.ip_subscriber_dhcp is None):
                                    self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberDhcp()
                                    self.ip_subscriber_dhcp.parent = self
                                    self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                return self.ip_subscriber_dhcp

                            if (child_yang_name == "ip-subscriber-packet"):
                                if (self.ip_subscriber_packet is None):
                                    self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.IpSubscriberPacket()
                                    self.ip_subscriber_packet.parent = self
                                    self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                return self.ip_subscriber_packet

                            if (child_yang_name == "pppoe"):
                                if (self.pppoe is None):
                                    self.pppoe = Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr.Pppoe()
                                    self.pppoe.parent = self
                                    self._children_name_map["pppoe"] = "pppoe"
                                return self.pppoe

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                            (self.state_xr is not None and self.state_xr.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                            (self.state_xr is not None and self.state_xr.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "summary" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "address-family-xr"):
                            if (self.address_family_xr is None):
                                self.address_family_xr = Subscriber.Session.Nodes.Node.Summary.AddressFamilyXr()
                                self.address_family_xr.parent = self
                                self._children_name_map["address_family_xr"] = "address-family-xr"
                            return self.address_family_xr

                        if (child_yang_name == "state-xr"):
                            if (self.state_xr is None):
                                self.state_xr = Subscriber.Session.Nodes.Node.Summary.StateXr()
                                self.state_xr.parent = self
                                self._children_name_map["state_xr"] = "state-xr"
                            return self.state_xr

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "address-family-xr" or name == "state-xr"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class MacSummaries(Entity):
                    """
                    Summary information filtered by MAC address
                    
                    .. attribute:: mac_summary
                    
                    	MAC address summary
                    	**type**\: list of    :py:class:`MacSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.MacSummaries.MacSummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.MacSummaries, self).__init__()

                        self.yang_name = "mac-summaries"
                        self.yang_parent_name = "node"

                        self.mac_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.MacSummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.MacSummaries, self).__setattr__(name, value)


                    class MacSummary(Entity):
                        """
                        MAC address summary
                        
                        .. attribute:: mac_address  <key>
                        
                        	Subscriber MAC address
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary, self).__init__()

                            self.yang_name = "mac-summary"
                            self.yang_parent_name = "mac-summaries"

                            self.mac_address = YLeaf(YType.str, "mac-address")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("mac_address") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "mac-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "mac-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.mac_address.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.mac_address.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "mac-summary" + "[mac-address='" + self.mac_address.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.mac_address.is_set or self.mac_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.mac_address.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "mac-address"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "mac-address"):
                                self.mac_address = value
                                self.mac_address.value_namespace = name_space
                                self.mac_address.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.mac_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.mac_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "mac-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "mac-summary"):
                            for c in self.mac_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.MacSummaries.MacSummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.mac_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "mac-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class InterfaceSummaries(Entity):
                    """
                    Summary information filtered by interface
                    
                    .. attribute:: interface_summary
                    
                    	Interface summary
                    	**type**\: list of    :py:class:`InterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.InterfaceSummaries, self).__init__()

                        self.yang_name = "interface-summaries"
                        self.yang_parent_name = "node"

                        self.interface_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.InterfaceSummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.InterfaceSummaries, self).__setattr__(name, value)


                    class InterfaceSummary(Entity):
                        """
                        Interface summary
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface name
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary, self).__init__()

                            self.yang_name = "interface-summary"
                            self.yang_parent_name = "interface-summaries"

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("interface_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "interface-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "interface-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.interface_name.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.interface_name.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "interface-summary" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.interface_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "interface-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "interface-name"):
                                self.interface_name = value
                                self.interface_name.value_namespace = name_space
                                self.interface_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.interface_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.interface_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "interface-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "interface-summary"):
                            for c in self.interface_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.InterfaceSummaries.InterfaceSummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.interface_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "interface-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class AuthenticationSummaries(Entity):
                    """
                    Summary information filtered by
                    authentication state
                    
                    .. attribute:: authentication_summary
                    
                    	authentication summary
                    	**type**\: list of    :py:class:`AuthenticationSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.AuthenticationSummaries, self).__init__()

                        self.yang_name = "authentication-summaries"
                        self.yang_parent_name = "node"

                        self.authentication_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.AuthenticationSummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.AuthenticationSummaries, self).__setattr__(name, value)


                    class AuthenticationSummary(Entity):
                        """
                        authentication summary
                        
                        .. attribute:: authentication_state  <key>
                        
                        	Authentication state
                        	**type**\:   :py:class:`SubscriberAuthenStateFilterFlag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.SubscriberAuthenStateFilterFlag>`
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary, self).__init__()

                            self.yang_name = "authentication-summary"
                            self.yang_parent_name = "authentication-summaries"

                            self.authentication_state = YLeaf(YType.enumeration, "authentication-state")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("authentication_state") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "authentication-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "authentication-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.authentication_state.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.authentication_state.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "authentication-summary" + "[authentication-state='" + self.authentication_state.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.authentication_state.is_set or self.authentication_state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.authentication_state.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "authentication-state"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "authentication-state"):
                                self.authentication_state = value
                                self.authentication_state.value_namespace = name_space
                                self.authentication_state.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.authentication_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.authentication_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "authentication-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "authentication-summary"):
                            for c in self.authentication_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.AuthenticationSummaries.AuthenticationSummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.authentication_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "authentication-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class StateSummaries(Entity):
                    """
                    Summary information filtered by session state
                    
                    .. attribute:: state_summary
                    
                    	State summary
                    	**type**\: list of    :py:class:`StateSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.StateSummaries.StateSummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.StateSummaries, self).__init__()

                        self.yang_name = "state-summaries"
                        self.yang_parent_name = "node"

                        self.state_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.StateSummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.StateSummaries, self).__setattr__(name, value)


                    class StateSummary(Entity):
                        """
                        State summary
                        
                        .. attribute:: state  <key>
                        
                        	Subscriber state
                        	**type**\:   :py:class:`SubscriberStateFilterFlag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.SubscriberStateFilterFlag>`
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary, self).__init__()

                            self.yang_name = "state-summary"
                            self.yang_parent_name = "state-summaries"

                            self.state = YLeaf(YType.enumeration, "state")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("state") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "state-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "state-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.state.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.state.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "state-summary" + "[state='" + self.state.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.state.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "state"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "state"):
                                self.state = value
                                self.state.value_namespace = name_space
                                self.state.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.state_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.state_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "state-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "state-summary"):
                            for c in self.state_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.StateSummaries.StateSummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.state_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "state-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Ipv4AddressVrfSummaries(Entity):
                    """
                    Summary information filtered by IPv4 address
                    and VRF
                    
                    .. attribute:: ipv4_address_vrf_summary
                    
                    	IPv4 address and VRF summary
                    	**type**\: list of    :py:class:`Ipv4AddressVrfSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries, self).__init__()

                        self.yang_name = "ipv4-address-vrf-summaries"
                        self.yang_parent_name = "node"

                        self.ipv4_address_vrf_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries, self).__setattr__(name, value)


                    class Ipv4AddressVrfSummary(Entity):
                        """
                        IPv4 address and VRF summary
                        
                        .. attribute:: address
                        
                        	Subscriber IPv4 address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr>`
                        
                        .. attribute:: vrf_name
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary, self).__init__()

                            self.yang_name = "ipv4-address-vrf-summary"
                            self.yang_parent_name = "ipv4-address-vrf-summaries"

                            self.address = YLeaf(YType.str, "address")

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("address",
                                            "vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "ipv4-address-vrf-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "ipv4-address-vrf-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.address.is_set or
                                self.vrf_name.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.address.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ipv4-address-vrf-summary" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.address.get_name_leafdata())
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "address" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "address"):
                                self.address = value
                                self.address.value_namespace = name_space
                                self.address.value_namespace_prefix = name_space_prefix
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ipv4_address_vrf_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ipv4_address_vrf_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "ipv4-address-vrf-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ipv4-address-vrf-summary"):
                            for c in self.ipv4_address_vrf_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries.Ipv4AddressVrfSummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ipv4_address_vrf_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ipv4-address-vrf-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class AddressFamilySummaries(Entity):
                    """
                    Summary information filtered by address
                    family
                    
                    .. attribute:: address_family_summary
                    
                    	Address family summary
                    	**type**\: list of    :py:class:`AddressFamilySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.AddressFamilySummaries, self).__init__()

                        self.yang_name = "address-family-summaries"
                        self.yang_parent_name = "node"

                        self.address_family_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.AddressFamilySummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.AddressFamilySummaries, self).__setattr__(name, value)


                    class AddressFamilySummary(Entity):
                        """
                        Address family summary
                        
                        .. attribute:: address_family  <key>
                        
                        	Address family
                        	**type**\:   :py:class:`SubscriberAddressFamilyFilterFlag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.SubscriberAddressFamilyFilterFlag>`
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary, self).__init__()

                            self.yang_name = "address-family-summary"
                            self.yang_parent_name = "address-family-summaries"

                            self.address_family = YLeaf(YType.enumeration, "address-family")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("address_family") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "address-family-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "address-family-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.address_family.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.address_family.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "address-family-summary" + "[address-family='" + self.address_family.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.address_family.is_set or self.address_family.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.address_family.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "address-family"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "address-family"):
                                self.address_family = value
                                self.address_family.value_namespace = name_space
                                self.address_family.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.address_family_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.address_family_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "address-family-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "address-family-summary"):
                            for c in self.address_family_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.AddressFamilySummaries.AddressFamilySummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.address_family_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "address-family-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class UsernameSummaries(Entity):
                    """
                    Summary information filtered by username
                    
                    .. attribute:: username_summary
                    
                    	Username summary
                    	**type**\: list of    :py:class:`UsernameSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.UsernameSummaries, self).__init__()

                        self.yang_name = "username-summaries"
                        self.yang_parent_name = "node"

                        self.username_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.UsernameSummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.UsernameSummaries, self).__setattr__(name, value)


                    class UsernameSummary(Entity):
                        """
                        Username summary
                        
                        .. attribute:: username  <key>
                        
                        	Subscriber username
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary, self).__init__()

                            self.yang_name = "username-summary"
                            self.yang_parent_name = "username-summaries"

                            self.username = YLeaf(YType.str, "username")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("username") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "username-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "username-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.username.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.username.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "username-summary" + "[username='" + self.username.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.username.is_set or self.username.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.username.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "username"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "username"):
                                self.username = value
                                self.username.value_namespace = name_space
                                self.username.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.username_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.username_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "username-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "username-summary"):
                            for c in self.username_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.UsernameSummaries.UsernameSummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.username_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "username-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class AccessInterfaceSummaries(Entity):
                    """
                    Summary information filtered by access
                    interface
                    
                    .. attribute:: access_interface_summary
                    
                    	Access interface summary
                    	**type**\: list of    :py:class:`AccessInterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries, self).__init__()

                        self.yang_name = "access-interface-summaries"
                        self.yang_parent_name = "node"

                        self.access_interface_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries, self).__setattr__(name, value)


                    class AccessInterfaceSummary(Entity):
                        """
                        Access interface summary
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface name
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary, self).__init__()

                            self.yang_name = "access-interface-summary"
                            self.yang_parent_name = "access-interface-summaries"

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("interface_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "access-interface-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "access-interface-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.interface_name.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.interface_name.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "access-interface-summary" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.interface_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "interface-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "interface-name"):
                                self.interface_name = value
                                self.interface_name.value_namespace = name_space
                                self.interface_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.access_interface_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.access_interface_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "access-interface-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "access-interface-summary"):
                            for c in self.access_interface_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries.AccessInterfaceSummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.access_interface_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "access-interface-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Ipv4AddressSummaries(Entity):
                    """
                    Summary information filtered by subscriber
                    IPv4 address
                    
                    .. attribute:: ipv4_address_summary
                    
                    	IPv4 address summary
                    	**type**\: list of    :py:class:`Ipv4AddressSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries, self).__init__()

                        self.yang_name = "ipv4-address-summaries"
                        self.yang_parent_name = "node"

                        self.ipv4_address_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries, self).__setattr__(name, value)


                    class Ipv4AddressSummary(Entity):
                        """
                        IPv4 address summary
                        
                        .. attribute:: address  <key>
                        
                        	Subscriber IPv4 address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary, self).__init__()

                            self.yang_name = "ipv4-address-summary"
                            self.yang_parent_name = "ipv4-address-summaries"

                            self.address = YLeaf(YType.str, "address")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("address") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "ipv4-address-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "ipv4-address-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.address.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.address.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ipv4-address-summary" + "[address='" + self.address.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.address.is_set or self.address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.address.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "address"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "address"):
                                self.address = value
                                self.address.value_namespace = name_space
                                self.address.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ipv4_address_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ipv4_address_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "ipv4-address-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ipv4-address-summary"):
                            for c in self.ipv4_address_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries.Ipv4AddressSummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ipv4_address_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ipv4-address-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class VrfSummaries(Entity):
                    """
                    Summary information filtered by VRF
                    
                    .. attribute:: vrf_summary
                    
                    	VRF summary
                    	**type**\: list of    :py:class:`VrfSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.VrfSummaries, self).__init__()

                        self.yang_name = "vrf-summaries"
                        self.yang_parent_name = "node"

                        self.vrf_summary = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.VrfSummaries, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.VrfSummaries, self).__setattr__(name, value)


                    class VrfSummary(Entity):
                        """
                        VRF summary
                        
                        .. attribute:: vrf_name  <key>
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: address_family_xr
                        
                        	Address family summary
                        	**type**\:   :py:class:`AddressFamilyXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr>`
                        
                        .. attribute:: state_xr
                        
                        	State summary
                        	**type**\:   :py:class:`StateXr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr>`
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary, self).__init__()

                            self.yang_name = "vrf-summary"
                            self.yang_parent_name = "vrf-summaries"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.address_family_xr = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr()
                            self.address_family_xr.parent = self
                            self._children_name_map["address_family_xr"] = "address-family-xr"
                            self._children_yang_names.add("address-family-xr")

                            self.state_xr = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr()
                            self.state_xr.parent = self
                            self._children_name_map["state_xr"] = "state-xr"
                            self._children_yang_names.add("state-xr")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary, self).__setattr__(name, value)


                        class StateXr(Entity):
                            """
                            State summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr, self).__init__()

                                self.yang_name = "state-xr"
                                self.yang_parent_name = "vrf-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: activated_sessions
                                
                                	Sessions in activated state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connected_sessions
                                
                                	Sessions in connected state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: connecting_sessions
                                
                                	Sessions in connecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: disconnecting_sessions
                                
                                	Sessions in disconnecting state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: end_sessions
                                
                                	Sessions in end state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: idle_sessions
                                
                                	Sessions in idle state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: initialized_sessions
                                
                                	Sessions in initialized state
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "state-xr"

                                    self.activated_sessions = YLeaf(YType.uint32, "activated-sessions")

                                    self.connected_sessions = YLeaf(YType.uint32, "connected-sessions")

                                    self.connecting_sessions = YLeaf(YType.uint32, "connecting-sessions")

                                    self.disconnecting_sessions = YLeaf(YType.uint32, "disconnecting-sessions")

                                    self.end_sessions = YLeaf(YType.uint32, "end-sessions")

                                    self.idle_sessions = YLeaf(YType.uint32, "idle-sessions")

                                    self.initialized_sessions = YLeaf(YType.uint32, "initialized-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("activated_sessions",
                                                    "connected_sessions",
                                                    "connecting_sessions",
                                                    "disconnecting_sessions",
                                                    "end_sessions",
                                                    "idle_sessions",
                                                    "initialized_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.activated_sessions.is_set or
                                        self.connected_sessions.is_set or
                                        self.connecting_sessions.is_set or
                                        self.disconnecting_sessions.is_set or
                                        self.end_sessions.is_set or
                                        self.idle_sessions.is_set or
                                        self.initialized_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.activated_sessions.yfilter != YFilter.not_set or
                                        self.connected_sessions.yfilter != YFilter.not_set or
                                        self.connecting_sessions.yfilter != YFilter.not_set or
                                        self.disconnecting_sessions.yfilter != YFilter.not_set or
                                        self.end_sessions.yfilter != YFilter.not_set or
                                        self.idle_sessions.yfilter != YFilter.not_set or
                                        self.initialized_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.activated_sessions.is_set or self.activated_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.activated_sessions.get_name_leafdata())
                                    if (self.connected_sessions.is_set or self.connected_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connected_sessions.get_name_leafdata())
                                    if (self.connecting_sessions.is_set or self.connecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.connecting_sessions.get_name_leafdata())
                                    if (self.disconnecting_sessions.is_set or self.disconnecting_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.disconnecting_sessions.get_name_leafdata())
                                    if (self.end_sessions.is_set or self.end_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.end_sessions.get_name_leafdata())
                                    if (self.idle_sessions.is_set or self.idle_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.idle_sessions.get_name_leafdata())
                                    if (self.initialized_sessions.is_set or self.initialized_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.initialized_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "activated-sessions" or name == "connected-sessions" or name == "connecting-sessions" or name == "disconnecting-sessions" or name == "end-sessions" or name == "idle-sessions" or name == "initialized-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "activated-sessions"):
                                        self.activated_sessions = value
                                        self.activated_sessions.value_namespace = name_space
                                        self.activated_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connected-sessions"):
                                        self.connected_sessions = value
                                        self.connected_sessions.value_namespace = name_space
                                        self.connected_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "connecting-sessions"):
                                        self.connecting_sessions = value
                                        self.connecting_sessions.value_namespace = name_space
                                        self.connecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "disconnecting-sessions"):
                                        self.disconnecting_sessions = value
                                        self.disconnecting_sessions.value_namespace = name_space
                                        self.disconnecting_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "end-sessions"):
                                        self.end_sessions = value
                                        self.end_sessions.value_namespace = name_space
                                        self.end_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "idle-sessions"):
                                        self.idle_sessions = value
                                        self.idle_sessions.value_namespace = name_space
                                        self.idle_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "initialized-sessions"):
                                        self.initialized_sessions = value
                                        self.initialized_sessions.value_namespace = name_space
                                        self.initialized_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "state-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class AddressFamilyXr(Entity):
                            """
                            Address family summary
                            
                            .. attribute:: ip_subscriber_dhcp
                            
                            	IP subscriber DHCP summary
                            	**type**\:   :py:class:`IpSubscriberDhcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberDhcp>`
                            
                            .. attribute:: ip_subscriber_packet
                            
                            	IP subscriber packet summary
                            	**type**\:   :py:class:`IpSubscriberPacket <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberPacket>`
                            
                            .. attribute:: pppoe
                            
                            	PPPoE summary
                            	**type**\:   :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.Pppoe>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr, self).__init__()

                                self.yang_name = "address-family-xr"
                                self.yang_parent_name = "vrf-summary"

                                self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberDhcp()
                                self.ip_subscriber_dhcp.parent = self
                                self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                self._children_yang_names.add("ip-subscriber-dhcp")

                                self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberPacket()
                                self.ip_subscriber_packet.parent = self
                                self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                self._children_yang_names.add("ip-subscriber-packet")

                                self.pppoe = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.Pppoe()
                                self.pppoe.parent = self
                                self._children_name_map["pppoe"] = "pppoe"
                                self._children_yang_names.add("pppoe")


                            class Pppoe(Entity):
                                """
                                PPPoE summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.Pppoe, self).__init__()

                                    self.yang_name = "pppoe"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.Pppoe, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "pppoe" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberDhcp(Entity):
                                """
                                IP subscriber DHCP summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberDhcp, self).__init__()

                                    self.yang_name = "ip-subscriber-dhcp"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberDhcp, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-dhcp" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix


                            class IpSubscriberPacket(Entity):
                                """
                                IP subscriber packet summary
                                
                                .. attribute:: dual_part_up_sessions
                                
                                	Dual stack partially up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dual_up_sessions
                                
                                	Dual stack up sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: in_progress_sessions
                                
                                	Sessions with undecided address family
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_only_sessions
                                
                                	IPv4 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_only_sessions
                                
                                	IPv6 only sessions 
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lac_sessions
                                
                                	LAC sessions
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberPacket, self).__init__()

                                    self.yang_name = "ip-subscriber-packet"
                                    self.yang_parent_name = "address-family-xr"

                                    self.dual_part_up_sessions = YLeaf(YType.uint32, "dual-part-up-sessions")

                                    self.dual_up_sessions = YLeaf(YType.uint32, "dual-up-sessions")

                                    self.in_progress_sessions = YLeaf(YType.uint32, "in-progress-sessions")

                                    self.ipv4_only_sessions = YLeaf(YType.uint32, "ipv4-only-sessions")

                                    self.ipv6_only_sessions = YLeaf(YType.uint32, "ipv6-only-sessions")

                                    self.lac_sessions = YLeaf(YType.uint32, "lac-sessions")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dual_part_up_sessions",
                                                    "dual_up_sessions",
                                                    "in_progress_sessions",
                                                    "ipv4_only_sessions",
                                                    "ipv6_only_sessions",
                                                    "lac_sessions") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberPacket, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dual_part_up_sessions.is_set or
                                        self.dual_up_sessions.is_set or
                                        self.in_progress_sessions.is_set or
                                        self.ipv4_only_sessions.is_set or
                                        self.ipv6_only_sessions.is_set or
                                        self.lac_sessions.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dual_part_up_sessions.yfilter != YFilter.not_set or
                                        self.dual_up_sessions.yfilter != YFilter.not_set or
                                        self.in_progress_sessions.yfilter != YFilter.not_set or
                                        self.ipv4_only_sessions.yfilter != YFilter.not_set or
                                        self.ipv6_only_sessions.yfilter != YFilter.not_set or
                                        self.lac_sessions.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ip-subscriber-packet" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dual_part_up_sessions.is_set or self.dual_part_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_part_up_sessions.get_name_leafdata())
                                    if (self.dual_up_sessions.is_set or self.dual_up_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dual_up_sessions.get_name_leafdata())
                                    if (self.in_progress_sessions.is_set or self.in_progress_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.in_progress_sessions.get_name_leafdata())
                                    if (self.ipv4_only_sessions.is_set or self.ipv4_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv4_only_sessions.get_name_leafdata())
                                    if (self.ipv6_only_sessions.is_set or self.ipv6_only_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ipv6_only_sessions.get_name_leafdata())
                                    if (self.lac_sessions.is_set or self.lac_sessions.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.lac_sessions.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dual-part-up-sessions" or name == "dual-up-sessions" or name == "in-progress-sessions" or name == "ipv4-only-sessions" or name == "ipv6-only-sessions" or name == "lac-sessions"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dual-part-up-sessions"):
                                        self.dual_part_up_sessions = value
                                        self.dual_part_up_sessions.value_namespace = name_space
                                        self.dual_part_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "dual-up-sessions"):
                                        self.dual_up_sessions = value
                                        self.dual_up_sessions.value_namespace = name_space
                                        self.dual_up_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "in-progress-sessions"):
                                        self.in_progress_sessions = value
                                        self.in_progress_sessions.value_namespace = name_space
                                        self.in_progress_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv4-only-sessions"):
                                        self.ipv4_only_sessions = value
                                        self.ipv4_only_sessions.value_namespace = name_space
                                        self.ipv4_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ipv6-only-sessions"):
                                        self.ipv6_only_sessions = value
                                        self.ipv6_only_sessions.value_namespace = name_space
                                        self.ipv6_only_sessions.value_namespace_prefix = name_space_prefix
                                    if(value_path == "lac-sessions"):
                                        self.lac_sessions = value
                                        self.lac_sessions.value_namespace = name_space
                                        self.lac_sessions.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_data()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_data()) or
                                    (self.pppoe is not None and self.pppoe.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ip_subscriber_dhcp is not None and self.ip_subscriber_dhcp.has_operation()) or
                                    (self.ip_subscriber_packet is not None and self.ip_subscriber_packet.has_operation()) or
                                    (self.pppoe is not None and self.pppoe.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "address-family-xr" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ip-subscriber-dhcp"):
                                    if (self.ip_subscriber_dhcp is None):
                                        self.ip_subscriber_dhcp = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberDhcp()
                                        self.ip_subscriber_dhcp.parent = self
                                        self._children_name_map["ip_subscriber_dhcp"] = "ip-subscriber-dhcp"
                                    return self.ip_subscriber_dhcp

                                if (child_yang_name == "ip-subscriber-packet"):
                                    if (self.ip_subscriber_packet is None):
                                        self.ip_subscriber_packet = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.IpSubscriberPacket()
                                        self.ip_subscriber_packet.parent = self
                                        self._children_name_map["ip_subscriber_packet"] = "ip-subscriber-packet"
                                    return self.ip_subscriber_packet

                                if (child_yang_name == "pppoe"):
                                    if (self.pppoe is None):
                                        self.pppoe = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr.Pppoe()
                                        self.pppoe.parent = self
                                        self._children_name_map["pppoe"] = "pppoe"
                                    return self.pppoe

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ip-subscriber-dhcp" or name == "ip-subscriber-packet" or name == "pppoe"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_data()) or
                                (self.state_xr is not None and self.state_xr.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.address_family_xr is not None and self.address_family_xr.has_operation()) or
                                (self.state_xr is not None and self.state_xr.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "vrf-summary" + "[vrf-name='" + self.vrf_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "address-family-xr"):
                                if (self.address_family_xr is None):
                                    self.address_family_xr = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.AddressFamilyXr()
                                    self.address_family_xr.parent = self
                                    self._children_name_map["address_family_xr"] = "address-family-xr"
                                return self.address_family_xr

                            if (child_yang_name == "state-xr"):
                                if (self.state_xr is None):
                                    self.state_xr = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary.StateXr()
                                    self.state_xr.parent = self
                                    self._children_name_map["state_xr"] = "state-xr"
                                return self.state_xr

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "address-family-xr" or name == "state-xr" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.vrf_summary:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.vrf_summary:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "vrf-summaries" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "vrf-summary"):
                            for c in self.vrf_summary:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.VrfSummaries.VrfSummary()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.vrf_summary.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "vrf-summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Sessions(Entity):
                    """
                    IP subscriber sessions
                    
                    .. attribute:: session
                    
                    	Subscriber session information
                    	**type**\: list of    :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Sessions.Session>`
                    
                    

                    """

                    _prefix = 'iedge4710-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Subscriber.Session.Nodes.Node.Sessions, self).__init__()

                        self.yang_name = "sessions"
                        self.yang_parent_name = "node"

                        self.session = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Subscriber.Session.Nodes.Node.Sessions, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Subscriber.Session.Nodes.Node.Sessions, self).__setattr__(name, value)


                    class Session(Entity):
                        """
                        Subscriber session information
                        
                        .. attribute:: session_id  <key>
                        
                        	Session ID
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{1,8}
                        
                        .. attribute:: access_interface_name
                        
                        	Access interface name associated with the session
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: account_session_id
                        
                        	Accounting session ID
                        	**type**\:  str
                        
                        .. attribute:: accounting
                        
                        	Accounting information
                        	**type**\:   :py:class:`Accounting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Sessions.Session.Accounting>`
                        
                        .. attribute:: af_up_status
                        
                        	AF status per Subscriber Session
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: circuit_id
                        
                        	Circuit ID
                        	**type**\:  str
                        
                        .. attribute:: clientname
                        
                        	Client Username
                        	**type**\:  str
                        
                        .. attribute:: delegated_ipv6_prefix
                        
                        	Session delegated IPv6 prefix
                        	**type**\:  str
                        
                        .. attribute:: formattedname
                        
                        	Formatted Username
                        	**type**\:  str
                        
                        .. attribute:: idle_state_change_time
                        
                        	Time when idle state change occurred in DDD MMM DD HH\:MM\:SS YYYY format eg\: Tue Apr 11 21\:30\:47 2011
                        	**type**\:  str
                        
                        .. attribute:: interface_name
                        
                        	Interface name
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: ipv6_interface_id
                        
                        	IPv6 Interface ID
                        	**type**\:  str
                        
                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                        
                        .. attribute:: is_session_authentic
                        
                        	If true, session is authentic
                        	**type**\:  bool
                        
                        .. attribute:: is_session_author
                        
                        	If true, session is authorized
                        	**type**\:  bool
                        
                        .. attribute:: lac_address
                        
                        	PPPoE LAC address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: lns_address
                        
                        	PPPoE LNS address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: mac_address
                        
                        	MAC address
                        	**type**\:  str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: mobility_attributes
                        
                        	List of mobility attributes collected for subscriber session
                        	**type**\:   :py:class:`MobilityAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Sessions.Session.MobilityAttributes>`
                        
                        .. attribute:: nas_port
                        
                        	NAS port
                        	**type**\:  str
                        
                        .. attribute:: pending_callbacks
                        
                        	Active pending callbacks bitmask
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: pppoe_sub_type
                        
                        	PPPoE sub type
                        	**type**\:   :py:class:`IedgePppSub <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.IedgePppSub>`
                        
                        .. attribute:: remote_id
                        
                        	Remote ID
                        	**type**\:  str
                        
                        .. attribute:: session_change_of_authorization
                        
                        	Subscriber change of authorization information
                        	**type**\: list of    :py:class:`SessionChangeOfAuthorization <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Sessions.Session.SessionChangeOfAuthorization>`
                        
                        .. attribute:: session_creation_time
                        
                        	Session creation time in DDD MMM DD HH\:MM\:SS YYYY format eg\: Tue Apr 11 21\:30\:47 2011
                        	**type**\:  str
                        
                        .. attribute:: session_ip_address
                        
                        	Session ip address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: session_ipv4_state
                        
                        	Session IPv4 state
                        	**type**\:   :py:class:`IedgeOperSessionAfState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.IedgeOperSessionAfState>`
                        
                        .. attribute:: session_ipv6_address
                        
                        	Session IPv6 address
                        	**type**\:  str
                        
                        .. attribute:: session_ipv6_prefix
                        
                        	Session IPv6 prefix
                        	**type**\:  str
                        
                        .. attribute:: session_ipv6_state
                        
                        	Session IPv6 state
                        	**type**\:   :py:class:`IedgeOperSessionAfState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.IedgeOperSessionAfState>`
                        
                        .. attribute:: session_state
                        
                        	Session state
                        	**type**\:   :py:class:`IedgeOperSessionState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.IedgeOperSessionState>`
                        
                        .. attribute:: session_type
                        
                        	Subscriber session type
                        	**type**\:   :py:class:`IedgeOperSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.IedgeOperSession>`
                        
                        .. attribute:: total_session_idle_time
                        
                        	Total session idle time (in seconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: tunnel_client_authentication_id
                        
                        	PPPoE LAC tunnel client authentication ID
                        	**type**\:  str
                        
                        .. attribute:: tunnel_server_authentication_id
                        
                        	PPPoE LAC tunnel server authentication ID
                        	**type**\:  str
                        
                        .. attribute:: user_profile_attributes
                        
                        	List of user profile attributes collected for subscriber session
                        	**type**\:   :py:class:`UserProfileAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Sessions.Session.UserProfileAttributes>`
                        
                        .. attribute:: username
                        
                        	Username
                        	**type**\:  str
                        
                        .. attribute:: vrf_name
                        
                        	VRF name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'iedge4710-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Subscriber.Session.Nodes.Node.Sessions.Session, self).__init__()

                            self.yang_name = "session"
                            self.yang_parent_name = "sessions"

                            self.session_id = YLeaf(YType.str, "session-id")

                            self.access_interface_name = YLeaf(YType.str, "access-interface-name")

                            self.account_session_id = YLeaf(YType.str, "account-session-id")

                            self.af_up_status = YLeaf(YType.uint32, "af-up-status")

                            self.circuit_id = YLeaf(YType.str, "circuit-id")

                            self.clientname = YLeaf(YType.str, "clientname")

                            self.delegated_ipv6_prefix = YLeaf(YType.str, "delegated-ipv6-prefix")

                            self.formattedname = YLeaf(YType.str, "formattedname")

                            self.idle_state_change_time = YLeaf(YType.str, "idle-state-change-time")

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.ipv6_interface_id = YLeaf(YType.str, "ipv6-interface-id")

                            self.is_session_authentic = YLeaf(YType.boolean, "is-session-authentic")

                            self.is_session_author = YLeaf(YType.boolean, "is-session-author")

                            self.lac_address = YLeaf(YType.str, "lac-address")

                            self.lns_address = YLeaf(YType.str, "lns-address")

                            self.mac_address = YLeaf(YType.str, "mac-address")

                            self.nas_port = YLeaf(YType.str, "nas-port")

                            self.pending_callbacks = YLeaf(YType.uint64, "pending-callbacks")

                            self.pppoe_sub_type = YLeaf(YType.enumeration, "pppoe-sub-type")

                            self.remote_id = YLeaf(YType.str, "remote-id")

                            self.session_creation_time = YLeaf(YType.str, "session-creation-time")

                            self.session_ip_address = YLeaf(YType.str, "session-ip-address")

                            self.session_ipv4_state = YLeaf(YType.enumeration, "session-ipv4-state")

                            self.session_ipv6_address = YLeaf(YType.str, "session-ipv6-address")

                            self.session_ipv6_prefix = YLeaf(YType.str, "session-ipv6-prefix")

                            self.session_ipv6_state = YLeaf(YType.enumeration, "session-ipv6-state")

                            self.session_state = YLeaf(YType.enumeration, "session-state")

                            self.session_type = YLeaf(YType.enumeration, "session-type")

                            self.total_session_idle_time = YLeaf(YType.uint32, "total-session-idle-time")

                            self.tunnel_client_authentication_id = YLeaf(YType.str, "tunnel-client-authentication-id")

                            self.tunnel_server_authentication_id = YLeaf(YType.str, "tunnel-server-authentication-id")

                            self.username = YLeaf(YType.str, "username")

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.accounting = Subscriber.Session.Nodes.Node.Sessions.Session.Accounting()
                            self.accounting.parent = self
                            self._children_name_map["accounting"] = "accounting"
                            self._children_yang_names.add("accounting")

                            self.mobility_attributes = Subscriber.Session.Nodes.Node.Sessions.Session.MobilityAttributes()
                            self.mobility_attributes.parent = self
                            self._children_name_map["mobility_attributes"] = "mobility-attributes"
                            self._children_yang_names.add("mobility-attributes")

                            self.user_profile_attributes = Subscriber.Session.Nodes.Node.Sessions.Session.UserProfileAttributes()
                            self.user_profile_attributes.parent = self
                            self._children_name_map["user_profile_attributes"] = "user-profile-attributes"
                            self._children_yang_names.add("user-profile-attributes")

                            self.session_change_of_authorization = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("session_id",
                                            "access_interface_name",
                                            "account_session_id",
                                            "af_up_status",
                                            "circuit_id",
                                            "clientname",
                                            "delegated_ipv6_prefix",
                                            "formattedname",
                                            "idle_state_change_time",
                                            "interface_name",
                                            "ipv6_interface_id",
                                            "is_session_authentic",
                                            "is_session_author",
                                            "lac_address",
                                            "lns_address",
                                            "mac_address",
                                            "nas_port",
                                            "pending_callbacks",
                                            "pppoe_sub_type",
                                            "remote_id",
                                            "session_creation_time",
                                            "session_ip_address",
                                            "session_ipv4_state",
                                            "session_ipv6_address",
                                            "session_ipv6_prefix",
                                            "session_ipv6_state",
                                            "session_state",
                                            "session_type",
                                            "total_session_idle_time",
                                            "tunnel_client_authentication_id",
                                            "tunnel_server_authentication_id",
                                            "username",
                                            "vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Subscriber.Session.Nodes.Node.Sessions.Session, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Subscriber.Session.Nodes.Node.Sessions.Session, self).__setattr__(name, value)


                        class Accounting(Entity):
                            """
                            Accounting information
                            
                            .. attribute:: accounting_session
                            
                            	Accounting information
                            	**type**\: list of    :py:class:`AccountingSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.Subscriber.Session.Nodes.Node.Sessions.Session.Accounting.AccountingSession>`
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Sessions.Session.Accounting, self).__init__()

                                self.yang_name = "accounting"
                                self.yang_parent_name = "session"

                                self.accounting_session = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in () and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Session.Nodes.Node.Sessions.Session.Accounting, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Session.Nodes.Node.Sessions.Session.Accounting, self).__setattr__(name, value)


                            class AccountingSession(Entity):
                                """
                                Accounting information
                                
                                .. attribute:: accepted_interim_updates
                                
                                	Number of interim updates accepted
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: account_session_id
                                
                                	Accounting session ID
                                	**type**\:  str
                                
                                .. attribute:: accounting_start_time
                                
                                	Accounting start time in DDD MMM DD HH\:MM\:SS YYYY format eg\: Tue Feb 15 15\:12\:49 2011
                                	**type**\:  str
                                
                                .. attribute:: accounting_state_rc
                                
                                	Accounting State Error Code for Accounting Session
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: accounting_stop_state
                                
                                	Accounting Stop State
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: interim_interval
                                
                                	Interim accounting interval (in minutes)
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: minute
                                
                                .. attribute:: is_interim_accounting_enabled
                                
                                	True if interim accounting is enabled
                                	**type**\:  bool
                                
                                .. attribute:: last_interim_update_attempt_time
                                
                                	Time of last interim update attempt in DDD MMM DD HH\:MM\:SS YYYY format eg\: Tue Apr 11 21\:30\:47 2011
                                	**type**\:  str
                                
                                .. attribute:: last_successful_interim_update_time
                                
                                	Time of last successful interim update in DDD MMM DD HH\:MM\:SS YYYY format eg\: Tue Apr 11 21\:30 \:47 2011
                                	**type**\:  str
                                
                                .. attribute:: method_list_name
                                
                                	AAA method list name used to perform accounting
                                	**type**\:  str
                                
                                .. attribute:: next_interim_update_attempt_time
                                
                                	Time of next interim update attempt (in seconds)
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: second
                                
                                .. attribute:: record_context_name
                                
                                	Accounting record context name
                                	**type**\:  str
                                
                                .. attribute:: rejected_interim_updates
                                
                                	Number of interim updates rejected
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_interim_update_failures
                                
                                	Number of interim update send failures
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_interim_updates
                                
                                	Number of interim updates sent
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'iedge4710-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Subscriber.Session.Nodes.Node.Sessions.Session.Accounting.AccountingSession, self).__init__()

                                    self.yang_name = "accounting-session"
                                    self.yang_parent_name = "accounting"

                                    self.accepted_interim_updates = YLeaf(YType.uint32, "accepted-interim-updates")

                                    self.account_session_id = YLeaf(YType.str, "account-session-id")

                                    self.accounting_start_time = YLeaf(YType.str, "accounting-start-time")

                                    self.accounting_state_rc = YLeaf(YType.uint32, "accounting-state-rc")

                                    self.accounting_stop_state = YLeaf(YType.uint32, "accounting-stop-state")

                                    self.interim_interval = YLeaf(YType.uint32, "interim-interval")

                                    self.is_interim_accounting_enabled = YLeaf(YType.boolean, "is-interim-accounting-enabled")

                                    self.last_interim_update_attempt_time = YLeaf(YType.str, "last-interim-update-attempt-time")

                                    self.last_successful_interim_update_time = YLeaf(YType.str, "last-successful-interim-update-time")

                                    self.method_list_name = YLeaf(YType.str, "method-list-name")

                                    self.next_interim_update_attempt_time = YLeaf(YType.uint32, "next-interim-update-attempt-time")

                                    self.record_context_name = YLeaf(YType.str, "record-context-name")

                                    self.rejected_interim_updates = YLeaf(YType.uint32, "rejected-interim-updates")

                                    self.sent_interim_update_failures = YLeaf(YType.uint32, "sent-interim-update-failures")

                                    self.sent_interim_updates = YLeaf(YType.uint32, "sent-interim-updates")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("accepted_interim_updates",
                                                    "account_session_id",
                                                    "accounting_start_time",
                                                    "accounting_state_rc",
                                                    "accounting_stop_state",
                                                    "interim_interval",
                                                    "is_interim_accounting_enabled",
                                                    "last_interim_update_attempt_time",
                                                    "last_successful_interim_update_time",
                                                    "method_list_name",
                                                    "next_interim_update_attempt_time",
                                                    "record_context_name",
                                                    "rejected_interim_updates",
                                                    "sent_interim_update_failures",
                                                    "sent_interim_updates") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Subscriber.Session.Nodes.Node.Sessions.Session.Accounting.AccountingSession, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Subscriber.Session.Nodes.Node.Sessions.Session.Accounting.AccountingSession, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.accepted_interim_updates.is_set or
                                        self.account_session_id.is_set or
                                        self.accounting_start_time.is_set or
                                        self.accounting_state_rc.is_set or
                                        self.accounting_stop_state.is_set or
                                        self.interim_interval.is_set or
                                        self.is_interim_accounting_enabled.is_set or
                                        self.last_interim_update_attempt_time.is_set or
                                        self.last_successful_interim_update_time.is_set or
                                        self.method_list_name.is_set or
                                        self.next_interim_update_attempt_time.is_set or
                                        self.record_context_name.is_set or
                                        self.rejected_interim_updates.is_set or
                                        self.sent_interim_update_failures.is_set or
                                        self.sent_interim_updates.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.accepted_interim_updates.yfilter != YFilter.not_set or
                                        self.account_session_id.yfilter != YFilter.not_set or
                                        self.accounting_start_time.yfilter != YFilter.not_set or
                                        self.accounting_state_rc.yfilter != YFilter.not_set or
                                        self.accounting_stop_state.yfilter != YFilter.not_set or
                                        self.interim_interval.yfilter != YFilter.not_set or
                                        self.is_interim_accounting_enabled.yfilter != YFilter.not_set or
                                        self.last_interim_update_attempt_time.yfilter != YFilter.not_set or
                                        self.last_successful_interim_update_time.yfilter != YFilter.not_set or
                                        self.method_list_name.yfilter != YFilter.not_set or
                                        self.next_interim_update_attempt_time.yfilter != YFilter.not_set or
                                        self.record_context_name.yfilter != YFilter.not_set or
                                        self.rejected_interim_updates.yfilter != YFilter.not_set or
                                        self.sent_interim_update_failures.yfilter != YFilter.not_set or
                                        self.sent_interim_updates.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "accounting-session" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.accepted_interim_updates.is_set or self.accepted_interim_updates.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.accepted_interim_updates.get_name_leafdata())
                                    if (self.account_session_id.is_set or self.account_session_id.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.account_session_id.get_name_leafdata())
                                    if (self.accounting_start_time.is_set or self.accounting_start_time.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.accounting_start_time.get_name_leafdata())
                                    if (self.accounting_state_rc.is_set or self.accounting_state_rc.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.accounting_state_rc.get_name_leafdata())
                                    if (self.accounting_stop_state.is_set or self.accounting_stop_state.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.accounting_stop_state.get_name_leafdata())
                                    if (self.interim_interval.is_set or self.interim_interval.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.interim_interval.get_name_leafdata())
                                    if (self.is_interim_accounting_enabled.is_set or self.is_interim_accounting_enabled.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.is_interim_accounting_enabled.get_name_leafdata())
                                    if (self.last_interim_update_attempt_time.is_set or self.last_interim_update_attempt_time.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.last_interim_update_attempt_time.get_name_leafdata())
                                    if (self.last_successful_interim_update_time.is_set or self.last_successful_interim_update_time.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.last_successful_interim_update_time.get_name_leafdata())
                                    if (self.method_list_name.is_set or self.method_list_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.method_list_name.get_name_leafdata())
                                    if (self.next_interim_update_attempt_time.is_set or self.next_interim_update_attempt_time.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.next_interim_update_attempt_time.get_name_leafdata())
                                    if (self.record_context_name.is_set or self.record_context_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.record_context_name.get_name_leafdata())
                                    if (self.rejected_interim_updates.is_set or self.rejected_interim_updates.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.rejected_interim_updates.get_name_leafdata())
                                    if (self.sent_interim_update_failures.is_set or self.sent_interim_update_failures.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.sent_interim_update_failures.get_name_leafdata())
                                    if (self.sent_interim_updates.is_set or self.sent_interim_updates.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.sent_interim_updates.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "accepted-interim-updates" or name == "account-session-id" or name == "accounting-start-time" or name == "accounting-state-rc" or name == "accounting-stop-state" or name == "interim-interval" or name == "is-interim-accounting-enabled" or name == "last-interim-update-attempt-time" or name == "last-successful-interim-update-time" or name == "method-list-name" or name == "next-interim-update-attempt-time" or name == "record-context-name" or name == "rejected-interim-updates" or name == "sent-interim-update-failures" or name == "sent-interim-updates"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "accepted-interim-updates"):
                                        self.accepted_interim_updates = value
                                        self.accepted_interim_updates.value_namespace = name_space
                                        self.accepted_interim_updates.value_namespace_prefix = name_space_prefix
                                    if(value_path == "account-session-id"):
                                        self.account_session_id = value
                                        self.account_session_id.value_namespace = name_space
                                        self.account_session_id.value_namespace_prefix = name_space_prefix
                                    if(value_path == "accounting-start-time"):
                                        self.accounting_start_time = value
                                        self.accounting_start_time.value_namespace = name_space
                                        self.accounting_start_time.value_namespace_prefix = name_space_prefix
                                    if(value_path == "accounting-state-rc"):
                                        self.accounting_state_rc = value
                                        self.accounting_state_rc.value_namespace = name_space
                                        self.accounting_state_rc.value_namespace_prefix = name_space_prefix
                                    if(value_path == "accounting-stop-state"):
                                        self.accounting_stop_state = value
                                        self.accounting_stop_state.value_namespace = name_space
                                        self.accounting_stop_state.value_namespace_prefix = name_space_prefix
                                    if(value_path == "interim-interval"):
                                        self.interim_interval = value
                                        self.interim_interval.value_namespace = name_space
                                        self.interim_interval.value_namespace_prefix = name_space_prefix
                                    if(value_path == "is-interim-accounting-enabled"):
                                        self.is_interim_accounting_enabled = value
                                        self.is_interim_accounting_enabled.value_namespace = name_space
                                        self.is_interim_accounting_enabled.value_namespace_prefix = name_space_prefix
                                    if(value_path == "last-interim-update-attempt-time"):
                                        self.last_interim_update_attempt_time = value
                                        self.last_interim_update_attempt_time.value_namespace = name_space
                                        self.last_interim_update_attempt_time.value_namespace_prefix = name_space_prefix
                                    if(value_path == "last-successful-interim-update-time"):
                                        self.last_successful_interim_update_time = value
                                        self.last_successful_interim_update_time.value_namespace = name_space
                                        self.last_successful_interim_update_time.value_namespace_prefix = name_space_prefix
                                    if(value_path == "method-list-name"):
                                        self.method_list_name = value
                                        self.method_list_name.value_namespace = name_space
                                        self.method_list_name.value_namespace_prefix = name_space_prefix
                                    if(value_path == "next-interim-update-attempt-time"):
                                        self.next_interim_update_attempt_time = value
                                        self.next_interim_update_attempt_time.value_namespace = name_space
                                        self.next_interim_update_attempt_time.value_namespace_prefix = name_space_prefix
                                    if(value_path == "record-context-name"):
                                        self.record_context_name = value
                                        self.record_context_name.value_namespace = name_space
                                        self.record_context_name.value_namespace_prefix = name_space_prefix
                                    if(value_path == "rejected-interim-updates"):
                                        self.rejected_interim_updates = value
                                        self.rejected_interim_updates.value_namespace = name_space
                                        self.rejected_interim_updates.value_namespace_prefix = name_space_prefix
                                    if(value_path == "sent-interim-update-failures"):
                                        self.sent_interim_update_failures = value
                                        self.sent_interim_update_failures.value_namespace = name_space
                                        self.sent_interim_update_failures.value_namespace_prefix = name_space_prefix
                                    if(value_path == "sent-interim-updates"):
                                        self.sent_interim_updates = value
                                        self.sent_interim_updates.value_namespace = name_space
                                        self.sent_interim_updates.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.accounting_session:
                                    if (c.has_data()):
                                        return True
                                return False

                            def has_operation(self):
                                for c in self.accounting_session:
                                    if (c.has_operation()):
                                        return True
                                return self.yfilter != YFilter.not_set

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "accounting" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "accounting-session"):
                                    for c in self.accounting_session:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = Subscriber.Session.Nodes.Node.Sessions.Session.Accounting.AccountingSession()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.accounting_session.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "accounting-session"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class UserProfileAttributes(Entity):
                            """
                            List of user profile attributes collected for
                            subscriber session
                            
                            .. attribute:: accounting_session_id
                            
                            	Accounting session ID
                            	**type**\:  str
                            
                            .. attribute:: actual_data_rate_downstream
                            
                            	Actual data rate downstream (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: actual_data_rate_upstream
                            
                            	Actual data rate upstream (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: attainable_data_rate_downstream
                            
                            	Attainable data rate downstream (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: attainable_data_rate_upstream
                            
                            	Attainable data rate upstream (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: authorization_service_type
                            
                            	Authorization service type
                            	**type**\:   :py:class:`AaaAuthService <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.AaaAuthService>`
                            
                            .. attribute:: circuit_id
                            
                            	Circuit ID
                            	**type**\:  str
                            
                            .. attribute:: connection_receive_speed
                            
                            	Connection receive speed
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: connection_transmission_speed
                            
                            	Connection transmission speed
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: destination_station_id
                            
                            	Destination station ID
                            	**type**\:  str
                            
                            .. attribute:: downstream_parameterized_qos_policy
                            
                            	Downstream parameterized QoS policy to be applied on the subscriber side
                            	**type**\:  str
                            
                            .. attribute:: downstream_qos_policy
                            
                            	Downstream QoS policy to be applied on the subscriber side
                            	**type**\:  str
                            
                            .. attribute:: egress_access_list
                            
                            	Egress access list
                            	**type**\:  str
                            
                            .. attribute:: formatted_calling_station_id
                            
                            	Formatted calling station id
                            	**type**\:  str
                            
                            .. attribute:: ingress_access_list
                            
                            	Ingress access list
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface name
                            	**type**\:  str
                            
                            .. attribute:: interface_type
                            
                            	Interface type
                            	**type**\:   :py:class:`AaaInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.AaaInterface>`
                            
                            .. attribute:: interim_accounting_interval
                            
                            	Interim accounting interval
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ip_netmask
                            
                            	IP netmask for the user
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: ipv4_unnumbered
                            
                            	IPv4 unnumbered
                            	**type**\:  str
                            
                            .. attribute:: ipv4mtu
                            
                            	IPv4 maximum transmission unit
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: is_interworking_functionality
                            
                            	True, if interworking functionality
                            	**type**\:  bool
                            
                            .. attribute:: max_data_rate_downstream
                            
                            	Maximum data rate downstream (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: max_data_rate_upstream
                            
                            	Maximum data rate upstream (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: max_interleaving_delay_downstream
                            
                            	Maximum interleaving delay downstream (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: max_interleaving_delay_upstream
                            
                            	Maximum interleaving delay upstream (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: min_data_rate_downstream
                            
                            	Minimum data rate downstream (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: min_data_rate_downstream_low_power
                            
                            	Minimum data rate downstream low power (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: min_data_rate_upstream_low_power
                            
                            	Minimum data rate upstream low power (in Mbps)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: Mbit/s
                            
                            .. attribute:: parent_interface_name
                            
                            	Parent interface name
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: pool_address
                            
                            	IP address pool
                            	**type**\:  str
                            
                            .. attribute:: primary_dns_server_address
                            
                            	Primary DNS server address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: primary_net_bios_server_address
                            
                            	Primary net bios server address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: remote_id
                            
                            	Remote ID
                            	**type**\:  str
                            
                            .. attribute:: route
                            
                            	Route information for a user session
                            	**type**\:  str
                            
                            .. attribute:: secondary_dns_server_address
                            
                            	Secondary DNS server address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: secondary_net_bios_server_address
                            
                            	Secondary net bios server address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: session_termination_cause
                            
                            	Session termination cause
                            	**type**\:   :py:class:`AaaTerminateCause <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.AaaTerminateCause>`
                            
                            .. attribute:: session_timeout
                            
                            	Session timeout (in seconds)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: strict_rpf_packets
                            
                            	Strict RPF packets
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_client_authentication_id
                            
                            	Tunnel client authentication ID
                            	**type**\:  str
                            
                            .. attribute:: tunnel_client_endpoint
                            
                            	Tunnel client endpoint
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_medium
                            
                            	Tunnel medium
                            	**type**\:   :py:class:`AaaTunnelMedium <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.AaaTunnelMedium>`
                            
                            .. attribute:: tunnel_preference
                            
                            	Tunnel preference
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_protocol
                            
                            	Tunnel protocol
                            	**type**\:   :py:class:`AaaTunnelProto <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.AaaTunnelProto>`
                            
                            .. attribute:: tunnel_server_endpoint
                            
                            	Tunnel server endpoint
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_tos_setting
                            
                            	Tunnel TOS setting
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: upstream_parameterized_qos_policy
                            
                            	Upstream parameterized QoS policy to be applied on the subscriber side
                            	**type**\:  str
                            
                            .. attribute:: upstream_qos_policy
                            
                            	Upstream QoS policy to be applied on the subscriber side
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Sessions.Session.UserProfileAttributes, self).__init__()

                                self.yang_name = "user-profile-attributes"
                                self.yang_parent_name = "session"

                                self.accounting_session_id = YLeaf(YType.str, "accounting-session-id")

                                self.actual_data_rate_downstream = YLeaf(YType.uint32, "actual-data-rate-downstream")

                                self.actual_data_rate_upstream = YLeaf(YType.uint32, "actual-data-rate-upstream")

                                self.attainable_data_rate_downstream = YLeaf(YType.uint32, "attainable-data-rate-downstream")

                                self.attainable_data_rate_upstream = YLeaf(YType.uint32, "attainable-data-rate-upstream")

                                self.authorization_service_type = YLeaf(YType.enumeration, "authorization-service-type")

                                self.circuit_id = YLeaf(YType.str, "circuit-id")

                                self.connection_receive_speed = YLeaf(YType.uint32, "connection-receive-speed")

                                self.connection_transmission_speed = YLeaf(YType.uint32, "connection-transmission-speed")

                                self.destination_station_id = YLeaf(YType.str, "destination-station-id")

                                self.downstream_parameterized_qos_policy = YLeaf(YType.str, "downstream-parameterized-qos-policy")

                                self.downstream_qos_policy = YLeaf(YType.str, "downstream-qos-policy")

                                self.egress_access_list = YLeaf(YType.str, "egress-access-list")

                                self.formatted_calling_station_id = YLeaf(YType.str, "formatted-calling-station-id")

                                self.ingress_access_list = YLeaf(YType.str, "ingress-access-list")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.interface_type = YLeaf(YType.enumeration, "interface-type")

                                self.interim_accounting_interval = YLeaf(YType.uint32, "interim-accounting-interval")

                                self.ip_netmask = YLeaf(YType.str, "ip-netmask")

                                self.ipv4_unnumbered = YLeaf(YType.str, "ipv4-unnumbered")

                                self.ipv4mtu = YLeaf(YType.uint32, "ipv4mtu")

                                self.is_interworking_functionality = YLeaf(YType.boolean, "is-interworking-functionality")

                                self.max_data_rate_downstream = YLeaf(YType.uint32, "max-data-rate-downstream")

                                self.max_data_rate_upstream = YLeaf(YType.uint32, "max-data-rate-upstream")

                                self.max_interleaving_delay_downstream = YLeaf(YType.uint32, "max-interleaving-delay-downstream")

                                self.max_interleaving_delay_upstream = YLeaf(YType.uint32, "max-interleaving-delay-upstream")

                                self.min_data_rate_downstream = YLeaf(YType.uint32, "min-data-rate-downstream")

                                self.min_data_rate_downstream_low_power = YLeaf(YType.uint32, "min-data-rate-downstream-low-power")

                                self.min_data_rate_upstream_low_power = YLeaf(YType.uint32, "min-data-rate-upstream-low-power")

                                self.parent_interface_name = YLeaf(YType.str, "parent-interface-name")

                                self.pool_address = YLeaf(YType.str, "pool-address")

                                self.primary_dns_server_address = YLeaf(YType.str, "primary-dns-server-address")

                                self.primary_net_bios_server_address = YLeaf(YType.str, "primary-net-bios-server-address")

                                self.remote_id = YLeaf(YType.str, "remote-id")

                                self.route = YLeaf(YType.str, "route")

                                self.secondary_dns_server_address = YLeaf(YType.str, "secondary-dns-server-address")

                                self.secondary_net_bios_server_address = YLeaf(YType.str, "secondary-net-bios-server-address")

                                self.session_termination_cause = YLeaf(YType.enumeration, "session-termination-cause")

                                self.session_timeout = YLeaf(YType.uint32, "session-timeout")

                                self.strict_rpf_packets = YLeaf(YType.uint32, "strict-rpf-packets")

                                self.tunnel_client_authentication_id = YLeaf(YType.str, "tunnel-client-authentication-id")

                                self.tunnel_client_endpoint = YLeaf(YType.str, "tunnel-client-endpoint")

                                self.tunnel_medium = YLeaf(YType.enumeration, "tunnel-medium")

                                self.tunnel_preference = YLeaf(YType.uint32, "tunnel-preference")

                                self.tunnel_protocol = YLeaf(YType.enumeration, "tunnel-protocol")

                                self.tunnel_server_endpoint = YLeaf(YType.str, "tunnel-server-endpoint")

                                self.tunnel_tos_setting = YLeaf(YType.uint32, "tunnel-tos-setting")

                                self.upstream_parameterized_qos_policy = YLeaf(YType.str, "upstream-parameterized-qos-policy")

                                self.upstream_qos_policy = YLeaf(YType.str, "upstream-qos-policy")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("accounting_session_id",
                                                "actual_data_rate_downstream",
                                                "actual_data_rate_upstream",
                                                "attainable_data_rate_downstream",
                                                "attainable_data_rate_upstream",
                                                "authorization_service_type",
                                                "circuit_id",
                                                "connection_receive_speed",
                                                "connection_transmission_speed",
                                                "destination_station_id",
                                                "downstream_parameterized_qos_policy",
                                                "downstream_qos_policy",
                                                "egress_access_list",
                                                "formatted_calling_station_id",
                                                "ingress_access_list",
                                                "interface_name",
                                                "interface_type",
                                                "interim_accounting_interval",
                                                "ip_netmask",
                                                "ipv4_unnumbered",
                                                "ipv4mtu",
                                                "is_interworking_functionality",
                                                "max_data_rate_downstream",
                                                "max_data_rate_upstream",
                                                "max_interleaving_delay_downstream",
                                                "max_interleaving_delay_upstream",
                                                "min_data_rate_downstream",
                                                "min_data_rate_downstream_low_power",
                                                "min_data_rate_upstream_low_power",
                                                "parent_interface_name",
                                                "pool_address",
                                                "primary_dns_server_address",
                                                "primary_net_bios_server_address",
                                                "remote_id",
                                                "route",
                                                "secondary_dns_server_address",
                                                "secondary_net_bios_server_address",
                                                "session_termination_cause",
                                                "session_timeout",
                                                "strict_rpf_packets",
                                                "tunnel_client_authentication_id",
                                                "tunnel_client_endpoint",
                                                "tunnel_medium",
                                                "tunnel_preference",
                                                "tunnel_protocol",
                                                "tunnel_server_endpoint",
                                                "tunnel_tos_setting",
                                                "upstream_parameterized_qos_policy",
                                                "upstream_qos_policy") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Session.Nodes.Node.Sessions.Session.UserProfileAttributes, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Session.Nodes.Node.Sessions.Session.UserProfileAttributes, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.accounting_session_id.is_set or
                                    self.actual_data_rate_downstream.is_set or
                                    self.actual_data_rate_upstream.is_set or
                                    self.attainable_data_rate_downstream.is_set or
                                    self.attainable_data_rate_upstream.is_set or
                                    self.authorization_service_type.is_set or
                                    self.circuit_id.is_set or
                                    self.connection_receive_speed.is_set or
                                    self.connection_transmission_speed.is_set or
                                    self.destination_station_id.is_set or
                                    self.downstream_parameterized_qos_policy.is_set or
                                    self.downstream_qos_policy.is_set or
                                    self.egress_access_list.is_set or
                                    self.formatted_calling_station_id.is_set or
                                    self.ingress_access_list.is_set or
                                    self.interface_name.is_set or
                                    self.interface_type.is_set or
                                    self.interim_accounting_interval.is_set or
                                    self.ip_netmask.is_set or
                                    self.ipv4_unnumbered.is_set or
                                    self.ipv4mtu.is_set or
                                    self.is_interworking_functionality.is_set or
                                    self.max_data_rate_downstream.is_set or
                                    self.max_data_rate_upstream.is_set or
                                    self.max_interleaving_delay_downstream.is_set or
                                    self.max_interleaving_delay_upstream.is_set or
                                    self.min_data_rate_downstream.is_set or
                                    self.min_data_rate_downstream_low_power.is_set or
                                    self.min_data_rate_upstream_low_power.is_set or
                                    self.parent_interface_name.is_set or
                                    self.pool_address.is_set or
                                    self.primary_dns_server_address.is_set or
                                    self.primary_net_bios_server_address.is_set or
                                    self.remote_id.is_set or
                                    self.route.is_set or
                                    self.secondary_dns_server_address.is_set or
                                    self.secondary_net_bios_server_address.is_set or
                                    self.session_termination_cause.is_set or
                                    self.session_timeout.is_set or
                                    self.strict_rpf_packets.is_set or
                                    self.tunnel_client_authentication_id.is_set or
                                    self.tunnel_client_endpoint.is_set or
                                    self.tunnel_medium.is_set or
                                    self.tunnel_preference.is_set or
                                    self.tunnel_protocol.is_set or
                                    self.tunnel_server_endpoint.is_set or
                                    self.tunnel_tos_setting.is_set or
                                    self.upstream_parameterized_qos_policy.is_set or
                                    self.upstream_qos_policy.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.accounting_session_id.yfilter != YFilter.not_set or
                                    self.actual_data_rate_downstream.yfilter != YFilter.not_set or
                                    self.actual_data_rate_upstream.yfilter != YFilter.not_set or
                                    self.attainable_data_rate_downstream.yfilter != YFilter.not_set or
                                    self.attainable_data_rate_upstream.yfilter != YFilter.not_set or
                                    self.authorization_service_type.yfilter != YFilter.not_set or
                                    self.circuit_id.yfilter != YFilter.not_set or
                                    self.connection_receive_speed.yfilter != YFilter.not_set or
                                    self.connection_transmission_speed.yfilter != YFilter.not_set or
                                    self.destination_station_id.yfilter != YFilter.not_set or
                                    self.downstream_parameterized_qos_policy.yfilter != YFilter.not_set or
                                    self.downstream_qos_policy.yfilter != YFilter.not_set or
                                    self.egress_access_list.yfilter != YFilter.not_set or
                                    self.formatted_calling_station_id.yfilter != YFilter.not_set or
                                    self.ingress_access_list.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.interface_type.yfilter != YFilter.not_set or
                                    self.interim_accounting_interval.yfilter != YFilter.not_set or
                                    self.ip_netmask.yfilter != YFilter.not_set or
                                    self.ipv4_unnumbered.yfilter != YFilter.not_set or
                                    self.ipv4mtu.yfilter != YFilter.not_set or
                                    self.is_interworking_functionality.yfilter != YFilter.not_set or
                                    self.max_data_rate_downstream.yfilter != YFilter.not_set or
                                    self.max_data_rate_upstream.yfilter != YFilter.not_set or
                                    self.max_interleaving_delay_downstream.yfilter != YFilter.not_set or
                                    self.max_interleaving_delay_upstream.yfilter != YFilter.not_set or
                                    self.min_data_rate_downstream.yfilter != YFilter.not_set or
                                    self.min_data_rate_downstream_low_power.yfilter != YFilter.not_set or
                                    self.min_data_rate_upstream_low_power.yfilter != YFilter.not_set or
                                    self.parent_interface_name.yfilter != YFilter.not_set or
                                    self.pool_address.yfilter != YFilter.not_set or
                                    self.primary_dns_server_address.yfilter != YFilter.not_set or
                                    self.primary_net_bios_server_address.yfilter != YFilter.not_set or
                                    self.remote_id.yfilter != YFilter.not_set or
                                    self.route.yfilter != YFilter.not_set or
                                    self.secondary_dns_server_address.yfilter != YFilter.not_set or
                                    self.secondary_net_bios_server_address.yfilter != YFilter.not_set or
                                    self.session_termination_cause.yfilter != YFilter.not_set or
                                    self.session_timeout.yfilter != YFilter.not_set or
                                    self.strict_rpf_packets.yfilter != YFilter.not_set or
                                    self.tunnel_client_authentication_id.yfilter != YFilter.not_set or
                                    self.tunnel_client_endpoint.yfilter != YFilter.not_set or
                                    self.tunnel_medium.yfilter != YFilter.not_set or
                                    self.tunnel_preference.yfilter != YFilter.not_set or
                                    self.tunnel_protocol.yfilter != YFilter.not_set or
                                    self.tunnel_server_endpoint.yfilter != YFilter.not_set or
                                    self.tunnel_tos_setting.yfilter != YFilter.not_set or
                                    self.upstream_parameterized_qos_policy.yfilter != YFilter.not_set or
                                    self.upstream_qos_policy.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "user-profile-attributes" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.accounting_session_id.is_set or self.accounting_session_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.accounting_session_id.get_name_leafdata())
                                if (self.actual_data_rate_downstream.is_set or self.actual_data_rate_downstream.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.actual_data_rate_downstream.get_name_leafdata())
                                if (self.actual_data_rate_upstream.is_set or self.actual_data_rate_upstream.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.actual_data_rate_upstream.get_name_leafdata())
                                if (self.attainable_data_rate_downstream.is_set or self.attainable_data_rate_downstream.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attainable_data_rate_downstream.get_name_leafdata())
                                if (self.attainable_data_rate_upstream.is_set or self.attainable_data_rate_upstream.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attainable_data_rate_upstream.get_name_leafdata())
                                if (self.authorization_service_type.is_set or self.authorization_service_type.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.authorization_service_type.get_name_leafdata())
                                if (self.circuit_id.is_set or self.circuit_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.circuit_id.get_name_leafdata())
                                if (self.connection_receive_speed.is_set or self.connection_receive_speed.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.connection_receive_speed.get_name_leafdata())
                                if (self.connection_transmission_speed.is_set or self.connection_transmission_speed.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.connection_transmission_speed.get_name_leafdata())
                                if (self.destination_station_id.is_set or self.destination_station_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.destination_station_id.get_name_leafdata())
                                if (self.downstream_parameterized_qos_policy.is_set or self.downstream_parameterized_qos_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.downstream_parameterized_qos_policy.get_name_leafdata())
                                if (self.downstream_qos_policy.is_set or self.downstream_qos_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.downstream_qos_policy.get_name_leafdata())
                                if (self.egress_access_list.is_set or self.egress_access_list.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.egress_access_list.get_name_leafdata())
                                if (self.formatted_calling_station_id.is_set or self.formatted_calling_station_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.formatted_calling_station_id.get_name_leafdata())
                                if (self.ingress_access_list.is_set or self.ingress_access_list.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ingress_access_list.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.interface_type.is_set or self.interface_type.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_type.get_name_leafdata())
                                if (self.interim_accounting_interval.is_set or self.interim_accounting_interval.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interim_accounting_interval.get_name_leafdata())
                                if (self.ip_netmask.is_set or self.ip_netmask.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ip_netmask.get_name_leafdata())
                                if (self.ipv4_unnumbered.is_set or self.ipv4_unnumbered.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ipv4_unnumbered.get_name_leafdata())
                                if (self.ipv4mtu.is_set or self.ipv4mtu.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ipv4mtu.get_name_leafdata())
                                if (self.is_interworking_functionality.is_set or self.is_interworking_functionality.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_interworking_functionality.get_name_leafdata())
                                if (self.max_data_rate_downstream.is_set or self.max_data_rate_downstream.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.max_data_rate_downstream.get_name_leafdata())
                                if (self.max_data_rate_upstream.is_set or self.max_data_rate_upstream.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.max_data_rate_upstream.get_name_leafdata())
                                if (self.max_interleaving_delay_downstream.is_set or self.max_interleaving_delay_downstream.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.max_interleaving_delay_downstream.get_name_leafdata())
                                if (self.max_interleaving_delay_upstream.is_set or self.max_interleaving_delay_upstream.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.max_interleaving_delay_upstream.get_name_leafdata())
                                if (self.min_data_rate_downstream.is_set or self.min_data_rate_downstream.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.min_data_rate_downstream.get_name_leafdata())
                                if (self.min_data_rate_downstream_low_power.is_set or self.min_data_rate_downstream_low_power.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.min_data_rate_downstream_low_power.get_name_leafdata())
                                if (self.min_data_rate_upstream_low_power.is_set or self.min_data_rate_upstream_low_power.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.min_data_rate_upstream_low_power.get_name_leafdata())
                                if (self.parent_interface_name.is_set or self.parent_interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.parent_interface_name.get_name_leafdata())
                                if (self.pool_address.is_set or self.pool_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.pool_address.get_name_leafdata())
                                if (self.primary_dns_server_address.is_set or self.primary_dns_server_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.primary_dns_server_address.get_name_leafdata())
                                if (self.primary_net_bios_server_address.is_set or self.primary_net_bios_server_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.primary_net_bios_server_address.get_name_leafdata())
                                if (self.remote_id.is_set or self.remote_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.remote_id.get_name_leafdata())
                                if (self.route.is_set or self.route.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route.get_name_leafdata())
                                if (self.secondary_dns_server_address.is_set or self.secondary_dns_server_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.secondary_dns_server_address.get_name_leafdata())
                                if (self.secondary_net_bios_server_address.is_set or self.secondary_net_bios_server_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.secondary_net_bios_server_address.get_name_leafdata())
                                if (self.session_termination_cause.is_set or self.session_termination_cause.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.session_termination_cause.get_name_leafdata())
                                if (self.session_timeout.is_set or self.session_timeout.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.session_timeout.get_name_leafdata())
                                if (self.strict_rpf_packets.is_set or self.strict_rpf_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.strict_rpf_packets.get_name_leafdata())
                                if (self.tunnel_client_authentication_id.is_set or self.tunnel_client_authentication_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tunnel_client_authentication_id.get_name_leafdata())
                                if (self.tunnel_client_endpoint.is_set or self.tunnel_client_endpoint.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tunnel_client_endpoint.get_name_leafdata())
                                if (self.tunnel_medium.is_set or self.tunnel_medium.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tunnel_medium.get_name_leafdata())
                                if (self.tunnel_preference.is_set or self.tunnel_preference.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tunnel_preference.get_name_leafdata())
                                if (self.tunnel_protocol.is_set or self.tunnel_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tunnel_protocol.get_name_leafdata())
                                if (self.tunnel_server_endpoint.is_set or self.tunnel_server_endpoint.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tunnel_server_endpoint.get_name_leafdata())
                                if (self.tunnel_tos_setting.is_set or self.tunnel_tos_setting.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tunnel_tos_setting.get_name_leafdata())
                                if (self.upstream_parameterized_qos_policy.is_set or self.upstream_parameterized_qos_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.upstream_parameterized_qos_policy.get_name_leafdata())
                                if (self.upstream_qos_policy.is_set or self.upstream_qos_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.upstream_qos_policy.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "accounting-session-id" or name == "actual-data-rate-downstream" or name == "actual-data-rate-upstream" or name == "attainable-data-rate-downstream" or name == "attainable-data-rate-upstream" or name == "authorization-service-type" or name == "circuit-id" or name == "connection-receive-speed" or name == "connection-transmission-speed" or name == "destination-station-id" or name == "downstream-parameterized-qos-policy" or name == "downstream-qos-policy" or name == "egress-access-list" or name == "formatted-calling-station-id" or name == "ingress-access-list" or name == "interface-name" or name == "interface-type" or name == "interim-accounting-interval" or name == "ip-netmask" or name == "ipv4-unnumbered" or name == "ipv4mtu" or name == "is-interworking-functionality" or name == "max-data-rate-downstream" or name == "max-data-rate-upstream" or name == "max-interleaving-delay-downstream" or name == "max-interleaving-delay-upstream" or name == "min-data-rate-downstream" or name == "min-data-rate-downstream-low-power" or name == "min-data-rate-upstream-low-power" or name == "parent-interface-name" or name == "pool-address" or name == "primary-dns-server-address" or name == "primary-net-bios-server-address" or name == "remote-id" or name == "route" or name == "secondary-dns-server-address" or name == "secondary-net-bios-server-address" or name == "session-termination-cause" or name == "session-timeout" or name == "strict-rpf-packets" or name == "tunnel-client-authentication-id" or name == "tunnel-client-endpoint" or name == "tunnel-medium" or name == "tunnel-preference" or name == "tunnel-protocol" or name == "tunnel-server-endpoint" or name == "tunnel-tos-setting" or name == "upstream-parameterized-qos-policy" or name == "upstream-qos-policy"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "accounting-session-id"):
                                    self.accounting_session_id = value
                                    self.accounting_session_id.value_namespace = name_space
                                    self.accounting_session_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "actual-data-rate-downstream"):
                                    self.actual_data_rate_downstream = value
                                    self.actual_data_rate_downstream.value_namespace = name_space
                                    self.actual_data_rate_downstream.value_namespace_prefix = name_space_prefix
                                if(value_path == "actual-data-rate-upstream"):
                                    self.actual_data_rate_upstream = value
                                    self.actual_data_rate_upstream.value_namespace = name_space
                                    self.actual_data_rate_upstream.value_namespace_prefix = name_space_prefix
                                if(value_path == "attainable-data-rate-downstream"):
                                    self.attainable_data_rate_downstream = value
                                    self.attainable_data_rate_downstream.value_namespace = name_space
                                    self.attainable_data_rate_downstream.value_namespace_prefix = name_space_prefix
                                if(value_path == "attainable-data-rate-upstream"):
                                    self.attainable_data_rate_upstream = value
                                    self.attainable_data_rate_upstream.value_namespace = name_space
                                    self.attainable_data_rate_upstream.value_namespace_prefix = name_space_prefix
                                if(value_path == "authorization-service-type"):
                                    self.authorization_service_type = value
                                    self.authorization_service_type.value_namespace = name_space
                                    self.authorization_service_type.value_namespace_prefix = name_space_prefix
                                if(value_path == "circuit-id"):
                                    self.circuit_id = value
                                    self.circuit_id.value_namespace = name_space
                                    self.circuit_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "connection-receive-speed"):
                                    self.connection_receive_speed = value
                                    self.connection_receive_speed.value_namespace = name_space
                                    self.connection_receive_speed.value_namespace_prefix = name_space_prefix
                                if(value_path == "connection-transmission-speed"):
                                    self.connection_transmission_speed = value
                                    self.connection_transmission_speed.value_namespace = name_space
                                    self.connection_transmission_speed.value_namespace_prefix = name_space_prefix
                                if(value_path == "destination-station-id"):
                                    self.destination_station_id = value
                                    self.destination_station_id.value_namespace = name_space
                                    self.destination_station_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "downstream-parameterized-qos-policy"):
                                    self.downstream_parameterized_qos_policy = value
                                    self.downstream_parameterized_qos_policy.value_namespace = name_space
                                    self.downstream_parameterized_qos_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "downstream-qos-policy"):
                                    self.downstream_qos_policy = value
                                    self.downstream_qos_policy.value_namespace = name_space
                                    self.downstream_qos_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "egress-access-list"):
                                    self.egress_access_list = value
                                    self.egress_access_list.value_namespace = name_space
                                    self.egress_access_list.value_namespace_prefix = name_space_prefix
                                if(value_path == "formatted-calling-station-id"):
                                    self.formatted_calling_station_id = value
                                    self.formatted_calling_station_id.value_namespace = name_space
                                    self.formatted_calling_station_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "ingress-access-list"):
                                    self.ingress_access_list = value
                                    self.ingress_access_list.value_namespace = name_space
                                    self.ingress_access_list.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-type"):
                                    self.interface_type = value
                                    self.interface_type.value_namespace = name_space
                                    self.interface_type.value_namespace_prefix = name_space_prefix
                                if(value_path == "interim-accounting-interval"):
                                    self.interim_accounting_interval = value
                                    self.interim_accounting_interval.value_namespace = name_space
                                    self.interim_accounting_interval.value_namespace_prefix = name_space_prefix
                                if(value_path == "ip-netmask"):
                                    self.ip_netmask = value
                                    self.ip_netmask.value_namespace = name_space
                                    self.ip_netmask.value_namespace_prefix = name_space_prefix
                                if(value_path == "ipv4-unnumbered"):
                                    self.ipv4_unnumbered = value
                                    self.ipv4_unnumbered.value_namespace = name_space
                                    self.ipv4_unnumbered.value_namespace_prefix = name_space_prefix
                                if(value_path == "ipv4mtu"):
                                    self.ipv4mtu = value
                                    self.ipv4mtu.value_namespace = name_space
                                    self.ipv4mtu.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-interworking-functionality"):
                                    self.is_interworking_functionality = value
                                    self.is_interworking_functionality.value_namespace = name_space
                                    self.is_interworking_functionality.value_namespace_prefix = name_space_prefix
                                if(value_path == "max-data-rate-downstream"):
                                    self.max_data_rate_downstream = value
                                    self.max_data_rate_downstream.value_namespace = name_space
                                    self.max_data_rate_downstream.value_namespace_prefix = name_space_prefix
                                if(value_path == "max-data-rate-upstream"):
                                    self.max_data_rate_upstream = value
                                    self.max_data_rate_upstream.value_namespace = name_space
                                    self.max_data_rate_upstream.value_namespace_prefix = name_space_prefix
                                if(value_path == "max-interleaving-delay-downstream"):
                                    self.max_interleaving_delay_downstream = value
                                    self.max_interleaving_delay_downstream.value_namespace = name_space
                                    self.max_interleaving_delay_downstream.value_namespace_prefix = name_space_prefix
                                if(value_path == "max-interleaving-delay-upstream"):
                                    self.max_interleaving_delay_upstream = value
                                    self.max_interleaving_delay_upstream.value_namespace = name_space
                                    self.max_interleaving_delay_upstream.value_namespace_prefix = name_space_prefix
                                if(value_path == "min-data-rate-downstream"):
                                    self.min_data_rate_downstream = value
                                    self.min_data_rate_downstream.value_namespace = name_space
                                    self.min_data_rate_downstream.value_namespace_prefix = name_space_prefix
                                if(value_path == "min-data-rate-downstream-low-power"):
                                    self.min_data_rate_downstream_low_power = value
                                    self.min_data_rate_downstream_low_power.value_namespace = name_space
                                    self.min_data_rate_downstream_low_power.value_namespace_prefix = name_space_prefix
                                if(value_path == "min-data-rate-upstream-low-power"):
                                    self.min_data_rate_upstream_low_power = value
                                    self.min_data_rate_upstream_low_power.value_namespace = name_space
                                    self.min_data_rate_upstream_low_power.value_namespace_prefix = name_space_prefix
                                if(value_path == "parent-interface-name"):
                                    self.parent_interface_name = value
                                    self.parent_interface_name.value_namespace = name_space
                                    self.parent_interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "pool-address"):
                                    self.pool_address = value
                                    self.pool_address.value_namespace = name_space
                                    self.pool_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "primary-dns-server-address"):
                                    self.primary_dns_server_address = value
                                    self.primary_dns_server_address.value_namespace = name_space
                                    self.primary_dns_server_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "primary-net-bios-server-address"):
                                    self.primary_net_bios_server_address = value
                                    self.primary_net_bios_server_address.value_namespace = name_space
                                    self.primary_net_bios_server_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "remote-id"):
                                    self.remote_id = value
                                    self.remote_id.value_namespace = name_space
                                    self.remote_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "route"):
                                    self.route = value
                                    self.route.value_namespace = name_space
                                    self.route.value_namespace_prefix = name_space_prefix
                                if(value_path == "secondary-dns-server-address"):
                                    self.secondary_dns_server_address = value
                                    self.secondary_dns_server_address.value_namespace = name_space
                                    self.secondary_dns_server_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "secondary-net-bios-server-address"):
                                    self.secondary_net_bios_server_address = value
                                    self.secondary_net_bios_server_address.value_namespace = name_space
                                    self.secondary_net_bios_server_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "session-termination-cause"):
                                    self.session_termination_cause = value
                                    self.session_termination_cause.value_namespace = name_space
                                    self.session_termination_cause.value_namespace_prefix = name_space_prefix
                                if(value_path == "session-timeout"):
                                    self.session_timeout = value
                                    self.session_timeout.value_namespace = name_space
                                    self.session_timeout.value_namespace_prefix = name_space_prefix
                                if(value_path == "strict-rpf-packets"):
                                    self.strict_rpf_packets = value
                                    self.strict_rpf_packets.value_namespace = name_space
                                    self.strict_rpf_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "tunnel-client-authentication-id"):
                                    self.tunnel_client_authentication_id = value
                                    self.tunnel_client_authentication_id.value_namespace = name_space
                                    self.tunnel_client_authentication_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "tunnel-client-endpoint"):
                                    self.tunnel_client_endpoint = value
                                    self.tunnel_client_endpoint.value_namespace = name_space
                                    self.tunnel_client_endpoint.value_namespace_prefix = name_space_prefix
                                if(value_path == "tunnel-medium"):
                                    self.tunnel_medium = value
                                    self.tunnel_medium.value_namespace = name_space
                                    self.tunnel_medium.value_namespace_prefix = name_space_prefix
                                if(value_path == "tunnel-preference"):
                                    self.tunnel_preference = value
                                    self.tunnel_preference.value_namespace = name_space
                                    self.tunnel_preference.value_namespace_prefix = name_space_prefix
                                if(value_path == "tunnel-protocol"):
                                    self.tunnel_protocol = value
                                    self.tunnel_protocol.value_namespace = name_space
                                    self.tunnel_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "tunnel-server-endpoint"):
                                    self.tunnel_server_endpoint = value
                                    self.tunnel_server_endpoint.value_namespace = name_space
                                    self.tunnel_server_endpoint.value_namespace_prefix = name_space_prefix
                                if(value_path == "tunnel-tos-setting"):
                                    self.tunnel_tos_setting = value
                                    self.tunnel_tos_setting.value_namespace = name_space
                                    self.tunnel_tos_setting.value_namespace_prefix = name_space_prefix
                                if(value_path == "upstream-parameterized-qos-policy"):
                                    self.upstream_parameterized_qos_policy = value
                                    self.upstream_parameterized_qos_policy.value_namespace = name_space
                                    self.upstream_parameterized_qos_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "upstream-qos-policy"):
                                    self.upstream_qos_policy = value
                                    self.upstream_qos_policy.value_namespace = name_space
                                    self.upstream_qos_policy.value_namespace_prefix = name_space_prefix


                        class MobilityAttributes(Entity):
                            """
                            List of mobility attributes collected for
                            subscriber session
                            
                            .. attribute:: domain_name
                            
                            	Domain Name
                            	**type**\:  str
                            
                            .. attribute:: downlink_gre_key
                            
                            	Downlink GRE Key
                            	**type**\:  str
                            
                            .. attribute:: lease_time
                            
                            	Duration of lease in seconds
                            	**type**\:  str
                            
                            	**units**\: second
                            
                            .. attribute:: mobility_default_ipv4_gateway
                            
                            	Default Gateway IPv4 Address
                            	**type**\:  str
                            
                            .. attribute:: mobility_dhcp_server
                            
                            	DHCP Server
                            	**type**\:  str
                            
                            .. attribute:: mobility_dns_server
                            
                            	DNS Server Primary
                            	**type**\:  str
                            
                            .. attribute:: mobility_ipv4_address
                            
                            	IPv4 address of Mobility Node
                            	**type**\:  str
                            
                            .. attribute:: mobility_ipv4_netmask
                            
                            	IPv4 Netmask
                            	**type**\:  str
                            
                            .. attribute:: mpc_protocol
                            
                            	Cisco MPC Protocol
                            	**type**\:  bool
                            
                            .. attribute:: uplink_gre_key
                            
                            	Uplink GRE Key
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Sessions.Session.MobilityAttributes, self).__init__()

                                self.yang_name = "mobility-attributes"
                                self.yang_parent_name = "session"

                                self.domain_name = YLeaf(YType.str, "domain-name")

                                self.downlink_gre_key = YLeaf(YType.str, "downlink-gre-key")

                                self.lease_time = YLeaf(YType.str, "lease-time")

                                self.mobility_default_ipv4_gateway = YLeaf(YType.str, "mobility-default-ipv4-gateway")

                                self.mobility_dhcp_server = YLeaf(YType.str, "mobility-dhcp-server")

                                self.mobility_dns_server = YLeaf(YType.str, "mobility-dns-server")

                                self.mobility_ipv4_address = YLeaf(YType.str, "mobility-ipv4-address")

                                self.mobility_ipv4_netmask = YLeaf(YType.str, "mobility-ipv4-netmask")

                                self.mpc_protocol = YLeaf(YType.boolean, "mpc-protocol")

                                self.uplink_gre_key = YLeaf(YType.str, "uplink-gre-key")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("domain_name",
                                                "downlink_gre_key",
                                                "lease_time",
                                                "mobility_default_ipv4_gateway",
                                                "mobility_dhcp_server",
                                                "mobility_dns_server",
                                                "mobility_ipv4_address",
                                                "mobility_ipv4_netmask",
                                                "mpc_protocol",
                                                "uplink_gre_key") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Session.Nodes.Node.Sessions.Session.MobilityAttributes, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Session.Nodes.Node.Sessions.Session.MobilityAttributes, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.domain_name.is_set or
                                    self.downlink_gre_key.is_set or
                                    self.lease_time.is_set or
                                    self.mobility_default_ipv4_gateway.is_set or
                                    self.mobility_dhcp_server.is_set or
                                    self.mobility_dns_server.is_set or
                                    self.mobility_ipv4_address.is_set or
                                    self.mobility_ipv4_netmask.is_set or
                                    self.mpc_protocol.is_set or
                                    self.uplink_gre_key.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.domain_name.yfilter != YFilter.not_set or
                                    self.downlink_gre_key.yfilter != YFilter.not_set or
                                    self.lease_time.yfilter != YFilter.not_set or
                                    self.mobility_default_ipv4_gateway.yfilter != YFilter.not_set or
                                    self.mobility_dhcp_server.yfilter != YFilter.not_set or
                                    self.mobility_dns_server.yfilter != YFilter.not_set or
                                    self.mobility_ipv4_address.yfilter != YFilter.not_set or
                                    self.mobility_ipv4_netmask.yfilter != YFilter.not_set or
                                    self.mpc_protocol.yfilter != YFilter.not_set or
                                    self.uplink_gre_key.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "mobility-attributes" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.domain_name.is_set or self.domain_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.domain_name.get_name_leafdata())
                                if (self.downlink_gre_key.is_set or self.downlink_gre_key.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.downlink_gre_key.get_name_leafdata())
                                if (self.lease_time.is_set or self.lease_time.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.lease_time.get_name_leafdata())
                                if (self.mobility_default_ipv4_gateway.is_set or self.mobility_default_ipv4_gateway.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mobility_default_ipv4_gateway.get_name_leafdata())
                                if (self.mobility_dhcp_server.is_set or self.mobility_dhcp_server.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mobility_dhcp_server.get_name_leafdata())
                                if (self.mobility_dns_server.is_set or self.mobility_dns_server.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mobility_dns_server.get_name_leafdata())
                                if (self.mobility_ipv4_address.is_set or self.mobility_ipv4_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mobility_ipv4_address.get_name_leafdata())
                                if (self.mobility_ipv4_netmask.is_set or self.mobility_ipv4_netmask.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mobility_ipv4_netmask.get_name_leafdata())
                                if (self.mpc_protocol.is_set or self.mpc_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mpc_protocol.get_name_leafdata())
                                if (self.uplink_gre_key.is_set or self.uplink_gre_key.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.uplink_gre_key.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "domain-name" or name == "downlink-gre-key" or name == "lease-time" or name == "mobility-default-ipv4-gateway" or name == "mobility-dhcp-server" or name == "mobility-dns-server" or name == "mobility-ipv4-address" or name == "mobility-ipv4-netmask" or name == "mpc-protocol" or name == "uplink-gre-key"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "domain-name"):
                                    self.domain_name = value
                                    self.domain_name.value_namespace = name_space
                                    self.domain_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "downlink-gre-key"):
                                    self.downlink_gre_key = value
                                    self.downlink_gre_key.value_namespace = name_space
                                    self.downlink_gre_key.value_namespace_prefix = name_space_prefix
                                if(value_path == "lease-time"):
                                    self.lease_time = value
                                    self.lease_time.value_namespace = name_space
                                    self.lease_time.value_namespace_prefix = name_space_prefix
                                if(value_path == "mobility-default-ipv4-gateway"):
                                    self.mobility_default_ipv4_gateway = value
                                    self.mobility_default_ipv4_gateway.value_namespace = name_space
                                    self.mobility_default_ipv4_gateway.value_namespace_prefix = name_space_prefix
                                if(value_path == "mobility-dhcp-server"):
                                    self.mobility_dhcp_server = value
                                    self.mobility_dhcp_server.value_namespace = name_space
                                    self.mobility_dhcp_server.value_namespace_prefix = name_space_prefix
                                if(value_path == "mobility-dns-server"):
                                    self.mobility_dns_server = value
                                    self.mobility_dns_server.value_namespace = name_space
                                    self.mobility_dns_server.value_namespace_prefix = name_space_prefix
                                if(value_path == "mobility-ipv4-address"):
                                    self.mobility_ipv4_address = value
                                    self.mobility_ipv4_address.value_namespace = name_space
                                    self.mobility_ipv4_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "mobility-ipv4-netmask"):
                                    self.mobility_ipv4_netmask = value
                                    self.mobility_ipv4_netmask.value_namespace = name_space
                                    self.mobility_ipv4_netmask.value_namespace_prefix = name_space_prefix
                                if(value_path == "mpc-protocol"):
                                    self.mpc_protocol = value
                                    self.mpc_protocol.value_namespace = name_space
                                    self.mpc_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "uplink-gre-key"):
                                    self.uplink_gre_key = value
                                    self.uplink_gre_key.value_namespace = name_space
                                    self.uplink_gre_key.value_namespace_prefix = name_space_prefix


                        class SessionChangeOfAuthorization(Entity):
                            """
                            Subscriber change of authorization information
                            
                            .. attribute:: coa_reply_attributes
                            
                            	List of Reply Attributes collected in COA response
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            .. attribute:: coa_request_attributes
                            
                            	List of Request Attributes collected in COA response
                            	**type**\:  str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            .. attribute:: reply_time
                            
                            	Reply time in DDD MMM DD HH\:MM\:SS YYYY format eg \: Tue Apr 11 21\:30\:47 2011
                            	**type**\:  str
                            
                            .. attribute:: request_acked
                            
                            	Coa Request Acked
                            	**type**\:  bool
                            
                            .. attribute:: request_time
                            
                            	Request time in DDD MMM DD HH\:MM\:SS YYYY format eg\: Tue Apr 11 21\:30\:47 2011
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'iedge4710-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Subscriber.Session.Nodes.Node.Sessions.Session.SessionChangeOfAuthorization, self).__init__()

                                self.yang_name = "session-change-of-authorization"
                                self.yang_parent_name = "session"

                                self.coa_reply_attributes = YLeaf(YType.str, "coa-reply-attributes")

                                self.coa_request_attributes = YLeaf(YType.str, "coa-request-attributes")

                                self.reply_time = YLeaf(YType.str, "reply-time")

                                self.request_acked = YLeaf(YType.boolean, "request-acked")

                                self.request_time = YLeaf(YType.str, "request-time")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("coa_reply_attributes",
                                                "coa_request_attributes",
                                                "reply_time",
                                                "request_acked",
                                                "request_time") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Subscriber.Session.Nodes.Node.Sessions.Session.SessionChangeOfAuthorization, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Subscriber.Session.Nodes.Node.Sessions.Session.SessionChangeOfAuthorization, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.coa_reply_attributes.is_set or
                                    self.coa_request_attributes.is_set or
                                    self.reply_time.is_set or
                                    self.request_acked.is_set or
                                    self.request_time.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.coa_reply_attributes.yfilter != YFilter.not_set or
                                    self.coa_request_attributes.yfilter != YFilter.not_set or
                                    self.reply_time.yfilter != YFilter.not_set or
                                    self.request_acked.yfilter != YFilter.not_set or
                                    self.request_time.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "session-change-of-authorization" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.coa_reply_attributes.is_set or self.coa_reply_attributes.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.coa_reply_attributes.get_name_leafdata())
                                if (self.coa_request_attributes.is_set or self.coa_request_attributes.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.coa_request_attributes.get_name_leafdata())
                                if (self.reply_time.is_set or self.reply_time.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.reply_time.get_name_leafdata())
                                if (self.request_acked.is_set or self.request_acked.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.request_acked.get_name_leafdata())
                                if (self.request_time.is_set or self.request_time.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.request_time.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "coa-reply-attributes" or name == "coa-request-attributes" or name == "reply-time" or name == "request-acked" or name == "request-time"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "coa-reply-attributes"):
                                    self.coa_reply_attributes = value
                                    self.coa_reply_attributes.value_namespace = name_space
                                    self.coa_reply_attributes.value_namespace_prefix = name_space_prefix
                                if(value_path == "coa-request-attributes"):
                                    self.coa_request_attributes = value
                                    self.coa_request_attributes.value_namespace = name_space
                                    self.coa_request_attributes.value_namespace_prefix = name_space_prefix
                                if(value_path == "reply-time"):
                                    self.reply_time = value
                                    self.reply_time.value_namespace = name_space
                                    self.reply_time.value_namespace_prefix = name_space_prefix
                                if(value_path == "request-acked"):
                                    self.request_acked = value
                                    self.request_acked.value_namespace = name_space
                                    self.request_acked.value_namespace_prefix = name_space_prefix
                                if(value_path == "request-time"):
                                    self.request_time = value
                                    self.request_time.value_namespace = name_space
                                    self.request_time.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.session_change_of_authorization:
                                if (c.has_data()):
                                    return True
                            return (
                                self.session_id.is_set or
                                self.access_interface_name.is_set or
                                self.account_session_id.is_set or
                                self.af_up_status.is_set or
                                self.circuit_id.is_set or
                                self.clientname.is_set or
                                self.delegated_ipv6_prefix.is_set or
                                self.formattedname.is_set or
                                self.idle_state_change_time.is_set or
                                self.interface_name.is_set or
                                self.ipv6_interface_id.is_set or
                                self.is_session_authentic.is_set or
                                self.is_session_author.is_set or
                                self.lac_address.is_set or
                                self.lns_address.is_set or
                                self.mac_address.is_set or
                                self.nas_port.is_set or
                                self.pending_callbacks.is_set or
                                self.pppoe_sub_type.is_set or
                                self.remote_id.is_set or
                                self.session_creation_time.is_set or
                                self.session_ip_address.is_set or
                                self.session_ipv4_state.is_set or
                                self.session_ipv6_address.is_set or
                                self.session_ipv6_prefix.is_set or
                                self.session_ipv6_state.is_set or
                                self.session_state.is_set or
                                self.session_type.is_set or
                                self.total_session_idle_time.is_set or
                                self.tunnel_client_authentication_id.is_set or
                                self.tunnel_server_authentication_id.is_set or
                                self.username.is_set or
                                self.vrf_name.is_set or
                                (self.accounting is not None and self.accounting.has_data()) or
                                (self.mobility_attributes is not None and self.mobility_attributes.has_data()) or
                                (self.user_profile_attributes is not None and self.user_profile_attributes.has_data()))

                        def has_operation(self):
                            for c in self.session_change_of_authorization:
                                if (c.has_operation()):
                                    return True
                            return (
                                self.yfilter != YFilter.not_set or
                                self.session_id.yfilter != YFilter.not_set or
                                self.access_interface_name.yfilter != YFilter.not_set or
                                self.account_session_id.yfilter != YFilter.not_set or
                                self.af_up_status.yfilter != YFilter.not_set or
                                self.circuit_id.yfilter != YFilter.not_set or
                                self.clientname.yfilter != YFilter.not_set or
                                self.delegated_ipv6_prefix.yfilter != YFilter.not_set or
                                self.formattedname.yfilter != YFilter.not_set or
                                self.idle_state_change_time.yfilter != YFilter.not_set or
                                self.interface_name.yfilter != YFilter.not_set or
                                self.ipv6_interface_id.yfilter != YFilter.not_set or
                                self.is_session_authentic.yfilter != YFilter.not_set or
                                self.is_session_author.yfilter != YFilter.not_set or
                                self.lac_address.yfilter != YFilter.not_set or
                                self.lns_address.yfilter != YFilter.not_set or
                                self.mac_address.yfilter != YFilter.not_set or
                                self.nas_port.yfilter != YFilter.not_set or
                                self.pending_callbacks.yfilter != YFilter.not_set or
                                self.pppoe_sub_type.yfilter != YFilter.not_set or
                                self.remote_id.yfilter != YFilter.not_set or
                                self.session_creation_time.yfilter != YFilter.not_set or
                                self.session_ip_address.yfilter != YFilter.not_set or
                                self.session_ipv4_state.yfilter != YFilter.not_set or
                                self.session_ipv6_address.yfilter != YFilter.not_set or
                                self.session_ipv6_prefix.yfilter != YFilter.not_set or
                                self.session_ipv6_state.yfilter != YFilter.not_set or
                                self.session_state.yfilter != YFilter.not_set or
                                self.session_type.yfilter != YFilter.not_set or
                                self.total_session_idle_time.yfilter != YFilter.not_set or
                                self.tunnel_client_authentication_id.yfilter != YFilter.not_set or
                                self.tunnel_server_authentication_id.yfilter != YFilter.not_set or
                                self.username.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.accounting is not None and self.accounting.has_operation()) or
                                (self.mobility_attributes is not None and self.mobility_attributes.has_operation()) or
                                (self.user_profile_attributes is not None and self.user_profile_attributes.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "session" + "[session-id='" + self.session_id.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.session_id.is_set or self.session_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.session_id.get_name_leafdata())
                            if (self.access_interface_name.is_set or self.access_interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.access_interface_name.get_name_leafdata())
                            if (self.account_session_id.is_set or self.account_session_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.account_session_id.get_name_leafdata())
                            if (self.af_up_status.is_set or self.af_up_status.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.af_up_status.get_name_leafdata())
                            if (self.circuit_id.is_set or self.circuit_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.circuit_id.get_name_leafdata())
                            if (self.clientname.is_set or self.clientname.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.clientname.get_name_leafdata())
                            if (self.delegated_ipv6_prefix.is_set or self.delegated_ipv6_prefix.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.delegated_ipv6_prefix.get_name_leafdata())
                            if (self.formattedname.is_set or self.formattedname.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.formattedname.get_name_leafdata())
                            if (self.idle_state_change_time.is_set or self.idle_state_change_time.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.idle_state_change_time.get_name_leafdata())
                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.interface_name.get_name_leafdata())
                            if (self.ipv6_interface_id.is_set or self.ipv6_interface_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.ipv6_interface_id.get_name_leafdata())
                            if (self.is_session_authentic.is_set or self.is_session_authentic.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_session_authentic.get_name_leafdata())
                            if (self.is_session_author.is_set or self.is_session_author.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_session_author.get_name_leafdata())
                            if (self.lac_address.is_set or self.lac_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.lac_address.get_name_leafdata())
                            if (self.lns_address.is_set or self.lns_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.lns_address.get_name_leafdata())
                            if (self.mac_address.is_set or self.mac_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.mac_address.get_name_leafdata())
                            if (self.nas_port.is_set or self.nas_port.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.nas_port.get_name_leafdata())
                            if (self.pending_callbacks.is_set or self.pending_callbacks.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.pending_callbacks.get_name_leafdata())
                            if (self.pppoe_sub_type.is_set or self.pppoe_sub_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.pppoe_sub_type.get_name_leafdata())
                            if (self.remote_id.is_set or self.remote_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.remote_id.get_name_leafdata())
                            if (self.session_creation_time.is_set or self.session_creation_time.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.session_creation_time.get_name_leafdata())
                            if (self.session_ip_address.is_set or self.session_ip_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.session_ip_address.get_name_leafdata())
                            if (self.session_ipv4_state.is_set or self.session_ipv4_state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.session_ipv4_state.get_name_leafdata())
                            if (self.session_ipv6_address.is_set or self.session_ipv6_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.session_ipv6_address.get_name_leafdata())
                            if (self.session_ipv6_prefix.is_set or self.session_ipv6_prefix.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.session_ipv6_prefix.get_name_leafdata())
                            if (self.session_ipv6_state.is_set or self.session_ipv6_state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.session_ipv6_state.get_name_leafdata())
                            if (self.session_state.is_set or self.session_state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.session_state.get_name_leafdata())
                            if (self.session_type.is_set or self.session_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.session_type.get_name_leafdata())
                            if (self.total_session_idle_time.is_set or self.total_session_idle_time.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.total_session_idle_time.get_name_leafdata())
                            if (self.tunnel_client_authentication_id.is_set or self.tunnel_client_authentication_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.tunnel_client_authentication_id.get_name_leafdata())
                            if (self.tunnel_server_authentication_id.is_set or self.tunnel_server_authentication_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.tunnel_server_authentication_id.get_name_leafdata())
                            if (self.username.is_set or self.username.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.username.get_name_leafdata())
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "accounting"):
                                if (self.accounting is None):
                                    self.accounting = Subscriber.Session.Nodes.Node.Sessions.Session.Accounting()
                                    self.accounting.parent = self
                                    self._children_name_map["accounting"] = "accounting"
                                return self.accounting

                            if (child_yang_name == "mobility-attributes"):
                                if (self.mobility_attributes is None):
                                    self.mobility_attributes = Subscriber.Session.Nodes.Node.Sessions.Session.MobilityAttributes()
                                    self.mobility_attributes.parent = self
                                    self._children_name_map["mobility_attributes"] = "mobility-attributes"
                                return self.mobility_attributes

                            if (child_yang_name == "session-change-of-authorization"):
                                for c in self.session_change_of_authorization:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Subscriber.Session.Nodes.Node.Sessions.Session.SessionChangeOfAuthorization()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.session_change_of_authorization.append(c)
                                return c

                            if (child_yang_name == "user-profile-attributes"):
                                if (self.user_profile_attributes is None):
                                    self.user_profile_attributes = Subscriber.Session.Nodes.Node.Sessions.Session.UserProfileAttributes()
                                    self.user_profile_attributes.parent = self
                                    self._children_name_map["user_profile_attributes"] = "user-profile-attributes"
                                return self.user_profile_attributes

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "accounting" or name == "mobility-attributes" or name == "session-change-of-authorization" or name == "user-profile-attributes" or name == "session-id" or name == "access-interface-name" or name == "account-session-id" or name == "af-up-status" or name == "circuit-id" or name == "clientname" or name == "delegated-ipv6-prefix" or name == "formattedname" or name == "idle-state-change-time" or name == "interface-name" or name == "ipv6-interface-id" or name == "is-session-authentic" or name == "is-session-author" or name == "lac-address" or name == "lns-address" or name == "mac-address" or name == "nas-port" or name == "pending-callbacks" or name == "pppoe-sub-type" or name == "remote-id" or name == "session-creation-time" or name == "session-ip-address" or name == "session-ipv4-state" or name == "session-ipv6-address" or name == "session-ipv6-prefix" or name == "session-ipv6-state" or name == "session-state" or name == "session-type" or name == "total-session-idle-time" or name == "tunnel-client-authentication-id" or name == "tunnel-server-authentication-id" or name == "username" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "session-id"):
                                self.session_id = value
                                self.session_id.value_namespace = name_space
                                self.session_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "access-interface-name"):
                                self.access_interface_name = value
                                self.access_interface_name.value_namespace = name_space
                                self.access_interface_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "account-session-id"):
                                self.account_session_id = value
                                self.account_session_id.value_namespace = name_space
                                self.account_session_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "af-up-status"):
                                self.af_up_status = value
                                self.af_up_status.value_namespace = name_space
                                self.af_up_status.value_namespace_prefix = name_space_prefix
                            if(value_path == "circuit-id"):
                                self.circuit_id = value
                                self.circuit_id.value_namespace = name_space
                                self.circuit_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "clientname"):
                                self.clientname = value
                                self.clientname.value_namespace = name_space
                                self.clientname.value_namespace_prefix = name_space_prefix
                            if(value_path == "delegated-ipv6-prefix"):
                                self.delegated_ipv6_prefix = value
                                self.delegated_ipv6_prefix.value_namespace = name_space
                                self.delegated_ipv6_prefix.value_namespace_prefix = name_space_prefix
                            if(value_path == "formattedname"):
                                self.formattedname = value
                                self.formattedname.value_namespace = name_space
                                self.formattedname.value_namespace_prefix = name_space_prefix
                            if(value_path == "idle-state-change-time"):
                                self.idle_state_change_time = value
                                self.idle_state_change_time.value_namespace = name_space
                                self.idle_state_change_time.value_namespace_prefix = name_space_prefix
                            if(value_path == "interface-name"):
                                self.interface_name = value
                                self.interface_name.value_namespace = name_space
                                self.interface_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "ipv6-interface-id"):
                                self.ipv6_interface_id = value
                                self.ipv6_interface_id.value_namespace = name_space
                                self.ipv6_interface_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-session-authentic"):
                                self.is_session_authentic = value
                                self.is_session_authentic.value_namespace = name_space
                                self.is_session_authentic.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-session-author"):
                                self.is_session_author = value
                                self.is_session_author.value_namespace = name_space
                                self.is_session_author.value_namespace_prefix = name_space_prefix
                            if(value_path == "lac-address"):
                                self.lac_address = value
                                self.lac_address.value_namespace = name_space
                                self.lac_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "lns-address"):
                                self.lns_address = value
                                self.lns_address.value_namespace = name_space
                                self.lns_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "mac-address"):
                                self.mac_address = value
                                self.mac_address.value_namespace = name_space
                                self.mac_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "nas-port"):
                                self.nas_port = value
                                self.nas_port.value_namespace = name_space
                                self.nas_port.value_namespace_prefix = name_space_prefix
                            if(value_path == "pending-callbacks"):
                                self.pending_callbacks = value
                                self.pending_callbacks.value_namespace = name_space
                                self.pending_callbacks.value_namespace_prefix = name_space_prefix
                            if(value_path == "pppoe-sub-type"):
                                self.pppoe_sub_type = value
                                self.pppoe_sub_type.value_namespace = name_space
                                self.pppoe_sub_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "remote-id"):
                                self.remote_id = value
                                self.remote_id.value_namespace = name_space
                                self.remote_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "session-creation-time"):
                                self.session_creation_time = value
                                self.session_creation_time.value_namespace = name_space
                                self.session_creation_time.value_namespace_prefix = name_space_prefix
                            if(value_path == "session-ip-address"):
                                self.session_ip_address = value
                                self.session_ip_address.value_namespace = name_space
                                self.session_ip_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "session-ipv4-state"):
                                self.session_ipv4_state = value
                                self.session_ipv4_state.value_namespace = name_space
                                self.session_ipv4_state.value_namespace_prefix = name_space_prefix
                            if(value_path == "session-ipv6-address"):
                                self.session_ipv6_address = value
                                self.session_ipv6_address.value_namespace = name_space
                                self.session_ipv6_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "session-ipv6-prefix"):
                                self.session_ipv6_prefix = value
                                self.session_ipv6_prefix.value_namespace = name_space
                                self.session_ipv6_prefix.value_namespace_prefix = name_space_prefix
                            if(value_path == "session-ipv6-state"):
                                self.session_ipv6_state = value
                                self.session_ipv6_state.value_namespace = name_space
                                self.session_ipv6_state.value_namespace_prefix = name_space_prefix
                            if(value_path == "session-state"):
                                self.session_state = value
                                self.session_state.value_namespace = name_space
                                self.session_state.value_namespace_prefix = name_space_prefix
                            if(value_path == "session-type"):
                                self.session_type = value
                                self.session_type.value_namespace = name_space
                                self.session_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "total-session-idle-time"):
                                self.total_session_idle_time = value
                                self.total_session_idle_time.value_namespace = name_space
                                self.total_session_idle_time.value_namespace_prefix = name_space_prefix
                            if(value_path == "tunnel-client-authentication-id"):
                                self.tunnel_client_authentication_id = value
                                self.tunnel_client_authentication_id.value_namespace = name_space
                                self.tunnel_client_authentication_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "tunnel-server-authentication-id"):
                                self.tunnel_server_authentication_id = value
                                self.tunnel_server_authentication_id.value_namespace = name_space
                                self.tunnel_server_authentication_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "username"):
                                self.username = value
                                self.username.value_namespace = name_space
                                self.username.value_namespace_prefix = name_space_prefix
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.session:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.session:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "sessions" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "session"):
                            for c in self.session:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Subscriber.Session.Nodes.Node.Sessions.Session()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.session.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "session"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        self.node_name.is_set or
                        (self.access_interface_summaries is not None and self.access_interface_summaries.has_data()) or
                        (self.address_family_summaries is not None and self.address_family_summaries.has_data()) or
                        (self.authentication_summaries is not None and self.authentication_summaries.has_data()) or
                        (self.author_summaries is not None and self.author_summaries.has_data()) or
                        (self.interface_summaries is not None and self.interface_summaries.has_data()) or
                        (self.ipv4_address_summaries is not None and self.ipv4_address_summaries.has_data()) or
                        (self.ipv4_address_vrf_summaries is not None and self.ipv4_address_vrf_summaries.has_data()) or
                        (self.mac_summaries is not None and self.mac_summaries.has_data()) or
                        (self.sessions is not None and self.sessions.has_data()) or
                        (self.state_summaries is not None and self.state_summaries.has_data()) or
                        (self.summary is not None and self.summary.has_data()) or
                        (self.username_summaries is not None and self.username_summaries.has_data()) or
                        (self.vrf_summaries is not None and self.vrf_summaries.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.node_name.yfilter != YFilter.not_set or
                        (self.access_interface_summaries is not None and self.access_interface_summaries.has_operation()) or
                        (self.address_family_summaries is not None and self.address_family_summaries.has_operation()) or
                        (self.authentication_summaries is not None and self.authentication_summaries.has_operation()) or
                        (self.author_summaries is not None and self.author_summaries.has_operation()) or
                        (self.interface_summaries is not None and self.interface_summaries.has_operation()) or
                        (self.ipv4_address_summaries is not None and self.ipv4_address_summaries.has_operation()) or
                        (self.ipv4_address_vrf_summaries is not None and self.ipv4_address_vrf_summaries.has_operation()) or
                        (self.mac_summaries is not None and self.mac_summaries.has_operation()) or
                        (self.sessions is not None and self.sessions.has_operation()) or
                        (self.state_summaries is not None and self.state_summaries.has_operation()) or
                        (self.summary is not None and self.summary.has_operation()) or
                        (self.username_summaries is not None and self.username_summaries.has_operation()) or
                        (self.vrf_summaries is not None and self.vrf_summaries.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "node" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-iedge4710-oper:subscriber/session/nodes/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.node_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "access-interface-summaries"):
                        if (self.access_interface_summaries is None):
                            self.access_interface_summaries = Subscriber.Session.Nodes.Node.AccessInterfaceSummaries()
                            self.access_interface_summaries.parent = self
                            self._children_name_map["access_interface_summaries"] = "access-interface-summaries"
                        return self.access_interface_summaries

                    if (child_yang_name == "address-family-summaries"):
                        if (self.address_family_summaries is None):
                            self.address_family_summaries = Subscriber.Session.Nodes.Node.AddressFamilySummaries()
                            self.address_family_summaries.parent = self
                            self._children_name_map["address_family_summaries"] = "address-family-summaries"
                        return self.address_family_summaries

                    if (child_yang_name == "authentication-summaries"):
                        if (self.authentication_summaries is None):
                            self.authentication_summaries = Subscriber.Session.Nodes.Node.AuthenticationSummaries()
                            self.authentication_summaries.parent = self
                            self._children_name_map["authentication_summaries"] = "authentication-summaries"
                        return self.authentication_summaries

                    if (child_yang_name == "author-summaries"):
                        if (self.author_summaries is None):
                            self.author_summaries = Subscriber.Session.Nodes.Node.AuthorSummaries()
                            self.author_summaries.parent = self
                            self._children_name_map["author_summaries"] = "author-summaries"
                        return self.author_summaries

                    if (child_yang_name == "interface-summaries"):
                        if (self.interface_summaries is None):
                            self.interface_summaries = Subscriber.Session.Nodes.Node.InterfaceSummaries()
                            self.interface_summaries.parent = self
                            self._children_name_map["interface_summaries"] = "interface-summaries"
                        return self.interface_summaries

                    if (child_yang_name == "ipv4-address-summaries"):
                        if (self.ipv4_address_summaries is None):
                            self.ipv4_address_summaries = Subscriber.Session.Nodes.Node.Ipv4AddressSummaries()
                            self.ipv4_address_summaries.parent = self
                            self._children_name_map["ipv4_address_summaries"] = "ipv4-address-summaries"
                        return self.ipv4_address_summaries

                    if (child_yang_name == "ipv4-address-vrf-summaries"):
                        if (self.ipv4_address_vrf_summaries is None):
                            self.ipv4_address_vrf_summaries = Subscriber.Session.Nodes.Node.Ipv4AddressVrfSummaries()
                            self.ipv4_address_vrf_summaries.parent = self
                            self._children_name_map["ipv4_address_vrf_summaries"] = "ipv4-address-vrf-summaries"
                        return self.ipv4_address_vrf_summaries

                    if (child_yang_name == "mac-summaries"):
                        if (self.mac_summaries is None):
                            self.mac_summaries = Subscriber.Session.Nodes.Node.MacSummaries()
                            self.mac_summaries.parent = self
                            self._children_name_map["mac_summaries"] = "mac-summaries"
                        return self.mac_summaries

                    if (child_yang_name == "sessions"):
                        if (self.sessions is None):
                            self.sessions = Subscriber.Session.Nodes.Node.Sessions()
                            self.sessions.parent = self
                            self._children_name_map["sessions"] = "sessions"
                        return self.sessions

                    if (child_yang_name == "state-summaries"):
                        if (self.state_summaries is None):
                            self.state_summaries = Subscriber.Session.Nodes.Node.StateSummaries()
                            self.state_summaries.parent = self
                            self._children_name_map["state_summaries"] = "state-summaries"
                        return self.state_summaries

                    if (child_yang_name == "summary"):
                        if (self.summary is None):
                            self.summary = Subscriber.Session.Nodes.Node.Summary()
                            self.summary.parent = self
                            self._children_name_map["summary"] = "summary"
                        return self.summary

                    if (child_yang_name == "username-summaries"):
                        if (self.username_summaries is None):
                            self.username_summaries = Subscriber.Session.Nodes.Node.UsernameSummaries()
                            self.username_summaries.parent = self
                            self._children_name_map["username_summaries"] = "username-summaries"
                        return self.username_summaries

                    if (child_yang_name == "vrf-summaries"):
                        if (self.vrf_summaries is None):
                            self.vrf_summaries = Subscriber.Session.Nodes.Node.VrfSummaries()
                            self.vrf_summaries.parent = self
                            self._children_name_map["vrf_summaries"] = "vrf-summaries"
                        return self.vrf_summaries

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "access-interface-summaries" or name == "address-family-summaries" or name == "authentication-summaries" or name == "author-summaries" or name == "interface-summaries" or name == "ipv4-address-summaries" or name == "ipv4-address-vrf-summaries" or name == "mac-summaries" or name == "sessions" or name == "state-summaries" or name == "summary" or name == "username-summaries" or name == "vrf-summaries" or name == "node-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "node-name"):
                        self.node_name = value
                        self.node_name.value_namespace = name_space
                        self.node_name.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.node:
                    if (c.has_data()):
                        return True
                return False

            def has_operation(self):
                for c in self.node:
                    if (c.has_operation()):
                        return True
                return self.yfilter != YFilter.not_set

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "nodes" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-iedge4710-oper:subscriber/session/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "node"):
                    for c in self.node:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Subscriber.Session.Nodes.Node()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.node.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "node"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass

        def has_data(self):
            return (self.nodes is not None and self.nodes.has_data())

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.nodes is not None and self.nodes.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "session" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-iedge4710-oper:subscriber/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "nodes"):
                if (self.nodes is None):
                    self.nodes = Subscriber.Session.Nodes()
                    self.nodes.parent = self
                    self._children_name_map["nodes"] = "nodes"
                return self.nodes

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "nodes"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (
            (self.manager is not None and self.manager.has_data()) or
            (self.session is not None and self.session.has_data()))

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.manager is not None and self.manager.has_operation()) or
            (self.session is not None and self.session.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-iedge4710-oper:subscriber" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "manager"):
            if (self.manager is None):
                self.manager = Subscriber.Manager()
                self.manager.parent = self
                self._children_name_map["manager"] = "manager"
            return self.manager

        if (child_yang_name == "session"):
            if (self.session is None):
                self.session = Subscriber.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
            return self.session

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "manager" or name == "session"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = Subscriber()
        return self._top_entity

class IedgeLicenseManager(Entity):
    """
    iedge license manager
    
    .. attribute:: nodes
    
    	Session License Manager operational data for a location
    	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.IedgeLicenseManager.Nodes>`
    
    

    """

    _prefix = 'iedge4710-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(IedgeLicenseManager, self).__init__()
        self._top_entity = None

        self.yang_name = "iedge-license-manager"
        self.yang_parent_name = "Cisco-IOS-XR-iedge4710-oper"

        self.nodes = IedgeLicenseManager.Nodes()
        self.nodes.parent = self
        self._children_name_map["nodes"] = "nodes"
        self._children_yang_names.add("nodes")


    class Nodes(Entity):
        """
        Session License Manager operational data for a
        location
        
        .. attribute:: node
        
        	Location. For example, 0/1/CPU0
        	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.IedgeLicenseManager.Nodes.Node>`
        
        

        """

        _prefix = 'iedge4710-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(IedgeLicenseManager.Nodes, self).__init__()

            self.yang_name = "nodes"
            self.yang_parent_name = "iedge-license-manager"

            self.node = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(IedgeLicenseManager.Nodes, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(IedgeLicenseManager.Nodes, self).__setattr__(name, value)


        class Node(Entity):
            """
            Location. For example, 0/1/CPU0
            
            .. attribute:: nodeid  <key>
            
            	The node id to filter on. For example, 0/1/CPU0
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: iedge_license_manager_summary
            
            	Display Session License Manager summary data
            	**type**\:   :py:class:`IedgeLicenseManagerSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_iedge4710_oper.IedgeLicenseManager.Nodes.Node.IedgeLicenseManagerSummary>`
            
            

            """

            _prefix = 'iedge4710-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(IedgeLicenseManager.Nodes.Node, self).__init__()

                self.yang_name = "node"
                self.yang_parent_name = "nodes"

                self.nodeid = YLeaf(YType.str, "nodeid")

                self.iedge_license_manager_summary = IedgeLicenseManager.Nodes.Node.IedgeLicenseManagerSummary()
                self.iedge_license_manager_summary.parent = self
                self._children_name_map["iedge_license_manager_summary"] = "iedge-license-manager-summary"
                self._children_yang_names.add("iedge-license-manager-summary")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("nodeid") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(IedgeLicenseManager.Nodes.Node, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(IedgeLicenseManager.Nodes.Node, self).__setattr__(name, value)


            class IedgeLicenseManagerSummary(Entity):
                """
                Display Session License Manager summary data
                
                .. attribute:: session_count
                
                	number of sessions
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: session_license_count
                
                	number of license
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: session_limit
                
                	configured session limit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: session_threshold
                
                	configured session threshold
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'iedge4710-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(IedgeLicenseManager.Nodes.Node.IedgeLicenseManagerSummary, self).__init__()

                    self.yang_name = "iedge-license-manager-summary"
                    self.yang_parent_name = "node"

                    self.session_count = YLeaf(YType.uint32, "session-count")

                    self.session_license_count = YLeaf(YType.uint32, "session-license-count")

                    self.session_limit = YLeaf(YType.uint32, "session-limit")

                    self.session_threshold = YLeaf(YType.uint32, "session-threshold")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("session_count",
                                    "session_license_count",
                                    "session_limit",
                                    "session_threshold") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(IedgeLicenseManager.Nodes.Node.IedgeLicenseManagerSummary, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(IedgeLicenseManager.Nodes.Node.IedgeLicenseManagerSummary, self).__setattr__(name, value)

                def has_data(self):
                    return (
                        self.session_count.is_set or
                        self.session_license_count.is_set or
                        self.session_limit.is_set or
                        self.session_threshold.is_set)

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.session_count.yfilter != YFilter.not_set or
                        self.session_license_count.yfilter != YFilter.not_set or
                        self.session_limit.yfilter != YFilter.not_set or
                        self.session_threshold.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "iedge-license-manager-summary" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.session_count.is_set or self.session_count.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.session_count.get_name_leafdata())
                    if (self.session_license_count.is_set or self.session_license_count.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.session_license_count.get_name_leafdata())
                    if (self.session_limit.is_set or self.session_limit.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.session_limit.get_name_leafdata())
                    if (self.session_threshold.is_set or self.session_threshold.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.session_threshold.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "session-count" or name == "session-license-count" or name == "session-limit" or name == "session-threshold"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "session-count"):
                        self.session_count = value
                        self.session_count.value_namespace = name_space
                        self.session_count.value_namespace_prefix = name_space_prefix
                    if(value_path == "session-license-count"):
                        self.session_license_count = value
                        self.session_license_count.value_namespace = name_space
                        self.session_license_count.value_namespace_prefix = name_space_prefix
                    if(value_path == "session-limit"):
                        self.session_limit = value
                        self.session_limit.value_namespace = name_space
                        self.session_limit.value_namespace_prefix = name_space_prefix
                    if(value_path == "session-threshold"):
                        self.session_threshold = value
                        self.session_threshold.value_namespace = name_space
                        self.session_threshold.value_namespace_prefix = name_space_prefix

            def has_data(self):
                return (
                    self.nodeid.is_set or
                    (self.iedge_license_manager_summary is not None and self.iedge_license_manager_summary.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.nodeid.yfilter != YFilter.not_set or
                    (self.iedge_license_manager_summary is not None and self.iedge_license_manager_summary.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "node" + "[nodeid='" + self.nodeid.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-iedge4710-oper:iedge-license-manager/nodes/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.nodeid.is_set or self.nodeid.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.nodeid.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "iedge-license-manager-summary"):
                    if (self.iedge_license_manager_summary is None):
                        self.iedge_license_manager_summary = IedgeLicenseManager.Nodes.Node.IedgeLicenseManagerSummary()
                        self.iedge_license_manager_summary.parent = self
                        self._children_name_map["iedge_license_manager_summary"] = "iedge-license-manager-summary"
                    return self.iedge_license_manager_summary

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "iedge-license-manager-summary" or name == "nodeid"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "nodeid"):
                    self.nodeid = value
                    self.nodeid.value_namespace = name_space
                    self.nodeid.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.node:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.node:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "nodes" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-iedge4710-oper:iedge-license-manager/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "node"):
                for c in self.node:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = IedgeLicenseManager.Nodes.Node()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.node.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "node"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (self.nodes is not None and self.nodes.has_data())

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.nodes is not None and self.nodes.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-iedge4710-oper:iedge-license-manager" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "nodes"):
            if (self.nodes is None):
                self.nodes = IedgeLicenseManager.Nodes()
                self.nodes.parent = self
                self._children_name_map["nodes"] = "nodes"
            return self.nodes

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "nodes"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = IedgeLicenseManager()
        return self._top_entity

